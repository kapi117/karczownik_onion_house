
onion_house.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000743c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  080075dc  080075dc  000175dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007748  08007748  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007748  08007748  00017748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007750  08007750  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007750  08007750  00017750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007754  08007754  00017754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007758  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  20000070  080077c8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  080077c8  0002036c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016761  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cdd  00000000  00000000  00036801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001210  00000000  00000000  000394e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001110  00000000  00000000  0003a6f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c34  00000000  00000000  0003b800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000162a7  00000000  00000000  00055434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e9a2  00000000  00000000  0006b6db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010a07d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000553c  00000000  00000000  0010a0d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080075c4 	.word	0x080075c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080075c4 	.word	0x080075c4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b96e 	b.w	8000db0 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	468c      	mov	ip, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f040 8083 	bne.w	8000c02 <__udivmoddi4+0x116>
 8000afc:	428a      	cmp	r2, r1
 8000afe:	4617      	mov	r7, r2
 8000b00:	d947      	bls.n	8000b92 <__udivmoddi4+0xa6>
 8000b02:	fab2 f282 	clz	r2, r2
 8000b06:	b142      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b08:	f1c2 0020 	rsb	r0, r2, #32
 8000b0c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b10:	4091      	lsls	r1, r2
 8000b12:	4097      	lsls	r7, r2
 8000b14:	ea40 0c01 	orr.w	ip, r0, r1
 8000b18:	4094      	lsls	r4, r2
 8000b1a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b1e:	0c23      	lsrs	r3, r4, #16
 8000b20:	fbbc f6f8 	udiv	r6, ip, r8
 8000b24:	fa1f fe87 	uxth.w	lr, r7
 8000b28:	fb08 c116 	mls	r1, r8, r6, ip
 8000b2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b30:	fb06 f10e 	mul.w	r1, r6, lr
 8000b34:	4299      	cmp	r1, r3
 8000b36:	d909      	bls.n	8000b4c <__udivmoddi4+0x60>
 8000b38:	18fb      	adds	r3, r7, r3
 8000b3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b3e:	f080 8119 	bcs.w	8000d74 <__udivmoddi4+0x288>
 8000b42:	4299      	cmp	r1, r3
 8000b44:	f240 8116 	bls.w	8000d74 <__udivmoddi4+0x288>
 8000b48:	3e02      	subs	r6, #2
 8000b4a:	443b      	add	r3, r7
 8000b4c:	1a5b      	subs	r3, r3, r1
 8000b4e:	b2a4      	uxth	r4, r4
 8000b50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b54:	fb08 3310 	mls	r3, r8, r0, r3
 8000b58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b60:	45a6      	cmp	lr, r4
 8000b62:	d909      	bls.n	8000b78 <__udivmoddi4+0x8c>
 8000b64:	193c      	adds	r4, r7, r4
 8000b66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b6a:	f080 8105 	bcs.w	8000d78 <__udivmoddi4+0x28c>
 8000b6e:	45a6      	cmp	lr, r4
 8000b70:	f240 8102 	bls.w	8000d78 <__udivmoddi4+0x28c>
 8000b74:	3802      	subs	r0, #2
 8000b76:	443c      	add	r4, r7
 8000b78:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b7c:	eba4 040e 	sub.w	r4, r4, lr
 8000b80:	2600      	movs	r6, #0
 8000b82:	b11d      	cbz	r5, 8000b8c <__udivmoddi4+0xa0>
 8000b84:	40d4      	lsrs	r4, r2
 8000b86:	2300      	movs	r3, #0
 8000b88:	e9c5 4300 	strd	r4, r3, [r5]
 8000b8c:	4631      	mov	r1, r6
 8000b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b92:	b902      	cbnz	r2, 8000b96 <__udivmoddi4+0xaa>
 8000b94:	deff      	udf	#255	; 0xff
 8000b96:	fab2 f282 	clz	r2, r2
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	d150      	bne.n	8000c40 <__udivmoddi4+0x154>
 8000b9e:	1bcb      	subs	r3, r1, r7
 8000ba0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba4:	fa1f f887 	uxth.w	r8, r7
 8000ba8:	2601      	movs	r6, #1
 8000baa:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bae:	0c21      	lsrs	r1, r4, #16
 8000bb0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bb8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bbc:	428b      	cmp	r3, r1
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0xe4>
 8000bc0:	1879      	adds	r1, r7, r1
 8000bc2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0xe2>
 8000bc8:	428b      	cmp	r3, r1
 8000bca:	f200 80e9 	bhi.w	8000da0 <__udivmoddi4+0x2b4>
 8000bce:	4684      	mov	ip, r0
 8000bd0:	1ac9      	subs	r1, r1, r3
 8000bd2:	b2a3      	uxth	r3, r4
 8000bd4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bd8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bdc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000be0:	fb08 f800 	mul.w	r8, r8, r0
 8000be4:	45a0      	cmp	r8, r4
 8000be6:	d907      	bls.n	8000bf8 <__udivmoddi4+0x10c>
 8000be8:	193c      	adds	r4, r7, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x10a>
 8000bf0:	45a0      	cmp	r8, r4
 8000bf2:	f200 80d9 	bhi.w	8000da8 <__udivmoddi4+0x2bc>
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	eba4 0408 	sub.w	r4, r4, r8
 8000bfc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c00:	e7bf      	b.n	8000b82 <__udivmoddi4+0x96>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d909      	bls.n	8000c1a <__udivmoddi4+0x12e>
 8000c06:	2d00      	cmp	r5, #0
 8000c08:	f000 80b1 	beq.w	8000d6e <__udivmoddi4+0x282>
 8000c0c:	2600      	movs	r6, #0
 8000c0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c12:	4630      	mov	r0, r6
 8000c14:	4631      	mov	r1, r6
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	fab3 f683 	clz	r6, r3
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	d14a      	bne.n	8000cb8 <__udivmoddi4+0x1cc>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d302      	bcc.n	8000c2c <__udivmoddi4+0x140>
 8000c26:	4282      	cmp	r2, r0
 8000c28:	f200 80b8 	bhi.w	8000d9c <__udivmoddi4+0x2b0>
 8000c2c:	1a84      	subs	r4, r0, r2
 8000c2e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c32:	2001      	movs	r0, #1
 8000c34:	468c      	mov	ip, r1
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	d0a8      	beq.n	8000b8c <__udivmoddi4+0xa0>
 8000c3a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c3e:	e7a5      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000c40:	f1c2 0320 	rsb	r3, r2, #32
 8000c44:	fa20 f603 	lsr.w	r6, r0, r3
 8000c48:	4097      	lsls	r7, r2
 8000c4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c4e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c52:	40d9      	lsrs	r1, r3
 8000c54:	4330      	orrs	r0, r6
 8000c56:	0c03      	lsrs	r3, r0, #16
 8000c58:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c5c:	fa1f f887 	uxth.w	r8, r7
 8000c60:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c68:	fb06 f108 	mul.w	r1, r6, r8
 8000c6c:	4299      	cmp	r1, r3
 8000c6e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x19c>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c7a:	f080 808d 	bcs.w	8000d98 <__udivmoddi4+0x2ac>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 808a 	bls.w	8000d98 <__udivmoddi4+0x2ac>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b281      	uxth	r1, r0
 8000c8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c90:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c98:	fb00 f308 	mul.w	r3, r0, r8
 8000c9c:	428b      	cmp	r3, r1
 8000c9e:	d907      	bls.n	8000cb0 <__udivmoddi4+0x1c4>
 8000ca0:	1879      	adds	r1, r7, r1
 8000ca2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ca6:	d273      	bcs.n	8000d90 <__udivmoddi4+0x2a4>
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d971      	bls.n	8000d90 <__udivmoddi4+0x2a4>
 8000cac:	3802      	subs	r0, #2
 8000cae:	4439      	add	r1, r7
 8000cb0:	1acb      	subs	r3, r1, r3
 8000cb2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cb6:	e778      	b.n	8000baa <__udivmoddi4+0xbe>
 8000cb8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cbc:	fa03 f406 	lsl.w	r4, r3, r6
 8000cc0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cc4:	431c      	orrs	r4, r3
 8000cc6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cca:	fa01 f306 	lsl.w	r3, r1, r6
 8000cce:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cd2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cd6:	431f      	orrs	r7, r3
 8000cd8:	0c3b      	lsrs	r3, r7, #16
 8000cda:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cde:	fa1f f884 	uxth.w	r8, r4
 8000ce2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ce6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cea:	fb09 fa08 	mul.w	sl, r9, r8
 8000cee:	458a      	cmp	sl, r1
 8000cf0:	fa02 f206 	lsl.w	r2, r2, r6
 8000cf4:	fa00 f306 	lsl.w	r3, r0, r6
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x220>
 8000cfa:	1861      	adds	r1, r4, r1
 8000cfc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d00:	d248      	bcs.n	8000d94 <__udivmoddi4+0x2a8>
 8000d02:	458a      	cmp	sl, r1
 8000d04:	d946      	bls.n	8000d94 <__udivmoddi4+0x2a8>
 8000d06:	f1a9 0902 	sub.w	r9, r9, #2
 8000d0a:	4421      	add	r1, r4
 8000d0c:	eba1 010a 	sub.w	r1, r1, sl
 8000d10:	b2bf      	uxth	r7, r7
 8000d12:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d16:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d1a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d1e:	fb00 f808 	mul.w	r8, r0, r8
 8000d22:	45b8      	cmp	r8, r7
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x24a>
 8000d26:	19e7      	adds	r7, r4, r7
 8000d28:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d2c:	d22e      	bcs.n	8000d8c <__udivmoddi4+0x2a0>
 8000d2e:	45b8      	cmp	r8, r7
 8000d30:	d92c      	bls.n	8000d8c <__udivmoddi4+0x2a0>
 8000d32:	3802      	subs	r0, #2
 8000d34:	4427      	add	r7, r4
 8000d36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d3a:	eba7 0708 	sub.w	r7, r7, r8
 8000d3e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d42:	454f      	cmp	r7, r9
 8000d44:	46c6      	mov	lr, r8
 8000d46:	4649      	mov	r1, r9
 8000d48:	d31a      	bcc.n	8000d80 <__udivmoddi4+0x294>
 8000d4a:	d017      	beq.n	8000d7c <__udivmoddi4+0x290>
 8000d4c:	b15d      	cbz	r5, 8000d66 <__udivmoddi4+0x27a>
 8000d4e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d52:	eb67 0701 	sbc.w	r7, r7, r1
 8000d56:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d5a:	40f2      	lsrs	r2, r6
 8000d5c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d60:	40f7      	lsrs	r7, r6
 8000d62:	e9c5 2700 	strd	r2, r7, [r5]
 8000d66:	2600      	movs	r6, #0
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	462e      	mov	r6, r5
 8000d70:	4628      	mov	r0, r5
 8000d72:	e70b      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000d74:	4606      	mov	r6, r0
 8000d76:	e6e9      	b.n	8000b4c <__udivmoddi4+0x60>
 8000d78:	4618      	mov	r0, r3
 8000d7a:	e6fd      	b.n	8000b78 <__udivmoddi4+0x8c>
 8000d7c:	4543      	cmp	r3, r8
 8000d7e:	d2e5      	bcs.n	8000d4c <__udivmoddi4+0x260>
 8000d80:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d84:	eb69 0104 	sbc.w	r1, r9, r4
 8000d88:	3801      	subs	r0, #1
 8000d8a:	e7df      	b.n	8000d4c <__udivmoddi4+0x260>
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	e7d2      	b.n	8000d36 <__udivmoddi4+0x24a>
 8000d90:	4660      	mov	r0, ip
 8000d92:	e78d      	b.n	8000cb0 <__udivmoddi4+0x1c4>
 8000d94:	4681      	mov	r9, r0
 8000d96:	e7b9      	b.n	8000d0c <__udivmoddi4+0x220>
 8000d98:	4666      	mov	r6, ip
 8000d9a:	e775      	b.n	8000c88 <__udivmoddi4+0x19c>
 8000d9c:	4630      	mov	r0, r6
 8000d9e:	e74a      	b.n	8000c36 <__udivmoddi4+0x14a>
 8000da0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000da4:	4439      	add	r1, r7
 8000da6:	e713      	b.n	8000bd0 <__udivmoddi4+0xe4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	443c      	add	r4, r7
 8000dac:	e724      	b.n	8000bf8 <__udivmoddi4+0x10c>
 8000dae:	bf00      	nop

08000db0 <__aeabi_idiv0>:
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop

08000db4 <TCS34725_init>:
 */

#include "TCS34725.h"


void TCS34725_init(ColorSensor *color_sensor, I2C_HandleTypeDef *hi2c){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
	color_sensor->_hi2c = hi2c;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	683a      	ldr	r2, [r7, #0]
 8000dc2:	601a      	str	r2, [r3, #0]
	while(HAL_I2C_IsDeviceReady(hi2c, 0x29 << 1, 10, HAL_MAX_DELAY)){
 8000dc4:	e002      	b.n	8000dcc <TCS34725_init+0x18>
		  HAL_Delay(5);
 8000dc6:	2005      	movs	r0, #5
 8000dc8:	f001 fb8e 	bl	80024e8 <HAL_Delay>
	while(HAL_I2C_IsDeviceReady(hi2c, 0x29 << 1, 10, HAL_MAX_DELAY)){
 8000dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd0:	220a      	movs	r2, #10
 8000dd2:	2152      	movs	r1, #82	; 0x52
 8000dd4:	6838      	ldr	r0, [r7, #0]
 8000dd6:	f003 fa27 	bl	8004228 <HAL_I2C_IsDeviceReady>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d1f2      	bne.n	8000dc6 <TCS34725_init+0x12>
	}
	// SET INTEGRETION TIME
	uint8_t data = TCS34725_INTEGRATIONTIME_50MS;
 8000de0:	23eb      	movs	r3, #235	; 0xeb
 8000de2:	73fb      	strb	r3, [r7, #15]
	writeReg(color_sensor, TCS34725_ATIME, data);
 8000de4:	7bfb      	ldrb	r3, [r7, #15]
 8000de6:	461a      	mov	r2, r3
 8000de8:	2101      	movs	r1, #1
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f000 f85f 	bl	8000eae <writeReg>

	// GAIN
	data = TCS34725_GAIN_4X;
 8000df0:	2301      	movs	r3, #1
 8000df2:	73fb      	strb	r3, [r7, #15]
	writeReg(color_sensor, TCS34725_CONTROL, data);
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
 8000df6:	461a      	mov	r2, r3
 8000df8:	210f      	movs	r1, #15
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f000 f857 	bl	8000eae <writeReg>

	// ENABLE
	data = TCS34725_ENABLE_PON;
 8000e00:	2301      	movs	r3, #1
 8000e02:	73fb      	strb	r3, [r7, #15]
	writeReg(color_sensor, TCS34725_ENABLE, data);
 8000e04:	7bfb      	ldrb	r3, [r7, #15]
 8000e06:	461a      	mov	r2, r3
 8000e08:	2100      	movs	r1, #0
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f000 f84f 	bl	8000eae <writeReg>
	data = TCS34725_ENABLE_PON | TCS34725_ENABLE_AEN;
 8000e10:	2303      	movs	r3, #3
 8000e12:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(5);
 8000e14:	2005      	movs	r0, #5
 8000e16:	f001 fb67 	bl	80024e8 <HAL_Delay>
	writeReg(color_sensor, TCS34725_ENABLE, data);
 8000e1a:	7bfb      	ldrb	r3, [r7, #15]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	2100      	movs	r1, #0
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f000 f844 	bl	8000eae <writeReg>
}
 8000e26:	bf00      	nop
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <readReg>:

HAL_StatusTypeDef readReg(ColorSensor *color_sensor, uint8_t reg, uint8_t* value){
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b08a      	sub	sp, #40	; 0x28
 8000e32:	af04      	add	r7, sp, #16
 8000e34:	60f8      	str	r0, [r7, #12]
 8000e36:	460b      	mov	r3, r1
 8000e38:	607a      	str	r2, [r7, #4]
 8000e3a:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(color_sensor->_hi2c, (TCS34725_ADDRESS << 1)|0x01, reg | 0x80, 1, value, sizeof(*value), HAL_MAX_DELAY);
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	6818      	ldr	r0, [r3, #0]
 8000e40:	7afb      	ldrb	r3, [r7, #11]
 8000e42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	b29a      	uxth	r2, r3
 8000e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4e:	9302      	str	r3, [sp, #8]
 8000e50:	2301      	movs	r3, #1
 8000e52:	9301      	str	r3, [sp, #4]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	9300      	str	r3, [sp, #0]
 8000e58:	2301      	movs	r3, #1
 8000e5a:	2153      	movs	r1, #83	; 0x53
 8000e5c:	f002 ffbe 	bl	8003ddc <HAL_I2C_Mem_Read>
 8000e60:	4603      	mov	r3, r0
 8000e62:	75fb      	strb	r3, [r7, #23]
	return status;
 8000e64:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3718      	adds	r7, #24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <readRegword>:

HAL_StatusTypeDef readRegword(ColorSensor *color_sensor, uint8_t reg, uint16_t* value){
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b08a      	sub	sp, #40	; 0x28
 8000e72:	af04      	add	r7, sp, #16
 8000e74:	60f8      	str	r0, [r7, #12]
 8000e76:	460b      	mov	r3, r1
 8000e78:	607a      	str	r2, [r7, #4]
 8000e7a:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(color_sensor->_hi2c, (TCS34725_ADDRESS << 1)|0x01, reg | 0x80, 1, (uint8_t*) value, sizeof(*value), HAL_MAX_DELAY);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	6818      	ldr	r0, [r3, #0]
 8000e80:	7afb      	ldrb	r3, [r7, #11]
 8000e82:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	b29a      	uxth	r2, r3
 8000e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e8e:	9302      	str	r3, [sp, #8]
 8000e90:	2302      	movs	r3, #2
 8000e92:	9301      	str	r3, [sp, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	9300      	str	r3, [sp, #0]
 8000e98:	2301      	movs	r3, #1
 8000e9a:	2153      	movs	r1, #83	; 0x53
 8000e9c:	f002 ff9e 	bl	8003ddc <HAL_I2C_Mem_Read>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	75fb      	strb	r3, [r7, #23]
	return status;
 8000ea4:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3718      	adds	r7, #24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <writeReg>:

HAL_StatusTypeDef writeReg(ColorSensor *color_sensor, uint8_t reg, uint8_t value){
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b088      	sub	sp, #32
 8000eb2:	af04      	add	r7, sp, #16
 8000eb4:	6078      	str	r0, [r7, #4]
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	70fb      	strb	r3, [r7, #3]
 8000eba:	4613      	mov	r3, r2
 8000ebc:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Write(color_sensor->_hi2c, (TCS34725_ADDRESS << 1), reg | 0x80, 1, (uint8_t*)&value, sizeof(value), HAL_MAX_DELAY);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6818      	ldr	r0, [r3, #0]
 8000ec2:	78fb      	ldrb	r3, [r7, #3]
 8000ec4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	b29a      	uxth	r2, r3
 8000ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed0:	9302      	str	r3, [sp, #8]
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	9301      	str	r3, [sp, #4]
 8000ed6:	1cbb      	adds	r3, r7, #2
 8000ed8:	9300      	str	r3, [sp, #0]
 8000eda:	2301      	movs	r3, #1
 8000edc:	2152      	movs	r1, #82	; 0x52
 8000ede:	f002 fe83 	bl	8003be8 <HAL_I2C_Mem_Write>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	73fb      	strb	r3, [r7, #15]
	return status;
 8000ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3710      	adds	r7, #16
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <get_red>:

HAL_StatusTypeDef get_red(ColorSensor *color_sensor, uint16_t* value){
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status = readRegword(color_sensor, TCS34725_RDATAL, value);
 8000efa:	683a      	ldr	r2, [r7, #0]
 8000efc:	2116      	movs	r1, #22
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff ffb5 	bl	8000e6e <readRegword>
 8000f04:	4603      	mov	r3, r0
 8000f06:	73fb      	strb	r3, [r7, #15]
	return status;
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <get_green>:

HAL_StatusTypeDef get_green(ColorSensor *color_sensor, uint16_t* value){
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b084      	sub	sp, #16
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
 8000f1a:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status = readRegword(color_sensor, TCS34725_GDATAL, value);
 8000f1c:	683a      	ldr	r2, [r7, #0]
 8000f1e:	2118      	movs	r1, #24
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f7ff ffa4 	bl	8000e6e <readRegword>
 8000f26:	4603      	mov	r3, r0
 8000f28:	73fb      	strb	r3, [r7, #15]
	return status;
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <get_blue>:

HAL_StatusTypeDef get_blue(ColorSensor *color_sensor, uint16_t* value){
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status = readRegword(color_sensor, TCS34725_BDATAL, value);
 8000f3e:	683a      	ldr	r2, [r7, #0]
 8000f40:	211a      	movs	r1, #26
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f7ff ff93 	bl	8000e6e <readRegword>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	73fb      	strb	r3, [r7, #15]
	return status;
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <get_light>:

HAL_StatusTypeDef get_light(ColorSensor *color_sensor, uint16_t* value){
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b084      	sub	sp, #16
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
 8000f5e:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status = readRegword(color_sensor, TCS34725_CDATAL, value);
 8000f60:	683a      	ldr	r2, [r7, #0]
 8000f62:	2114      	movs	r1, #20
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff ff82 	bl	8000e6e <readRegword>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	73fb      	strb	r3, [r7, #15]
	return status;
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <lock>:

HAL_StatusTypeDef lock(ColorSensor *color_sensor){
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	uint8_t r;
	HAL_StatusTypeDef status = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	73fb      	strb	r3, [r7, #15]
	status |= readReg(color_sensor, TCS34725_ENABLE, &r);
 8000f84:	f107 030e 	add.w	r3, r7, #14
 8000f88:	461a      	mov	r2, r3
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f7ff ff4e 	bl	8000e2e <readReg>
 8000f92:	4603      	mov	r3, r0
 8000f94:	461a      	mov	r2, r3
 8000f96:	7bfb      	ldrb	r3, [r7, #15]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	73fb      	strb	r3, [r7, #15]
	r |= TCS34725_ENABLE_AIEN;
 8000f9c:	7bbb      	ldrb	r3, [r7, #14]
 8000f9e:	f043 0310 	orr.w	r3, r3, #16
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	73bb      	strb	r3, [r7, #14]
	status |= writeReg(color_sensor, TCS34725_ENABLE, r);
 8000fa6:	7bbb      	ldrb	r3, [r7, #14]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	2100      	movs	r1, #0
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff ff7e 	bl	8000eae <writeReg>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	73fb      	strb	r3, [r7, #15]
	return status;
 8000fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <unlock>:

HAL_StatusTypeDef unlock(ColorSensor *color_sensor){
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b084      	sub	sp, #16
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
	uint8_t r;
	HAL_StatusTypeDef status = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	73fb      	strb	r3, [r7, #15]
	status |= readReg(color_sensor, TCS34725_ENABLE, &r);
 8000fd2:	f107 030e 	add.w	r3, r7, #14
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	2100      	movs	r1, #0
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff ff27 	bl	8000e2e <readReg>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	73fb      	strb	r3, [r7, #15]
	r &= ~TCS34725_ENABLE_AIEN;
 8000fea:	7bbb      	ldrb	r3, [r7, #14]
 8000fec:	f023 0310 	bic.w	r3, r3, #16
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	73bb      	strb	r3, [r7, #14]
	status |= writeReg(color_sensor, TCS34725_ENABLE, r);
 8000ff4:	7bbb      	ldrb	r3, [r7, #14]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff ff57 	bl	8000eae <writeReg>
 8001000:	4603      	mov	r3, r0
 8001002:	461a      	mov	r2, r3
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	4313      	orrs	r3, r2
 8001008:	73fb      	strb	r3, [r7, #15]
	return status;
 800100a:	7bfb      	ldrb	r3, [r7, #15]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <ENCODER_init>:
 */


#include "encoder.h"

void ENCODER_init(Encoder* encoder, TIM_HandleTypeDef* htim){
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
	encoder->htim = htim;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	683a      	ldr	r2, [r7, #0]
 8001022:	601a      	str	r2, [r3, #0]
	HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_ALL);
 8001024:	213c      	movs	r1, #60	; 0x3c
 8001026:	6838      	ldr	r0, [r7, #0]
 8001028:	f004 fb76 	bl	8005718 <HAL_TIM_Encoder_Start>
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <HAL_ADC_ConvCpltCallback>:
volatile uint8_t conversion_complete = 0;
ADC_HandleTypeDef* _hadc1;
volatile uint16_t* _ktir_results;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	conversion_complete = 1;
 800103c:	4b04      	ldr	r3, [pc, #16]	; (8001050 <HAL_ADC_ConvCpltCallback+0x1c>)
 800103e:	2201      	movs	r2, #1
 8001040:	701a      	strb	r2, [r3, #0]
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	2000008c 	.word	0x2000008c

08001054 <KTIR_Init>:

void KTIR_Init(ADC_HandleTypeDef* hadc1, volatile uint16_t* ktir_results){
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
	_hadc1 = hadc1;
 800105e:	4a06      	ldr	r2, [pc, #24]	; (8001078 <KTIR_Init+0x24>)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6013      	str	r3, [r2, #0]
	_ktir_results = ktir_results;
 8001064:	4a05      	ldr	r2, [pc, #20]	; (800107c <KTIR_Init+0x28>)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	6013      	str	r3, [r2, #0]
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	200000a0 	.word	0x200000a0
 800107c:	2000009c 	.word	0x2000009c

08001080 <KTIR_read>:

void KTIR_read(){
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(_hadc1, (uint32_t*) _ktir_results, NUMBER_OF_SENSORS);
 8001084:	4b04      	ldr	r3, [pc, #16]	; (8001098 <KTIR_read+0x18>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a04      	ldr	r2, [pc, #16]	; (800109c <KTIR_read+0x1c>)
 800108a:	6811      	ldr	r1, [r2, #0]
 800108c:	2204      	movs	r2, #4
 800108e:	4618      	mov	r0, r3
 8001090:	f001 fa92 	bl	80025b8 <HAL_ADC_Start_DMA>
}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}
 8001098:	200000a0 	.word	0x200000a0
 800109c:	2000009c 	.word	0x2000009c

080010a0 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b0a      	cmp	r3, #10
 80010ac:	d102      	bne.n	80010b4 <__io_putchar+0x14>
    __io_putchar('\r');
 80010ae:	200d      	movs	r0, #13
 80010b0:	f7ff fff6 	bl	80010a0 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80010b4:	1d39      	adds	r1, r7, #4
 80010b6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ba:	2201      	movs	r2, #1
 80010bc:	4803      	ldr	r0, [pc, #12]	; (80010cc <__io_putchar+0x2c>)
 80010be:	f004 ffba 	bl	8006036 <HAL_UART_Transmit>

  return 1;
 80010c2:	2301      	movs	r3, #1
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000300 	.word	0x20000300

080010d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010d6:	f001 f995 	bl	8002404 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010da:	f000 f8d7 	bl	800128c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010de:	f000 fbc1 	bl	8001864 <MX_GPIO_Init>
  MX_DMA_Init();
 80010e2:	f000 fb9f 	bl	8001824 <MX_DMA_Init>
  MX_ADC1_Init();
 80010e6:	f000 f939 	bl	800135c <MX_ADC1_Init>
  MX_I2C1_Init();
 80010ea:	f000 f9b3 	bl	8001454 <MX_I2C1_Init>
  MX_I2C2_Init();
 80010ee:	f000 f9df 	bl	80014b0 <MX_I2C2_Init>
  MX_TIM1_Init();
 80010f2:	f000 fa0b 	bl	800150c <MX_TIM1_Init>
  MX_TIM3_Init();
 80010f6:	f000 fab1 	bl	800165c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80010fa:	f000 fb69 	bl	80017d0 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80010fe:	f000 fb13 	bl	8001728 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  servo_init(&right_servo, &SERVO_RIGHT_TIMER, SERVO_RIGHT_CHANNEL);
 8001102:	2208      	movs	r2, #8
 8001104:	4950      	ldr	r1, [pc, #320]	; (8001248 <main+0x178>)
 8001106:	4851      	ldr	r0, [pc, #324]	; (800124c <main+0x17c>)
 8001108:	f000 fd96 	bl	8001c38 <servo_init>
  servo_init(&left_servo, &SERVO_LEFT_TIMER, SERVO_LEFT_CHANNEL);
 800110c:	220c      	movs	r2, #12
 800110e:	494e      	ldr	r1, [pc, #312]	; (8001248 <main+0x178>)
 8001110:	484f      	ldr	r0, [pc, #316]	; (8001250 <main+0x180>)
 8001112:	f000 fd91 	bl	8001c38 <servo_init>

  motor_init(&right_motor, &MOTOR_RIGHT_TIMER, MOTOR_RIGHT_CHANNEL_A, MOTOR_RIGHT_CHANNEL_B);
 8001116:	230c      	movs	r3, #12
 8001118:	2208      	movs	r2, #8
 800111a:	494e      	ldr	r1, [pc, #312]	; (8001254 <main+0x184>)
 800111c:	484e      	ldr	r0, [pc, #312]	; (8001258 <main+0x188>)
 800111e:	f000 fd6c 	bl	8001bfa <motor_init>
  motor_init(&left_motor, &MOTOR_LEFT_TIMER, MOTOR_LEFT_CHANNEL_A, MOTOR_LEFT_CHANNEL_B);
 8001122:	2300      	movs	r3, #0
 8001124:	2204      	movs	r2, #4
 8001126:	494b      	ldr	r1, [pc, #300]	; (8001254 <main+0x184>)
 8001128:	484c      	ldr	r0, [pc, #304]	; (800125c <main+0x18c>)
 800112a:	f000 fd66 	bl	8001bfa <motor_init>

  ENCODER_init(&left_encoder, &htim3);
 800112e:	4946      	ldr	r1, [pc, #280]	; (8001248 <main+0x178>)
 8001130:	484b      	ldr	r0, [pc, #300]	; (8001260 <main+0x190>)
 8001132:	f7ff ff6f 	bl	8001014 <ENCODER_init>

  ENCODER_init(&right_encoder, &htim4);
 8001136:	494b      	ldr	r1, [pc, #300]	; (8001264 <main+0x194>)
 8001138:	484b      	ldr	r0, [pc, #300]	; (8001268 <main+0x198>)
 800113a:	f7ff ff6b 	bl	8001014 <ENCODER_init>

  TCS34725_init(&left_color, &COLOR_LEFT_I2C);
 800113e:	494b      	ldr	r1, [pc, #300]	; (800126c <main+0x19c>)
 8001140:	484b      	ldr	r0, [pc, #300]	; (8001270 <main+0x1a0>)
 8001142:	f7ff fe37 	bl	8000db4 <TCS34725_init>
  TCS34725_init(&right_color, &COLOR_RIGHT_I2C);
 8001146:	494b      	ldr	r1, [pc, #300]	; (8001274 <main+0x1a4>)
 8001148:	484b      	ldr	r0, [pc, #300]	; (8001278 <main+0x1a8>)
 800114a:	f7ff fe33 	bl	8000db4 <TCS34725_init>

  KTIR_Init(&KTIR_ADC, ktir_results);
 800114e:	494b      	ldr	r1, [pc, #300]	; (800127c <main+0x1ac>)
 8001150:	484b      	ldr	r0, [pc, #300]	; (8001280 <main+0x1b0>)
 8001152:	f7ff ff7f 	bl	8001054 <KTIR_Init>
  //uint8_t position = 20;
  //int8_t count = 1;

  uint32_t tick_open_gates = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
  uint8_t opened_gates = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	72fb      	strb	r3, [r7, #11]

  int8_t left = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	72bb      	strb	r3, [r7, #10]
  //ENCODER_get_value(&left_encoder);
  //ENCODER_get_value(&right_encoder);

  servo_set_angle(&right_servo, 20);
 8001162:	2114      	movs	r1, #20
 8001164:	4839      	ldr	r0, [pc, #228]	; (800124c <main+0x17c>)
 8001166:	f000 fda6 	bl	8001cb6 <servo_set_angle>

  servo_set_angle(&left_servo, 160);
 800116a:	21a0      	movs	r1, #160	; 0xa0
 800116c:	4838      	ldr	r0, [pc, #224]	; (8001250 <main+0x180>)
 800116e:	f000 fda2 	bl	8001cb6 <servo_set_angle>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	KTIR_read();
 8001172:	f7ff ff85 	bl	8001080 <KTIR_read>
	printf("-----\nPrawy\n");
 8001176:	4843      	ldr	r0, [pc, #268]	; (8001284 <main+0x1b4>)
 8001178:	f005 fade 	bl	8006738 <puts>
	show_color_for_calibration(&right_color);
 800117c:	483e      	ldr	r0, [pc, #248]	; (8001278 <main+0x1a8>)
 800117e:	f000 fced 	bl	8001b5c <show_color_for_calibration>
	printf("Lewy\n");
 8001182:	4841      	ldr	r0, [pc, #260]	; (8001288 <main+0x1b8>)
 8001184:	f005 fad8 	bl	8006738 <puts>
	show_color_for_calibration(&left_color);
 8001188:	4839      	ldr	r0, [pc, #228]	; (8001270 <main+0x1a0>)
 800118a:	f000 fce7 	bl	8001b5c <show_color_for_calibration>

	if ((is_red_onion(&left_color) || is_red_onion(&right_color)) && opened_gates == 0){
 800118e:	4838      	ldr	r0, [pc, #224]	; (8001270 <main+0x1a0>)
 8001190:	f000 fca2 	bl	8001ad8 <is_red_onion>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d105      	bne.n	80011a6 <main+0xd6>
 800119a:	4837      	ldr	r0, [pc, #220]	; (8001278 <main+0x1a8>)
 800119c:	f000 fc9c 	bl	8001ad8 <is_red_onion>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d010      	beq.n	80011c8 <main+0xf8>
 80011a6:	7afb      	ldrb	r3, [r7, #11]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d10d      	bne.n	80011c8 <main+0xf8>
		servo_set_angle(&right_servo, 0);
 80011ac:	2100      	movs	r1, #0
 80011ae:	4827      	ldr	r0, [pc, #156]	; (800124c <main+0x17c>)
 80011b0:	f000 fd81 	bl	8001cb6 <servo_set_angle>
		servo_set_angle(&left_servo, 180);
 80011b4:	21b4      	movs	r1, #180	; 0xb4
 80011b6:	4826      	ldr	r0, [pc, #152]	; (8001250 <main+0x180>)
 80011b8:	f000 fd7d 	bl	8001cb6 <servo_set_angle>
		opened_gates = 1;
 80011bc:	2301      	movs	r3, #1
 80011be:	72fb      	strb	r3, [r7, #11]
		tick_open_gates = HAL_GetTick();
 80011c0:	f001 f986 	bl	80024d0 <HAL_GetTick>
 80011c4:	60f8      	str	r0, [r7, #12]
 80011c6:	e039      	b.n	800123c <main+0x16c>
	} else {
		uint16_t right = 0, left = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	813b      	strh	r3, [r7, #8]
 80011cc:	2300      	movs	r3, #0
 80011ce:	80fb      	strh	r3, [r7, #6]
		get_light(&right_color, &right);
 80011d0:	f107 0308 	add.w	r3, r7, #8
 80011d4:	4619      	mov	r1, r3
 80011d6:	4828      	ldr	r0, [pc, #160]	; (8001278 <main+0x1a8>)
 80011d8:	f7ff febd 	bl	8000f56 <get_light>
		get_light(&left_color, &left);
 80011dc:	1dbb      	adds	r3, r7, #6
 80011de:	4619      	mov	r1, r3
 80011e0:	4823      	ldr	r0, [pc, #140]	; (8001270 <main+0x1a0>)
 80011e2:	f7ff feb8 	bl	8000f56 <get_light>
		if((right > COLOR_EMPTY_CRITICAL || left > COLOR_EMPTY_CRITICAL) && opened_gates == 0){
 80011e6:	893b      	ldrh	r3, [r7, #8]
 80011e8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80011ec:	d803      	bhi.n	80011f6 <main+0x126>
 80011ee:	88fb      	ldrh	r3, [r7, #6]
 80011f0:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80011f4:	d90d      	bls.n	8001212 <main+0x142>
 80011f6:	7afb      	ldrb	r3, [r7, #11]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d10a      	bne.n	8001212 <main+0x142>
			servo_set_angle(&right_servo, 130);
 80011fc:	2182      	movs	r1, #130	; 0x82
 80011fe:	4813      	ldr	r0, [pc, #76]	; (800124c <main+0x17c>)
 8001200:	f000 fd59 	bl	8001cb6 <servo_set_angle>
			servo_set_angle(&left_servo, 40);
 8001204:	2128      	movs	r1, #40	; 0x28
 8001206:	4812      	ldr	r0, [pc, #72]	; (8001250 <main+0x180>)
 8001208:	f000 fd55 	bl	8001cb6 <servo_set_angle>
			opened_gates = 2;
 800120c:	2302      	movs	r3, #2
 800120e:	72fb      	strb	r3, [r7, #11]
 8001210:	e014      	b.n	800123c <main+0x16c>
		} else if (opened_gates && HAL_GetTick() - tick_open_gates > 2000){
 8001212:	7afb      	ldrb	r3, [r7, #11]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d011      	beq.n	800123c <main+0x16c>
 8001218:	f001 f95a 	bl	80024d0 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001226:	d909      	bls.n	800123c <main+0x16c>

			  servo_set_angle(&right_servo, 20);
 8001228:	2114      	movs	r1, #20
 800122a:	4808      	ldr	r0, [pc, #32]	; (800124c <main+0x17c>)
 800122c:	f000 fd43 	bl	8001cb6 <servo_set_angle>

			  servo_set_angle(&left_servo, 160);
 8001230:	21a0      	movs	r1, #160	; 0xa0
 8001232:	4807      	ldr	r0, [pc, #28]	; (8001250 <main+0x180>)
 8001234:	f000 fd3f 	bl	8001cb6 <servo_set_angle>
			  opened_gates = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	72fb      	strb	r3, [r7, #11]
		// otworz bramke
	}
	if (opened_gates || HAL_GetTick() - tick_open_gates >= 3000) {
		opened
	}*/
	HAL_Delay(300);
 800123c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001240:	f001 f952 	bl	80024e8 <HAL_Delay>
	KTIR_read();
 8001244:	e795      	b.n	8001172 <main+0xa2>
 8001246:	bf00      	nop
 8001248:	200001ac 	.word	0x200001ac
 800124c:	2000034c 	.word	0x2000034c
 8001250:	200001a4 	.word	0x200001a4
 8001254:	200002b8 	.word	0x200002b8
 8001258:	200000a4 	.word	0x200000a4
 800125c:	20000244 	.word	0x20000244
 8001260:	20000344 	.word	0x20000344
 8001264:	200000b0 	.word	0x200000b0
 8001268:	20000250 	.word	0x20000250
 800126c:	200000f8 	.word	0x200000f8
 8001270:	20000354 	.word	0x20000354
 8001274:	2000014c 	.word	0x2000014c
 8001278:	200001a0 	.word	0x200001a0
 800127c:	2000023c 	.word	0x2000023c
 8001280:	200001f4 	.word	0x200001f4
 8001284:	080075dc 	.word	0x080075dc
 8001288:	080075e8 	.word	0x080075e8

0800128c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b094      	sub	sp, #80	; 0x50
 8001290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001292:	f107 0320 	add.w	r3, r7, #32
 8001296:	2230      	movs	r2, #48	; 0x30
 8001298:	2100      	movs	r1, #0
 800129a:	4618      	mov	r0, r3
 800129c:	f005 f9be 	bl	800661c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012a0:	f107 030c 	add.w	r3, r7, #12
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b0:	2300      	movs	r3, #0
 80012b2:	60bb      	str	r3, [r7, #8]
 80012b4:	4b27      	ldr	r3, [pc, #156]	; (8001354 <SystemClock_Config+0xc8>)
 80012b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b8:	4a26      	ldr	r2, [pc, #152]	; (8001354 <SystemClock_Config+0xc8>)
 80012ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012be:	6413      	str	r3, [r2, #64]	; 0x40
 80012c0:	4b24      	ldr	r3, [pc, #144]	; (8001354 <SystemClock_Config+0xc8>)
 80012c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c8:	60bb      	str	r3, [r7, #8]
 80012ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012cc:	2300      	movs	r3, #0
 80012ce:	607b      	str	r3, [r7, #4]
 80012d0:	4b21      	ldr	r3, [pc, #132]	; (8001358 <SystemClock_Config+0xcc>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a20      	ldr	r2, [pc, #128]	; (8001358 <SystemClock_Config+0xcc>)
 80012d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012da:	6013      	str	r3, [r2, #0]
 80012dc:	4b1e      	ldr	r3, [pc, #120]	; (8001358 <SystemClock_Config+0xcc>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012e4:	607b      	str	r3, [r7, #4]
 80012e6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012e8:	2302      	movs	r3, #2
 80012ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012ec:	2301      	movs	r3, #1
 80012ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012f0:	2310      	movs	r3, #16
 80012f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012f4:	2302      	movs	r3, #2
 80012f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012f8:	2300      	movs	r3, #0
 80012fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012fc:	2308      	movs	r3, #8
 80012fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001300:	2364      	movs	r3, #100	; 0x64
 8001302:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001304:	2302      	movs	r3, #2
 8001306:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001308:	2304      	movs	r3, #4
 800130a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800130c:	f107 0320 	add.w	r3, r7, #32
 8001310:	4618      	mov	r0, r3
 8001312:	f003 fc13 	bl	8004b3c <HAL_RCC_OscConfig>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800131c:	f000 fc68 	bl	8001bf0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001320:	230f      	movs	r3, #15
 8001322:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001324:	2302      	movs	r3, #2
 8001326:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800132c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001330:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001336:	f107 030c 	add.w	r3, r7, #12
 800133a:	2103      	movs	r1, #3
 800133c:	4618      	mov	r0, r3
 800133e:	f003 fe75 	bl	800502c <HAL_RCC_ClockConfig>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001348:	f000 fc52 	bl	8001bf0 <Error_Handler>
  }
}
 800134c:	bf00      	nop
 800134e:	3750      	adds	r7, #80	; 0x50
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40023800 	.word	0x40023800
 8001358:	40007000 	.word	0x40007000

0800135c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001362:	463b      	mov	r3, r7
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800136e:	4b36      	ldr	r3, [pc, #216]	; (8001448 <MX_ADC1_Init+0xec>)
 8001370:	4a36      	ldr	r2, [pc, #216]	; (800144c <MX_ADC1_Init+0xf0>)
 8001372:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001374:	4b34      	ldr	r3, [pc, #208]	; (8001448 <MX_ADC1_Init+0xec>)
 8001376:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800137a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800137c:	4b32      	ldr	r3, [pc, #200]	; (8001448 <MX_ADC1_Init+0xec>)
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001382:	4b31      	ldr	r3, [pc, #196]	; (8001448 <MX_ADC1_Init+0xec>)
 8001384:	2201      	movs	r2, #1
 8001386:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001388:	4b2f      	ldr	r3, [pc, #188]	; (8001448 <MX_ADC1_Init+0xec>)
 800138a:	2200      	movs	r2, #0
 800138c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800138e:	4b2e      	ldr	r3, [pc, #184]	; (8001448 <MX_ADC1_Init+0xec>)
 8001390:	2200      	movs	r2, #0
 8001392:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001396:	4b2c      	ldr	r3, [pc, #176]	; (8001448 <MX_ADC1_Init+0xec>)
 8001398:	2200      	movs	r2, #0
 800139a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800139c:	4b2a      	ldr	r3, [pc, #168]	; (8001448 <MX_ADC1_Init+0xec>)
 800139e:	4a2c      	ldr	r2, [pc, #176]	; (8001450 <MX_ADC1_Init+0xf4>)
 80013a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013a2:	4b29      	ldr	r3, [pc, #164]	; (8001448 <MX_ADC1_Init+0xec>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80013a8:	4b27      	ldr	r3, [pc, #156]	; (8001448 <MX_ADC1_Init+0xec>)
 80013aa:	2204      	movs	r2, #4
 80013ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013ae:	4b26      	ldr	r3, [pc, #152]	; (8001448 <MX_ADC1_Init+0xec>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013b6:	4b24      	ldr	r3, [pc, #144]	; (8001448 <MX_ADC1_Init+0xec>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013bc:	4822      	ldr	r0, [pc, #136]	; (8001448 <MX_ADC1_Init+0xec>)
 80013be:	f001 f8b7 	bl	8002530 <HAL_ADC_Init>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80013c8:	f000 fc12 	bl	8001bf0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013d0:	2301      	movs	r3, #1
 80013d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013d4:	2300      	movs	r3, #0
 80013d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013d8:	463b      	mov	r3, r7
 80013da:	4619      	mov	r1, r3
 80013dc:	481a      	ldr	r0, [pc, #104]	; (8001448 <MX_ADC1_Init+0xec>)
 80013de:	f001 f9ef 	bl	80027c0 <HAL_ADC_ConfigChannel>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80013e8:	f000 fc02 	bl	8001bf0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013ec:	2301      	movs	r3, #1
 80013ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80013f0:	2302      	movs	r3, #2
 80013f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013f4:	463b      	mov	r3, r7
 80013f6:	4619      	mov	r1, r3
 80013f8:	4813      	ldr	r0, [pc, #76]	; (8001448 <MX_ADC1_Init+0xec>)
 80013fa:	f001 f9e1 	bl	80027c0 <HAL_ADC_ConfigChannel>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001404:	f000 fbf4 	bl	8001bf0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001408:	2306      	movs	r3, #6
 800140a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800140c:	2303      	movs	r3, #3
 800140e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001410:	463b      	mov	r3, r7
 8001412:	4619      	mov	r1, r3
 8001414:	480c      	ldr	r0, [pc, #48]	; (8001448 <MX_ADC1_Init+0xec>)
 8001416:	f001 f9d3 	bl	80027c0 <HAL_ADC_ConfigChannel>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001420:	f000 fbe6 	bl	8001bf0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001424:	2307      	movs	r3, #7
 8001426:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001428:	2304      	movs	r3, #4
 800142a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800142c:	463b      	mov	r3, r7
 800142e:	4619      	mov	r1, r3
 8001430:	4805      	ldr	r0, [pc, #20]	; (8001448 <MX_ADC1_Init+0xec>)
 8001432:	f001 f9c5 	bl	80027c0 <HAL_ADC_ConfigChannel>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800143c:	f000 fbd8 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001440:	bf00      	nop
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	200001f4 	.word	0x200001f4
 800144c:	40012000 	.word	0x40012000
 8001450:	0f000001 	.word	0x0f000001

08001454 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001458:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <MX_I2C1_Init+0x50>)
 800145a:	4a13      	ldr	r2, [pc, #76]	; (80014a8 <MX_I2C1_Init+0x54>)
 800145c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800145e:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <MX_I2C1_Init+0x50>)
 8001460:	4a12      	ldr	r2, [pc, #72]	; (80014ac <MX_I2C1_Init+0x58>)
 8001462:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001464:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <MX_I2C1_Init+0x50>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800146a:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <MX_I2C1_Init+0x50>)
 800146c:	2200      	movs	r2, #0
 800146e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <MX_I2C1_Init+0x50>)
 8001472:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001476:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001478:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <MX_I2C1_Init+0x50>)
 800147a:	2200      	movs	r2, #0
 800147c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800147e:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <MX_I2C1_Init+0x50>)
 8001480:	2200      	movs	r2, #0
 8001482:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001484:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <MX_I2C1_Init+0x50>)
 8001486:	2200      	movs	r2, #0
 8001488:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <MX_I2C1_Init+0x50>)
 800148c:	2200      	movs	r2, #0
 800148e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001490:	4804      	ldr	r0, [pc, #16]	; (80014a4 <MX_I2C1_Init+0x50>)
 8001492:	f002 fa65 	bl	8003960 <HAL_I2C_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800149c:	f000 fba8 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	200000f8 	.word	0x200000f8
 80014a8:	40005400 	.word	0x40005400
 80014ac:	000186a0 	.word	0x000186a0

080014b0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80014b4:	4b12      	ldr	r3, [pc, #72]	; (8001500 <MX_I2C2_Init+0x50>)
 80014b6:	4a13      	ldr	r2, [pc, #76]	; (8001504 <MX_I2C2_Init+0x54>)
 80014b8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80014ba:	4b11      	ldr	r3, [pc, #68]	; (8001500 <MX_I2C2_Init+0x50>)
 80014bc:	4a12      	ldr	r2, [pc, #72]	; (8001508 <MX_I2C2_Init+0x58>)
 80014be:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014c0:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <MX_I2C2_Init+0x50>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80014c6:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <MX_I2C2_Init+0x50>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <MX_I2C2_Init+0x50>)
 80014ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014d2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014d4:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <MX_I2C2_Init+0x50>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80014da:	4b09      	ldr	r3, [pc, #36]	; (8001500 <MX_I2C2_Init+0x50>)
 80014dc:	2200      	movs	r2, #0
 80014de:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014e0:	4b07      	ldr	r3, [pc, #28]	; (8001500 <MX_I2C2_Init+0x50>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014e6:	4b06      	ldr	r3, [pc, #24]	; (8001500 <MX_I2C2_Init+0x50>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80014ec:	4804      	ldr	r0, [pc, #16]	; (8001500 <MX_I2C2_Init+0x50>)
 80014ee:	f002 fa37 	bl	8003960 <HAL_I2C_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80014f8:	f000 fb7a 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	2000014c 	.word	0x2000014c
 8001504:	40005800 	.word	0x40005800
 8001508:	000186a0 	.word	0x000186a0

0800150c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b092      	sub	sp, #72	; 0x48
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001512:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800151c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
 800152c:	615a      	str	r2, [r3, #20]
 800152e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	2220      	movs	r2, #32
 8001534:	2100      	movs	r1, #0
 8001536:	4618      	mov	r0, r3
 8001538:	f005 f870 	bl	800661c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800153c:	4b45      	ldr	r3, [pc, #276]	; (8001654 <MX_TIM1_Init+0x148>)
 800153e:	4a46      	ldr	r2, [pc, #280]	; (8001658 <MX_TIM1_Init+0x14c>)
 8001540:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10-1;
 8001542:	4b44      	ldr	r3, [pc, #272]	; (8001654 <MX_TIM1_Init+0x148>)
 8001544:	2209      	movs	r2, #9
 8001546:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001548:	4b42      	ldr	r3, [pc, #264]	; (8001654 <MX_TIM1_Init+0x148>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800154e:	4b41      	ldr	r3, [pc, #260]	; (8001654 <MX_TIM1_Init+0x148>)
 8001550:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001554:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001556:	4b3f      	ldr	r3, [pc, #252]	; (8001654 <MX_TIM1_Init+0x148>)
 8001558:	2200      	movs	r2, #0
 800155a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800155c:	4b3d      	ldr	r3, [pc, #244]	; (8001654 <MX_TIM1_Init+0x148>)
 800155e:	2200      	movs	r2, #0
 8001560:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001562:	4b3c      	ldr	r3, [pc, #240]	; (8001654 <MX_TIM1_Init+0x148>)
 8001564:	2200      	movs	r2, #0
 8001566:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001568:	483a      	ldr	r0, [pc, #232]	; (8001654 <MX_TIM1_Init+0x148>)
 800156a:	f003 ff2f 	bl	80053cc <HAL_TIM_PWM_Init>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001574:	f000 fb3c 	bl	8001bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001578:	2300      	movs	r3, #0
 800157a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800157c:	2300      	movs	r3, #0
 800157e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001580:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001584:	4619      	mov	r1, r3
 8001586:	4833      	ldr	r0, [pc, #204]	; (8001654 <MX_TIM1_Init+0x148>)
 8001588:	f004 fc48 	bl	8005e1c <HAL_TIMEx_MasterConfigSynchronization>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001592:	f000 fb2d 	bl	8001bf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001596:	2360      	movs	r3, #96	; 0x60
 8001598:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800159e:	2300      	movs	r3, #0
 80015a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015a2:	2300      	movs	r3, #0
 80015a4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015a6:	2300      	movs	r3, #0
 80015a8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015aa:	2300      	movs	r3, #0
 80015ac:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015ae:	2300      	movs	r3, #0
 80015b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b6:	2200      	movs	r2, #0
 80015b8:	4619      	mov	r1, r3
 80015ba:	4826      	ldr	r0, [pc, #152]	; (8001654 <MX_TIM1_Init+0x148>)
 80015bc:	f004 f93a 	bl	8005834 <HAL_TIM_PWM_ConfigChannel>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80015c6:	f000 fb13 	bl	8001bf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ce:	2204      	movs	r2, #4
 80015d0:	4619      	mov	r1, r3
 80015d2:	4820      	ldr	r0, [pc, #128]	; (8001654 <MX_TIM1_Init+0x148>)
 80015d4:	f004 f92e 	bl	8005834 <HAL_TIM_PWM_ConfigChannel>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80015de:	f000 fb07 	bl	8001bf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e6:	2208      	movs	r2, #8
 80015e8:	4619      	mov	r1, r3
 80015ea:	481a      	ldr	r0, [pc, #104]	; (8001654 <MX_TIM1_Init+0x148>)
 80015ec:	f004 f922 	bl	8005834 <HAL_TIM_PWM_ConfigChannel>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80015f6:	f000 fafb 	bl	8001bf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015fe:	220c      	movs	r2, #12
 8001600:	4619      	mov	r1, r3
 8001602:	4814      	ldr	r0, [pc, #80]	; (8001654 <MX_TIM1_Init+0x148>)
 8001604:	f004 f916 	bl	8005834 <HAL_TIM_PWM_ConfigChannel>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800160e:	f000 faef 	bl	8001bf0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001612:	2300      	movs	r3, #0
 8001614:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001616:	2300      	movs	r3, #0
 8001618:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800161a:	2300      	movs	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800161e:	2300      	movs	r3, #0
 8001620:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001622:	2300      	movs	r3, #0
 8001624:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001626:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800162a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800162c:	2300      	movs	r3, #0
 800162e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001630:	1d3b      	adds	r3, r7, #4
 8001632:	4619      	mov	r1, r3
 8001634:	4807      	ldr	r0, [pc, #28]	; (8001654 <MX_TIM1_Init+0x148>)
 8001636:	f004 fc5f 	bl	8005ef8 <HAL_TIMEx_ConfigBreakDeadTime>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001640:	f000 fad6 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001644:	4803      	ldr	r0, [pc, #12]	; (8001654 <MX_TIM1_Init+0x148>)
 8001646:	f000 fd1f 	bl	8002088 <HAL_TIM_MspPostInit>

}
 800164a:	bf00      	nop
 800164c:	3748      	adds	r7, #72	; 0x48
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	200002b8 	.word	0x200002b8
 8001658:	40010000 	.word	0x40010000

0800165c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08a      	sub	sp, #40	; 0x28
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001662:	f107 0320 	add.w	r3, r7, #32
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800166c:	1d3b      	adds	r3, r7, #4
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	609a      	str	r2, [r3, #8]
 8001676:	60da      	str	r2, [r3, #12]
 8001678:	611a      	str	r2, [r3, #16]
 800167a:	615a      	str	r2, [r3, #20]
 800167c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800167e:	4b28      	ldr	r3, [pc, #160]	; (8001720 <MX_TIM3_Init+0xc4>)
 8001680:	4a28      	ldr	r2, [pc, #160]	; (8001724 <MX_TIM3_Init+0xc8>)
 8001682:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8001684:	4b26      	ldr	r3, [pc, #152]	; (8001720 <MX_TIM3_Init+0xc4>)
 8001686:	2263      	movs	r2, #99	; 0x63
 8001688:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800168a:	4b25      	ldr	r3, [pc, #148]	; (8001720 <MX_TIM3_Init+0xc4>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8001690:	4b23      	ldr	r3, [pc, #140]	; (8001720 <MX_TIM3_Init+0xc4>)
 8001692:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001696:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001698:	4b21      	ldr	r3, [pc, #132]	; (8001720 <MX_TIM3_Init+0xc4>)
 800169a:	2200      	movs	r2, #0
 800169c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800169e:	4b20      	ldr	r3, [pc, #128]	; (8001720 <MX_TIM3_Init+0xc4>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016a4:	481e      	ldr	r0, [pc, #120]	; (8001720 <MX_TIM3_Init+0xc4>)
 80016a6:	f003 fe91 	bl	80053cc <HAL_TIM_PWM_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80016b0:	f000 fa9e 	bl	8001bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016b4:	2300      	movs	r3, #0
 80016b6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b8:	2300      	movs	r3, #0
 80016ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016bc:	f107 0320 	add.w	r3, r7, #32
 80016c0:	4619      	mov	r1, r3
 80016c2:	4817      	ldr	r0, [pc, #92]	; (8001720 <MX_TIM3_Init+0xc4>)
 80016c4:	f004 fbaa 	bl	8005e1c <HAL_TIMEx_MasterConfigSynchronization>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80016ce:	f000 fa8f 	bl	8001bf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016d2:	2360      	movs	r3, #96	; 0x60
 80016d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 80016d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016dc:	2300      	movs	r3, #0
 80016de:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016e4:	1d3b      	adds	r3, r7, #4
 80016e6:	2208      	movs	r2, #8
 80016e8:	4619      	mov	r1, r3
 80016ea:	480d      	ldr	r0, [pc, #52]	; (8001720 <MX_TIM3_Init+0xc4>)
 80016ec:	f004 f8a2 	bl	8005834 <HAL_TIM_PWM_ConfigChannel>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80016f6:	f000 fa7b 	bl	8001bf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016fa:	1d3b      	adds	r3, r7, #4
 80016fc:	220c      	movs	r2, #12
 80016fe:	4619      	mov	r1, r3
 8001700:	4807      	ldr	r0, [pc, #28]	; (8001720 <MX_TIM3_Init+0xc4>)
 8001702:	f004 f897 	bl	8005834 <HAL_TIM_PWM_ConfigChannel>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 800170c:	f000 fa70 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001710:	4803      	ldr	r0, [pc, #12]	; (8001720 <MX_TIM3_Init+0xc4>)
 8001712:	f000 fcb9 	bl	8002088 <HAL_TIM_MspPostInit>

}
 8001716:	bf00      	nop
 8001718:	3728      	adds	r7, #40	; 0x28
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	200001ac 	.word	0x200001ac
 8001724:	40000400 	.word	0x40000400

08001728 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08c      	sub	sp, #48	; 0x30
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800172e:	f107 030c 	add.w	r3, r7, #12
 8001732:	2224      	movs	r2, #36	; 0x24
 8001734:	2100      	movs	r1, #0
 8001736:	4618      	mov	r0, r3
 8001738:	f004 ff70 	bl	800661c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800173c:	1d3b      	adds	r3, r7, #4
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001744:	4b20      	ldr	r3, [pc, #128]	; (80017c8 <MX_TIM4_Init+0xa0>)
 8001746:	4a21      	ldr	r2, [pc, #132]	; (80017cc <MX_TIM4_Init+0xa4>)
 8001748:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800174a:	4b1f      	ldr	r3, [pc, #124]	; (80017c8 <MX_TIM4_Init+0xa0>)
 800174c:	2200      	movs	r2, #0
 800174e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001750:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <MX_TIM4_Init+0xa0>)
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001756:	4b1c      	ldr	r3, [pc, #112]	; (80017c8 <MX_TIM4_Init+0xa0>)
 8001758:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800175c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800175e:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <MX_TIM4_Init+0xa0>)
 8001760:	2200      	movs	r2, #0
 8001762:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001764:	4b18      	ldr	r3, [pc, #96]	; (80017c8 <MX_TIM4_Init+0xa0>)
 8001766:	2200      	movs	r2, #0
 8001768:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800176a:	2303      	movs	r3, #3
 800176c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800176e:	2300      	movs	r3, #0
 8001770:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001772:	2301      	movs	r3, #1
 8001774:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001776:	2300      	movs	r3, #0
 8001778:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800177a:	230f      	movs	r3, #15
 800177c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800177e:	2300      	movs	r3, #0
 8001780:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001782:	2301      	movs	r3, #1
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001786:	2300      	movs	r3, #0
 8001788:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 800178a:	230f      	movs	r3, #15
 800178c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800178e:	f107 030c 	add.w	r3, r7, #12
 8001792:	4619      	mov	r1, r3
 8001794:	480c      	ldr	r0, [pc, #48]	; (80017c8 <MX_TIM4_Init+0xa0>)
 8001796:	f003 ff19 	bl	80055cc <HAL_TIM_Encoder_Init>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80017a0:	f000 fa26 	bl	8001bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017a4:	2300      	movs	r3, #0
 80017a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a8:	2300      	movs	r3, #0
 80017aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017ac:	1d3b      	adds	r3, r7, #4
 80017ae:	4619      	mov	r1, r3
 80017b0:	4805      	ldr	r0, [pc, #20]	; (80017c8 <MX_TIM4_Init+0xa0>)
 80017b2:	f004 fb33 	bl	8005e1c <HAL_TIMEx_MasterConfigSynchronization>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80017bc:	f000 fa18 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80017c0:	bf00      	nop
 80017c2:	3730      	adds	r7, #48	; 0x30
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	200000b0 	.word	0x200000b0
 80017cc:	40000800 	.word	0x40000800

080017d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017d4:	4b11      	ldr	r3, [pc, #68]	; (800181c <MX_USART2_UART_Init+0x4c>)
 80017d6:	4a12      	ldr	r2, [pc, #72]	; (8001820 <MX_USART2_UART_Init+0x50>)
 80017d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017da:	4b10      	ldr	r3, [pc, #64]	; (800181c <MX_USART2_UART_Init+0x4c>)
 80017dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017e2:	4b0e      	ldr	r3, [pc, #56]	; (800181c <MX_USART2_UART_Init+0x4c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017e8:	4b0c      	ldr	r3, [pc, #48]	; (800181c <MX_USART2_UART_Init+0x4c>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017ee:	4b0b      	ldr	r3, [pc, #44]	; (800181c <MX_USART2_UART_Init+0x4c>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017f4:	4b09      	ldr	r3, [pc, #36]	; (800181c <MX_USART2_UART_Init+0x4c>)
 80017f6:	220c      	movs	r2, #12
 80017f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017fa:	4b08      	ldr	r3, [pc, #32]	; (800181c <MX_USART2_UART_Init+0x4c>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <MX_USART2_UART_Init+0x4c>)
 8001802:	2200      	movs	r2, #0
 8001804:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001806:	4805      	ldr	r0, [pc, #20]	; (800181c <MX_USART2_UART_Init+0x4c>)
 8001808:	f004 fbc8 	bl	8005f9c <HAL_UART_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001812:	f000 f9ed 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000300 	.word	0x20000300
 8001820:	40004400 	.word	0x40004400

08001824 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	607b      	str	r3, [r7, #4]
 800182e:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <MX_DMA_Init+0x3c>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	4a0b      	ldr	r2, [pc, #44]	; (8001860 <MX_DMA_Init+0x3c>)
 8001834:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001838:	6313      	str	r3, [r2, #48]	; 0x30
 800183a:	4b09      	ldr	r3, [pc, #36]	; (8001860 <MX_DMA_Init+0x3c>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001842:	607b      	str	r3, [r7, #4]
 8001844:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001846:	2200      	movs	r2, #0
 8001848:	2100      	movs	r1, #0
 800184a:	2038      	movs	r0, #56	; 0x38
 800184c:	f001 fb43 	bl	8002ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001850:	2038      	movs	r0, #56	; 0x38
 8001852:	f001 fb5c 	bl	8002f0e <HAL_NVIC_EnableIRQ>

}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40023800 	.word	0x40023800

08001864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b088      	sub	sp, #32
 8001868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186a:	f107 030c 	add.w	r3, r7, #12
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	609a      	str	r2, [r3, #8]
 8001876:	60da      	str	r2, [r3, #12]
 8001878:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	4b1f      	ldr	r3, [pc, #124]	; (80018fc <MX_GPIO_Init+0x98>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	4a1e      	ldr	r2, [pc, #120]	; (80018fc <MX_GPIO_Init+0x98>)
 8001884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001888:	6313      	str	r3, [r2, #48]	; 0x30
 800188a:	4b1c      	ldr	r3, [pc, #112]	; (80018fc <MX_GPIO_Init+0x98>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001892:	60bb      	str	r3, [r7, #8]
 8001894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	607b      	str	r3, [r7, #4]
 800189a:	4b18      	ldr	r3, [pc, #96]	; (80018fc <MX_GPIO_Init+0x98>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a17      	ldr	r2, [pc, #92]	; (80018fc <MX_GPIO_Init+0x98>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b15      	ldr	r3, [pc, #84]	; (80018fc <MX_GPIO_Init+0x98>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	603b      	str	r3, [r7, #0]
 80018b6:	4b11      	ldr	r3, [pc, #68]	; (80018fc <MX_GPIO_Init+0x98>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	4a10      	ldr	r2, [pc, #64]	; (80018fc <MX_GPIO_Init+0x98>)
 80018bc:	f043 0302 	orr.w	r3, r3, #2
 80018c0:	6313      	str	r3, [r2, #48]	; 0x30
 80018c2:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <MX_GPIO_Init+0x98>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80018ce:	2200      	movs	r2, #0
 80018d0:	2120      	movs	r1, #32
 80018d2:	480b      	ldr	r0, [pc, #44]	; (8001900 <MX_GPIO_Init+0x9c>)
 80018d4:	f002 f82a 	bl	800392c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 80018d8:	2320      	movs	r3, #32
 80018da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018dc:	2301      	movs	r3, #1
 80018de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e4:	2300      	movs	r3, #0
 80018e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80018e8:	f107 030c 	add.w	r3, r7, #12
 80018ec:	4619      	mov	r1, r3
 80018ee:	4804      	ldr	r0, [pc, #16]	; (8001900 <MX_GPIO_Init+0x9c>)
 80018f0:	f001 fe98 	bl	8003624 <HAL_GPIO_Init>

}
 80018f4:	bf00      	nop
 80018f6:	3720      	adds	r7, #32
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40023800 	.word	0x40023800
 8001900:	40020000 	.word	0x40020000
 8001904:	00000000 	.word	0x00000000

08001908 <get_H_from_RGB>:
 * @param red: Red value (0, 255)
 * @param green: Green value (0, 255)
 * @param blue: Blue value (0, 255)
 */

uint16_t get_H_from_RGB(uint32_t red, uint32_t green, uint32_t blue){
 8001908:	b580      	push	{r7, lr}
 800190a:	b08a      	sub	sp, #40	; 0x28
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
	uint16_t c_max = red > green ? (red > blue ? red : blue) : (green > blue ? green : blue);
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	429a      	cmp	r2, r3
 800191a:	d906      	bls.n	800192a <get_H_from_RGB+0x22>
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	4293      	cmp	r3, r2
 8001922:	bf38      	it	cc
 8001924:	4613      	movcc	r3, r2
 8001926:	b29b      	uxth	r3, r3
 8001928:	e005      	b.n	8001936 <get_H_from_RGB+0x2e>
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	4293      	cmp	r3, r2
 8001930:	bf38      	it	cc
 8001932:	4613      	movcc	r3, r2
 8001934:	b29b      	uxth	r3, r3
 8001936:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t c_min = red < green ? (red < blue ? red : blue) : (green < blue ? green : blue);
 8001938:	68fa      	ldr	r2, [r7, #12]
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	429a      	cmp	r2, r3
 800193e:	d206      	bcs.n	800194e <get_H_from_RGB+0x46>
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	4293      	cmp	r3, r2
 8001946:	bf28      	it	cs
 8001948:	4613      	movcs	r3, r2
 800194a:	b29b      	uxth	r3, r3
 800194c:	e005      	b.n	800195a <get_H_from_RGB+0x52>
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	4293      	cmp	r3, r2
 8001954:	bf28      	it	cs
 8001956:	4613      	movcs	r3, r2
 8001958:	b29b      	uxth	r3, r3
 800195a:	847b      	strh	r3, [r7, #34]	; 0x22

	float d = (float)(c_max - c_min);
 800195c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800195e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	ee07 3a90 	vmov	s15, r3
 8001966:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800196a:	edc7 7a07 	vstr	s15, [r7, #28]
	d /= 255.0;
 800196e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001972:	eddf 6a53 	vldr	s13, [pc, #332]	; 8001ac0 <get_H_from_RGB+0x1b8>
 8001976:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800197a:	edc7 7a07 	vstr	s15, [r7, #28]
	uint16_t h = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	84fb      	strh	r3, [r7, #38]	; 0x26
	float r = red/255.0;
 8001982:	68f8      	ldr	r0, [r7, #12]
 8001984:	f7fe fdbe 	bl	8000504 <__aeabi_ui2d>
 8001988:	a34b      	add	r3, pc, #300	; (adr r3, 8001ab8 <get_H_from_RGB+0x1b0>)
 800198a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198e:	f7fe ff5d 	bl	800084c <__aeabi_ddiv>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	4610      	mov	r0, r2
 8001998:	4619      	mov	r1, r3
 800199a:	f7ff f83f 	bl	8000a1c <__aeabi_d2f>
 800199e:	4603      	mov	r3, r0
 80019a0:	61bb      	str	r3, [r7, #24]
	float g = green/255.0;
 80019a2:	68b8      	ldr	r0, [r7, #8]
 80019a4:	f7fe fdae 	bl	8000504 <__aeabi_ui2d>
 80019a8:	a343      	add	r3, pc, #268	; (adr r3, 8001ab8 <get_H_from_RGB+0x1b0>)
 80019aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ae:	f7fe ff4d 	bl	800084c <__aeabi_ddiv>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	4610      	mov	r0, r2
 80019b8:	4619      	mov	r1, r3
 80019ba:	f7ff f82f 	bl	8000a1c <__aeabi_d2f>
 80019be:	4603      	mov	r3, r0
 80019c0:	617b      	str	r3, [r7, #20]
	float b = blue/255.0;
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7fe fd9e 	bl	8000504 <__aeabi_ui2d>
 80019c8:	a33b      	add	r3, pc, #236	; (adr r3, 8001ab8 <get_H_from_RGB+0x1b0>)
 80019ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ce:	f7fe ff3d 	bl	800084c <__aeabi_ddiv>
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	4610      	mov	r0, r2
 80019d8:	4619      	mov	r1, r3
 80019da:	f7ff f81f 	bl	8000a1c <__aeabi_d2f>
 80019de:	4603      	mov	r3, r0
 80019e0:	613b      	str	r3, [r7, #16]
	if (d == 0){
 80019e2:	edd7 7a07 	vldr	s15, [r7, #28]
 80019e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80019ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ee:	d102      	bne.n	80019f6 <get_H_from_RGB+0xee>
	  h = 0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80019f4:	e05b      	b.n	8001aae <get_H_from_RGB+0x1a6>
	}
	else if(c_max == red){
 80019f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d124      	bne.n	8001a48 <get_H_from_RGB+0x140>
	  h = (int)(60*(g - b)/d + 360)%360;
 80019fe:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a02:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a0a:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001ac4 <get_H_from_RGB+0x1bc>
 8001a0e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001a12:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a1a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001ac8 <get_H_from_RGB+0x1c0>
 8001a1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a26:	ee17 3a90 	vmov	r3, s15
 8001a2a:	4a28      	ldr	r2, [pc, #160]	; (8001acc <get_H_from_RGB+0x1c4>)
 8001a2c:	fb82 1203 	smull	r1, r2, r2, r3
 8001a30:	441a      	add	r2, r3
 8001a32:	1211      	asrs	r1, r2, #8
 8001a34:	17da      	asrs	r2, r3, #31
 8001a36:	1a8a      	subs	r2, r1, r2
 8001a38:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001a3c:	fb01 f202 	mul.w	r2, r1, r2
 8001a40:	1a9a      	subs	r2, r3, r2
 8001a42:	4613      	mov	r3, r2
 8001a44:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001a46:	e032      	b.n	8001aae <get_H_from_RGB+0x1a6>
	}
	else if(c_max == green){
 8001a48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a4a:	68ba      	ldr	r2, [r7, #8]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d117      	bne.n	8001a80 <get_H_from_RGB+0x178>
	  h = (60*(b - r)/d) + 120;
 8001a50:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a54:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a5c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001ac4 <get_H_from_RGB+0x1bc>
 8001a60:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001a64:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a6c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001ad0 <get_H_from_RGB+0x1c8>
 8001a70:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a78:	ee17 3a90 	vmov	r3, s15
 8001a7c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001a7e:	e016      	b.n	8001aae <get_H_from_RGB+0x1a6>
	}
	else {
	  h = (60*(r - g)/d) + 240;
 8001a80:	ed97 7a06 	vldr	s14, [r7, #24]
 8001a84:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a8c:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001ac4 <get_H_from_RGB+0x1bc>
 8001a90:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001a94:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a9c:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001ad4 <get_H_from_RGB+0x1cc>
 8001aa0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001aa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001aa8:	ee17 3a90 	vmov	r3, s15
 8001aac:	84fb      	strh	r3, [r7, #38]	; 0x26
	}
	return h;
 8001aae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3728      	adds	r7, #40	; 0x28
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	00000000 	.word	0x00000000
 8001abc:	406fe000 	.word	0x406fe000
 8001ac0:	437f0000 	.word	0x437f0000
 8001ac4:	42700000 	.word	0x42700000
 8001ac8:	43b40000 	.word	0x43b40000
 8001acc:	b60b60b7 	.word	0xb60b60b7
 8001ad0:	42f00000 	.word	0x42f00000
 8001ad4:	43700000 	.word	0x43700000

08001ad8 <is_red_onion>:

uint8_t is_red_onion(ColorSensor *sensor){
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
	uint16_t red = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	82bb      	strh	r3, [r7, #20]
	unlock(sensor);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff fa6e 	bl	8000fc6 <unlock>
	get_red(sensor, &red);
 8001aea:	f107 0314 	add.w	r3, r7, #20
 8001aee:	4619      	mov	r1, r3
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f7ff f9fd 	bl	8000ef0 <get_red>
	uint16_t color = 0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	827b      	strh	r3, [r7, #18]
	get_light(sensor, &color);
 8001afa:	f107 0312 	add.w	r3, r7, #18
 8001afe:	4619      	mov	r1, r3
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7ff fa28 	bl	8000f56 <get_light>
	uint16_t green = 0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	823b      	strh	r3, [r7, #16]
	get_green(sensor, &green);
 8001b0a:	f107 0310 	add.w	r3, r7, #16
 8001b0e:	4619      	mov	r1, r3
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7ff f9fe 	bl	8000f12 <get_green>
	uint16_t blue = 0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	81fb      	strh	r3, [r7, #14]
	get_blue(sensor, &blue);
 8001b1a:	f107 030e 	add.w	r3, r7, #14
 8001b1e:	4619      	mov	r1, r3
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f7ff fa07 	bl	8000f34 <get_blue>
	lock(sensor);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7ff fa26 	bl	8000f78 <lock>

	uint16_t h = get_H_from_RGB(red, green, blue);
 8001b2c:	8abb      	ldrh	r3, [r7, #20]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	8a3b      	ldrh	r3, [r7, #16]
 8001b32:	4619      	mov	r1, r3
 8001b34:	89fb      	ldrh	r3, [r7, #14]
 8001b36:	461a      	mov	r2, r3
 8001b38:	f7ff fee6 	bl	8001908 <get_H_from_RGB>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	82fb      	strh	r3, [r7, #22]

	if(h > 230 || h < 12) {
 8001b40:	8afb      	ldrh	r3, [r7, #22]
 8001b42:	2be6      	cmp	r3, #230	; 0xe6
 8001b44:	d802      	bhi.n	8001b4c <is_red_onion+0x74>
 8001b46:	8afb      	ldrh	r3, [r7, #22]
 8001b48:	2b0b      	cmp	r3, #11
 8001b4a:	d801      	bhi.n	8001b50 <is_red_onion+0x78>
		return 1;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e000      	b.n	8001b52 <is_red_onion+0x7a>
	}
	else {
		return 0;
 8001b50:	2300      	movs	r3, #0
	}
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3718      	adds	r7, #24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
	...

08001b5c <show_color_for_calibration>:
void turn(Motor* slower, Motor* faster, uint8_t value){
	motor_run(slower, MOTOR_BASE_SPEED + value);
	motor_run(faster, MOTOR_BASE_SPEED - value);
}

void show_color_for_calibration(ColorSensor* sensor){
 8001b5c:	b590      	push	{r4, r7, lr}
 8001b5e:	b089      	sub	sp, #36	; 0x24
 8001b60:	af02      	add	r7, sp, #8
 8001b62:	6078      	str	r0, [r7, #4]
	uint16_t red = 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	82bb      	strh	r3, [r7, #20]
		unlock(sensor);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f7ff fa2c 	bl	8000fc6 <unlock>
		get_red(sensor, &red);
 8001b6e:	f107 0314 	add.w	r3, r7, #20
 8001b72:	4619      	mov	r1, r3
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7ff f9bb 	bl	8000ef0 <get_red>
		uint16_t color = 0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	827b      	strh	r3, [r7, #18]
		get_light(sensor, &color);
 8001b7e:	f107 0312 	add.w	r3, r7, #18
 8001b82:	4619      	mov	r1, r3
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7ff f9e6 	bl	8000f56 <get_light>
		uint16_t green = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	823b      	strh	r3, [r7, #16]
		get_green(sensor, &green);
 8001b8e:	f107 0310 	add.w	r3, r7, #16
 8001b92:	4619      	mov	r1, r3
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7ff f9bc 	bl	8000f12 <get_green>
		uint16_t blue = 0;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	81fb      	strh	r3, [r7, #14]
		get_blue(sensor, &blue);
 8001b9e:	f107 030e 	add.w	r3, r7, #14
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f7ff f9c5 	bl	8000f34 <get_blue>
		lock(sensor);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff f9e4 	bl	8000f78 <lock>
		uint16_t h = get_H_from_RGB(red, green, blue);
 8001bb0:	8abb      	ldrh	r3, [r7, #20]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	8a3b      	ldrh	r3, [r7, #16]
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	89fb      	ldrh	r3, [r7, #14]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	f7ff fea4 	bl	8001908 <get_H_from_RGB>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	82fb      	strh	r3, [r7, #22]
		printf("R: %d\tG: %d\tB: %d\tC: %d \t H = %d\n", red, green, blue, color, h);
 8001bc4:	8abb      	ldrh	r3, [r7, #20]
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	8a3b      	ldrh	r3, [r7, #16]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	89fb      	ldrh	r3, [r7, #14]
 8001bce:	461c      	mov	r4, r3
 8001bd0:	8a7b      	ldrh	r3, [r7, #18]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	8afb      	ldrh	r3, [r7, #22]
 8001bd6:	9301      	str	r3, [sp, #4]
 8001bd8:	9200      	str	r2, [sp, #0]
 8001bda:	4623      	mov	r3, r4
 8001bdc:	4602      	mov	r2, r0
 8001bde:	4803      	ldr	r0, [pc, #12]	; (8001bec <show_color_for_calibration+0x90>)
 8001be0:	f004 fd24 	bl	800662c <iprintf>

}
 8001be4:	bf00      	nop
 8001be6:	371c      	adds	r7, #28
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd90      	pop	{r4, r7, pc}
 8001bec:	0800766c 	.word	0x0800766c

08001bf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bf4:	b672      	cpsid	i
}
 8001bf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bf8:	e7fe      	b.n	8001bf8 <Error_Handler+0x8>

08001bfa <motor_init>:
 *      Author: Hyperbook
 */

#include "motor.h"

HAL_StatusTypeDef motor_init(Motor* motor, TIM_HandleTypeDef* pwm_tim, uint32_t channel_A, uint32_t channel_B){
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b086      	sub	sp, #24
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	60f8      	str	r0, [r7, #12]
 8001c02:	60b9      	str	r1, [r7, #8]
 8001c04:	607a      	str	r2, [r7, #4]
 8001c06:	603b      	str	r3, [r7, #0]
	motor->channel_A = channel_A;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	601a      	str	r2, [r3, #0]
	motor->channel_B = channel_B;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	605a      	str	r2, [r3, #4]
	motor->pwm_tim = pwm_tim;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	68ba      	ldr	r2, [r7, #8]
 8001c18:	609a      	str	r2, [r3, #8]
	HAL_StatusTypeDef status = HAL_TIM_PWM_Start(pwm_tim, channel_A);
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	68b8      	ldr	r0, [r7, #8]
 8001c1e:	f003 fc25 	bl	800546c <HAL_TIM_PWM_Start>
 8001c22:	4603      	mov	r3, r0
 8001c24:	75fb      	strb	r3, [r7, #23]
	HAL_TIM_PWM_Start(pwm_tim, channel_B);
 8001c26:	6839      	ldr	r1, [r7, #0]
 8001c28:	68b8      	ldr	r0, [r7, #8]
 8001c2a:	f003 fc1f 	bl	800546c <HAL_TIM_PWM_Start>
	return status;
 8001c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3718      	adds	r7, #24
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <servo_init>:

#include "servo.h"


void servo_init(Servo* servo, TIM_HandleTypeDef *tim, uint32_t channel)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
	servo->_pwm_tim = tim;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	68ba      	ldr	r2, [r7, #8]
 8001c48:	601a      	str	r2, [r3, #0]
	servo->_pwm_channel = channel;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	605a      	str	r2, [r3, #4]

	__HAL_TIM_SET_COMPARE(servo->_pwm_tim, servo->_pwm_channel, SERVO_MAX_US);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d106      	bne.n	8001c66 <servo_init+0x2e>
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001c62:	635a      	str	r2, [r3, #52]	; 0x34
 8001c64:	e01b      	b.n	8001c9e <servo_init+0x66>
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b04      	cmp	r3, #4
 8001c6c:	d106      	bne.n	8001c7c <servo_init+0x44>
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001c78:	6393      	str	r3, [r2, #56]	; 0x38
 8001c7a:	e010      	b.n	8001c9e <servo_init+0x66>
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	2b08      	cmp	r3, #8
 8001c82:	d106      	bne.n	8001c92 <servo_init+0x5a>
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001c8e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001c90:	e005      	b.n	8001c9e <servo_init+0x66>
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001c9c:	6413      	str	r3, [r2, #64]	; 0x40
	HAL_TIM_PWM_Start(servo->_pwm_tim, servo->_pwm_channel);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4610      	mov	r0, r2
 8001caa:	f003 fbdf 	bl	800546c <HAL_TIM_PWM_Start>
}
 8001cae:	bf00      	nop
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <servo_set_angle>:

uint32_t servo_set_angle(Servo* servo, uint8_t angle)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b085      	sub	sp, #20
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	70fb      	strb	r3, [r7, #3]
	if(angle < SERVO_MIN_ANGLE)
		angle = SERVO_MIN_ANGLE;
	else if(angle > SERVO_MAX_ANGLE)
 8001cc2:	78fb      	ldrb	r3, [r7, #3]
 8001cc4:	2bb4      	cmp	r3, #180	; 0xb4
 8001cc6:	d901      	bls.n	8001ccc <servo_set_angle+0x16>
		angle = SERVO_MAX_ANGLE;
 8001cc8:	23b4      	movs	r3, #180	; 0xb4
 8001cca:	70fb      	strb	r3, [r7, #3]

	uint32_t pwm_duty_us;

	pwm_duty_us = SERVO_MIN_US + (angle * (SERVO_MAX_US - SERVO_MIN_US))/SERVO_MAX_ANGLE;
 8001ccc:	78fa      	ldrb	r2, [r7, #3]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4413      	add	r3, r2
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8001cda:	60fb      	str	r3, [r7, #12]

	__HAL_TIM_SET_COMPARE(servo->_pwm_tim, servo->_pwm_channel, pwm_duty_us);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d105      	bne.n	8001cf0 <servo_set_angle+0x3a>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	635a      	str	r2, [r3, #52]	; 0x34
 8001cee:	e018      	b.n	8001d22 <servo_set_angle+0x6c>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	2b04      	cmp	r3, #4
 8001cf6:	d105      	bne.n	8001d04 <servo_set_angle+0x4e>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6393      	str	r3, [r2, #56]	; 0x38
 8001d02:	e00e      	b.n	8001d22 <servo_set_angle+0x6c>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	2b08      	cmp	r3, #8
 8001d0a:	d105      	bne.n	8001d18 <servo_set_angle+0x62>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001d16:	e004      	b.n	8001d22 <servo_set_angle+0x6c>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	6413      	str	r3, [r2, #64]	; 0x40

	return pwm_duty_us;
 8001d22:	68fb      	ldr	r3, [r7, #12]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	607b      	str	r3, [r7, #4]
 8001d3a:	4b10      	ldr	r3, [pc, #64]	; (8001d7c <HAL_MspInit+0x4c>)
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3e:	4a0f      	ldr	r2, [pc, #60]	; (8001d7c <HAL_MspInit+0x4c>)
 8001d40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d44:	6453      	str	r3, [r2, #68]	; 0x44
 8001d46:	4b0d      	ldr	r3, [pc, #52]	; (8001d7c <HAL_MspInit+0x4c>)
 8001d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d4e:	607b      	str	r3, [r7, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	603b      	str	r3, [r7, #0]
 8001d56:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <HAL_MspInit+0x4c>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	4a08      	ldr	r2, [pc, #32]	; (8001d7c <HAL_MspInit+0x4c>)
 8001d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d60:	6413      	str	r3, [r2, #64]	; 0x40
 8001d62:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <HAL_MspInit+0x4c>)
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6a:	603b      	str	r3, [r7, #0]
 8001d6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40023800 	.word	0x40023800

08001d80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08a      	sub	sp, #40	; 0x28
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d88:	f107 0314 	add.w	r3, r7, #20
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	60da      	str	r2, [r3, #12]
 8001d96:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a2e      	ldr	r2, [pc, #184]	; (8001e58 <HAL_ADC_MspInit+0xd8>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d156      	bne.n	8001e50 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	613b      	str	r3, [r7, #16]
 8001da6:	4b2d      	ldr	r3, [pc, #180]	; (8001e5c <HAL_ADC_MspInit+0xdc>)
 8001da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001daa:	4a2c      	ldr	r2, [pc, #176]	; (8001e5c <HAL_ADC_MspInit+0xdc>)
 8001dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db0:	6453      	str	r3, [r2, #68]	; 0x44
 8001db2:	4b2a      	ldr	r3, [pc, #168]	; (8001e5c <HAL_ADC_MspInit+0xdc>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dba:	613b      	str	r3, [r7, #16]
 8001dbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	4b26      	ldr	r3, [pc, #152]	; (8001e5c <HAL_ADC_MspInit+0xdc>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	4a25      	ldr	r2, [pc, #148]	; (8001e5c <HAL_ADC_MspInit+0xdc>)
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dce:	4b23      	ldr	r3, [pc, #140]	; (8001e5c <HAL_ADC_MspInit+0xdc>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = KTIR_1_Pin|KTIR_2_Pin|KTIR_3_Pin|KTIR_4_Pin;
 8001dda:	23c3      	movs	r3, #195	; 0xc3
 8001ddc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dde:	2303      	movs	r3, #3
 8001de0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de6:	f107 0314 	add.w	r3, r7, #20
 8001dea:	4619      	mov	r1, r3
 8001dec:	481c      	ldr	r0, [pc, #112]	; (8001e60 <HAL_ADC_MspInit+0xe0>)
 8001dee:	f001 fc19 	bl	8003624 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001df2:	4b1c      	ldr	r3, [pc, #112]	; (8001e64 <HAL_ADC_MspInit+0xe4>)
 8001df4:	4a1c      	ldr	r2, [pc, #112]	; (8001e68 <HAL_ADC_MspInit+0xe8>)
 8001df6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001df8:	4b1a      	ldr	r3, [pc, #104]	; (8001e64 <HAL_ADC_MspInit+0xe4>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dfe:	4b19      	ldr	r3, [pc, #100]	; (8001e64 <HAL_ADC_MspInit+0xe4>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e04:	4b17      	ldr	r3, [pc, #92]	; (8001e64 <HAL_ADC_MspInit+0xe4>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e0a:	4b16      	ldr	r3, [pc, #88]	; (8001e64 <HAL_ADC_MspInit+0xe4>)
 8001e0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e10:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e12:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <HAL_ADC_MspInit+0xe4>)
 8001e14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e18:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e1a:	4b12      	ldr	r3, [pc, #72]	; (8001e64 <HAL_ADC_MspInit+0xe4>)
 8001e1c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e20:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001e22:	4b10      	ldr	r3, [pc, #64]	; (8001e64 <HAL_ADC_MspInit+0xe4>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e28:	4b0e      	ldr	r3, [pc, #56]	; (8001e64 <HAL_ADC_MspInit+0xe4>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e2e:	4b0d      	ldr	r3, [pc, #52]	; (8001e64 <HAL_ADC_MspInit+0xe4>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e34:	480b      	ldr	r0, [pc, #44]	; (8001e64 <HAL_ADC_MspInit+0xe4>)
 8001e36:	f001 f885 	bl	8002f44 <HAL_DMA_Init>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001e40:	f7ff fed6 	bl	8001bf0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a07      	ldr	r2, [pc, #28]	; (8001e64 <HAL_ADC_MspInit+0xe4>)
 8001e48:	639a      	str	r2, [r3, #56]	; 0x38
 8001e4a:	4a06      	ldr	r2, [pc, #24]	; (8001e64 <HAL_ADC_MspInit+0xe4>)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e50:	bf00      	nop
 8001e52:	3728      	adds	r7, #40	; 0x28
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40012000 	.word	0x40012000
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	40020000 	.word	0x40020000
 8001e64:	20000258 	.word	0x20000258
 8001e68:	40026410 	.word	0x40026410

08001e6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08c      	sub	sp, #48	; 0x30
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e74:	f107 031c 	add.w	r3, r7, #28
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a3b      	ldr	r2, [pc, #236]	; (8001f78 <HAL_I2C_MspInit+0x10c>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d12d      	bne.n	8001eea <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61bb      	str	r3, [r7, #24]
 8001e92:	4b3a      	ldr	r3, [pc, #232]	; (8001f7c <HAL_I2C_MspInit+0x110>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	4a39      	ldr	r2, [pc, #228]	; (8001f7c <HAL_I2C_MspInit+0x110>)
 8001e98:	f043 0302 	orr.w	r3, r3, #2
 8001e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9e:	4b37      	ldr	r3, [pc, #220]	; (8001f7c <HAL_I2C_MspInit+0x110>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	61bb      	str	r3, [r7, #24]
 8001ea8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = COLOR_LEFT_SCL_Pin|COLOR_LEFT_SDA_Pin;
 8001eaa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001eae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eb0:	2312      	movs	r3, #18
 8001eb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ebc:	2304      	movs	r3, #4
 8001ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec0:	f107 031c 	add.w	r3, r7, #28
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	482e      	ldr	r0, [pc, #184]	; (8001f80 <HAL_I2C_MspInit+0x114>)
 8001ec8:	f001 fbac 	bl	8003624 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]
 8001ed0:	4b2a      	ldr	r3, [pc, #168]	; (8001f7c <HAL_I2C_MspInit+0x110>)
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed4:	4a29      	ldr	r2, [pc, #164]	; (8001f7c <HAL_I2C_MspInit+0x110>)
 8001ed6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001eda:	6413      	str	r3, [r2, #64]	; 0x40
 8001edc:	4b27      	ldr	r3, [pc, #156]	; (8001f7c <HAL_I2C_MspInit+0x110>)
 8001ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ee4:	617b      	str	r3, [r7, #20]
 8001ee6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001ee8:	e041      	b.n	8001f6e <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a25      	ldr	r2, [pc, #148]	; (8001f84 <HAL_I2C_MspInit+0x118>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d13c      	bne.n	8001f6e <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	613b      	str	r3, [r7, #16]
 8001ef8:	4b20      	ldr	r3, [pc, #128]	; (8001f7c <HAL_I2C_MspInit+0x110>)
 8001efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efc:	4a1f      	ldr	r2, [pc, #124]	; (8001f7c <HAL_I2C_MspInit+0x110>)
 8001efe:	f043 0302 	orr.w	r3, r3, #2
 8001f02:	6313      	str	r3, [r2, #48]	; 0x30
 8001f04:	4b1d      	ldr	r3, [pc, #116]	; (8001f7c <HAL_I2C_MspInit+0x110>)
 8001f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	613b      	str	r3, [r7, #16]
 8001f0e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = COLOR_RIGHT_SCL_Pin;
 8001f10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f16:	2312      	movs	r3, #18
 8001f18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001f22:	2304      	movs	r3, #4
 8001f24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(COLOR_RIGHT_SCL_GPIO_Port, &GPIO_InitStruct);
 8001f26:	f107 031c 	add.w	r3, r7, #28
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4814      	ldr	r0, [pc, #80]	; (8001f80 <HAL_I2C_MspInit+0x114>)
 8001f2e:	f001 fb79 	bl	8003624 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = COLOR_RIGHT_SDA_Pin;
 8001f32:	2308      	movs	r3, #8
 8001f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f36:	2312      	movs	r3, #18
 8001f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001f42:	2309      	movs	r3, #9
 8001f44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(COLOR_RIGHT_SDA_GPIO_Port, &GPIO_InitStruct);
 8001f46:	f107 031c 	add.w	r3, r7, #28
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	480c      	ldr	r0, [pc, #48]	; (8001f80 <HAL_I2C_MspInit+0x114>)
 8001f4e:	f001 fb69 	bl	8003624 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	4b09      	ldr	r3, [pc, #36]	; (8001f7c <HAL_I2C_MspInit+0x110>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	4a08      	ldr	r2, [pc, #32]	; (8001f7c <HAL_I2C_MspInit+0x110>)
 8001f5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f60:	6413      	str	r3, [r2, #64]	; 0x40
 8001f62:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <HAL_I2C_MspInit+0x110>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
}
 8001f6e:	bf00      	nop
 8001f70:	3730      	adds	r7, #48	; 0x30
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40005400 	.word	0x40005400
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	40020400 	.word	0x40020400
 8001f84:	40005800 	.word	0x40005800

08001f88 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a15      	ldr	r2, [pc, #84]	; (8001fec <HAL_TIM_PWM_MspInit+0x64>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d10e      	bne.n	8001fb8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	4b14      	ldr	r3, [pc, #80]	; (8001ff0 <HAL_TIM_PWM_MspInit+0x68>)
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa2:	4a13      	ldr	r2, [pc, #76]	; (8001ff0 <HAL_TIM_PWM_MspInit+0x68>)
 8001fa4:	f043 0301 	orr.w	r3, r3, #1
 8001fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8001faa:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <HAL_TIM_PWM_MspInit+0x68>)
 8001fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001fb6:	e012      	b.n	8001fde <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a0d      	ldr	r2, [pc, #52]	; (8001ff4 <HAL_TIM_PWM_MspInit+0x6c>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d10d      	bne.n	8001fde <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60bb      	str	r3, [r7, #8]
 8001fc6:	4b0a      	ldr	r3, [pc, #40]	; (8001ff0 <HAL_TIM_PWM_MspInit+0x68>)
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fca:	4a09      	ldr	r2, [pc, #36]	; (8001ff0 <HAL_TIM_PWM_MspInit+0x68>)
 8001fcc:	f043 0302 	orr.w	r3, r3, #2
 8001fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd2:	4b07      	ldr	r3, [pc, #28]	; (8001ff0 <HAL_TIM_PWM_MspInit+0x68>)
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	60bb      	str	r3, [r7, #8]
 8001fdc:	68bb      	ldr	r3, [r7, #8]
}
 8001fde:	bf00      	nop
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	40010000 	.word	0x40010000
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	40000400 	.word	0x40000400

08001ff8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08a      	sub	sp, #40	; 0x28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002000:	f107 0314 	add.w	r3, r7, #20
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	605a      	str	r2, [r3, #4]
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	60da      	str	r2, [r3, #12]
 800200e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a19      	ldr	r2, [pc, #100]	; (800207c <HAL_TIM_Encoder_MspInit+0x84>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d12b      	bne.n	8002072 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	613b      	str	r3, [r7, #16]
 800201e:	4b18      	ldr	r3, [pc, #96]	; (8002080 <HAL_TIM_Encoder_MspInit+0x88>)
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	4a17      	ldr	r2, [pc, #92]	; (8002080 <HAL_TIM_Encoder_MspInit+0x88>)
 8002024:	f043 0304 	orr.w	r3, r3, #4
 8002028:	6413      	str	r3, [r2, #64]	; 0x40
 800202a:	4b15      	ldr	r3, [pc, #84]	; (8002080 <HAL_TIM_Encoder_MspInit+0x88>)
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	f003 0304 	and.w	r3, r3, #4
 8002032:	613b      	str	r3, [r7, #16]
 8002034:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	4b11      	ldr	r3, [pc, #68]	; (8002080 <HAL_TIM_Encoder_MspInit+0x88>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	4a10      	ldr	r2, [pc, #64]	; (8002080 <HAL_TIM_Encoder_MspInit+0x88>)
 8002040:	f043 0302 	orr.w	r3, r3, #2
 8002044:	6313      	str	r3, [r2, #48]	; 0x30
 8002046:	4b0e      	ldr	r3, [pc, #56]	; (8002080 <HAL_TIM_Encoder_MspInit+0x88>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002052:	23c0      	movs	r3, #192	; 0xc0
 8002054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002056:	2302      	movs	r3, #2
 8002058:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	2300      	movs	r3, #0
 800205c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205e:	2300      	movs	r3, #0
 8002060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002062:	2302      	movs	r3, #2
 8002064:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002066:	f107 0314 	add.w	r3, r7, #20
 800206a:	4619      	mov	r1, r3
 800206c:	4805      	ldr	r0, [pc, #20]	; (8002084 <HAL_TIM_Encoder_MspInit+0x8c>)
 800206e:	f001 fad9 	bl	8003624 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002072:	bf00      	nop
 8002074:	3728      	adds	r7, #40	; 0x28
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40000800 	.word	0x40000800
 8002080:	40023800 	.word	0x40023800
 8002084:	40020400 	.word	0x40020400

08002088 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b08a      	sub	sp, #40	; 0x28
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002090:	f107 0314 	add.w	r3, r7, #20
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]
 800209e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a24      	ldr	r2, [pc, #144]	; (8002138 <HAL_TIM_MspPostInit+0xb0>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d11f      	bne.n	80020ea <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	613b      	str	r3, [r7, #16]
 80020ae:	4b23      	ldr	r3, [pc, #140]	; (800213c <HAL_TIM_MspPostInit+0xb4>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	4a22      	ldr	r2, [pc, #136]	; (800213c <HAL_TIM_MspPostInit+0xb4>)
 80020b4:	f043 0301 	orr.w	r3, r3, #1
 80020b8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ba:	4b20      	ldr	r3, [pc, #128]	; (800213c <HAL_TIM_MspPostInit+0xb4>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	613b      	str	r3, [r7, #16]
 80020c4:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_LEFT_A_Pin|MOTOR_LEFT_B_Pin|MOTOR_RIGHT_A_Pin|MOTOR_RIGHT_B_Pin;
 80020c6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80020ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020cc:	2302      	movs	r3, #2
 80020ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d4:	2300      	movs	r3, #0
 80020d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020d8:	2301      	movs	r3, #1
 80020da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020dc:	f107 0314 	add.w	r3, r7, #20
 80020e0:	4619      	mov	r1, r3
 80020e2:	4817      	ldr	r0, [pc, #92]	; (8002140 <HAL_TIM_MspPostInit+0xb8>)
 80020e4:	f001 fa9e 	bl	8003624 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80020e8:	e022      	b.n	8002130 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a15      	ldr	r2, [pc, #84]	; (8002144 <HAL_TIM_MspPostInit+0xbc>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d11d      	bne.n	8002130 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020f4:	2300      	movs	r3, #0
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	4b10      	ldr	r3, [pc, #64]	; (800213c <HAL_TIM_MspPostInit+0xb4>)
 80020fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fc:	4a0f      	ldr	r2, [pc, #60]	; (800213c <HAL_TIM_MspPostInit+0xb4>)
 80020fe:	f043 0302 	orr.w	r3, r3, #2
 8002102:	6313      	str	r3, [r2, #48]	; 0x30
 8002104:	4b0d      	ldr	r3, [pc, #52]	; (800213c <HAL_TIM_MspPostInit+0xb4>)
 8002106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002110:	2303      	movs	r3, #3
 8002112:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002114:	2302      	movs	r3, #2
 8002116:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	2300      	movs	r3, #0
 800211a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211c:	2300      	movs	r3, #0
 800211e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002120:	2302      	movs	r3, #2
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002124:	f107 0314 	add.w	r3, r7, #20
 8002128:	4619      	mov	r1, r3
 800212a:	4807      	ldr	r0, [pc, #28]	; (8002148 <HAL_TIM_MspPostInit+0xc0>)
 800212c:	f001 fa7a 	bl	8003624 <HAL_GPIO_Init>
}
 8002130:	bf00      	nop
 8002132:	3728      	adds	r7, #40	; 0x28
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40010000 	.word	0x40010000
 800213c:	40023800 	.word	0x40023800
 8002140:	40020000 	.word	0x40020000
 8002144:	40000400 	.word	0x40000400
 8002148:	40020400 	.word	0x40020400

0800214c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b08a      	sub	sp, #40	; 0x28
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002154:	f107 0314 	add.w	r3, r7, #20
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	605a      	str	r2, [r3, #4]
 800215e:	609a      	str	r2, [r3, #8]
 8002160:	60da      	str	r2, [r3, #12]
 8002162:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a19      	ldr	r2, [pc, #100]	; (80021d0 <HAL_UART_MspInit+0x84>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d12b      	bne.n	80021c6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	613b      	str	r3, [r7, #16]
 8002172:	4b18      	ldr	r3, [pc, #96]	; (80021d4 <HAL_UART_MspInit+0x88>)
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	4a17      	ldr	r2, [pc, #92]	; (80021d4 <HAL_UART_MspInit+0x88>)
 8002178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800217c:	6413      	str	r3, [r2, #64]	; 0x40
 800217e:	4b15      	ldr	r3, [pc, #84]	; (80021d4 <HAL_UART_MspInit+0x88>)
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002186:	613b      	str	r3, [r7, #16]
 8002188:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <HAL_UART_MspInit+0x88>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	4a10      	ldr	r2, [pc, #64]	; (80021d4 <HAL_UART_MspInit+0x88>)
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	6313      	str	r3, [r2, #48]	; 0x30
 800219a:	4b0e      	ldr	r3, [pc, #56]	; (80021d4 <HAL_UART_MspInit+0x88>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80021a6:	230c      	movs	r3, #12
 80021a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021aa:	2302      	movs	r3, #2
 80021ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b2:	2303      	movs	r3, #3
 80021b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021b6:	2307      	movs	r3, #7
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ba:	f107 0314 	add.w	r3, r7, #20
 80021be:	4619      	mov	r1, r3
 80021c0:	4805      	ldr	r0, [pc, #20]	; (80021d8 <HAL_UART_MspInit+0x8c>)
 80021c2:	f001 fa2f 	bl	8003624 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80021c6:	bf00      	nop
 80021c8:	3728      	adds	r7, #40	; 0x28
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40004400 	.word	0x40004400
 80021d4:	40023800 	.word	0x40023800
 80021d8:	40020000 	.word	0x40020000

080021dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021e0:	e7fe      	b.n	80021e0 <NMI_Handler+0x4>

080021e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021e2:	b480      	push	{r7}
 80021e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021e6:	e7fe      	b.n	80021e6 <HardFault_Handler+0x4>

080021e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021ec:	e7fe      	b.n	80021ec <MemManage_Handler+0x4>

080021ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021ee:	b480      	push	{r7}
 80021f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021f2:	e7fe      	b.n	80021f2 <BusFault_Handler+0x4>

080021f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021f8:	e7fe      	b.n	80021f8 <UsageFault_Handler+0x4>

080021fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021fa:	b480      	push	{r7}
 80021fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021fe:	bf00      	nop
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002216:	b480      	push	{r7}
 8002218:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800221a:	bf00      	nop
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002228:	f000 f93e 	bl	80024a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800222c:	bf00      	nop
 800222e:	bd80      	pop	{r7, pc}

08002230 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002234:	4802      	ldr	r0, [pc, #8]	; (8002240 <DMA2_Stream0_IRQHandler+0x10>)
 8002236:	f000 ff8b 	bl	8003150 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	20000258 	.word	0x20000258

08002244 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002250:	2300      	movs	r3, #0
 8002252:	617b      	str	r3, [r7, #20]
 8002254:	e00a      	b.n	800226c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002256:	f3af 8000 	nop.w
 800225a:	4601      	mov	r1, r0
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	1c5a      	adds	r2, r3, #1
 8002260:	60ba      	str	r2, [r7, #8]
 8002262:	b2ca      	uxtb	r2, r1
 8002264:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	3301      	adds	r3, #1
 800226a:	617b      	str	r3, [r7, #20]
 800226c:	697a      	ldr	r2, [r7, #20]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	429a      	cmp	r2, r3
 8002272:	dbf0      	blt.n	8002256 <_read+0x12>
	}

return len;
 8002274:	687b      	ldr	r3, [r7, #4]
}
 8002276:	4618      	mov	r0, r3
 8002278:	3718      	adds	r7, #24
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b086      	sub	sp, #24
 8002282:	af00      	add	r7, sp, #0
 8002284:	60f8      	str	r0, [r7, #12]
 8002286:	60b9      	str	r1, [r7, #8]
 8002288:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800228a:	2300      	movs	r3, #0
 800228c:	617b      	str	r3, [r7, #20]
 800228e:	e009      	b.n	80022a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	1c5a      	adds	r2, r3, #1
 8002294:	60ba      	str	r2, [r7, #8]
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	4618      	mov	r0, r3
 800229a:	f7fe ff01 	bl	80010a0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	3301      	adds	r3, #1
 80022a2:	617b      	str	r3, [r7, #20]
 80022a4:	697a      	ldr	r2, [r7, #20]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	dbf1      	blt.n	8002290 <_write+0x12>
	}
	return len;
 80022ac:	687b      	ldr	r3, [r7, #4]
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3718      	adds	r7, #24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <_close>:

int _close(int file)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
	return -1;
 80022be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
 80022d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022de:	605a      	str	r2, [r3, #4]
	return 0;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <_isatty>:

int _isatty(int file)
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
	return 1;
 80022f6:	2301      	movs	r3, #1
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
	return 0;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3714      	adds	r7, #20
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
	...

08002320 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002328:	4a14      	ldr	r2, [pc, #80]	; (800237c <_sbrk+0x5c>)
 800232a:	4b15      	ldr	r3, [pc, #84]	; (8002380 <_sbrk+0x60>)
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002334:	4b13      	ldr	r3, [pc, #76]	; (8002384 <_sbrk+0x64>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d102      	bne.n	8002342 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800233c:	4b11      	ldr	r3, [pc, #68]	; (8002384 <_sbrk+0x64>)
 800233e:	4a12      	ldr	r2, [pc, #72]	; (8002388 <_sbrk+0x68>)
 8002340:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002342:	4b10      	ldr	r3, [pc, #64]	; (8002384 <_sbrk+0x64>)
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4413      	add	r3, r2
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	429a      	cmp	r2, r3
 800234e:	d207      	bcs.n	8002360 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002350:	f004 f93a 	bl	80065c8 <__errno>
 8002354:	4603      	mov	r3, r0
 8002356:	220c      	movs	r2, #12
 8002358:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800235a:	f04f 33ff 	mov.w	r3, #4294967295
 800235e:	e009      	b.n	8002374 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002360:	4b08      	ldr	r3, [pc, #32]	; (8002384 <_sbrk+0x64>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002366:	4b07      	ldr	r3, [pc, #28]	; (8002384 <_sbrk+0x64>)
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4413      	add	r3, r2
 800236e:	4a05      	ldr	r2, [pc, #20]	; (8002384 <_sbrk+0x64>)
 8002370:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002372:	68fb      	ldr	r3, [r7, #12]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	20020000 	.word	0x20020000
 8002380:	00000400 	.word	0x00000400
 8002384:	20000090 	.word	0x20000090
 8002388:	20000370 	.word	0x20000370

0800238c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002390:	4b06      	ldr	r3, [pc, #24]	; (80023ac <SystemInit+0x20>)
 8002392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002396:	4a05      	ldr	r2, [pc, #20]	; (80023ac <SystemInit+0x20>)
 8002398:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800239c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023a0:	bf00      	nop
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	e000ed00 	.word	0xe000ed00

080023b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80023b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023b4:	480d      	ldr	r0, [pc, #52]	; (80023ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023b6:	490e      	ldr	r1, [pc, #56]	; (80023f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023b8:	4a0e      	ldr	r2, [pc, #56]	; (80023f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023bc:	e002      	b.n	80023c4 <LoopCopyDataInit>

080023be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023c2:	3304      	adds	r3, #4

080023c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023c8:	d3f9      	bcc.n	80023be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ca:	4a0b      	ldr	r2, [pc, #44]	; (80023f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023cc:	4c0b      	ldr	r4, [pc, #44]	; (80023fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80023ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023d0:	e001      	b.n	80023d6 <LoopFillZerobss>

080023d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023d4:	3204      	adds	r2, #4

080023d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023d8:	d3fb      	bcc.n	80023d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80023da:	f7ff ffd7 	bl	800238c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023de:	f004 f8f9 	bl	80065d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023e2:	f7fe fe75 	bl	80010d0 <main>
  bx  lr    
 80023e6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80023e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023f0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80023f4:	08007758 	.word	0x08007758
  ldr r2, =_sbss
 80023f8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80023fc:	2000036c 	.word	0x2000036c

08002400 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002400:	e7fe      	b.n	8002400 <ADC_IRQHandler>
	...

08002404 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002408:	4b0e      	ldr	r3, [pc, #56]	; (8002444 <HAL_Init+0x40>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a0d      	ldr	r2, [pc, #52]	; (8002444 <HAL_Init+0x40>)
 800240e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002412:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002414:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <HAL_Init+0x40>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a0a      	ldr	r2, [pc, #40]	; (8002444 <HAL_Init+0x40>)
 800241a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800241e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002420:	4b08      	ldr	r3, [pc, #32]	; (8002444 <HAL_Init+0x40>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a07      	ldr	r2, [pc, #28]	; (8002444 <HAL_Init+0x40>)
 8002426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800242a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800242c:	2003      	movs	r0, #3
 800242e:	f000 fd47 	bl	8002ec0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002432:	200f      	movs	r0, #15
 8002434:	f000 f808 	bl	8002448 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002438:	f7ff fc7a 	bl	8001d30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40023c00 	.word	0x40023c00

08002448 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002450:	4b12      	ldr	r3, [pc, #72]	; (800249c <HAL_InitTick+0x54>)
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	4b12      	ldr	r3, [pc, #72]	; (80024a0 <HAL_InitTick+0x58>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	4619      	mov	r1, r3
 800245a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800245e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002462:	fbb2 f3f3 	udiv	r3, r2, r3
 8002466:	4618      	mov	r0, r3
 8002468:	f000 fd5f 	bl	8002f2a <HAL_SYSTICK_Config>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e00e      	b.n	8002494 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b0f      	cmp	r3, #15
 800247a:	d80a      	bhi.n	8002492 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800247c:	2200      	movs	r2, #0
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	f04f 30ff 	mov.w	r0, #4294967295
 8002484:	f000 fd27 	bl	8002ed6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002488:	4a06      	ldr	r2, [pc, #24]	; (80024a4 <HAL_InitTick+0x5c>)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800248e:	2300      	movs	r3, #0
 8002490:	e000      	b.n	8002494 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
}
 8002494:	4618      	mov	r0, r3
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	20000000 	.word	0x20000000
 80024a0:	20000008 	.word	0x20000008
 80024a4:	20000004 	.word	0x20000004

080024a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024ac:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <HAL_IncTick+0x20>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	461a      	mov	r2, r3
 80024b2:	4b06      	ldr	r3, [pc, #24]	; (80024cc <HAL_IncTick+0x24>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4413      	add	r3, r2
 80024b8:	4a04      	ldr	r2, [pc, #16]	; (80024cc <HAL_IncTick+0x24>)
 80024ba:	6013      	str	r3, [r2, #0]
}
 80024bc:	bf00      	nop
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	20000008 	.word	0x20000008
 80024cc:	20000358 	.word	0x20000358

080024d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  return uwTick;
 80024d4:	4b03      	ldr	r3, [pc, #12]	; (80024e4 <HAL_GetTick+0x14>)
 80024d6:	681b      	ldr	r3, [r3, #0]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	20000358 	.word	0x20000358

080024e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024f0:	f7ff ffee 	bl	80024d0 <HAL_GetTick>
 80024f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002500:	d005      	beq.n	800250e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002502:	4b0a      	ldr	r3, [pc, #40]	; (800252c <HAL_Delay+0x44>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	461a      	mov	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4413      	add	r3, r2
 800250c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800250e:	bf00      	nop
 8002510:	f7ff ffde 	bl	80024d0 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	429a      	cmp	r2, r3
 800251e:	d8f7      	bhi.n	8002510 <HAL_Delay+0x28>
  {
  }
}
 8002520:	bf00      	nop
 8002522:	bf00      	nop
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	20000008 	.word	0x20000008

08002530 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002538:	2300      	movs	r3, #0
 800253a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e033      	b.n	80025ae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	2b00      	cmp	r3, #0
 800254c:	d109      	bne.n	8002562 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f7ff fc16 	bl	8001d80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	f003 0310 	and.w	r3, r3, #16
 800256a:	2b00      	cmp	r3, #0
 800256c:	d118      	bne.n	80025a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002576:	f023 0302 	bic.w	r3, r3, #2
 800257a:	f043 0202 	orr.w	r2, r3, #2
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 fa4e 	bl	8002a24 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	f023 0303 	bic.w	r3, r3, #3
 8002596:	f043 0201 	orr.w	r2, r3, #1
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	641a      	str	r2, [r3, #64]	; 0x40
 800259e:	e001      	b.n	80025a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80025ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
	...

080025b8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d101      	bne.n	80025d6 <HAL_ADC_Start_DMA+0x1e>
 80025d2:	2302      	movs	r3, #2
 80025d4:	e0ce      	b.n	8002774 <HAL_ADC_Start_DMA+0x1bc>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d018      	beq.n	800261e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689a      	ldr	r2, [r3, #8]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 0201 	orr.w	r2, r2, #1
 80025fa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025fc:	4b5f      	ldr	r3, [pc, #380]	; (800277c <HAL_ADC_Start_DMA+0x1c4>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a5f      	ldr	r2, [pc, #380]	; (8002780 <HAL_ADC_Start_DMA+0x1c8>)
 8002602:	fba2 2303 	umull	r2, r3, r2, r3
 8002606:	0c9a      	lsrs	r2, r3, #18
 8002608:	4613      	mov	r3, r2
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	4413      	add	r3, r2
 800260e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002610:	e002      	b.n	8002618 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	3b01      	subs	r3, #1
 8002616:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1f9      	bne.n	8002612 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002628:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800262c:	d107      	bne.n	800263e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800263c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	2b01      	cmp	r3, #1
 800264a:	f040 8086 	bne.w	800275a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002656:	f023 0301 	bic.w	r3, r3, #1
 800265a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800266c:	2b00      	cmp	r3, #0
 800266e:	d007      	beq.n	8002680 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002674:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002678:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002684:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800268c:	d106      	bne.n	800269c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002692:	f023 0206 	bic.w	r2, r3, #6
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	645a      	str	r2, [r3, #68]	; 0x44
 800269a:	e002      	b.n	80026a2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026aa:	4b36      	ldr	r3, [pc, #216]	; (8002784 <HAL_ADC_Start_DMA+0x1cc>)
 80026ac:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b2:	4a35      	ldr	r2, [pc, #212]	; (8002788 <HAL_ADC_Start_DMA+0x1d0>)
 80026b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ba:	4a34      	ldr	r2, [pc, #208]	; (800278c <HAL_ADC_Start_DMA+0x1d4>)
 80026bc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c2:	4a33      	ldr	r2, [pc, #204]	; (8002790 <HAL_ADC_Start_DMA+0x1d8>)
 80026c4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80026ce:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80026de:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689a      	ldr	r2, [r3, #8]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026ee:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	334c      	adds	r3, #76	; 0x4c
 80026fa:	4619      	mov	r1, r3
 80026fc:	68ba      	ldr	r2, [r7, #8]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f000 fcce 	bl	80030a0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f003 031f 	and.w	r3, r3, #31
 800270c:	2b00      	cmp	r3, #0
 800270e:	d10f      	bne.n	8002730 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d129      	bne.n	8002772 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800272c:	609a      	str	r2, [r3, #8]
 800272e:	e020      	b.n	8002772 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a17      	ldr	r2, [pc, #92]	; (8002794 <HAL_ADC_Start_DMA+0x1dc>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d11b      	bne.n	8002772 <HAL_ADC_Start_DMA+0x1ba>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d114      	bne.n	8002772 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689a      	ldr	r2, [r3, #8]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002756:	609a      	str	r2, [r3, #8]
 8002758:	e00b      	b.n	8002772 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	f043 0210 	orr.w	r2, r3, #16
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276a:	f043 0201 	orr.w	r2, r3, #1
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3718      	adds	r7, #24
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	20000000 	.word	0x20000000
 8002780:	431bde83 	.word	0x431bde83
 8002784:	40012300 	.word	0x40012300
 8002788:	08002c1d 	.word	0x08002c1d
 800278c:	08002cd7 	.word	0x08002cd7
 8002790:	08002cf3 	.word	0x08002cf3
 8002794:	40012000 	.word	0x40012000

08002798 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d101      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x1c>
 80027d8:	2302      	movs	r3, #2
 80027da:	e113      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x244>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2b09      	cmp	r3, #9
 80027ea:	d925      	bls.n	8002838 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68d9      	ldr	r1, [r3, #12]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	461a      	mov	r2, r3
 80027fa:	4613      	mov	r3, r2
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	4413      	add	r3, r2
 8002800:	3b1e      	subs	r3, #30
 8002802:	2207      	movs	r2, #7
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	43da      	mvns	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	400a      	ands	r2, r1
 8002810:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68d9      	ldr	r1, [r3, #12]
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	b29b      	uxth	r3, r3
 8002822:	4618      	mov	r0, r3
 8002824:	4603      	mov	r3, r0
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	4403      	add	r3, r0
 800282a:	3b1e      	subs	r3, #30
 800282c:	409a      	lsls	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	430a      	orrs	r2, r1
 8002834:	60da      	str	r2, [r3, #12]
 8002836:	e022      	b.n	800287e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6919      	ldr	r1, [r3, #16]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	b29b      	uxth	r3, r3
 8002844:	461a      	mov	r2, r3
 8002846:	4613      	mov	r3, r2
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	4413      	add	r3, r2
 800284c:	2207      	movs	r2, #7
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	43da      	mvns	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	400a      	ands	r2, r1
 800285a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6919      	ldr	r1, [r3, #16]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	689a      	ldr	r2, [r3, #8]
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	b29b      	uxth	r3, r3
 800286c:	4618      	mov	r0, r3
 800286e:	4603      	mov	r3, r0
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	4403      	add	r3, r0
 8002874:	409a      	lsls	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	430a      	orrs	r2, r1
 800287c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b06      	cmp	r3, #6
 8002884:	d824      	bhi.n	80028d0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	4613      	mov	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	3b05      	subs	r3, #5
 8002898:	221f      	movs	r2, #31
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	43da      	mvns	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	400a      	ands	r2, r1
 80028a6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	4618      	mov	r0, r3
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	4613      	mov	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	3b05      	subs	r3, #5
 80028c2:	fa00 f203 	lsl.w	r2, r0, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	635a      	str	r2, [r3, #52]	; 0x34
 80028ce:	e04c      	b.n	800296a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	2b0c      	cmp	r3, #12
 80028d6:	d824      	bhi.n	8002922 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685a      	ldr	r2, [r3, #4]
 80028e2:	4613      	mov	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	3b23      	subs	r3, #35	; 0x23
 80028ea:	221f      	movs	r2, #31
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	43da      	mvns	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	400a      	ands	r2, r1
 80028f8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	b29b      	uxth	r3, r3
 8002906:	4618      	mov	r0, r3
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	4613      	mov	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	3b23      	subs	r3, #35	; 0x23
 8002914:	fa00 f203 	lsl.w	r2, r0, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	430a      	orrs	r2, r1
 800291e:	631a      	str	r2, [r3, #48]	; 0x30
 8002920:	e023      	b.n	800296a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	4613      	mov	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4413      	add	r3, r2
 8002932:	3b41      	subs	r3, #65	; 0x41
 8002934:	221f      	movs	r2, #31
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	43da      	mvns	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	400a      	ands	r2, r1
 8002942:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	b29b      	uxth	r3, r3
 8002950:	4618      	mov	r0, r3
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	4613      	mov	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	3b41      	subs	r3, #65	; 0x41
 800295e:	fa00 f203 	lsl.w	r2, r0, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	430a      	orrs	r2, r1
 8002968:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800296a:	4b29      	ldr	r3, [pc, #164]	; (8002a10 <HAL_ADC_ConfigChannel+0x250>)
 800296c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a28      	ldr	r2, [pc, #160]	; (8002a14 <HAL_ADC_ConfigChannel+0x254>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d10f      	bne.n	8002998 <HAL_ADC_ConfigChannel+0x1d8>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2b12      	cmp	r3, #18
 800297e:	d10b      	bne.n	8002998 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a1d      	ldr	r2, [pc, #116]	; (8002a14 <HAL_ADC_ConfigChannel+0x254>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d12b      	bne.n	80029fa <HAL_ADC_ConfigChannel+0x23a>
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a1c      	ldr	r2, [pc, #112]	; (8002a18 <HAL_ADC_ConfigChannel+0x258>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d003      	beq.n	80029b4 <HAL_ADC_ConfigChannel+0x1f4>
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2b11      	cmp	r3, #17
 80029b2:	d122      	bne.n	80029fa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a11      	ldr	r2, [pc, #68]	; (8002a18 <HAL_ADC_ConfigChannel+0x258>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d111      	bne.n	80029fa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029d6:	4b11      	ldr	r3, [pc, #68]	; (8002a1c <HAL_ADC_ConfigChannel+0x25c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a11      	ldr	r2, [pc, #68]	; (8002a20 <HAL_ADC_ConfigChannel+0x260>)
 80029dc:	fba2 2303 	umull	r2, r3, r2, r3
 80029e0:	0c9a      	lsrs	r2, r3, #18
 80029e2:	4613      	mov	r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	4413      	add	r3, r2
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80029ec:	e002      	b.n	80029f4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	3b01      	subs	r3, #1
 80029f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1f9      	bne.n	80029ee <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3714      	adds	r7, #20
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	40012300 	.word	0x40012300
 8002a14:	40012000 	.word	0x40012000
 8002a18:	10000012 	.word	0x10000012
 8002a1c:	20000000 	.word	0x20000000
 8002a20:	431bde83 	.word	0x431bde83

08002a24 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a2c:	4b79      	ldr	r3, [pc, #484]	; (8002c14 <ADC_Init+0x1f0>)
 8002a2e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	431a      	orrs	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6859      	ldr	r1, [r3, #4]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	021a      	lsls	r2, r3, #8
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002a7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6859      	ldr	r1, [r3, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	689a      	ldr	r2, [r3, #8]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6899      	ldr	r1, [r3, #8]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68da      	ldr	r2, [r3, #12]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab6:	4a58      	ldr	r2, [pc, #352]	; (8002c18 <ADC_Init+0x1f4>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d022      	beq.n	8002b02 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689a      	ldr	r2, [r3, #8]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002aca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6899      	ldr	r1, [r3, #8]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	430a      	orrs	r2, r1
 8002adc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002aec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6899      	ldr	r1, [r3, #8]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	430a      	orrs	r2, r1
 8002afe:	609a      	str	r2, [r3, #8]
 8002b00:	e00f      	b.n	8002b22 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b20:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 0202 	bic.w	r2, r2, #2
 8002b30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6899      	ldr	r1, [r3, #8]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	7e1b      	ldrb	r3, [r3, #24]
 8002b3c:	005a      	lsls	r2, r3, #1
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	430a      	orrs	r2, r1
 8002b44:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d01b      	beq.n	8002b88 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b5e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002b6e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6859      	ldr	r1, [r3, #4]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	035a      	lsls	r2, r3, #13
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	605a      	str	r2, [r3, #4]
 8002b86:	e007      	b.n	8002b98 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b96:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002ba6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	051a      	lsls	r2, r3, #20
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002bcc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	6899      	ldr	r1, [r3, #8]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002bda:	025a      	lsls	r2, r3, #9
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	689a      	ldr	r2, [r3, #8]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bf2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6899      	ldr	r1, [r3, #8]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	029a      	lsls	r2, r3, #10
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	430a      	orrs	r2, r1
 8002c06:	609a      	str	r2, [r3, #8]
}
 8002c08:	bf00      	nop
 8002c0a:	3714      	adds	r7, #20
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	40012300 	.word	0x40012300
 8002c18:	0f000001 	.word	0x0f000001

08002c1c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c28:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d13c      	bne.n	8002cb0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d12b      	bne.n	8002ca8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d127      	bne.n	8002ca8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d006      	beq.n	8002c74 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d119      	bne.n	8002ca8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f022 0220 	bic.w	r2, r2, #32
 8002c82:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d105      	bne.n	8002ca8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	f043 0201 	orr.w	r2, r3, #1
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f7fe f9c3 	bl	8001034 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002cae:	e00e      	b.n	8002cce <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb4:	f003 0310 	and.w	r3, r3, #16
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d003      	beq.n	8002cc4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f7ff fd75 	bl	80027ac <HAL_ADC_ErrorCallback>
}
 8002cc2:	e004      	b.n	8002cce <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	4798      	blx	r3
}
 8002cce:	bf00      	nop
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b084      	sub	sp, #16
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f7ff fd57 	bl	8002798 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cea:	bf00      	nop
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b084      	sub	sp, #16
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfe:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2240      	movs	r2, #64	; 0x40
 8002d04:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0a:	f043 0204 	orr.w	r2, r3, #4
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f7ff fd4a 	bl	80027ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d18:	bf00      	nop
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d30:	4b0c      	ldr	r3, [pc, #48]	; (8002d64 <__NVIC_SetPriorityGrouping+0x44>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d36:	68ba      	ldr	r2, [r7, #8]
 8002d38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d52:	4a04      	ldr	r2, [pc, #16]	; (8002d64 <__NVIC_SetPriorityGrouping+0x44>)
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	60d3      	str	r3, [r2, #12]
}
 8002d58:	bf00      	nop
 8002d5a:	3714      	adds	r7, #20
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	e000ed00 	.word	0xe000ed00

08002d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d6c:	4b04      	ldr	r3, [pc, #16]	; (8002d80 <__NVIC_GetPriorityGrouping+0x18>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	0a1b      	lsrs	r3, r3, #8
 8002d72:	f003 0307 	and.w	r3, r3, #7
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	e000ed00 	.word	0xe000ed00

08002d84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	db0b      	blt.n	8002dae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d96:	79fb      	ldrb	r3, [r7, #7]
 8002d98:	f003 021f 	and.w	r2, r3, #31
 8002d9c:	4907      	ldr	r1, [pc, #28]	; (8002dbc <__NVIC_EnableIRQ+0x38>)
 8002d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da2:	095b      	lsrs	r3, r3, #5
 8002da4:	2001      	movs	r0, #1
 8002da6:	fa00 f202 	lsl.w	r2, r0, r2
 8002daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	e000e100 	.word	0xe000e100

08002dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	6039      	str	r1, [r7, #0]
 8002dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	db0a      	blt.n	8002dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	490c      	ldr	r1, [pc, #48]	; (8002e0c <__NVIC_SetPriority+0x4c>)
 8002dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dde:	0112      	lsls	r2, r2, #4
 8002de0:	b2d2      	uxtb	r2, r2
 8002de2:	440b      	add	r3, r1
 8002de4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002de8:	e00a      	b.n	8002e00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	4908      	ldr	r1, [pc, #32]	; (8002e10 <__NVIC_SetPriority+0x50>)
 8002df0:	79fb      	ldrb	r3, [r7, #7]
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	3b04      	subs	r3, #4
 8002df8:	0112      	lsls	r2, r2, #4
 8002dfa:	b2d2      	uxtb	r2, r2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	761a      	strb	r2, [r3, #24]
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr
 8002e0c:	e000e100 	.word	0xe000e100
 8002e10:	e000ed00 	.word	0xe000ed00

08002e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b089      	sub	sp, #36	; 0x24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	f1c3 0307 	rsb	r3, r3, #7
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	bf28      	it	cs
 8002e32:	2304      	movcs	r3, #4
 8002e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	3304      	adds	r3, #4
 8002e3a:	2b06      	cmp	r3, #6
 8002e3c:	d902      	bls.n	8002e44 <NVIC_EncodePriority+0x30>
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	3b03      	subs	r3, #3
 8002e42:	e000      	b.n	8002e46 <NVIC_EncodePriority+0x32>
 8002e44:	2300      	movs	r3, #0
 8002e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e48:	f04f 32ff 	mov.w	r2, #4294967295
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	43da      	mvns	r2, r3
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	401a      	ands	r2, r3
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	fa01 f303 	lsl.w	r3, r1, r3
 8002e66:	43d9      	mvns	r1, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e6c:	4313      	orrs	r3, r2
         );
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3724      	adds	r7, #36	; 0x24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
	...

08002e7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3b01      	subs	r3, #1
 8002e88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e8c:	d301      	bcc.n	8002e92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e00f      	b.n	8002eb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e92:	4a0a      	ldr	r2, [pc, #40]	; (8002ebc <SysTick_Config+0x40>)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	3b01      	subs	r3, #1
 8002e98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e9a:	210f      	movs	r1, #15
 8002e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002ea0:	f7ff ff8e 	bl	8002dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ea4:	4b05      	ldr	r3, [pc, #20]	; (8002ebc <SysTick_Config+0x40>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eaa:	4b04      	ldr	r3, [pc, #16]	; (8002ebc <SysTick_Config+0x40>)
 8002eac:	2207      	movs	r2, #7
 8002eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	e000e010 	.word	0xe000e010

08002ec0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f7ff ff29 	bl	8002d20 <__NVIC_SetPriorityGrouping>
}
 8002ece:	bf00      	nop
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b086      	sub	sp, #24
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	4603      	mov	r3, r0
 8002ede:	60b9      	str	r1, [r7, #8]
 8002ee0:	607a      	str	r2, [r7, #4]
 8002ee2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ee8:	f7ff ff3e 	bl	8002d68 <__NVIC_GetPriorityGrouping>
 8002eec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	68b9      	ldr	r1, [r7, #8]
 8002ef2:	6978      	ldr	r0, [r7, #20]
 8002ef4:	f7ff ff8e 	bl	8002e14 <NVIC_EncodePriority>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002efe:	4611      	mov	r1, r2
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff ff5d 	bl	8002dc0 <__NVIC_SetPriority>
}
 8002f06:	bf00      	nop
 8002f08:	3718      	adds	r7, #24
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b082      	sub	sp, #8
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	4603      	mov	r3, r0
 8002f16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7ff ff31 	bl	8002d84 <__NVIC_EnableIRQ>
}
 8002f22:	bf00      	nop
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b082      	sub	sp, #8
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f7ff ffa2 	bl	8002e7c <SysTick_Config>
 8002f38:	4603      	mov	r3, r0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
	...

08002f44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f50:	f7ff fabe 	bl	80024d0 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d101      	bne.n	8002f60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e099      	b.n	8003094 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2202      	movs	r2, #2
 8002f64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 0201 	bic.w	r2, r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f80:	e00f      	b.n	8002fa2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f82:	f7ff faa5 	bl	80024d0 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b05      	cmp	r3, #5
 8002f8e:	d908      	bls.n	8002fa2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2220      	movs	r2, #32
 8002f94:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2203      	movs	r2, #3
 8002f9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e078      	b.n	8003094 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1e8      	bne.n	8002f82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	4b38      	ldr	r3, [pc, #224]	; (800309c <HAL_DMA_Init+0x158>)
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fe6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	2b04      	cmp	r3, #4
 8002ffa:	d107      	bne.n	800300c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003004:	4313      	orrs	r3, r2
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	4313      	orrs	r3, r2
 800300a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	f023 0307 	bic.w	r3, r3, #7
 8003022:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	4313      	orrs	r3, r2
 800302c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003032:	2b04      	cmp	r3, #4
 8003034:	d117      	bne.n	8003066 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	4313      	orrs	r3, r2
 800303e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00e      	beq.n	8003066 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 fa6f 	bl	800352c <DMA_CheckFifoParam>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d008      	beq.n	8003066 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2240      	movs	r2, #64	; 0x40
 8003058:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003062:	2301      	movs	r3, #1
 8003064:	e016      	b.n	8003094 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 fa26 	bl	80034c0 <DMA_CalcBaseAndBitshift>
 8003074:	4603      	mov	r3, r0
 8003076:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800307c:	223f      	movs	r2, #63	; 0x3f
 800307e:	409a      	lsls	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3718      	adds	r7, #24
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	f010803f 	.word	0xf010803f

080030a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
 80030ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ae:	2300      	movs	r3, #0
 80030b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d101      	bne.n	80030c6 <HAL_DMA_Start_IT+0x26>
 80030c2:	2302      	movs	r3, #2
 80030c4:	e040      	b.n	8003148 <HAL_DMA_Start_IT+0xa8>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d12f      	bne.n	800313a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2202      	movs	r2, #2
 80030de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	68b9      	ldr	r1, [r7, #8]
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f000 f9b8 	bl	8003464 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f8:	223f      	movs	r2, #63	; 0x3f
 80030fa:	409a      	lsls	r2, r3
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f042 0216 	orr.w	r2, r2, #22
 800310e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003114:	2b00      	cmp	r3, #0
 8003116:	d007      	beq.n	8003128 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f042 0208 	orr.w	r2, r2, #8
 8003126:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f042 0201 	orr.w	r2, r2, #1
 8003136:	601a      	str	r2, [r3, #0]
 8003138:	e005      	b.n	8003146 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003142:	2302      	movs	r3, #2
 8003144:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003146:	7dfb      	ldrb	r3, [r7, #23]
}
 8003148:	4618      	mov	r0, r3
 800314a:	3718      	adds	r7, #24
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003158:	2300      	movs	r3, #0
 800315a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800315c:	4b92      	ldr	r3, [pc, #584]	; (80033a8 <HAL_DMA_IRQHandler+0x258>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a92      	ldr	r2, [pc, #584]	; (80033ac <HAL_DMA_IRQHandler+0x25c>)
 8003162:	fba2 2303 	umull	r2, r3, r2, r3
 8003166:	0a9b      	lsrs	r3, r3, #10
 8003168:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800316e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800317a:	2208      	movs	r2, #8
 800317c:	409a      	lsls	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	4013      	ands	r3, r2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d01a      	beq.n	80031bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	2b00      	cmp	r3, #0
 8003192:	d013      	beq.n	80031bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f022 0204 	bic.w	r2, r2, #4
 80031a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a8:	2208      	movs	r2, #8
 80031aa:	409a      	lsls	r2, r3
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b4:	f043 0201 	orr.w	r2, r3, #1
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c0:	2201      	movs	r2, #1
 80031c2:	409a      	lsls	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	4013      	ands	r3, r2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d012      	beq.n	80031f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00b      	beq.n	80031f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031de:	2201      	movs	r2, #1
 80031e0:	409a      	lsls	r2, r3
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ea:	f043 0202 	orr.w	r2, r3, #2
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f6:	2204      	movs	r2, #4
 80031f8:	409a      	lsls	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	4013      	ands	r3, r2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d012      	beq.n	8003228 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00b      	beq.n	8003228 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003214:	2204      	movs	r2, #4
 8003216:	409a      	lsls	r2, r3
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003220:	f043 0204 	orr.w	r2, r3, #4
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800322c:	2210      	movs	r2, #16
 800322e:	409a      	lsls	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	4013      	ands	r3, r2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d043      	beq.n	80032c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0308 	and.w	r3, r3, #8
 8003242:	2b00      	cmp	r3, #0
 8003244:	d03c      	beq.n	80032c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324a:	2210      	movs	r2, #16
 800324c:	409a      	lsls	r2, r3
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d018      	beq.n	8003292 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d108      	bne.n	8003280 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	2b00      	cmp	r3, #0
 8003274:	d024      	beq.n	80032c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	4798      	blx	r3
 800327e:	e01f      	b.n	80032c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003284:	2b00      	cmp	r3, #0
 8003286:	d01b      	beq.n	80032c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	4798      	blx	r3
 8003290:	e016      	b.n	80032c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800329c:	2b00      	cmp	r3, #0
 800329e:	d107      	bne.n	80032b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 0208 	bic.w	r2, r2, #8
 80032ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d003      	beq.n	80032c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c4:	2220      	movs	r2, #32
 80032c6:	409a      	lsls	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	4013      	ands	r3, r2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 808e 	beq.w	80033ee <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0310 	and.w	r3, r3, #16
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f000 8086 	beq.w	80033ee <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e6:	2220      	movs	r2, #32
 80032e8:	409a      	lsls	r2, r3
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b05      	cmp	r3, #5
 80032f8:	d136      	bne.n	8003368 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 0216 	bic.w	r2, r2, #22
 8003308:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	695a      	ldr	r2, [r3, #20]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003318:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	2b00      	cmp	r3, #0
 8003320:	d103      	bne.n	800332a <HAL_DMA_IRQHandler+0x1da>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003326:	2b00      	cmp	r3, #0
 8003328:	d007      	beq.n	800333a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 0208 	bic.w	r2, r2, #8
 8003338:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333e:	223f      	movs	r2, #63	; 0x3f
 8003340:	409a      	lsls	r2, r3
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800335a:	2b00      	cmp	r3, #0
 800335c:	d07d      	beq.n	800345a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	4798      	blx	r3
        }
        return;
 8003366:	e078      	b.n	800345a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d01c      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d108      	bne.n	8003396 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003388:	2b00      	cmp	r3, #0
 800338a:	d030      	beq.n	80033ee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	4798      	blx	r3
 8003394:	e02b      	b.n	80033ee <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339a:	2b00      	cmp	r3, #0
 800339c:	d027      	beq.n	80033ee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	4798      	blx	r3
 80033a6:	e022      	b.n	80033ee <HAL_DMA_IRQHandler+0x29e>
 80033a8:	20000000 	.word	0x20000000
 80033ac:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10f      	bne.n	80033de <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 0210 	bic.w	r2, r2, #16
 80033cc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d003      	beq.n	80033ee <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d032      	beq.n	800345c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d022      	beq.n	8003448 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2205      	movs	r2, #5
 8003406:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 0201 	bic.w	r2, r2, #1
 8003418:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	3301      	adds	r3, #1
 800341e:	60bb      	str	r3, [r7, #8]
 8003420:	697a      	ldr	r2, [r7, #20]
 8003422:	429a      	cmp	r2, r3
 8003424:	d307      	bcc.n	8003436 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1f2      	bne.n	800341a <HAL_DMA_IRQHandler+0x2ca>
 8003434:	e000      	b.n	8003438 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003436:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800344c:	2b00      	cmp	r3, #0
 800344e:	d005      	beq.n	800345c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	4798      	blx	r3
 8003458:	e000      	b.n	800345c <HAL_DMA_IRQHandler+0x30c>
        return;
 800345a:	bf00      	nop
    }
  }
}
 800345c:	3718      	adds	r7, #24
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop

08003464 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
 8003470:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003480:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	2b40      	cmp	r3, #64	; 0x40
 8003490:	d108      	bne.n	80034a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68ba      	ldr	r2, [r7, #8]
 80034a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80034a2:	e007      	b.n	80034b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68ba      	ldr	r2, [r7, #8]
 80034aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	60da      	str	r2, [r3, #12]
}
 80034b4:	bf00      	nop
 80034b6:	3714      	adds	r7, #20
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	3b10      	subs	r3, #16
 80034d0:	4a14      	ldr	r2, [pc, #80]	; (8003524 <DMA_CalcBaseAndBitshift+0x64>)
 80034d2:	fba2 2303 	umull	r2, r3, r2, r3
 80034d6:	091b      	lsrs	r3, r3, #4
 80034d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80034da:	4a13      	ldr	r2, [pc, #76]	; (8003528 <DMA_CalcBaseAndBitshift+0x68>)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4413      	add	r3, r2
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	461a      	mov	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2b03      	cmp	r3, #3
 80034ec:	d909      	bls.n	8003502 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034f6:	f023 0303 	bic.w	r3, r3, #3
 80034fa:	1d1a      	adds	r2, r3, #4
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	659a      	str	r2, [r3, #88]	; 0x58
 8003500:	e007      	b.n	8003512 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800350a:	f023 0303 	bic.w	r3, r3, #3
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003516:	4618      	mov	r0, r3
 8003518:	3714      	adds	r7, #20
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	aaaaaaab 	.word	0xaaaaaaab
 8003528:	080076a8 	.word	0x080076a8

0800352c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003534:	2300      	movs	r3, #0
 8003536:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d11f      	bne.n	8003586 <DMA_CheckFifoParam+0x5a>
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	2b03      	cmp	r3, #3
 800354a:	d856      	bhi.n	80035fa <DMA_CheckFifoParam+0xce>
 800354c:	a201      	add	r2, pc, #4	; (adr r2, 8003554 <DMA_CheckFifoParam+0x28>)
 800354e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003552:	bf00      	nop
 8003554:	08003565 	.word	0x08003565
 8003558:	08003577 	.word	0x08003577
 800355c:	08003565 	.word	0x08003565
 8003560:	080035fb 	.word	0x080035fb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003568:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d046      	beq.n	80035fe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003574:	e043      	b.n	80035fe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800357e:	d140      	bne.n	8003602 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003584:	e03d      	b.n	8003602 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800358e:	d121      	bne.n	80035d4 <DMA_CheckFifoParam+0xa8>
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	2b03      	cmp	r3, #3
 8003594:	d837      	bhi.n	8003606 <DMA_CheckFifoParam+0xda>
 8003596:	a201      	add	r2, pc, #4	; (adr r2, 800359c <DMA_CheckFifoParam+0x70>)
 8003598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800359c:	080035ad 	.word	0x080035ad
 80035a0:	080035b3 	.word	0x080035b3
 80035a4:	080035ad 	.word	0x080035ad
 80035a8:	080035c5 	.word	0x080035c5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	73fb      	strb	r3, [r7, #15]
      break;
 80035b0:	e030      	b.n	8003614 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d025      	beq.n	800360a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035c2:	e022      	b.n	800360a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035cc:	d11f      	bne.n	800360e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80035d2:	e01c      	b.n	800360e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d903      	bls.n	80035e2 <DMA_CheckFifoParam+0xb6>
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	2b03      	cmp	r3, #3
 80035de:	d003      	beq.n	80035e8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80035e0:	e018      	b.n	8003614 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	73fb      	strb	r3, [r7, #15]
      break;
 80035e6:	e015      	b.n	8003614 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00e      	beq.n	8003612 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	73fb      	strb	r3, [r7, #15]
      break;
 80035f8:	e00b      	b.n	8003612 <DMA_CheckFifoParam+0xe6>
      break;
 80035fa:	bf00      	nop
 80035fc:	e00a      	b.n	8003614 <DMA_CheckFifoParam+0xe8>
      break;
 80035fe:	bf00      	nop
 8003600:	e008      	b.n	8003614 <DMA_CheckFifoParam+0xe8>
      break;
 8003602:	bf00      	nop
 8003604:	e006      	b.n	8003614 <DMA_CheckFifoParam+0xe8>
      break;
 8003606:	bf00      	nop
 8003608:	e004      	b.n	8003614 <DMA_CheckFifoParam+0xe8>
      break;
 800360a:	bf00      	nop
 800360c:	e002      	b.n	8003614 <DMA_CheckFifoParam+0xe8>
      break;   
 800360e:	bf00      	nop
 8003610:	e000      	b.n	8003614 <DMA_CheckFifoParam+0xe8>
      break;
 8003612:	bf00      	nop
    }
  } 
  
  return status; 
 8003614:	7bfb      	ldrb	r3, [r7, #15]
}
 8003616:	4618      	mov	r0, r3
 8003618:	3714      	adds	r7, #20
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop

08003624 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003624:	b480      	push	{r7}
 8003626:	b089      	sub	sp, #36	; 0x24
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800362e:	2300      	movs	r3, #0
 8003630:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003632:	2300      	movs	r3, #0
 8003634:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003636:	2300      	movs	r3, #0
 8003638:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800363a:	2300      	movs	r3, #0
 800363c:	61fb      	str	r3, [r7, #28]
 800363e:	e159      	b.n	80038f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003640:	2201      	movs	r2, #1
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	4013      	ands	r3, r2
 8003652:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	429a      	cmp	r2, r3
 800365a:	f040 8148 	bne.w	80038ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f003 0303 	and.w	r3, r3, #3
 8003666:	2b01      	cmp	r3, #1
 8003668:	d005      	beq.n	8003676 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003672:	2b02      	cmp	r3, #2
 8003674:	d130      	bne.n	80036d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	2203      	movs	r2, #3
 8003682:	fa02 f303 	lsl.w	r3, r2, r3
 8003686:	43db      	mvns	r3, r3
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	4013      	ands	r3, r2
 800368c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	68da      	ldr	r2, [r3, #12]
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	fa02 f303 	lsl.w	r3, r2, r3
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	4313      	orrs	r3, r2
 800369e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036ac:	2201      	movs	r2, #1
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	fa02 f303 	lsl.w	r3, r2, r3
 80036b4:	43db      	mvns	r3, r3
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	4013      	ands	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	091b      	lsrs	r3, r3, #4
 80036c2:	f003 0201 	and.w	r2, r3, #1
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f003 0303 	and.w	r3, r3, #3
 80036e0:	2b03      	cmp	r3, #3
 80036e2:	d017      	beq.n	8003714 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	2203      	movs	r2, #3
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	43db      	mvns	r3, r3
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	4013      	ands	r3, r2
 80036fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	689a      	ldr	r2, [r3, #8]
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	4313      	orrs	r3, r2
 800370c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f003 0303 	and.w	r3, r3, #3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d123      	bne.n	8003768 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	08da      	lsrs	r2, r3, #3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3208      	adds	r2, #8
 8003728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800372c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	f003 0307 	and.w	r3, r3, #7
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	220f      	movs	r2, #15
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	43db      	mvns	r3, r3
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	4013      	ands	r3, r2
 8003742:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	691a      	ldr	r2, [r3, #16]
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	4313      	orrs	r3, r2
 8003758:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	08da      	lsrs	r2, r3, #3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	3208      	adds	r2, #8
 8003762:	69b9      	ldr	r1, [r7, #24]
 8003764:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	2203      	movs	r2, #3
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	43db      	mvns	r3, r3
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	4013      	ands	r3, r2
 800377e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f003 0203 	and.w	r2, r3, #3
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	4313      	orrs	r3, r2
 8003794:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 80a2 	beq.w	80038ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037aa:	2300      	movs	r3, #0
 80037ac:	60fb      	str	r3, [r7, #12]
 80037ae:	4b57      	ldr	r3, [pc, #348]	; (800390c <HAL_GPIO_Init+0x2e8>)
 80037b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b2:	4a56      	ldr	r2, [pc, #344]	; (800390c <HAL_GPIO_Init+0x2e8>)
 80037b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037b8:	6453      	str	r3, [r2, #68]	; 0x44
 80037ba:	4b54      	ldr	r3, [pc, #336]	; (800390c <HAL_GPIO_Init+0x2e8>)
 80037bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037c2:	60fb      	str	r3, [r7, #12]
 80037c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037c6:	4a52      	ldr	r2, [pc, #328]	; (8003910 <HAL_GPIO_Init+0x2ec>)
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	089b      	lsrs	r3, r3, #2
 80037cc:	3302      	adds	r3, #2
 80037ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	f003 0303 	and.w	r3, r3, #3
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	220f      	movs	r2, #15
 80037de:	fa02 f303 	lsl.w	r3, r2, r3
 80037e2:	43db      	mvns	r3, r3
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	4013      	ands	r3, r2
 80037e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a49      	ldr	r2, [pc, #292]	; (8003914 <HAL_GPIO_Init+0x2f0>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d019      	beq.n	8003826 <HAL_GPIO_Init+0x202>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a48      	ldr	r2, [pc, #288]	; (8003918 <HAL_GPIO_Init+0x2f4>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d013      	beq.n	8003822 <HAL_GPIO_Init+0x1fe>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a47      	ldr	r2, [pc, #284]	; (800391c <HAL_GPIO_Init+0x2f8>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d00d      	beq.n	800381e <HAL_GPIO_Init+0x1fa>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a46      	ldr	r2, [pc, #280]	; (8003920 <HAL_GPIO_Init+0x2fc>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d007      	beq.n	800381a <HAL_GPIO_Init+0x1f6>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a45      	ldr	r2, [pc, #276]	; (8003924 <HAL_GPIO_Init+0x300>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d101      	bne.n	8003816 <HAL_GPIO_Init+0x1f2>
 8003812:	2304      	movs	r3, #4
 8003814:	e008      	b.n	8003828 <HAL_GPIO_Init+0x204>
 8003816:	2307      	movs	r3, #7
 8003818:	e006      	b.n	8003828 <HAL_GPIO_Init+0x204>
 800381a:	2303      	movs	r3, #3
 800381c:	e004      	b.n	8003828 <HAL_GPIO_Init+0x204>
 800381e:	2302      	movs	r3, #2
 8003820:	e002      	b.n	8003828 <HAL_GPIO_Init+0x204>
 8003822:	2301      	movs	r3, #1
 8003824:	e000      	b.n	8003828 <HAL_GPIO_Init+0x204>
 8003826:	2300      	movs	r3, #0
 8003828:	69fa      	ldr	r2, [r7, #28]
 800382a:	f002 0203 	and.w	r2, r2, #3
 800382e:	0092      	lsls	r2, r2, #2
 8003830:	4093      	lsls	r3, r2
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	4313      	orrs	r3, r2
 8003836:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003838:	4935      	ldr	r1, [pc, #212]	; (8003910 <HAL_GPIO_Init+0x2ec>)
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	089b      	lsrs	r3, r3, #2
 800383e:	3302      	adds	r3, #2
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003846:	4b38      	ldr	r3, [pc, #224]	; (8003928 <HAL_GPIO_Init+0x304>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	43db      	mvns	r3, r3
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	4013      	ands	r3, r2
 8003854:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	4313      	orrs	r3, r2
 8003868:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800386a:	4a2f      	ldr	r2, [pc, #188]	; (8003928 <HAL_GPIO_Init+0x304>)
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003870:	4b2d      	ldr	r3, [pc, #180]	; (8003928 <HAL_GPIO_Init+0x304>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	43db      	mvns	r3, r3
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	4013      	ands	r3, r2
 800387e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d003      	beq.n	8003894 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	4313      	orrs	r3, r2
 8003892:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003894:	4a24      	ldr	r2, [pc, #144]	; (8003928 <HAL_GPIO_Init+0x304>)
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800389a:	4b23      	ldr	r3, [pc, #140]	; (8003928 <HAL_GPIO_Init+0x304>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	43db      	mvns	r3, r3
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	4013      	ands	r3, r2
 80038a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038be:	4a1a      	ldr	r2, [pc, #104]	; (8003928 <HAL_GPIO_Init+0x304>)
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038c4:	4b18      	ldr	r3, [pc, #96]	; (8003928 <HAL_GPIO_Init+0x304>)
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	43db      	mvns	r3, r3
 80038ce:	69ba      	ldr	r2, [r7, #24]
 80038d0:	4013      	ands	r3, r2
 80038d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d003      	beq.n	80038e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038e8:	4a0f      	ldr	r2, [pc, #60]	; (8003928 <HAL_GPIO_Init+0x304>)
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	3301      	adds	r3, #1
 80038f2:	61fb      	str	r3, [r7, #28]
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	2b0f      	cmp	r3, #15
 80038f8:	f67f aea2 	bls.w	8003640 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038fc:	bf00      	nop
 80038fe:	bf00      	nop
 8003900:	3724      	adds	r7, #36	; 0x24
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	40023800 	.word	0x40023800
 8003910:	40013800 	.word	0x40013800
 8003914:	40020000 	.word	0x40020000
 8003918:	40020400 	.word	0x40020400
 800391c:	40020800 	.word	0x40020800
 8003920:	40020c00 	.word	0x40020c00
 8003924:	40021000 	.word	0x40021000
 8003928:	40013c00 	.word	0x40013c00

0800392c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	460b      	mov	r3, r1
 8003936:	807b      	strh	r3, [r7, #2]
 8003938:	4613      	mov	r3, r2
 800393a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800393c:	787b      	ldrb	r3, [r7, #1]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003942:	887a      	ldrh	r2, [r7, #2]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003948:	e003      	b.n	8003952 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800394a:	887b      	ldrh	r3, [r7, #2]
 800394c:	041a      	lsls	r2, r3, #16
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	619a      	str	r2, [r3, #24]
}
 8003952:	bf00      	nop
 8003954:	370c      	adds	r7, #12
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
	...

08003960 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e12b      	b.n	8003bca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d106      	bne.n	800398c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7fe fa70 	bl	8001e6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2224      	movs	r2, #36	; 0x24
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 0201 	bic.w	r2, r2, #1
 80039a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039c4:	f001 fcda 	bl	800537c <HAL_RCC_GetPCLK1Freq>
 80039c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	4a81      	ldr	r2, [pc, #516]	; (8003bd4 <HAL_I2C_Init+0x274>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d807      	bhi.n	80039e4 <HAL_I2C_Init+0x84>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	4a80      	ldr	r2, [pc, #512]	; (8003bd8 <HAL_I2C_Init+0x278>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	bf94      	ite	ls
 80039dc:	2301      	movls	r3, #1
 80039de:	2300      	movhi	r3, #0
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	e006      	b.n	80039f2 <HAL_I2C_Init+0x92>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4a7d      	ldr	r2, [pc, #500]	; (8003bdc <HAL_I2C_Init+0x27c>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	bf94      	ite	ls
 80039ec:	2301      	movls	r3, #1
 80039ee:	2300      	movhi	r3, #0
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e0e7      	b.n	8003bca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	4a78      	ldr	r2, [pc, #480]	; (8003be0 <HAL_I2C_Init+0x280>)
 80039fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003a02:	0c9b      	lsrs	r3, r3, #18
 8003a04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68ba      	ldr	r2, [r7, #8]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	4a6a      	ldr	r2, [pc, #424]	; (8003bd4 <HAL_I2C_Init+0x274>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d802      	bhi.n	8003a34 <HAL_I2C_Init+0xd4>
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	3301      	adds	r3, #1
 8003a32:	e009      	b.n	8003a48 <HAL_I2C_Init+0xe8>
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a3a:	fb02 f303 	mul.w	r3, r2, r3
 8003a3e:	4a69      	ldr	r2, [pc, #420]	; (8003be4 <HAL_I2C_Init+0x284>)
 8003a40:	fba2 2303 	umull	r2, r3, r2, r3
 8003a44:	099b      	lsrs	r3, r3, #6
 8003a46:	3301      	adds	r3, #1
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	6812      	ldr	r2, [r2, #0]
 8003a4c:	430b      	orrs	r3, r1
 8003a4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	69db      	ldr	r3, [r3, #28]
 8003a56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	495c      	ldr	r1, [pc, #368]	; (8003bd4 <HAL_I2C_Init+0x274>)
 8003a64:	428b      	cmp	r3, r1
 8003a66:	d819      	bhi.n	8003a9c <HAL_I2C_Init+0x13c>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	1e59      	subs	r1, r3, #1
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a76:	1c59      	adds	r1, r3, #1
 8003a78:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a7c:	400b      	ands	r3, r1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00a      	beq.n	8003a98 <HAL_I2C_Init+0x138>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	1e59      	subs	r1, r3, #1
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a90:	3301      	adds	r3, #1
 8003a92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a96:	e051      	b.n	8003b3c <HAL_I2C_Init+0x1dc>
 8003a98:	2304      	movs	r3, #4
 8003a9a:	e04f      	b.n	8003b3c <HAL_I2C_Init+0x1dc>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d111      	bne.n	8003ac8 <HAL_I2C_Init+0x168>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	1e58      	subs	r0, r3, #1
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6859      	ldr	r1, [r3, #4]
 8003aac:	460b      	mov	r3, r1
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	440b      	add	r3, r1
 8003ab2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	bf0c      	ite	eq
 8003ac0:	2301      	moveq	r3, #1
 8003ac2:	2300      	movne	r3, #0
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	e012      	b.n	8003aee <HAL_I2C_Init+0x18e>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	1e58      	subs	r0, r3, #1
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6859      	ldr	r1, [r3, #4]
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	440b      	add	r3, r1
 8003ad6:	0099      	lsls	r1, r3, #2
 8003ad8:	440b      	add	r3, r1
 8003ada:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ade:	3301      	adds	r3, #1
 8003ae0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	bf0c      	ite	eq
 8003ae8:	2301      	moveq	r3, #1
 8003aea:	2300      	movne	r3, #0
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <HAL_I2C_Init+0x196>
 8003af2:	2301      	movs	r3, #1
 8003af4:	e022      	b.n	8003b3c <HAL_I2C_Init+0x1dc>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10e      	bne.n	8003b1c <HAL_I2C_Init+0x1bc>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	1e58      	subs	r0, r3, #1
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6859      	ldr	r1, [r3, #4]
 8003b06:	460b      	mov	r3, r1
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	440b      	add	r3, r1
 8003b0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b10:	3301      	adds	r3, #1
 8003b12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b1a:	e00f      	b.n	8003b3c <HAL_I2C_Init+0x1dc>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	1e58      	subs	r0, r3, #1
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6859      	ldr	r1, [r3, #4]
 8003b24:	460b      	mov	r3, r1
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	440b      	add	r3, r1
 8003b2a:	0099      	lsls	r1, r3, #2
 8003b2c:	440b      	add	r3, r1
 8003b2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b32:	3301      	adds	r3, #1
 8003b34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b3c:	6879      	ldr	r1, [r7, #4]
 8003b3e:	6809      	ldr	r1, [r1, #0]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	69da      	ldr	r2, [r3, #28]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	431a      	orrs	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6911      	ldr	r1, [r2, #16]
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	68d2      	ldr	r2, [r2, #12]
 8003b76:	4311      	orrs	r1, r2
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	6812      	ldr	r2, [r2, #0]
 8003b7c:	430b      	orrs	r3, r1
 8003b7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	695a      	ldr	r2, [r3, #20]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	431a      	orrs	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f042 0201 	orr.w	r2, r2, #1
 8003baa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	000186a0 	.word	0x000186a0
 8003bd8:	001e847f 	.word	0x001e847f
 8003bdc:	003d08ff 	.word	0x003d08ff
 8003be0:	431bde83 	.word	0x431bde83
 8003be4:	10624dd3 	.word	0x10624dd3

08003be8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b088      	sub	sp, #32
 8003bec:	af02      	add	r7, sp, #8
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	4608      	mov	r0, r1
 8003bf2:	4611      	mov	r1, r2
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	817b      	strh	r3, [r7, #10]
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	813b      	strh	r3, [r7, #8]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c02:	f7fe fc65 	bl	80024d0 <HAL_GetTick>
 8003c06:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b20      	cmp	r3, #32
 8003c12:	f040 80d9 	bne.w	8003dc8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	9300      	str	r3, [sp, #0]
 8003c1a:	2319      	movs	r3, #25
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	496d      	ldr	r1, [pc, #436]	; (8003dd4 <HAL_I2C_Mem_Write+0x1ec>)
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f000 fdad 	bl	8004780 <I2C_WaitOnFlagUntilTimeout>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d001      	beq.n	8003c30 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	e0cc      	b.n	8003dca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d101      	bne.n	8003c3e <HAL_I2C_Mem_Write+0x56>
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	e0c5      	b.n	8003dca <HAL_I2C_Mem_Write+0x1e2>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d007      	beq.n	8003c64 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 0201 	orr.w	r2, r2, #1
 8003c62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2221      	movs	r2, #33	; 0x21
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2240      	movs	r2, #64	; 0x40
 8003c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6a3a      	ldr	r2, [r7, #32]
 8003c8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	4a4d      	ldr	r2, [pc, #308]	; (8003dd8 <HAL_I2C_Mem_Write+0x1f0>)
 8003ca4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ca6:	88f8      	ldrh	r0, [r7, #6]
 8003ca8:	893a      	ldrh	r2, [r7, #8]
 8003caa:	8979      	ldrh	r1, [r7, #10]
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	9301      	str	r3, [sp, #4]
 8003cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb2:	9300      	str	r3, [sp, #0]
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f000 fbe4 	bl	8004484 <I2C_RequestMemoryWrite>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d052      	beq.n	8003d68 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e081      	b.n	8003dca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cc6:	697a      	ldr	r2, [r7, #20]
 8003cc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f000 fe2e 	bl	800492c <I2C_WaitOnTXEFlagUntilTimeout>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00d      	beq.n	8003cf2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	2b04      	cmp	r3, #4
 8003cdc:	d107      	bne.n	8003cee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e06b      	b.n	8003dca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf6:	781a      	ldrb	r2, [r3, #0]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d02:	1c5a      	adds	r2, r3, #1
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	f003 0304 	and.w	r3, r3, #4
 8003d2c:	2b04      	cmp	r3, #4
 8003d2e:	d11b      	bne.n	8003d68 <HAL_I2C_Mem_Write+0x180>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d017      	beq.n	8003d68 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3c:	781a      	ldrb	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d48:	1c5a      	adds	r2, r3, #1
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d52:	3b01      	subs	r3, #1
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	3b01      	subs	r3, #1
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1aa      	bne.n	8003cc6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f000 fe1a 	bl	80049ae <I2C_WaitOnBTFFlagUntilTimeout>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00d      	beq.n	8003d9c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d84:	2b04      	cmp	r3, #4
 8003d86:	d107      	bne.n	8003d98 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d96:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e016      	b.n	8003dca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003daa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2220      	movs	r2, #32
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	e000      	b.n	8003dca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003dc8:	2302      	movs	r3, #2
  }
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3718      	adds	r7, #24
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	00100002 	.word	0x00100002
 8003dd8:	ffff0000 	.word	0xffff0000

08003ddc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b08c      	sub	sp, #48	; 0x30
 8003de0:	af02      	add	r7, sp, #8
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	4608      	mov	r0, r1
 8003de6:	4611      	mov	r1, r2
 8003de8:	461a      	mov	r2, r3
 8003dea:	4603      	mov	r3, r0
 8003dec:	817b      	strh	r3, [r7, #10]
 8003dee:	460b      	mov	r3, r1
 8003df0:	813b      	strh	r3, [r7, #8]
 8003df2:	4613      	mov	r3, r2
 8003df4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003df6:	f7fe fb6b 	bl	80024d0 <HAL_GetTick>
 8003dfa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b20      	cmp	r3, #32
 8003e06:	f040 8208 	bne.w	800421a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0c:	9300      	str	r3, [sp, #0]
 8003e0e:	2319      	movs	r3, #25
 8003e10:	2201      	movs	r2, #1
 8003e12:	497b      	ldr	r1, [pc, #492]	; (8004000 <HAL_I2C_Mem_Read+0x224>)
 8003e14:	68f8      	ldr	r0, [r7, #12]
 8003e16:	f000 fcb3 	bl	8004780 <I2C_WaitOnFlagUntilTimeout>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d001      	beq.n	8003e24 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003e20:	2302      	movs	r3, #2
 8003e22:	e1fb      	b.n	800421c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d101      	bne.n	8003e32 <HAL_I2C_Mem_Read+0x56>
 8003e2e:	2302      	movs	r3, #2
 8003e30:	e1f4      	b.n	800421c <HAL_I2C_Mem_Read+0x440>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d007      	beq.n	8003e58 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f042 0201 	orr.w	r2, r2, #1
 8003e56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2222      	movs	r2, #34	; 0x22
 8003e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2240      	movs	r2, #64	; 0x40
 8003e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003e88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4a5b      	ldr	r2, [pc, #364]	; (8004004 <HAL_I2C_Mem_Read+0x228>)
 8003e98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e9a:	88f8      	ldrh	r0, [r7, #6]
 8003e9c:	893a      	ldrh	r2, [r7, #8]
 8003e9e:	8979      	ldrh	r1, [r7, #10]
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea2:	9301      	str	r3, [sp, #4]
 8003ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea6:	9300      	str	r3, [sp, #0]
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f000 fb80 	bl	80045b0 <I2C_RequestMemoryRead>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e1b0      	b.n	800421c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d113      	bne.n	8003eea <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	623b      	str	r3, [r7, #32]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	623b      	str	r3, [r7, #32]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	623b      	str	r3, [r7, #32]
 8003ed6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	e184      	b.n	80041f4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d11b      	bne.n	8003f2a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f02:	2300      	movs	r3, #0
 8003f04:	61fb      	str	r3, [r7, #28]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	61fb      	str	r3, [r7, #28]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	61fb      	str	r3, [r7, #28]
 8003f16:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f26:	601a      	str	r2, [r3, #0]
 8003f28:	e164      	b.n	80041f4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d11b      	bne.n	8003f6a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f40:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f52:	2300      	movs	r3, #0
 8003f54:	61bb      	str	r3, [r7, #24]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	695b      	ldr	r3, [r3, #20]
 8003f5c:	61bb      	str	r3, [r7, #24]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	61bb      	str	r3, [r7, #24]
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	e144      	b.n	80041f4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	617b      	str	r3, [r7, #20]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	617b      	str	r3, [r7, #20]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	617b      	str	r3, [r7, #20]
 8003f7e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003f80:	e138      	b.n	80041f4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f86:	2b03      	cmp	r3, #3
 8003f88:	f200 80f1 	bhi.w	800416e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d123      	bne.n	8003fdc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f96:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f000 fd49 	bl	8004a30 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d001      	beq.n	8003fa8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e139      	b.n	800421c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	691a      	ldr	r2, [r3, #16]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb2:	b2d2      	uxtb	r2, r2
 8003fb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fba:	1c5a      	adds	r2, r3, #1
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fda:	e10b      	b.n	80041f4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d14e      	bne.n	8004082 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe6:	9300      	str	r3, [sp, #0]
 8003fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fea:	2200      	movs	r2, #0
 8003fec:	4906      	ldr	r1, [pc, #24]	; (8004008 <HAL_I2C_Mem_Read+0x22c>)
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f000 fbc6 	bl	8004780 <I2C_WaitOnFlagUntilTimeout>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d008      	beq.n	800400c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e10e      	b.n	800421c <HAL_I2C_Mem_Read+0x440>
 8003ffe:	bf00      	nop
 8004000:	00100002 	.word	0x00100002
 8004004:	ffff0000 	.word	0xffff0000
 8004008:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800401a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	691a      	ldr	r2, [r3, #16]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004026:	b2d2      	uxtb	r2, r2
 8004028:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402e:	1c5a      	adds	r2, r3, #1
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004038:	3b01      	subs	r3, #1
 800403a:	b29a      	uxth	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004044:	b29b      	uxth	r3, r3
 8004046:	3b01      	subs	r3, #1
 8004048:	b29a      	uxth	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	691a      	ldr	r2, [r3, #16]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004058:	b2d2      	uxtb	r2, r2
 800405a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004060:	1c5a      	adds	r2, r3, #1
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800406a:	3b01      	subs	r3, #1
 800406c:	b29a      	uxth	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004076:	b29b      	uxth	r3, r3
 8004078:	3b01      	subs	r3, #1
 800407a:	b29a      	uxth	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004080:	e0b8      	b.n	80041f4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004084:	9300      	str	r3, [sp, #0]
 8004086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004088:	2200      	movs	r2, #0
 800408a:	4966      	ldr	r1, [pc, #408]	; (8004224 <HAL_I2C_Mem_Read+0x448>)
 800408c:	68f8      	ldr	r0, [r7, #12]
 800408e:	f000 fb77 	bl	8004780 <I2C_WaitOnFlagUntilTimeout>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d001      	beq.n	800409c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e0bf      	b.n	800421c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	691a      	ldr	r2, [r3, #16]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b6:	b2d2      	uxtb	r2, r2
 80040b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	1c5a      	adds	r2, r3, #1
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c8:	3b01      	subs	r3, #1
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	3b01      	subs	r3, #1
 80040d8:	b29a      	uxth	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e0:	9300      	str	r3, [sp, #0]
 80040e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e4:	2200      	movs	r2, #0
 80040e6:	494f      	ldr	r1, [pc, #316]	; (8004224 <HAL_I2C_Mem_Read+0x448>)
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f000 fb49 	bl	8004780 <I2C_WaitOnFlagUntilTimeout>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d001      	beq.n	80040f8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e091      	b.n	800421c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004106:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	691a      	ldr	r2, [r3, #16]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004112:	b2d2      	uxtb	r2, r2
 8004114:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411a:	1c5a      	adds	r2, r3, #1
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004124:	3b01      	subs	r3, #1
 8004126:	b29a      	uxth	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004130:	b29b      	uxth	r3, r3
 8004132:	3b01      	subs	r3, #1
 8004134:	b29a      	uxth	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	691a      	ldr	r2, [r3, #16]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004144:	b2d2      	uxtb	r2, r2
 8004146:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414c:	1c5a      	adds	r2, r3, #1
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004156:	3b01      	subs	r3, #1
 8004158:	b29a      	uxth	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004162:	b29b      	uxth	r3, r3
 8004164:	3b01      	subs	r3, #1
 8004166:	b29a      	uxth	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800416c:	e042      	b.n	80041f4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800416e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004170:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f000 fc5c 	bl	8004a30 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d001      	beq.n	8004182 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e04c      	b.n	800421c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	691a      	ldr	r2, [r3, #16]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418c:	b2d2      	uxtb	r2, r2
 800418e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004194:	1c5a      	adds	r2, r3, #1
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800419e:	3b01      	subs	r3, #1
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	3b01      	subs	r3, #1
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	f003 0304 	and.w	r3, r3, #4
 80041be:	2b04      	cmp	r3, #4
 80041c0:	d118      	bne.n	80041f4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	691a      	ldr	r2, [r3, #16]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041cc:	b2d2      	uxtb	r2, r2
 80041ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d4:	1c5a      	adds	r2, r3, #1
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041de:	3b01      	subs	r3, #1
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	3b01      	subs	r3, #1
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f47f aec2 	bne.w	8003f82 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2220      	movs	r2, #32
 8004202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004216:	2300      	movs	r3, #0
 8004218:	e000      	b.n	800421c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800421a:	2302      	movs	r3, #2
  }
}
 800421c:	4618      	mov	r0, r3
 800421e:	3728      	adds	r7, #40	; 0x28
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	00010004 	.word	0x00010004

08004228 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b08a      	sub	sp, #40	; 0x28
 800422c:	af02      	add	r7, sp, #8
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	607a      	str	r2, [r7, #4]
 8004232:	603b      	str	r3, [r7, #0]
 8004234:	460b      	mov	r3, r1
 8004236:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004238:	f7fe f94a 	bl	80024d0 <HAL_GetTick>
 800423c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800423e:	2301      	movs	r3, #1
 8004240:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b20      	cmp	r3, #32
 800424c:	f040 8111 	bne.w	8004472 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	9300      	str	r3, [sp, #0]
 8004254:	2319      	movs	r3, #25
 8004256:	2201      	movs	r2, #1
 8004258:	4988      	ldr	r1, [pc, #544]	; (800447c <HAL_I2C_IsDeviceReady+0x254>)
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 fa90 	bl	8004780 <I2C_WaitOnFlagUntilTimeout>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d001      	beq.n	800426a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004266:	2302      	movs	r3, #2
 8004268:	e104      	b.n	8004474 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004270:	2b01      	cmp	r3, #1
 8004272:	d101      	bne.n	8004278 <HAL_I2C_IsDeviceReady+0x50>
 8004274:	2302      	movs	r3, #2
 8004276:	e0fd      	b.n	8004474 <HAL_I2C_IsDeviceReady+0x24c>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b01      	cmp	r3, #1
 800428c:	d007      	beq.n	800429e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f042 0201 	orr.w	r2, r2, #1
 800429c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2224      	movs	r2, #36	; 0x24
 80042b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	4a70      	ldr	r2, [pc, #448]	; (8004480 <HAL_I2C_IsDeviceReady+0x258>)
 80042c0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042d0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	9300      	str	r3, [sp, #0]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	2200      	movs	r2, #0
 80042da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f000 fa4e 	bl	8004780 <I2C_WaitOnFlagUntilTimeout>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00d      	beq.n	8004306 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042f8:	d103      	bne.n	8004302 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004300:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e0b6      	b.n	8004474 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004306:	897b      	ldrh	r3, [r7, #10]
 8004308:	b2db      	uxtb	r3, r3
 800430a:	461a      	mov	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004314:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004316:	f7fe f8db 	bl	80024d0 <HAL_GetTick>
 800431a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b02      	cmp	r3, #2
 8004328:	bf0c      	ite	eq
 800432a:	2301      	moveq	r3, #1
 800432c:	2300      	movne	r3, #0
 800432e:	b2db      	uxtb	r3, r3
 8004330:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	695b      	ldr	r3, [r3, #20]
 8004338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800433c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004340:	bf0c      	ite	eq
 8004342:	2301      	moveq	r3, #1
 8004344:	2300      	movne	r3, #0
 8004346:	b2db      	uxtb	r3, r3
 8004348:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800434a:	e025      	b.n	8004398 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800434c:	f7fe f8c0 	bl	80024d0 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	683a      	ldr	r2, [r7, #0]
 8004358:	429a      	cmp	r2, r3
 800435a:	d302      	bcc.n	8004362 <HAL_I2C_IsDeviceReady+0x13a>
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d103      	bne.n	800436a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	22a0      	movs	r2, #160	; 0xa0
 8004366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	695b      	ldr	r3, [r3, #20]
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	2b02      	cmp	r3, #2
 8004376:	bf0c      	ite	eq
 8004378:	2301      	moveq	r3, #1
 800437a:	2300      	movne	r3, #0
 800437c:	b2db      	uxtb	r3, r3
 800437e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800438a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800438e:	bf0c      	ite	eq
 8004390:	2301      	moveq	r3, #1
 8004392:	2300      	movne	r3, #0
 8004394:	b2db      	uxtb	r3, r3
 8004396:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2ba0      	cmp	r3, #160	; 0xa0
 80043a2:	d005      	beq.n	80043b0 <HAL_I2C_IsDeviceReady+0x188>
 80043a4:	7dfb      	ldrb	r3, [r7, #23]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d102      	bne.n	80043b0 <HAL_I2C_IsDeviceReady+0x188>
 80043aa:	7dbb      	ldrb	r3, [r7, #22]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d0cd      	beq.n	800434c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2220      	movs	r2, #32
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d129      	bne.n	800441a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043d4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043d6:	2300      	movs	r3, #0
 80043d8:	613b      	str	r3, [r7, #16]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	613b      	str	r3, [r7, #16]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	613b      	str	r3, [r7, #16]
 80043ea:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	9300      	str	r3, [sp, #0]
 80043f0:	2319      	movs	r3, #25
 80043f2:	2201      	movs	r2, #1
 80043f4:	4921      	ldr	r1, [pc, #132]	; (800447c <HAL_I2C_IsDeviceReady+0x254>)
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f000 f9c2 	bl	8004780 <I2C_WaitOnFlagUntilTimeout>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e036      	b.n	8004474 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2220      	movs	r2, #32
 800440a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004416:	2300      	movs	r3, #0
 8004418:	e02c      	b.n	8004474 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004428:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004432:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	9300      	str	r3, [sp, #0]
 8004438:	2319      	movs	r3, #25
 800443a:	2201      	movs	r2, #1
 800443c:	490f      	ldr	r1, [pc, #60]	; (800447c <HAL_I2C_IsDeviceReady+0x254>)
 800443e:	68f8      	ldr	r0, [r7, #12]
 8004440:	f000 f99e 	bl	8004780 <I2C_WaitOnFlagUntilTimeout>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e012      	b.n	8004474 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	3301      	adds	r3, #1
 8004452:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004454:	69ba      	ldr	r2, [r7, #24]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	429a      	cmp	r2, r3
 800445a:	f4ff af32 	bcc.w	80042c2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2220      	movs	r2, #32
 8004462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e000      	b.n	8004474 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004472:	2302      	movs	r3, #2
  }
}
 8004474:	4618      	mov	r0, r3
 8004476:	3720      	adds	r7, #32
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	00100002 	.word	0x00100002
 8004480:	ffff0000 	.word	0xffff0000

08004484 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b088      	sub	sp, #32
 8004488:	af02      	add	r7, sp, #8
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	4608      	mov	r0, r1
 800448e:	4611      	mov	r1, r2
 8004490:	461a      	mov	r2, r3
 8004492:	4603      	mov	r3, r0
 8004494:	817b      	strh	r3, [r7, #10]
 8004496:	460b      	mov	r3, r1
 8004498:	813b      	strh	r3, [r7, #8]
 800449a:	4613      	mov	r3, r2
 800449c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	6a3b      	ldr	r3, [r7, #32]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f000 f960 	bl	8004780 <I2C_WaitOnFlagUntilTimeout>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00d      	beq.n	80044e2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044d4:	d103      	bne.n	80044de <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e05f      	b.n	80045a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044e2:	897b      	ldrh	r3, [r7, #10]
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	461a      	mov	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80044f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f4:	6a3a      	ldr	r2, [r7, #32]
 80044f6:	492d      	ldr	r1, [pc, #180]	; (80045ac <I2C_RequestMemoryWrite+0x128>)
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f000 f998 	bl	800482e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d001      	beq.n	8004508 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e04c      	b.n	80045a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004508:	2300      	movs	r3, #0
 800450a:	617b      	str	r3, [r7, #20]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	617b      	str	r3, [r7, #20]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	617b      	str	r3, [r7, #20]
 800451c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800451e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004520:	6a39      	ldr	r1, [r7, #32]
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f000 fa02 	bl	800492c <I2C_WaitOnTXEFlagUntilTimeout>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00d      	beq.n	800454a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004532:	2b04      	cmp	r3, #4
 8004534:	d107      	bne.n	8004546 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004544:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e02b      	b.n	80045a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800454a:	88fb      	ldrh	r3, [r7, #6]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d105      	bne.n	800455c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004550:	893b      	ldrh	r3, [r7, #8]
 8004552:	b2da      	uxtb	r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	611a      	str	r2, [r3, #16]
 800455a:	e021      	b.n	80045a0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800455c:	893b      	ldrh	r3, [r7, #8]
 800455e:	0a1b      	lsrs	r3, r3, #8
 8004560:	b29b      	uxth	r3, r3
 8004562:	b2da      	uxtb	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800456a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800456c:	6a39      	ldr	r1, [r7, #32]
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	f000 f9dc 	bl	800492c <I2C_WaitOnTXEFlagUntilTimeout>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00d      	beq.n	8004596 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457e:	2b04      	cmp	r3, #4
 8004580:	d107      	bne.n	8004592 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004590:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e005      	b.n	80045a2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004596:	893b      	ldrh	r3, [r7, #8]
 8004598:	b2da      	uxtb	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3718      	adds	r7, #24
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	00010002 	.word	0x00010002

080045b0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b088      	sub	sp, #32
 80045b4:	af02      	add	r7, sp, #8
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	4608      	mov	r0, r1
 80045ba:	4611      	mov	r1, r2
 80045bc:	461a      	mov	r2, r3
 80045be:	4603      	mov	r3, r0
 80045c0:	817b      	strh	r3, [r7, #10]
 80045c2:	460b      	mov	r3, r1
 80045c4:	813b      	strh	r3, [r7, #8]
 80045c6:	4613      	mov	r3, r2
 80045c8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045d8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	6a3b      	ldr	r3, [r7, #32]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f000 f8c2 	bl	8004780 <I2C_WaitOnFlagUntilTimeout>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00d      	beq.n	800461e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800460c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004610:	d103      	bne.n	800461a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004618:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e0aa      	b.n	8004774 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800461e:	897b      	ldrh	r3, [r7, #10]
 8004620:	b2db      	uxtb	r3, r3
 8004622:	461a      	mov	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800462c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800462e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004630:	6a3a      	ldr	r2, [r7, #32]
 8004632:	4952      	ldr	r1, [pc, #328]	; (800477c <I2C_RequestMemoryRead+0x1cc>)
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	f000 f8fa 	bl	800482e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d001      	beq.n	8004644 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e097      	b.n	8004774 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004644:	2300      	movs	r3, #0
 8004646:	617b      	str	r3, [r7, #20]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	617b      	str	r3, [r7, #20]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	617b      	str	r3, [r7, #20]
 8004658:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800465a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800465c:	6a39      	ldr	r1, [r7, #32]
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f000 f964 	bl	800492c <I2C_WaitOnTXEFlagUntilTimeout>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00d      	beq.n	8004686 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466e:	2b04      	cmp	r3, #4
 8004670:	d107      	bne.n	8004682 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004680:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e076      	b.n	8004774 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004686:	88fb      	ldrh	r3, [r7, #6]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d105      	bne.n	8004698 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800468c:	893b      	ldrh	r3, [r7, #8]
 800468e:	b2da      	uxtb	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	611a      	str	r2, [r3, #16]
 8004696:	e021      	b.n	80046dc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004698:	893b      	ldrh	r3, [r7, #8]
 800469a:	0a1b      	lsrs	r3, r3, #8
 800469c:	b29b      	uxth	r3, r3
 800469e:	b2da      	uxtb	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046a8:	6a39      	ldr	r1, [r7, #32]
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	f000 f93e 	bl	800492c <I2C_WaitOnTXEFlagUntilTimeout>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00d      	beq.n	80046d2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ba:	2b04      	cmp	r3, #4
 80046bc:	d107      	bne.n	80046ce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e050      	b.n	8004774 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046d2:	893b      	ldrh	r3, [r7, #8]
 80046d4:	b2da      	uxtb	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046de:	6a39      	ldr	r1, [r7, #32]
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f000 f923 	bl	800492c <I2C_WaitOnTXEFlagUntilTimeout>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00d      	beq.n	8004708 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f0:	2b04      	cmp	r3, #4
 80046f2:	d107      	bne.n	8004704 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004702:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e035      	b.n	8004774 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004716:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471a:	9300      	str	r3, [sp, #0]
 800471c:	6a3b      	ldr	r3, [r7, #32]
 800471e:	2200      	movs	r2, #0
 8004720:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 f82b 	bl	8004780 <I2C_WaitOnFlagUntilTimeout>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00d      	beq.n	800474c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800473a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800473e:	d103      	bne.n	8004748 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004746:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e013      	b.n	8004774 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800474c:	897b      	ldrh	r3, [r7, #10]
 800474e:	b2db      	uxtb	r3, r3
 8004750:	f043 0301 	orr.w	r3, r3, #1
 8004754:	b2da      	uxtb	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475e:	6a3a      	ldr	r2, [r7, #32]
 8004760:	4906      	ldr	r1, [pc, #24]	; (800477c <I2C_RequestMemoryRead+0x1cc>)
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f000 f863 	bl	800482e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d001      	beq.n	8004772 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e000      	b.n	8004774 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3718      	adds	r7, #24
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	00010002 	.word	0x00010002

08004780 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	603b      	str	r3, [r7, #0]
 800478c:	4613      	mov	r3, r2
 800478e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004790:	e025      	b.n	80047de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004798:	d021      	beq.n	80047de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800479a:	f7fd fe99 	bl	80024d0 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d302      	bcc.n	80047b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d116      	bne.n	80047de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2220      	movs	r2, #32
 80047ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ca:	f043 0220 	orr.w	r2, r3, #32
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e023      	b.n	8004826 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	0c1b      	lsrs	r3, r3, #16
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d10d      	bne.n	8004804 <I2C_WaitOnFlagUntilTimeout+0x84>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	43da      	mvns	r2, r3
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	4013      	ands	r3, r2
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	bf0c      	ite	eq
 80047fa:	2301      	moveq	r3, #1
 80047fc:	2300      	movne	r3, #0
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	461a      	mov	r2, r3
 8004802:	e00c      	b.n	800481e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	43da      	mvns	r2, r3
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	4013      	ands	r3, r2
 8004810:	b29b      	uxth	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	bf0c      	ite	eq
 8004816:	2301      	moveq	r3, #1
 8004818:	2300      	movne	r3, #0
 800481a:	b2db      	uxtb	r3, r3
 800481c:	461a      	mov	r2, r3
 800481e:	79fb      	ldrb	r3, [r7, #7]
 8004820:	429a      	cmp	r2, r3
 8004822:	d0b6      	beq.n	8004792 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3710      	adds	r7, #16
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b084      	sub	sp, #16
 8004832:	af00      	add	r7, sp, #0
 8004834:	60f8      	str	r0, [r7, #12]
 8004836:	60b9      	str	r1, [r7, #8]
 8004838:	607a      	str	r2, [r7, #4]
 800483a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800483c:	e051      	b.n	80048e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	695b      	ldr	r3, [r3, #20]
 8004844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004848:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800484c:	d123      	bne.n	8004896 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800485c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004866:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2220      	movs	r2, #32
 8004872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004882:	f043 0204 	orr.w	r2, r3, #4
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e046      	b.n	8004924 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800489c:	d021      	beq.n	80048e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800489e:	f7fd fe17 	bl	80024d0 <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d302      	bcc.n	80048b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d116      	bne.n	80048e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2220      	movs	r2, #32
 80048be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ce:	f043 0220 	orr.w	r2, r3, #32
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e020      	b.n	8004924 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	0c1b      	lsrs	r3, r3, #16
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d10c      	bne.n	8004906 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	43da      	mvns	r2, r3
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	4013      	ands	r3, r2
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	bf14      	ite	ne
 80048fe:	2301      	movne	r3, #1
 8004900:	2300      	moveq	r3, #0
 8004902:	b2db      	uxtb	r3, r3
 8004904:	e00b      	b.n	800491e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	43da      	mvns	r2, r3
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	4013      	ands	r3, r2
 8004912:	b29b      	uxth	r3, r3
 8004914:	2b00      	cmp	r3, #0
 8004916:	bf14      	ite	ne
 8004918:	2301      	movne	r3, #1
 800491a:	2300      	moveq	r3, #0
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d18d      	bne.n	800483e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3710      	adds	r7, #16
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004938:	e02d      	b.n	8004996 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800493a:	68f8      	ldr	r0, [r7, #12]
 800493c:	f000 f8ce 	bl	8004adc <I2C_IsAcknowledgeFailed>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d001      	beq.n	800494a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e02d      	b.n	80049a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004950:	d021      	beq.n	8004996 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004952:	f7fd fdbd 	bl	80024d0 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	68ba      	ldr	r2, [r7, #8]
 800495e:	429a      	cmp	r2, r3
 8004960:	d302      	bcc.n	8004968 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d116      	bne.n	8004996 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2220      	movs	r2, #32
 8004972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004982:	f043 0220 	orr.w	r2, r3, #32
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e007      	b.n	80049a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	695b      	ldr	r3, [r3, #20]
 800499c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a0:	2b80      	cmp	r3, #128	; 0x80
 80049a2:	d1ca      	bne.n	800493a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3710      	adds	r7, #16
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b084      	sub	sp, #16
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	60f8      	str	r0, [r7, #12]
 80049b6:	60b9      	str	r1, [r7, #8]
 80049b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049ba:	e02d      	b.n	8004a18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f000 f88d 	bl	8004adc <I2C_IsAcknowledgeFailed>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d001      	beq.n	80049cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e02d      	b.n	8004a28 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d2:	d021      	beq.n	8004a18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049d4:	f7fd fd7c 	bl	80024d0 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d302      	bcc.n	80049ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d116      	bne.n	8004a18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2220      	movs	r2, #32
 80049f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a04:	f043 0220 	orr.w	r2, r3, #32
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e007      	b.n	8004a28 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	f003 0304 	and.w	r3, r3, #4
 8004a22:	2b04      	cmp	r3, #4
 8004a24:	d1ca      	bne.n	80049bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a3c:	e042      	b.n	8004ac4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	695b      	ldr	r3, [r3, #20]
 8004a44:	f003 0310 	and.w	r3, r3, #16
 8004a48:	2b10      	cmp	r3, #16
 8004a4a:	d119      	bne.n	8004a80 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f06f 0210 	mvn.w	r2, #16
 8004a54:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2220      	movs	r2, #32
 8004a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e029      	b.n	8004ad4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a80:	f7fd fd26 	bl	80024d0 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	68ba      	ldr	r2, [r7, #8]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d302      	bcc.n	8004a96 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d116      	bne.n	8004ac4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2220      	movs	r2, #32
 8004aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab0:	f043 0220 	orr.w	r2, r3, #32
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e007      	b.n	8004ad4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ace:	2b40      	cmp	r3, #64	; 0x40
 8004ad0:	d1b5      	bne.n	8004a3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3710      	adds	r7, #16
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004af2:	d11b      	bne.n	8004b2c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004afc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2220      	movs	r2, #32
 8004b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b18:	f043 0204 	orr.w	r2, r3, #4
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e000      	b.n	8004b2e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	370c      	adds	r7, #12
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
	...

08004b3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b086      	sub	sp, #24
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e264      	b.n	8005018 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d075      	beq.n	8004c46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b5a:	4ba3      	ldr	r3, [pc, #652]	; (8004de8 <HAL_RCC_OscConfig+0x2ac>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f003 030c 	and.w	r3, r3, #12
 8004b62:	2b04      	cmp	r3, #4
 8004b64:	d00c      	beq.n	8004b80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b66:	4ba0      	ldr	r3, [pc, #640]	; (8004de8 <HAL_RCC_OscConfig+0x2ac>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b6e:	2b08      	cmp	r3, #8
 8004b70:	d112      	bne.n	8004b98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b72:	4b9d      	ldr	r3, [pc, #628]	; (8004de8 <HAL_RCC_OscConfig+0x2ac>)
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b7e:	d10b      	bne.n	8004b98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b80:	4b99      	ldr	r3, [pc, #612]	; (8004de8 <HAL_RCC_OscConfig+0x2ac>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d05b      	beq.n	8004c44 <HAL_RCC_OscConfig+0x108>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d157      	bne.n	8004c44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e23f      	b.n	8005018 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ba0:	d106      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x74>
 8004ba2:	4b91      	ldr	r3, [pc, #580]	; (8004de8 <HAL_RCC_OscConfig+0x2ac>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a90      	ldr	r2, [pc, #576]	; (8004de8 <HAL_RCC_OscConfig+0x2ac>)
 8004ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bac:	6013      	str	r3, [r2, #0]
 8004bae:	e01d      	b.n	8004bec <HAL_RCC_OscConfig+0xb0>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bb8:	d10c      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x98>
 8004bba:	4b8b      	ldr	r3, [pc, #556]	; (8004de8 <HAL_RCC_OscConfig+0x2ac>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a8a      	ldr	r2, [pc, #552]	; (8004de8 <HAL_RCC_OscConfig+0x2ac>)
 8004bc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bc4:	6013      	str	r3, [r2, #0]
 8004bc6:	4b88      	ldr	r3, [pc, #544]	; (8004de8 <HAL_RCC_OscConfig+0x2ac>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a87      	ldr	r2, [pc, #540]	; (8004de8 <HAL_RCC_OscConfig+0x2ac>)
 8004bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bd0:	6013      	str	r3, [r2, #0]
 8004bd2:	e00b      	b.n	8004bec <HAL_RCC_OscConfig+0xb0>
 8004bd4:	4b84      	ldr	r3, [pc, #528]	; (8004de8 <HAL_RCC_OscConfig+0x2ac>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a83      	ldr	r2, [pc, #524]	; (8004de8 <HAL_RCC_OscConfig+0x2ac>)
 8004bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bde:	6013      	str	r3, [r2, #0]
 8004be0:	4b81      	ldr	r3, [pc, #516]	; (8004de8 <HAL_RCC_OscConfig+0x2ac>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a80      	ldr	r2, [pc, #512]	; (8004de8 <HAL_RCC_OscConfig+0x2ac>)
 8004be6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d013      	beq.n	8004c1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bf4:	f7fd fc6c 	bl	80024d0 <HAL_GetTick>
 8004bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bfa:	e008      	b.n	8004c0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bfc:	f7fd fc68 	bl	80024d0 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b64      	cmp	r3, #100	; 0x64
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e204      	b.n	8005018 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c0e:	4b76      	ldr	r3, [pc, #472]	; (8004de8 <HAL_RCC_OscConfig+0x2ac>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d0f0      	beq.n	8004bfc <HAL_RCC_OscConfig+0xc0>
 8004c1a:	e014      	b.n	8004c46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c1c:	f7fd fc58 	bl	80024d0 <HAL_GetTick>
 8004c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c22:	e008      	b.n	8004c36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c24:	f7fd fc54 	bl	80024d0 <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	2b64      	cmp	r3, #100	; 0x64
 8004c30:	d901      	bls.n	8004c36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e1f0      	b.n	8005018 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c36:	4b6c      	ldr	r3, [pc, #432]	; (8004de8 <HAL_RCC_OscConfig+0x2ac>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1f0      	bne.n	8004c24 <HAL_RCC_OscConfig+0xe8>
 8004c42:	e000      	b.n	8004c46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d063      	beq.n	8004d1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c52:	4b65      	ldr	r3, [pc, #404]	; (8004de8 <HAL_RCC_OscConfig+0x2ac>)
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f003 030c 	and.w	r3, r3, #12
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00b      	beq.n	8004c76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c5e:	4b62      	ldr	r3, [pc, #392]	; (8004de8 <HAL_RCC_OscConfig+0x2ac>)
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c66:	2b08      	cmp	r3, #8
 8004c68:	d11c      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c6a:	4b5f      	ldr	r3, [pc, #380]	; (8004de8 <HAL_RCC_OscConfig+0x2ac>)
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d116      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c76:	4b5c      	ldr	r3, [pc, #368]	; (8004de8 <HAL_RCC_OscConfig+0x2ac>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d005      	beq.n	8004c8e <HAL_RCC_OscConfig+0x152>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d001      	beq.n	8004c8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e1c4      	b.n	8005018 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c8e:	4b56      	ldr	r3, [pc, #344]	; (8004de8 <HAL_RCC_OscConfig+0x2ac>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	00db      	lsls	r3, r3, #3
 8004c9c:	4952      	ldr	r1, [pc, #328]	; (8004de8 <HAL_RCC_OscConfig+0x2ac>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ca2:	e03a      	b.n	8004d1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d020      	beq.n	8004cee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cac:	4b4f      	ldr	r3, [pc, #316]	; (8004dec <HAL_RCC_OscConfig+0x2b0>)
 8004cae:	2201      	movs	r2, #1
 8004cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb2:	f7fd fc0d 	bl	80024d0 <HAL_GetTick>
 8004cb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cb8:	e008      	b.n	8004ccc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cba:	f7fd fc09 	bl	80024d0 <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d901      	bls.n	8004ccc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e1a5      	b.n	8005018 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ccc:	4b46      	ldr	r3, [pc, #280]	; (8004de8 <HAL_RCC_OscConfig+0x2ac>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0302 	and.w	r3, r3, #2
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d0f0      	beq.n	8004cba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cd8:	4b43      	ldr	r3, [pc, #268]	; (8004de8 <HAL_RCC_OscConfig+0x2ac>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	00db      	lsls	r3, r3, #3
 8004ce6:	4940      	ldr	r1, [pc, #256]	; (8004de8 <HAL_RCC_OscConfig+0x2ac>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	600b      	str	r3, [r1, #0]
 8004cec:	e015      	b.n	8004d1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cee:	4b3f      	ldr	r3, [pc, #252]	; (8004dec <HAL_RCC_OscConfig+0x2b0>)
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf4:	f7fd fbec 	bl	80024d0 <HAL_GetTick>
 8004cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cfa:	e008      	b.n	8004d0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cfc:	f7fd fbe8 	bl	80024d0 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d901      	bls.n	8004d0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e184      	b.n	8005018 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d0e:	4b36      	ldr	r3, [pc, #216]	; (8004de8 <HAL_RCC_OscConfig+0x2ac>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0302 	and.w	r3, r3, #2
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d1f0      	bne.n	8004cfc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0308 	and.w	r3, r3, #8
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d030      	beq.n	8004d88 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d016      	beq.n	8004d5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d2e:	4b30      	ldr	r3, [pc, #192]	; (8004df0 <HAL_RCC_OscConfig+0x2b4>)
 8004d30:	2201      	movs	r2, #1
 8004d32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d34:	f7fd fbcc 	bl	80024d0 <HAL_GetTick>
 8004d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d3a:	e008      	b.n	8004d4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d3c:	f7fd fbc8 	bl	80024d0 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e164      	b.n	8005018 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d4e:	4b26      	ldr	r3, [pc, #152]	; (8004de8 <HAL_RCC_OscConfig+0x2ac>)
 8004d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d0f0      	beq.n	8004d3c <HAL_RCC_OscConfig+0x200>
 8004d5a:	e015      	b.n	8004d88 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d5c:	4b24      	ldr	r3, [pc, #144]	; (8004df0 <HAL_RCC_OscConfig+0x2b4>)
 8004d5e:	2200      	movs	r2, #0
 8004d60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d62:	f7fd fbb5 	bl	80024d0 <HAL_GetTick>
 8004d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d68:	e008      	b.n	8004d7c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d6a:	f7fd fbb1 	bl	80024d0 <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d901      	bls.n	8004d7c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e14d      	b.n	8005018 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d7c:	4b1a      	ldr	r3, [pc, #104]	; (8004de8 <HAL_RCC_OscConfig+0x2ac>)
 8004d7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1f0      	bne.n	8004d6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0304 	and.w	r3, r3, #4
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f000 80a0 	beq.w	8004ed6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d96:	2300      	movs	r3, #0
 8004d98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d9a:	4b13      	ldr	r3, [pc, #76]	; (8004de8 <HAL_RCC_OscConfig+0x2ac>)
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10f      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004da6:	2300      	movs	r3, #0
 8004da8:	60bb      	str	r3, [r7, #8]
 8004daa:	4b0f      	ldr	r3, [pc, #60]	; (8004de8 <HAL_RCC_OscConfig+0x2ac>)
 8004dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dae:	4a0e      	ldr	r2, [pc, #56]	; (8004de8 <HAL_RCC_OscConfig+0x2ac>)
 8004db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004db4:	6413      	str	r3, [r2, #64]	; 0x40
 8004db6:	4b0c      	ldr	r3, [pc, #48]	; (8004de8 <HAL_RCC_OscConfig+0x2ac>)
 8004db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dbe:	60bb      	str	r3, [r7, #8]
 8004dc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dc6:	4b0b      	ldr	r3, [pc, #44]	; (8004df4 <HAL_RCC_OscConfig+0x2b8>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d121      	bne.n	8004e16 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dd2:	4b08      	ldr	r3, [pc, #32]	; (8004df4 <HAL_RCC_OscConfig+0x2b8>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a07      	ldr	r2, [pc, #28]	; (8004df4 <HAL_RCC_OscConfig+0x2b8>)
 8004dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ddc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dde:	f7fd fb77 	bl	80024d0 <HAL_GetTick>
 8004de2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004de4:	e011      	b.n	8004e0a <HAL_RCC_OscConfig+0x2ce>
 8004de6:	bf00      	nop
 8004de8:	40023800 	.word	0x40023800
 8004dec:	42470000 	.word	0x42470000
 8004df0:	42470e80 	.word	0x42470e80
 8004df4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004df8:	f7fd fb6a 	bl	80024d0 <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e106      	b.n	8005018 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e0a:	4b85      	ldr	r3, [pc, #532]	; (8005020 <HAL_RCC_OscConfig+0x4e4>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d0f0      	beq.n	8004df8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d106      	bne.n	8004e2c <HAL_RCC_OscConfig+0x2f0>
 8004e1e:	4b81      	ldr	r3, [pc, #516]	; (8005024 <HAL_RCC_OscConfig+0x4e8>)
 8004e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e22:	4a80      	ldr	r2, [pc, #512]	; (8005024 <HAL_RCC_OscConfig+0x4e8>)
 8004e24:	f043 0301 	orr.w	r3, r3, #1
 8004e28:	6713      	str	r3, [r2, #112]	; 0x70
 8004e2a:	e01c      	b.n	8004e66 <HAL_RCC_OscConfig+0x32a>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	2b05      	cmp	r3, #5
 8004e32:	d10c      	bne.n	8004e4e <HAL_RCC_OscConfig+0x312>
 8004e34:	4b7b      	ldr	r3, [pc, #492]	; (8005024 <HAL_RCC_OscConfig+0x4e8>)
 8004e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e38:	4a7a      	ldr	r2, [pc, #488]	; (8005024 <HAL_RCC_OscConfig+0x4e8>)
 8004e3a:	f043 0304 	orr.w	r3, r3, #4
 8004e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8004e40:	4b78      	ldr	r3, [pc, #480]	; (8005024 <HAL_RCC_OscConfig+0x4e8>)
 8004e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e44:	4a77      	ldr	r2, [pc, #476]	; (8005024 <HAL_RCC_OscConfig+0x4e8>)
 8004e46:	f043 0301 	orr.w	r3, r3, #1
 8004e4a:	6713      	str	r3, [r2, #112]	; 0x70
 8004e4c:	e00b      	b.n	8004e66 <HAL_RCC_OscConfig+0x32a>
 8004e4e:	4b75      	ldr	r3, [pc, #468]	; (8005024 <HAL_RCC_OscConfig+0x4e8>)
 8004e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e52:	4a74      	ldr	r2, [pc, #464]	; (8005024 <HAL_RCC_OscConfig+0x4e8>)
 8004e54:	f023 0301 	bic.w	r3, r3, #1
 8004e58:	6713      	str	r3, [r2, #112]	; 0x70
 8004e5a:	4b72      	ldr	r3, [pc, #456]	; (8005024 <HAL_RCC_OscConfig+0x4e8>)
 8004e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e5e:	4a71      	ldr	r2, [pc, #452]	; (8005024 <HAL_RCC_OscConfig+0x4e8>)
 8004e60:	f023 0304 	bic.w	r3, r3, #4
 8004e64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d015      	beq.n	8004e9a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e6e:	f7fd fb2f 	bl	80024d0 <HAL_GetTick>
 8004e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e74:	e00a      	b.n	8004e8c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e76:	f7fd fb2b 	bl	80024d0 <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d901      	bls.n	8004e8c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e0c5      	b.n	8005018 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e8c:	4b65      	ldr	r3, [pc, #404]	; (8005024 <HAL_RCC_OscConfig+0x4e8>)
 8004e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e90:	f003 0302 	and.w	r3, r3, #2
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d0ee      	beq.n	8004e76 <HAL_RCC_OscConfig+0x33a>
 8004e98:	e014      	b.n	8004ec4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e9a:	f7fd fb19 	bl	80024d0 <HAL_GetTick>
 8004e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ea0:	e00a      	b.n	8004eb8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ea2:	f7fd fb15 	bl	80024d0 <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d901      	bls.n	8004eb8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e0af      	b.n	8005018 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004eb8:	4b5a      	ldr	r3, [pc, #360]	; (8005024 <HAL_RCC_OscConfig+0x4e8>)
 8004eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ebc:	f003 0302 	and.w	r3, r3, #2
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1ee      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ec4:	7dfb      	ldrb	r3, [r7, #23]
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d105      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004eca:	4b56      	ldr	r3, [pc, #344]	; (8005024 <HAL_RCC_OscConfig+0x4e8>)
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ece:	4a55      	ldr	r2, [pc, #340]	; (8005024 <HAL_RCC_OscConfig+0x4e8>)
 8004ed0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ed4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	f000 809b 	beq.w	8005016 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ee0:	4b50      	ldr	r3, [pc, #320]	; (8005024 <HAL_RCC_OscConfig+0x4e8>)
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f003 030c 	and.w	r3, r3, #12
 8004ee8:	2b08      	cmp	r3, #8
 8004eea:	d05c      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d141      	bne.n	8004f78 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ef4:	4b4c      	ldr	r3, [pc, #304]	; (8005028 <HAL_RCC_OscConfig+0x4ec>)
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004efa:	f7fd fae9 	bl	80024d0 <HAL_GetTick>
 8004efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f00:	e008      	b.n	8004f14 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f02:	f7fd fae5 	bl	80024d0 <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d901      	bls.n	8004f14 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e081      	b.n	8005018 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f14:	4b43      	ldr	r3, [pc, #268]	; (8005024 <HAL_RCC_OscConfig+0x4e8>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1f0      	bne.n	8004f02 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	69da      	ldr	r2, [r3, #28]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a1b      	ldr	r3, [r3, #32]
 8004f28:	431a      	orrs	r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2e:	019b      	lsls	r3, r3, #6
 8004f30:	431a      	orrs	r2, r3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f36:	085b      	lsrs	r3, r3, #1
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	041b      	lsls	r3, r3, #16
 8004f3c:	431a      	orrs	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f42:	061b      	lsls	r3, r3, #24
 8004f44:	4937      	ldr	r1, [pc, #220]	; (8005024 <HAL_RCC_OscConfig+0x4e8>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f4a:	4b37      	ldr	r3, [pc, #220]	; (8005028 <HAL_RCC_OscConfig+0x4ec>)
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f50:	f7fd fabe 	bl	80024d0 <HAL_GetTick>
 8004f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f56:	e008      	b.n	8004f6a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f58:	f7fd faba 	bl	80024d0 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d901      	bls.n	8004f6a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e056      	b.n	8005018 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f6a:	4b2e      	ldr	r3, [pc, #184]	; (8005024 <HAL_RCC_OscConfig+0x4e8>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d0f0      	beq.n	8004f58 <HAL_RCC_OscConfig+0x41c>
 8004f76:	e04e      	b.n	8005016 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f78:	4b2b      	ldr	r3, [pc, #172]	; (8005028 <HAL_RCC_OscConfig+0x4ec>)
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f7e:	f7fd faa7 	bl	80024d0 <HAL_GetTick>
 8004f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f84:	e008      	b.n	8004f98 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f86:	f7fd faa3 	bl	80024d0 <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d901      	bls.n	8004f98 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e03f      	b.n	8005018 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f98:	4b22      	ldr	r3, [pc, #136]	; (8005024 <HAL_RCC_OscConfig+0x4e8>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d1f0      	bne.n	8004f86 <HAL_RCC_OscConfig+0x44a>
 8004fa4:	e037      	b.n	8005016 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d101      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e032      	b.n	8005018 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004fb2:	4b1c      	ldr	r3, [pc, #112]	; (8005024 <HAL_RCC_OscConfig+0x4e8>)
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d028      	beq.n	8005012 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d121      	bne.n	8005012 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d11a      	bne.n	8005012 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004fe8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d111      	bne.n	8005012 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff8:	085b      	lsrs	r3, r3, #1
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d107      	bne.n	8005012 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800500e:	429a      	cmp	r2, r3
 8005010:	d001      	beq.n	8005016 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e000      	b.n	8005018 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3718      	adds	r7, #24
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	40007000 	.word	0x40007000
 8005024:	40023800 	.word	0x40023800
 8005028:	42470060 	.word	0x42470060

0800502c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d101      	bne.n	8005040 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e0cc      	b.n	80051da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005040:	4b68      	ldr	r3, [pc, #416]	; (80051e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0307 	and.w	r3, r3, #7
 8005048:	683a      	ldr	r2, [r7, #0]
 800504a:	429a      	cmp	r2, r3
 800504c:	d90c      	bls.n	8005068 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800504e:	4b65      	ldr	r3, [pc, #404]	; (80051e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005050:	683a      	ldr	r2, [r7, #0]
 8005052:	b2d2      	uxtb	r2, r2
 8005054:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005056:	4b63      	ldr	r3, [pc, #396]	; (80051e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0307 	and.w	r3, r3, #7
 800505e:	683a      	ldr	r2, [r7, #0]
 8005060:	429a      	cmp	r2, r3
 8005062:	d001      	beq.n	8005068 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e0b8      	b.n	80051da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0302 	and.w	r3, r3, #2
 8005070:	2b00      	cmp	r3, #0
 8005072:	d020      	beq.n	80050b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0304 	and.w	r3, r3, #4
 800507c:	2b00      	cmp	r3, #0
 800507e:	d005      	beq.n	800508c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005080:	4b59      	ldr	r3, [pc, #356]	; (80051e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	4a58      	ldr	r2, [pc, #352]	; (80051e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005086:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800508a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0308 	and.w	r3, r3, #8
 8005094:	2b00      	cmp	r3, #0
 8005096:	d005      	beq.n	80050a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005098:	4b53      	ldr	r3, [pc, #332]	; (80051e8 <HAL_RCC_ClockConfig+0x1bc>)
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	4a52      	ldr	r2, [pc, #328]	; (80051e8 <HAL_RCC_ClockConfig+0x1bc>)
 800509e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80050a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050a4:	4b50      	ldr	r3, [pc, #320]	; (80051e8 <HAL_RCC_ClockConfig+0x1bc>)
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	494d      	ldr	r1, [pc, #308]	; (80051e8 <HAL_RCC_ClockConfig+0x1bc>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d044      	beq.n	800514c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d107      	bne.n	80050da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ca:	4b47      	ldr	r3, [pc, #284]	; (80051e8 <HAL_RCC_ClockConfig+0x1bc>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d119      	bne.n	800510a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e07f      	b.n	80051da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d003      	beq.n	80050ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050e6:	2b03      	cmp	r3, #3
 80050e8:	d107      	bne.n	80050fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ea:	4b3f      	ldr	r3, [pc, #252]	; (80051e8 <HAL_RCC_ClockConfig+0x1bc>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d109      	bne.n	800510a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e06f      	b.n	80051da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050fa:	4b3b      	ldr	r3, [pc, #236]	; (80051e8 <HAL_RCC_ClockConfig+0x1bc>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0302 	and.w	r3, r3, #2
 8005102:	2b00      	cmp	r3, #0
 8005104:	d101      	bne.n	800510a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e067      	b.n	80051da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800510a:	4b37      	ldr	r3, [pc, #220]	; (80051e8 <HAL_RCC_ClockConfig+0x1bc>)
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f023 0203 	bic.w	r2, r3, #3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	4934      	ldr	r1, [pc, #208]	; (80051e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005118:	4313      	orrs	r3, r2
 800511a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800511c:	f7fd f9d8 	bl	80024d0 <HAL_GetTick>
 8005120:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005122:	e00a      	b.n	800513a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005124:	f7fd f9d4 	bl	80024d0 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005132:	4293      	cmp	r3, r2
 8005134:	d901      	bls.n	800513a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e04f      	b.n	80051da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800513a:	4b2b      	ldr	r3, [pc, #172]	; (80051e8 <HAL_RCC_ClockConfig+0x1bc>)
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f003 020c 	and.w	r2, r3, #12
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	429a      	cmp	r2, r3
 800514a:	d1eb      	bne.n	8005124 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800514c:	4b25      	ldr	r3, [pc, #148]	; (80051e4 <HAL_RCC_ClockConfig+0x1b8>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0307 	and.w	r3, r3, #7
 8005154:	683a      	ldr	r2, [r7, #0]
 8005156:	429a      	cmp	r2, r3
 8005158:	d20c      	bcs.n	8005174 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800515a:	4b22      	ldr	r3, [pc, #136]	; (80051e4 <HAL_RCC_ClockConfig+0x1b8>)
 800515c:	683a      	ldr	r2, [r7, #0]
 800515e:	b2d2      	uxtb	r2, r2
 8005160:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005162:	4b20      	ldr	r3, [pc, #128]	; (80051e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0307 	and.w	r3, r3, #7
 800516a:	683a      	ldr	r2, [r7, #0]
 800516c:	429a      	cmp	r2, r3
 800516e:	d001      	beq.n	8005174 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e032      	b.n	80051da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0304 	and.w	r3, r3, #4
 800517c:	2b00      	cmp	r3, #0
 800517e:	d008      	beq.n	8005192 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005180:	4b19      	ldr	r3, [pc, #100]	; (80051e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	4916      	ldr	r1, [pc, #88]	; (80051e8 <HAL_RCC_ClockConfig+0x1bc>)
 800518e:	4313      	orrs	r3, r2
 8005190:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0308 	and.w	r3, r3, #8
 800519a:	2b00      	cmp	r3, #0
 800519c:	d009      	beq.n	80051b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800519e:	4b12      	ldr	r3, [pc, #72]	; (80051e8 <HAL_RCC_ClockConfig+0x1bc>)
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	00db      	lsls	r3, r3, #3
 80051ac:	490e      	ldr	r1, [pc, #56]	; (80051e8 <HAL_RCC_ClockConfig+0x1bc>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80051b2:	f000 f821 	bl	80051f8 <HAL_RCC_GetSysClockFreq>
 80051b6:	4602      	mov	r2, r0
 80051b8:	4b0b      	ldr	r3, [pc, #44]	; (80051e8 <HAL_RCC_ClockConfig+0x1bc>)
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	091b      	lsrs	r3, r3, #4
 80051be:	f003 030f 	and.w	r3, r3, #15
 80051c2:	490a      	ldr	r1, [pc, #40]	; (80051ec <HAL_RCC_ClockConfig+0x1c0>)
 80051c4:	5ccb      	ldrb	r3, [r1, r3]
 80051c6:	fa22 f303 	lsr.w	r3, r2, r3
 80051ca:	4a09      	ldr	r2, [pc, #36]	; (80051f0 <HAL_RCC_ClockConfig+0x1c4>)
 80051cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80051ce:	4b09      	ldr	r3, [pc, #36]	; (80051f4 <HAL_RCC_ClockConfig+0x1c8>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7fd f938 	bl	8002448 <HAL_InitTick>

  return HAL_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3710      	adds	r7, #16
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	40023c00 	.word	0x40023c00
 80051e8:	40023800 	.word	0x40023800
 80051ec:	08007690 	.word	0x08007690
 80051f0:	20000000 	.word	0x20000000
 80051f4:	20000004 	.word	0x20000004

080051f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051f8:	b5b0      	push	{r4, r5, r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80051fe:	2100      	movs	r1, #0
 8005200:	6079      	str	r1, [r7, #4]
 8005202:	2100      	movs	r1, #0
 8005204:	60f9      	str	r1, [r7, #12]
 8005206:	2100      	movs	r1, #0
 8005208:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800520a:	2100      	movs	r1, #0
 800520c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800520e:	4952      	ldr	r1, [pc, #328]	; (8005358 <HAL_RCC_GetSysClockFreq+0x160>)
 8005210:	6889      	ldr	r1, [r1, #8]
 8005212:	f001 010c 	and.w	r1, r1, #12
 8005216:	2908      	cmp	r1, #8
 8005218:	d00d      	beq.n	8005236 <HAL_RCC_GetSysClockFreq+0x3e>
 800521a:	2908      	cmp	r1, #8
 800521c:	f200 8094 	bhi.w	8005348 <HAL_RCC_GetSysClockFreq+0x150>
 8005220:	2900      	cmp	r1, #0
 8005222:	d002      	beq.n	800522a <HAL_RCC_GetSysClockFreq+0x32>
 8005224:	2904      	cmp	r1, #4
 8005226:	d003      	beq.n	8005230 <HAL_RCC_GetSysClockFreq+0x38>
 8005228:	e08e      	b.n	8005348 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800522a:	4b4c      	ldr	r3, [pc, #304]	; (800535c <HAL_RCC_GetSysClockFreq+0x164>)
 800522c:	60bb      	str	r3, [r7, #8]
       break;
 800522e:	e08e      	b.n	800534e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005230:	4b4b      	ldr	r3, [pc, #300]	; (8005360 <HAL_RCC_GetSysClockFreq+0x168>)
 8005232:	60bb      	str	r3, [r7, #8]
      break;
 8005234:	e08b      	b.n	800534e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005236:	4948      	ldr	r1, [pc, #288]	; (8005358 <HAL_RCC_GetSysClockFreq+0x160>)
 8005238:	6849      	ldr	r1, [r1, #4]
 800523a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800523e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005240:	4945      	ldr	r1, [pc, #276]	; (8005358 <HAL_RCC_GetSysClockFreq+0x160>)
 8005242:	6849      	ldr	r1, [r1, #4]
 8005244:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005248:	2900      	cmp	r1, #0
 800524a:	d024      	beq.n	8005296 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800524c:	4942      	ldr	r1, [pc, #264]	; (8005358 <HAL_RCC_GetSysClockFreq+0x160>)
 800524e:	6849      	ldr	r1, [r1, #4]
 8005250:	0989      	lsrs	r1, r1, #6
 8005252:	4608      	mov	r0, r1
 8005254:	f04f 0100 	mov.w	r1, #0
 8005258:	f240 14ff 	movw	r4, #511	; 0x1ff
 800525c:	f04f 0500 	mov.w	r5, #0
 8005260:	ea00 0204 	and.w	r2, r0, r4
 8005264:	ea01 0305 	and.w	r3, r1, r5
 8005268:	493d      	ldr	r1, [pc, #244]	; (8005360 <HAL_RCC_GetSysClockFreq+0x168>)
 800526a:	fb01 f003 	mul.w	r0, r1, r3
 800526e:	2100      	movs	r1, #0
 8005270:	fb01 f102 	mul.w	r1, r1, r2
 8005274:	1844      	adds	r4, r0, r1
 8005276:	493a      	ldr	r1, [pc, #232]	; (8005360 <HAL_RCC_GetSysClockFreq+0x168>)
 8005278:	fba2 0101 	umull	r0, r1, r2, r1
 800527c:	1863      	adds	r3, r4, r1
 800527e:	4619      	mov	r1, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	461a      	mov	r2, r3
 8005284:	f04f 0300 	mov.w	r3, #0
 8005288:	f7fb fc18 	bl	8000abc <__aeabi_uldivmod>
 800528c:	4602      	mov	r2, r0
 800528e:	460b      	mov	r3, r1
 8005290:	4613      	mov	r3, r2
 8005292:	60fb      	str	r3, [r7, #12]
 8005294:	e04a      	b.n	800532c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005296:	4b30      	ldr	r3, [pc, #192]	; (8005358 <HAL_RCC_GetSysClockFreq+0x160>)
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	099b      	lsrs	r3, r3, #6
 800529c:	461a      	mov	r2, r3
 800529e:	f04f 0300 	mov.w	r3, #0
 80052a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80052a6:	f04f 0100 	mov.w	r1, #0
 80052aa:	ea02 0400 	and.w	r4, r2, r0
 80052ae:	ea03 0501 	and.w	r5, r3, r1
 80052b2:	4620      	mov	r0, r4
 80052b4:	4629      	mov	r1, r5
 80052b6:	f04f 0200 	mov.w	r2, #0
 80052ba:	f04f 0300 	mov.w	r3, #0
 80052be:	014b      	lsls	r3, r1, #5
 80052c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80052c4:	0142      	lsls	r2, r0, #5
 80052c6:	4610      	mov	r0, r2
 80052c8:	4619      	mov	r1, r3
 80052ca:	1b00      	subs	r0, r0, r4
 80052cc:	eb61 0105 	sbc.w	r1, r1, r5
 80052d0:	f04f 0200 	mov.w	r2, #0
 80052d4:	f04f 0300 	mov.w	r3, #0
 80052d8:	018b      	lsls	r3, r1, #6
 80052da:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80052de:	0182      	lsls	r2, r0, #6
 80052e0:	1a12      	subs	r2, r2, r0
 80052e2:	eb63 0301 	sbc.w	r3, r3, r1
 80052e6:	f04f 0000 	mov.w	r0, #0
 80052ea:	f04f 0100 	mov.w	r1, #0
 80052ee:	00d9      	lsls	r1, r3, #3
 80052f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052f4:	00d0      	lsls	r0, r2, #3
 80052f6:	4602      	mov	r2, r0
 80052f8:	460b      	mov	r3, r1
 80052fa:	1912      	adds	r2, r2, r4
 80052fc:	eb45 0303 	adc.w	r3, r5, r3
 8005300:	f04f 0000 	mov.w	r0, #0
 8005304:	f04f 0100 	mov.w	r1, #0
 8005308:	0299      	lsls	r1, r3, #10
 800530a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800530e:	0290      	lsls	r0, r2, #10
 8005310:	4602      	mov	r2, r0
 8005312:	460b      	mov	r3, r1
 8005314:	4610      	mov	r0, r2
 8005316:	4619      	mov	r1, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	461a      	mov	r2, r3
 800531c:	f04f 0300 	mov.w	r3, #0
 8005320:	f7fb fbcc 	bl	8000abc <__aeabi_uldivmod>
 8005324:	4602      	mov	r2, r0
 8005326:	460b      	mov	r3, r1
 8005328:	4613      	mov	r3, r2
 800532a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800532c:	4b0a      	ldr	r3, [pc, #40]	; (8005358 <HAL_RCC_GetSysClockFreq+0x160>)
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	0c1b      	lsrs	r3, r3, #16
 8005332:	f003 0303 	and.w	r3, r3, #3
 8005336:	3301      	adds	r3, #1
 8005338:	005b      	lsls	r3, r3, #1
 800533a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	fbb2 f3f3 	udiv	r3, r2, r3
 8005344:	60bb      	str	r3, [r7, #8]
      break;
 8005346:	e002      	b.n	800534e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005348:	4b04      	ldr	r3, [pc, #16]	; (800535c <HAL_RCC_GetSysClockFreq+0x164>)
 800534a:	60bb      	str	r3, [r7, #8]
      break;
 800534c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800534e:	68bb      	ldr	r3, [r7, #8]
}
 8005350:	4618      	mov	r0, r3
 8005352:	3710      	adds	r7, #16
 8005354:	46bd      	mov	sp, r7
 8005356:	bdb0      	pop	{r4, r5, r7, pc}
 8005358:	40023800 	.word	0x40023800
 800535c:	00f42400 	.word	0x00f42400
 8005360:	017d7840 	.word	0x017d7840

08005364 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005364:	b480      	push	{r7}
 8005366:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005368:	4b03      	ldr	r3, [pc, #12]	; (8005378 <HAL_RCC_GetHCLKFreq+0x14>)
 800536a:	681b      	ldr	r3, [r3, #0]
}
 800536c:	4618      	mov	r0, r3
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	20000000 	.word	0x20000000

0800537c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005380:	f7ff fff0 	bl	8005364 <HAL_RCC_GetHCLKFreq>
 8005384:	4602      	mov	r2, r0
 8005386:	4b05      	ldr	r3, [pc, #20]	; (800539c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	0a9b      	lsrs	r3, r3, #10
 800538c:	f003 0307 	and.w	r3, r3, #7
 8005390:	4903      	ldr	r1, [pc, #12]	; (80053a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005392:	5ccb      	ldrb	r3, [r1, r3]
 8005394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005398:	4618      	mov	r0, r3
 800539a:	bd80      	pop	{r7, pc}
 800539c:	40023800 	.word	0x40023800
 80053a0:	080076a0 	.word	0x080076a0

080053a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80053a8:	f7ff ffdc 	bl	8005364 <HAL_RCC_GetHCLKFreq>
 80053ac:	4602      	mov	r2, r0
 80053ae:	4b05      	ldr	r3, [pc, #20]	; (80053c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	0b5b      	lsrs	r3, r3, #13
 80053b4:	f003 0307 	and.w	r3, r3, #7
 80053b8:	4903      	ldr	r1, [pc, #12]	; (80053c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053ba:	5ccb      	ldrb	r3, [r1, r3]
 80053bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	40023800 	.word	0x40023800
 80053c8:	080076a0 	.word	0x080076a0

080053cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e041      	b.n	8005462 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d106      	bne.n	80053f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f7fc fdc8 	bl	8001f88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2202      	movs	r2, #2
 80053fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	3304      	adds	r3, #4
 8005408:	4619      	mov	r1, r3
 800540a:	4610      	mov	r0, r2
 800540c:	f000 fad4 	bl	80059b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3708      	adds	r7, #8
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
	...

0800546c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d109      	bne.n	8005490 <HAL_TIM_PWM_Start+0x24>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005482:	b2db      	uxtb	r3, r3
 8005484:	2b01      	cmp	r3, #1
 8005486:	bf14      	ite	ne
 8005488:	2301      	movne	r3, #1
 800548a:	2300      	moveq	r3, #0
 800548c:	b2db      	uxtb	r3, r3
 800548e:	e022      	b.n	80054d6 <HAL_TIM_PWM_Start+0x6a>
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	2b04      	cmp	r3, #4
 8005494:	d109      	bne.n	80054aa <HAL_TIM_PWM_Start+0x3e>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800549c:	b2db      	uxtb	r3, r3
 800549e:	2b01      	cmp	r3, #1
 80054a0:	bf14      	ite	ne
 80054a2:	2301      	movne	r3, #1
 80054a4:	2300      	moveq	r3, #0
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	e015      	b.n	80054d6 <HAL_TIM_PWM_Start+0x6a>
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	2b08      	cmp	r3, #8
 80054ae:	d109      	bne.n	80054c4 <HAL_TIM_PWM_Start+0x58>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	bf14      	ite	ne
 80054bc:	2301      	movne	r3, #1
 80054be:	2300      	moveq	r3, #0
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	e008      	b.n	80054d6 <HAL_TIM_PWM_Start+0x6a>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	bf14      	ite	ne
 80054d0:	2301      	movne	r3, #1
 80054d2:	2300      	moveq	r3, #0
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d001      	beq.n	80054de <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e068      	b.n	80055b0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d104      	bne.n	80054ee <HAL_TIM_PWM_Start+0x82>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2202      	movs	r2, #2
 80054e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054ec:	e013      	b.n	8005516 <HAL_TIM_PWM_Start+0xaa>
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	2b04      	cmp	r3, #4
 80054f2:	d104      	bne.n	80054fe <HAL_TIM_PWM_Start+0x92>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2202      	movs	r2, #2
 80054f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054fc:	e00b      	b.n	8005516 <HAL_TIM_PWM_Start+0xaa>
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	2b08      	cmp	r3, #8
 8005502:	d104      	bne.n	800550e <HAL_TIM_PWM_Start+0xa2>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2202      	movs	r2, #2
 8005508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800550c:	e003      	b.n	8005516 <HAL_TIM_PWM_Start+0xaa>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2202      	movs	r2, #2
 8005512:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2201      	movs	r2, #1
 800551c:	6839      	ldr	r1, [r7, #0]
 800551e:	4618      	mov	r0, r3
 8005520:	f000 fc56 	bl	8005dd0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a23      	ldr	r2, [pc, #140]	; (80055b8 <HAL_TIM_PWM_Start+0x14c>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d107      	bne.n	800553e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800553c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a1d      	ldr	r2, [pc, #116]	; (80055b8 <HAL_TIM_PWM_Start+0x14c>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d018      	beq.n	800557a <HAL_TIM_PWM_Start+0x10e>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005550:	d013      	beq.n	800557a <HAL_TIM_PWM_Start+0x10e>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a19      	ldr	r2, [pc, #100]	; (80055bc <HAL_TIM_PWM_Start+0x150>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d00e      	beq.n	800557a <HAL_TIM_PWM_Start+0x10e>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a17      	ldr	r2, [pc, #92]	; (80055c0 <HAL_TIM_PWM_Start+0x154>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d009      	beq.n	800557a <HAL_TIM_PWM_Start+0x10e>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a16      	ldr	r2, [pc, #88]	; (80055c4 <HAL_TIM_PWM_Start+0x158>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d004      	beq.n	800557a <HAL_TIM_PWM_Start+0x10e>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a14      	ldr	r2, [pc, #80]	; (80055c8 <HAL_TIM_PWM_Start+0x15c>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d111      	bne.n	800559e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	f003 0307 	and.w	r3, r3, #7
 8005584:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2b06      	cmp	r3, #6
 800558a:	d010      	beq.n	80055ae <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f042 0201 	orr.w	r2, r2, #1
 800559a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800559c:	e007      	b.n	80055ae <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f042 0201 	orr.w	r2, r2, #1
 80055ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3710      	adds	r7, #16
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	40010000 	.word	0x40010000
 80055bc:	40000400 	.word	0x40000400
 80055c0:	40000800 	.word	0x40000800
 80055c4:	40000c00 	.word	0x40000c00
 80055c8:	40014000 	.word	0x40014000

080055cc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b086      	sub	sp, #24
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d101      	bne.n	80055e0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e097      	b.n	8005710 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d106      	bne.n	80055fa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f7fc fcff 	bl	8001ff8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2202      	movs	r2, #2
 80055fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	6812      	ldr	r2, [r2, #0]
 800560c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005610:	f023 0307 	bic.w	r3, r3, #7
 8005614:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	3304      	adds	r3, #4
 800561e:	4619      	mov	r1, r3
 8005620:	4610      	mov	r0, r2
 8005622:	f000 f9c9 	bl	80059b8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	699b      	ldr	r3, [r3, #24]
 8005634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6a1b      	ldr	r3, [r3, #32]
 800563c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	4313      	orrs	r3, r2
 8005646:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800564e:	f023 0303 	bic.w	r3, r3, #3
 8005652:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	689a      	ldr	r2, [r3, #8]
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	021b      	lsls	r3, r3, #8
 800565e:	4313      	orrs	r3, r2
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	4313      	orrs	r3, r2
 8005664:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800566c:	f023 030c 	bic.w	r3, r3, #12
 8005670:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005678:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800567c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	68da      	ldr	r2, [r3, #12]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	69db      	ldr	r3, [r3, #28]
 8005686:	021b      	lsls	r3, r3, #8
 8005688:	4313      	orrs	r3, r2
 800568a:	693a      	ldr	r2, [r7, #16]
 800568c:	4313      	orrs	r3, r2
 800568e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	011a      	lsls	r2, r3, #4
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	6a1b      	ldr	r3, [r3, #32]
 800569a:	031b      	lsls	r3, r3, #12
 800569c:	4313      	orrs	r3, r2
 800569e:	693a      	ldr	r2, [r7, #16]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80056aa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80056b2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	685a      	ldr	r2, [r3, #4]
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	695b      	ldr	r3, [r3, #20]
 80056bc:	011b      	lsls	r3, r3, #4
 80056be:	4313      	orrs	r3, r2
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	693a      	ldr	r2, [r7, #16]
 80056d4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2201      	movs	r2, #1
 8005702:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2201      	movs	r2, #1
 800570a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	3718      	adds	r7, #24
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005728:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005730:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005738:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005740:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d110      	bne.n	800576a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005748:	7bfb      	ldrb	r3, [r7, #15]
 800574a:	2b01      	cmp	r3, #1
 800574c:	d102      	bne.n	8005754 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800574e:	7b7b      	ldrb	r3, [r7, #13]
 8005750:	2b01      	cmp	r3, #1
 8005752:	d001      	beq.n	8005758 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e069      	b.n	800582c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2202      	movs	r2, #2
 800575c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2202      	movs	r2, #2
 8005764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005768:	e031      	b.n	80057ce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	2b04      	cmp	r3, #4
 800576e:	d110      	bne.n	8005792 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005770:	7bbb      	ldrb	r3, [r7, #14]
 8005772:	2b01      	cmp	r3, #1
 8005774:	d102      	bne.n	800577c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005776:	7b3b      	ldrb	r3, [r7, #12]
 8005778:	2b01      	cmp	r3, #1
 800577a:	d001      	beq.n	8005780 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e055      	b.n	800582c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2202      	movs	r2, #2
 8005784:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2202      	movs	r2, #2
 800578c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005790:	e01d      	b.n	80057ce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005792:	7bfb      	ldrb	r3, [r7, #15]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d108      	bne.n	80057aa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005798:	7bbb      	ldrb	r3, [r7, #14]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d105      	bne.n	80057aa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800579e:	7b7b      	ldrb	r3, [r7, #13]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d102      	bne.n	80057aa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80057a4:	7b3b      	ldrb	r3, [r7, #12]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d001      	beq.n	80057ae <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e03e      	b.n	800582c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2202      	movs	r2, #2
 80057b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2202      	movs	r2, #2
 80057ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2202      	movs	r2, #2
 80057c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2202      	movs	r2, #2
 80057ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d003      	beq.n	80057dc <HAL_TIM_Encoder_Start+0xc4>
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	2b04      	cmp	r3, #4
 80057d8:	d008      	beq.n	80057ec <HAL_TIM_Encoder_Start+0xd4>
 80057da:	e00f      	b.n	80057fc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2201      	movs	r2, #1
 80057e2:	2100      	movs	r1, #0
 80057e4:	4618      	mov	r0, r3
 80057e6:	f000 faf3 	bl	8005dd0 <TIM_CCxChannelCmd>
      break;
 80057ea:	e016      	b.n	800581a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2201      	movs	r2, #1
 80057f2:	2104      	movs	r1, #4
 80057f4:	4618      	mov	r0, r3
 80057f6:	f000 faeb 	bl	8005dd0 <TIM_CCxChannelCmd>
      break;
 80057fa:	e00e      	b.n	800581a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2201      	movs	r2, #1
 8005802:	2100      	movs	r1, #0
 8005804:	4618      	mov	r0, r3
 8005806:	f000 fae3 	bl	8005dd0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2201      	movs	r2, #1
 8005810:	2104      	movs	r1, #4
 8005812:	4618      	mov	r0, r3
 8005814:	f000 fadc 	bl	8005dd0 <TIM_CCxChannelCmd>
      break;
 8005818:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f042 0201 	orr.w	r2, r2, #1
 8005828:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3710      	adds	r7, #16
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b086      	sub	sp, #24
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005840:	2300      	movs	r3, #0
 8005842:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800584a:	2b01      	cmp	r3, #1
 800584c:	d101      	bne.n	8005852 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800584e:	2302      	movs	r3, #2
 8005850:	e0ae      	b.n	80059b0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2201      	movs	r2, #1
 8005856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2b0c      	cmp	r3, #12
 800585e:	f200 809f 	bhi.w	80059a0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005862:	a201      	add	r2, pc, #4	; (adr r2, 8005868 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005868:	0800589d 	.word	0x0800589d
 800586c:	080059a1 	.word	0x080059a1
 8005870:	080059a1 	.word	0x080059a1
 8005874:	080059a1 	.word	0x080059a1
 8005878:	080058dd 	.word	0x080058dd
 800587c:	080059a1 	.word	0x080059a1
 8005880:	080059a1 	.word	0x080059a1
 8005884:	080059a1 	.word	0x080059a1
 8005888:	0800591f 	.word	0x0800591f
 800588c:	080059a1 	.word	0x080059a1
 8005890:	080059a1 	.word	0x080059a1
 8005894:	080059a1 	.word	0x080059a1
 8005898:	0800595f 	.word	0x0800595f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68b9      	ldr	r1, [r7, #8]
 80058a2:	4618      	mov	r0, r3
 80058a4:	f000 f908 	bl	8005ab8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	699a      	ldr	r2, [r3, #24]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f042 0208 	orr.w	r2, r2, #8
 80058b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	699a      	ldr	r2, [r3, #24]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f022 0204 	bic.w	r2, r2, #4
 80058c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	6999      	ldr	r1, [r3, #24]
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	691a      	ldr	r2, [r3, #16]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	430a      	orrs	r2, r1
 80058d8:	619a      	str	r2, [r3, #24]
      break;
 80058da:	e064      	b.n	80059a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68b9      	ldr	r1, [r7, #8]
 80058e2:	4618      	mov	r0, r3
 80058e4:	f000 f94e 	bl	8005b84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	699a      	ldr	r2, [r3, #24]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	699a      	ldr	r2, [r3, #24]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005906:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	6999      	ldr	r1, [r3, #24]
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	021a      	lsls	r2, r3, #8
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	430a      	orrs	r2, r1
 800591a:	619a      	str	r2, [r3, #24]
      break;
 800591c:	e043      	b.n	80059a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68b9      	ldr	r1, [r7, #8]
 8005924:	4618      	mov	r0, r3
 8005926:	f000 f999 	bl	8005c5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	69da      	ldr	r2, [r3, #28]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f042 0208 	orr.w	r2, r2, #8
 8005938:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	69da      	ldr	r2, [r3, #28]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f022 0204 	bic.w	r2, r2, #4
 8005948:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	69d9      	ldr	r1, [r3, #28]
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	691a      	ldr	r2, [r3, #16]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	430a      	orrs	r2, r1
 800595a:	61da      	str	r2, [r3, #28]
      break;
 800595c:	e023      	b.n	80059a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68b9      	ldr	r1, [r7, #8]
 8005964:	4618      	mov	r0, r3
 8005966:	f000 f9e3 	bl	8005d30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	69da      	ldr	r2, [r3, #28]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005978:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	69da      	ldr	r2, [r3, #28]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005988:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	69d9      	ldr	r1, [r3, #28]
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	021a      	lsls	r2, r3, #8
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	430a      	orrs	r2, r1
 800599c:	61da      	str	r2, [r3, #28]
      break;
 800599e:	e002      	b.n	80059a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	75fb      	strb	r3, [r7, #23]
      break;
 80059a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3718      	adds	r7, #24
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a34      	ldr	r2, [pc, #208]	; (8005a9c <TIM_Base_SetConfig+0xe4>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d00f      	beq.n	80059f0 <TIM_Base_SetConfig+0x38>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059d6:	d00b      	beq.n	80059f0 <TIM_Base_SetConfig+0x38>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a31      	ldr	r2, [pc, #196]	; (8005aa0 <TIM_Base_SetConfig+0xe8>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d007      	beq.n	80059f0 <TIM_Base_SetConfig+0x38>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a30      	ldr	r2, [pc, #192]	; (8005aa4 <TIM_Base_SetConfig+0xec>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d003      	beq.n	80059f0 <TIM_Base_SetConfig+0x38>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a2f      	ldr	r2, [pc, #188]	; (8005aa8 <TIM_Base_SetConfig+0xf0>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d108      	bne.n	8005a02 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a25      	ldr	r2, [pc, #148]	; (8005a9c <TIM_Base_SetConfig+0xe4>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d01b      	beq.n	8005a42 <TIM_Base_SetConfig+0x8a>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a10:	d017      	beq.n	8005a42 <TIM_Base_SetConfig+0x8a>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a22      	ldr	r2, [pc, #136]	; (8005aa0 <TIM_Base_SetConfig+0xe8>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d013      	beq.n	8005a42 <TIM_Base_SetConfig+0x8a>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a21      	ldr	r2, [pc, #132]	; (8005aa4 <TIM_Base_SetConfig+0xec>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d00f      	beq.n	8005a42 <TIM_Base_SetConfig+0x8a>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a20      	ldr	r2, [pc, #128]	; (8005aa8 <TIM_Base_SetConfig+0xf0>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d00b      	beq.n	8005a42 <TIM_Base_SetConfig+0x8a>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a1f      	ldr	r2, [pc, #124]	; (8005aac <TIM_Base_SetConfig+0xf4>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d007      	beq.n	8005a42 <TIM_Base_SetConfig+0x8a>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a1e      	ldr	r2, [pc, #120]	; (8005ab0 <TIM_Base_SetConfig+0xf8>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d003      	beq.n	8005a42 <TIM_Base_SetConfig+0x8a>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a1d      	ldr	r2, [pc, #116]	; (8005ab4 <TIM_Base_SetConfig+0xfc>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d108      	bne.n	8005a54 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	695b      	ldr	r3, [r3, #20]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	689a      	ldr	r2, [r3, #8]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a08      	ldr	r2, [pc, #32]	; (8005a9c <TIM_Base_SetConfig+0xe4>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d103      	bne.n	8005a88 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	691a      	ldr	r2, [r3, #16]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	615a      	str	r2, [r3, #20]
}
 8005a8e:	bf00      	nop
 8005a90:	3714      	adds	r7, #20
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	40010000 	.word	0x40010000
 8005aa0:	40000400 	.word	0x40000400
 8005aa4:	40000800 	.word	0x40000800
 8005aa8:	40000c00 	.word	0x40000c00
 8005aac:	40014000 	.word	0x40014000
 8005ab0:	40014400 	.word	0x40014400
 8005ab4:	40014800 	.word	0x40014800

08005ab8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b087      	sub	sp, #28
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
 8005ac6:	f023 0201 	bic.w	r2, r3, #1
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a1b      	ldr	r3, [r3, #32]
 8005ad2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f023 0303 	bic.w	r3, r3, #3
 8005aee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	f023 0302 	bic.w	r3, r3, #2
 8005b00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a1c      	ldr	r2, [pc, #112]	; (8005b80 <TIM_OC1_SetConfig+0xc8>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d10c      	bne.n	8005b2e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	f023 0308 	bic.w	r3, r3, #8
 8005b1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	697a      	ldr	r2, [r7, #20]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	f023 0304 	bic.w	r3, r3, #4
 8005b2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a13      	ldr	r2, [pc, #76]	; (8005b80 <TIM_OC1_SetConfig+0xc8>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d111      	bne.n	8005b5a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	685a      	ldr	r2, [r3, #4]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	697a      	ldr	r2, [r7, #20]
 8005b72:	621a      	str	r2, [r3, #32]
}
 8005b74:	bf00      	nop
 8005b76:	371c      	adds	r7, #28
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr
 8005b80:	40010000 	.word	0x40010000

08005b84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b087      	sub	sp, #28
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a1b      	ldr	r3, [r3, #32]
 8005b92:	f023 0210 	bic.w	r2, r3, #16
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a1b      	ldr	r3, [r3, #32]
 8005b9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	699b      	ldr	r3, [r3, #24]
 8005baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	021b      	lsls	r3, r3, #8
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	f023 0320 	bic.w	r3, r3, #32
 8005bce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	011b      	lsls	r3, r3, #4
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a1e      	ldr	r2, [pc, #120]	; (8005c58 <TIM_OC2_SetConfig+0xd4>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d10d      	bne.n	8005c00 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	011b      	lsls	r3, r3, #4
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bfe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a15      	ldr	r2, [pc, #84]	; (8005c58 <TIM_OC2_SetConfig+0xd4>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d113      	bne.n	8005c30 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	695b      	ldr	r3, [r3, #20]
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	699b      	ldr	r3, [r3, #24]
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	693a      	ldr	r2, [r7, #16]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	693a      	ldr	r2, [r7, #16]
 8005c34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	685a      	ldr	r2, [r3, #4]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	697a      	ldr	r2, [r7, #20]
 8005c48:	621a      	str	r2, [r3, #32]
}
 8005c4a:	bf00      	nop
 8005c4c:	371c      	adds	r7, #28
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	40010000 	.word	0x40010000

08005c5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b087      	sub	sp, #28
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a1b      	ldr	r3, [r3, #32]
 8005c76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	69db      	ldr	r3, [r3, #28]
 8005c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f023 0303 	bic.w	r3, r3, #3
 8005c92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ca4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	021b      	lsls	r3, r3, #8
 8005cac:	697a      	ldr	r2, [r7, #20]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a1d      	ldr	r2, [pc, #116]	; (8005d2c <TIM_OC3_SetConfig+0xd0>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d10d      	bne.n	8005cd6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	021b      	lsls	r3, r3, #8
 8005cc8:	697a      	ldr	r2, [r7, #20]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a14      	ldr	r2, [pc, #80]	; (8005d2c <TIM_OC3_SetConfig+0xd0>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d113      	bne.n	8005d06 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ce4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	011b      	lsls	r3, r3, #4
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	011b      	lsls	r3, r3, #4
 8005d00:	693a      	ldr	r2, [r7, #16]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	693a      	ldr	r2, [r7, #16]
 8005d0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	685a      	ldr	r2, [r3, #4]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	697a      	ldr	r2, [r7, #20]
 8005d1e:	621a      	str	r2, [r3, #32]
}
 8005d20:	bf00      	nop
 8005d22:	371c      	adds	r7, #28
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr
 8005d2c:	40010000 	.word	0x40010000

08005d30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b087      	sub	sp, #28
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a1b      	ldr	r3, [r3, #32]
 8005d4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	69db      	ldr	r3, [r3, #28]
 8005d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	021b      	lsls	r3, r3, #8
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	031b      	lsls	r3, r3, #12
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a10      	ldr	r2, [pc, #64]	; (8005dcc <TIM_OC4_SetConfig+0x9c>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d109      	bne.n	8005da4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	695b      	ldr	r3, [r3, #20]
 8005d9c:	019b      	lsls	r3, r3, #6
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	685a      	ldr	r2, [r3, #4]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	621a      	str	r2, [r3, #32]
}
 8005dbe:	bf00      	nop
 8005dc0:	371c      	adds	r7, #28
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	40010000 	.word	0x40010000

08005dd0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b087      	sub	sp, #28
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	f003 031f 	and.w	r3, r3, #31
 8005de2:	2201      	movs	r2, #1
 8005de4:	fa02 f303 	lsl.w	r3, r2, r3
 8005de8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6a1a      	ldr	r2, [r3, #32]
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	43db      	mvns	r3, r3
 8005df2:	401a      	ands	r2, r3
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6a1a      	ldr	r2, [r3, #32]
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	f003 031f 	and.w	r3, r3, #31
 8005e02:	6879      	ldr	r1, [r7, #4]
 8005e04:	fa01 f303 	lsl.w	r3, r1, r3
 8005e08:	431a      	orrs	r2, r3
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	621a      	str	r2, [r3, #32]
}
 8005e0e:	bf00      	nop
 8005e10:	371c      	adds	r7, #28
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
	...

08005e1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d101      	bne.n	8005e34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e30:	2302      	movs	r3, #2
 8005e32:	e050      	b.n	8005ed6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2202      	movs	r2, #2
 8005e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a1c      	ldr	r2, [pc, #112]	; (8005ee4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d018      	beq.n	8005eaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e80:	d013      	beq.n	8005eaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a18      	ldr	r2, [pc, #96]	; (8005ee8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d00e      	beq.n	8005eaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a16      	ldr	r2, [pc, #88]	; (8005eec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d009      	beq.n	8005eaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a15      	ldr	r2, [pc, #84]	; (8005ef0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d004      	beq.n	8005eaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a13      	ldr	r2, [pc, #76]	; (8005ef4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d10c      	bne.n	8005ec4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	68ba      	ldr	r2, [r7, #8]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68ba      	ldr	r2, [r7, #8]
 8005ec2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3714      	adds	r7, #20
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
 8005ee2:	bf00      	nop
 8005ee4:	40010000 	.word	0x40010000
 8005ee8:	40000400 	.word	0x40000400
 8005eec:	40000800 	.word	0x40000800
 8005ef0:	40000c00 	.word	0x40000c00
 8005ef4:	40014000 	.word	0x40014000

08005ef8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b085      	sub	sp, #20
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005f02:	2300      	movs	r3, #0
 8005f04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d101      	bne.n	8005f14 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005f10:	2302      	movs	r3, #2
 8005f12:	e03d      	b.n	8005f90 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	695b      	ldr	r3, [r3, #20]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	69db      	ldr	r3, [r3, #28]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3714      	adds	r7, #20
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b082      	sub	sp, #8
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d101      	bne.n	8005fae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e03f      	b.n	800602e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d106      	bne.n	8005fc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f7fc f8c2 	bl	800214c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2224      	movs	r2, #36	; 0x24
 8005fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68da      	ldr	r2, [r3, #12]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 f929 	bl	8006238 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	691a      	ldr	r2, [r3, #16]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ff4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	695a      	ldr	r2, [r3, #20]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006004:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68da      	ldr	r2, [r3, #12]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006014:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2220      	movs	r2, #32
 8006020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2220      	movs	r2, #32
 8006028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3708      	adds	r7, #8
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006036:	b580      	push	{r7, lr}
 8006038:	b08a      	sub	sp, #40	; 0x28
 800603a:	af02      	add	r7, sp, #8
 800603c:	60f8      	str	r0, [r7, #12]
 800603e:	60b9      	str	r1, [r7, #8]
 8006040:	603b      	str	r3, [r7, #0]
 8006042:	4613      	mov	r3, r2
 8006044:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006046:	2300      	movs	r3, #0
 8006048:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006050:	b2db      	uxtb	r3, r3
 8006052:	2b20      	cmp	r3, #32
 8006054:	d17c      	bne.n	8006150 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d002      	beq.n	8006062 <HAL_UART_Transmit+0x2c>
 800605c:	88fb      	ldrh	r3, [r7, #6]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d101      	bne.n	8006066 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e075      	b.n	8006152 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800606c:	2b01      	cmp	r3, #1
 800606e:	d101      	bne.n	8006074 <HAL_UART_Transmit+0x3e>
 8006070:	2302      	movs	r3, #2
 8006072:	e06e      	b.n	8006152 <HAL_UART_Transmit+0x11c>
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2200      	movs	r2, #0
 8006080:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2221      	movs	r2, #33	; 0x21
 8006086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800608a:	f7fc fa21 	bl	80024d0 <HAL_GetTick>
 800608e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	88fa      	ldrh	r2, [r7, #6]
 8006094:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	88fa      	ldrh	r2, [r7, #6]
 800609a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060a4:	d108      	bne.n	80060b8 <HAL_UART_Transmit+0x82>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d104      	bne.n	80060b8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80060ae:	2300      	movs	r3, #0
 80060b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	61bb      	str	r3, [r7, #24]
 80060b6:	e003      	b.n	80060c0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060bc:	2300      	movs	r3, #0
 80060be:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80060c8:	e02a      	b.n	8006120 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	9300      	str	r3, [sp, #0]
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	2200      	movs	r2, #0
 80060d2:	2180      	movs	r1, #128	; 0x80
 80060d4:	68f8      	ldr	r0, [r7, #12]
 80060d6:	f000 f840 	bl	800615a <UART_WaitOnFlagUntilTimeout>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d001      	beq.n	80060e4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80060e0:	2303      	movs	r3, #3
 80060e2:	e036      	b.n	8006152 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d10b      	bne.n	8006102 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	881b      	ldrh	r3, [r3, #0]
 80060ee:	461a      	mov	r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	3302      	adds	r3, #2
 80060fe:	61bb      	str	r3, [r7, #24]
 8006100:	e007      	b.n	8006112 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	781a      	ldrb	r2, [r3, #0]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	3301      	adds	r3, #1
 8006110:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006116:	b29b      	uxth	r3, r3
 8006118:	3b01      	subs	r3, #1
 800611a:	b29a      	uxth	r2, r3
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006124:	b29b      	uxth	r3, r3
 8006126:	2b00      	cmp	r3, #0
 8006128:	d1cf      	bne.n	80060ca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	9300      	str	r3, [sp, #0]
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	2200      	movs	r2, #0
 8006132:	2140      	movs	r1, #64	; 0x40
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	f000 f810 	bl	800615a <UART_WaitOnFlagUntilTimeout>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d001      	beq.n	8006144 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006140:	2303      	movs	r3, #3
 8006142:	e006      	b.n	8006152 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2220      	movs	r2, #32
 8006148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800614c:	2300      	movs	r3, #0
 800614e:	e000      	b.n	8006152 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006150:	2302      	movs	r3, #2
  }
}
 8006152:	4618      	mov	r0, r3
 8006154:	3720      	adds	r7, #32
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}

0800615a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800615a:	b580      	push	{r7, lr}
 800615c:	b090      	sub	sp, #64	; 0x40
 800615e:	af00      	add	r7, sp, #0
 8006160:	60f8      	str	r0, [r7, #12]
 8006162:	60b9      	str	r1, [r7, #8]
 8006164:	603b      	str	r3, [r7, #0]
 8006166:	4613      	mov	r3, r2
 8006168:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800616a:	e050      	b.n	800620e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800616c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800616e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006172:	d04c      	beq.n	800620e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006174:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006176:	2b00      	cmp	r3, #0
 8006178:	d007      	beq.n	800618a <UART_WaitOnFlagUntilTimeout+0x30>
 800617a:	f7fc f9a9 	bl	80024d0 <HAL_GetTick>
 800617e:	4602      	mov	r2, r0
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006186:	429a      	cmp	r2, r3
 8006188:	d241      	bcs.n	800620e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	330c      	adds	r3, #12
 8006190:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006194:	e853 3f00 	ldrex	r3, [r3]
 8006198:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800619a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80061a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	330c      	adds	r3, #12
 80061a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80061aa:	637a      	str	r2, [r7, #52]	; 0x34
 80061ac:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061b2:	e841 2300 	strex	r3, r2, [r1]
 80061b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80061b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d1e5      	bne.n	800618a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	3314      	adds	r3, #20
 80061c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	e853 3f00 	ldrex	r3, [r3]
 80061cc:	613b      	str	r3, [r7, #16]
   return(result);
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	f023 0301 	bic.w	r3, r3, #1
 80061d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	3314      	adds	r3, #20
 80061dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061de:	623a      	str	r2, [r7, #32]
 80061e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e2:	69f9      	ldr	r1, [r7, #28]
 80061e4:	6a3a      	ldr	r2, [r7, #32]
 80061e6:	e841 2300 	strex	r3, r2, [r1]
 80061ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d1e5      	bne.n	80061be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2220      	movs	r2, #32
 80061f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2220      	movs	r2, #32
 80061fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800620a:	2303      	movs	r3, #3
 800620c:	e00f      	b.n	800622e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	4013      	ands	r3, r2
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	429a      	cmp	r2, r3
 800621c:	bf0c      	ite	eq
 800621e:	2301      	moveq	r3, #1
 8006220:	2300      	movne	r3, #0
 8006222:	b2db      	uxtb	r3, r3
 8006224:	461a      	mov	r2, r3
 8006226:	79fb      	ldrb	r3, [r7, #7]
 8006228:	429a      	cmp	r2, r3
 800622a:	d09f      	beq.n	800616c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	3740      	adds	r7, #64	; 0x40
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
	...

08006238 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800623c:	b09f      	sub	sp, #124	; 0x7c
 800623e:	af00      	add	r7, sp, #0
 8006240:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	691b      	ldr	r3, [r3, #16]
 8006248:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800624c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800624e:	68d9      	ldr	r1, [r3, #12]
 8006250:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	ea40 0301 	orr.w	r3, r0, r1
 8006258:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800625a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800625c:	689a      	ldr	r2, [r3, #8]
 800625e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	431a      	orrs	r2, r3
 8006264:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006266:	695b      	ldr	r3, [r3, #20]
 8006268:	431a      	orrs	r2, r3
 800626a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800626c:	69db      	ldr	r3, [r3, #28]
 800626e:	4313      	orrs	r3, r2
 8006270:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800627c:	f021 010c 	bic.w	r1, r1, #12
 8006280:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006286:	430b      	orrs	r3, r1
 8006288:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800628a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	695b      	ldr	r3, [r3, #20]
 8006290:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006296:	6999      	ldr	r1, [r3, #24]
 8006298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	ea40 0301 	orr.w	r3, r0, r1
 80062a0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80062a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	4bc5      	ldr	r3, [pc, #788]	; (80065bc <UART_SetConfig+0x384>)
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d004      	beq.n	80062b6 <UART_SetConfig+0x7e>
 80062ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	4bc3      	ldr	r3, [pc, #780]	; (80065c0 <UART_SetConfig+0x388>)
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d103      	bne.n	80062be <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80062b6:	f7ff f875 	bl	80053a4 <HAL_RCC_GetPCLK2Freq>
 80062ba:	6778      	str	r0, [r7, #116]	; 0x74
 80062bc:	e002      	b.n	80062c4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80062be:	f7ff f85d 	bl	800537c <HAL_RCC_GetPCLK1Freq>
 80062c2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062c6:	69db      	ldr	r3, [r3, #28]
 80062c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062cc:	f040 80b6 	bne.w	800643c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80062d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062d2:	461c      	mov	r4, r3
 80062d4:	f04f 0500 	mov.w	r5, #0
 80062d8:	4622      	mov	r2, r4
 80062da:	462b      	mov	r3, r5
 80062dc:	1891      	adds	r1, r2, r2
 80062de:	6439      	str	r1, [r7, #64]	; 0x40
 80062e0:	415b      	adcs	r3, r3
 80062e2:	647b      	str	r3, [r7, #68]	; 0x44
 80062e4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80062e8:	1912      	adds	r2, r2, r4
 80062ea:	eb45 0303 	adc.w	r3, r5, r3
 80062ee:	f04f 0000 	mov.w	r0, #0
 80062f2:	f04f 0100 	mov.w	r1, #0
 80062f6:	00d9      	lsls	r1, r3, #3
 80062f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80062fc:	00d0      	lsls	r0, r2, #3
 80062fe:	4602      	mov	r2, r0
 8006300:	460b      	mov	r3, r1
 8006302:	1911      	adds	r1, r2, r4
 8006304:	6639      	str	r1, [r7, #96]	; 0x60
 8006306:	416b      	adcs	r3, r5
 8006308:	667b      	str	r3, [r7, #100]	; 0x64
 800630a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	461a      	mov	r2, r3
 8006310:	f04f 0300 	mov.w	r3, #0
 8006314:	1891      	adds	r1, r2, r2
 8006316:	63b9      	str	r1, [r7, #56]	; 0x38
 8006318:	415b      	adcs	r3, r3
 800631a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800631c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006320:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006324:	f7fa fbca 	bl	8000abc <__aeabi_uldivmod>
 8006328:	4602      	mov	r2, r0
 800632a:	460b      	mov	r3, r1
 800632c:	4ba5      	ldr	r3, [pc, #660]	; (80065c4 <UART_SetConfig+0x38c>)
 800632e:	fba3 2302 	umull	r2, r3, r3, r2
 8006332:	095b      	lsrs	r3, r3, #5
 8006334:	011e      	lsls	r6, r3, #4
 8006336:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006338:	461c      	mov	r4, r3
 800633a:	f04f 0500 	mov.w	r5, #0
 800633e:	4622      	mov	r2, r4
 8006340:	462b      	mov	r3, r5
 8006342:	1891      	adds	r1, r2, r2
 8006344:	6339      	str	r1, [r7, #48]	; 0x30
 8006346:	415b      	adcs	r3, r3
 8006348:	637b      	str	r3, [r7, #52]	; 0x34
 800634a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800634e:	1912      	adds	r2, r2, r4
 8006350:	eb45 0303 	adc.w	r3, r5, r3
 8006354:	f04f 0000 	mov.w	r0, #0
 8006358:	f04f 0100 	mov.w	r1, #0
 800635c:	00d9      	lsls	r1, r3, #3
 800635e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006362:	00d0      	lsls	r0, r2, #3
 8006364:	4602      	mov	r2, r0
 8006366:	460b      	mov	r3, r1
 8006368:	1911      	adds	r1, r2, r4
 800636a:	65b9      	str	r1, [r7, #88]	; 0x58
 800636c:	416b      	adcs	r3, r5
 800636e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006370:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	461a      	mov	r2, r3
 8006376:	f04f 0300 	mov.w	r3, #0
 800637a:	1891      	adds	r1, r2, r2
 800637c:	62b9      	str	r1, [r7, #40]	; 0x28
 800637e:	415b      	adcs	r3, r3
 8006380:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006382:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006386:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800638a:	f7fa fb97 	bl	8000abc <__aeabi_uldivmod>
 800638e:	4602      	mov	r2, r0
 8006390:	460b      	mov	r3, r1
 8006392:	4b8c      	ldr	r3, [pc, #560]	; (80065c4 <UART_SetConfig+0x38c>)
 8006394:	fba3 1302 	umull	r1, r3, r3, r2
 8006398:	095b      	lsrs	r3, r3, #5
 800639a:	2164      	movs	r1, #100	; 0x64
 800639c:	fb01 f303 	mul.w	r3, r1, r3
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	00db      	lsls	r3, r3, #3
 80063a4:	3332      	adds	r3, #50	; 0x32
 80063a6:	4a87      	ldr	r2, [pc, #540]	; (80065c4 <UART_SetConfig+0x38c>)
 80063a8:	fba2 2303 	umull	r2, r3, r2, r3
 80063ac:	095b      	lsrs	r3, r3, #5
 80063ae:	005b      	lsls	r3, r3, #1
 80063b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80063b4:	441e      	add	r6, r3
 80063b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063b8:	4618      	mov	r0, r3
 80063ba:	f04f 0100 	mov.w	r1, #0
 80063be:	4602      	mov	r2, r0
 80063c0:	460b      	mov	r3, r1
 80063c2:	1894      	adds	r4, r2, r2
 80063c4:	623c      	str	r4, [r7, #32]
 80063c6:	415b      	adcs	r3, r3
 80063c8:	627b      	str	r3, [r7, #36]	; 0x24
 80063ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80063ce:	1812      	adds	r2, r2, r0
 80063d0:	eb41 0303 	adc.w	r3, r1, r3
 80063d4:	f04f 0400 	mov.w	r4, #0
 80063d8:	f04f 0500 	mov.w	r5, #0
 80063dc:	00dd      	lsls	r5, r3, #3
 80063de:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80063e2:	00d4      	lsls	r4, r2, #3
 80063e4:	4622      	mov	r2, r4
 80063e6:	462b      	mov	r3, r5
 80063e8:	1814      	adds	r4, r2, r0
 80063ea:	653c      	str	r4, [r7, #80]	; 0x50
 80063ec:	414b      	adcs	r3, r1
 80063ee:	657b      	str	r3, [r7, #84]	; 0x54
 80063f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	461a      	mov	r2, r3
 80063f6:	f04f 0300 	mov.w	r3, #0
 80063fa:	1891      	adds	r1, r2, r2
 80063fc:	61b9      	str	r1, [r7, #24]
 80063fe:	415b      	adcs	r3, r3
 8006400:	61fb      	str	r3, [r7, #28]
 8006402:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006406:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800640a:	f7fa fb57 	bl	8000abc <__aeabi_uldivmod>
 800640e:	4602      	mov	r2, r0
 8006410:	460b      	mov	r3, r1
 8006412:	4b6c      	ldr	r3, [pc, #432]	; (80065c4 <UART_SetConfig+0x38c>)
 8006414:	fba3 1302 	umull	r1, r3, r3, r2
 8006418:	095b      	lsrs	r3, r3, #5
 800641a:	2164      	movs	r1, #100	; 0x64
 800641c:	fb01 f303 	mul.w	r3, r1, r3
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	00db      	lsls	r3, r3, #3
 8006424:	3332      	adds	r3, #50	; 0x32
 8006426:	4a67      	ldr	r2, [pc, #412]	; (80065c4 <UART_SetConfig+0x38c>)
 8006428:	fba2 2303 	umull	r2, r3, r2, r3
 800642c:	095b      	lsrs	r3, r3, #5
 800642e:	f003 0207 	and.w	r2, r3, #7
 8006432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4432      	add	r2, r6
 8006438:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800643a:	e0b9      	b.n	80065b0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800643c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800643e:	461c      	mov	r4, r3
 8006440:	f04f 0500 	mov.w	r5, #0
 8006444:	4622      	mov	r2, r4
 8006446:	462b      	mov	r3, r5
 8006448:	1891      	adds	r1, r2, r2
 800644a:	6139      	str	r1, [r7, #16]
 800644c:	415b      	adcs	r3, r3
 800644e:	617b      	str	r3, [r7, #20]
 8006450:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006454:	1912      	adds	r2, r2, r4
 8006456:	eb45 0303 	adc.w	r3, r5, r3
 800645a:	f04f 0000 	mov.w	r0, #0
 800645e:	f04f 0100 	mov.w	r1, #0
 8006462:	00d9      	lsls	r1, r3, #3
 8006464:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006468:	00d0      	lsls	r0, r2, #3
 800646a:	4602      	mov	r2, r0
 800646c:	460b      	mov	r3, r1
 800646e:	eb12 0804 	adds.w	r8, r2, r4
 8006472:	eb43 0905 	adc.w	r9, r3, r5
 8006476:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	4618      	mov	r0, r3
 800647c:	f04f 0100 	mov.w	r1, #0
 8006480:	f04f 0200 	mov.w	r2, #0
 8006484:	f04f 0300 	mov.w	r3, #0
 8006488:	008b      	lsls	r3, r1, #2
 800648a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800648e:	0082      	lsls	r2, r0, #2
 8006490:	4640      	mov	r0, r8
 8006492:	4649      	mov	r1, r9
 8006494:	f7fa fb12 	bl	8000abc <__aeabi_uldivmod>
 8006498:	4602      	mov	r2, r0
 800649a:	460b      	mov	r3, r1
 800649c:	4b49      	ldr	r3, [pc, #292]	; (80065c4 <UART_SetConfig+0x38c>)
 800649e:	fba3 2302 	umull	r2, r3, r3, r2
 80064a2:	095b      	lsrs	r3, r3, #5
 80064a4:	011e      	lsls	r6, r3, #4
 80064a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064a8:	4618      	mov	r0, r3
 80064aa:	f04f 0100 	mov.w	r1, #0
 80064ae:	4602      	mov	r2, r0
 80064b0:	460b      	mov	r3, r1
 80064b2:	1894      	adds	r4, r2, r2
 80064b4:	60bc      	str	r4, [r7, #8]
 80064b6:	415b      	adcs	r3, r3
 80064b8:	60fb      	str	r3, [r7, #12]
 80064ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064be:	1812      	adds	r2, r2, r0
 80064c0:	eb41 0303 	adc.w	r3, r1, r3
 80064c4:	f04f 0400 	mov.w	r4, #0
 80064c8:	f04f 0500 	mov.w	r5, #0
 80064cc:	00dd      	lsls	r5, r3, #3
 80064ce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80064d2:	00d4      	lsls	r4, r2, #3
 80064d4:	4622      	mov	r2, r4
 80064d6:	462b      	mov	r3, r5
 80064d8:	1814      	adds	r4, r2, r0
 80064da:	64bc      	str	r4, [r7, #72]	; 0x48
 80064dc:	414b      	adcs	r3, r1
 80064de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	4618      	mov	r0, r3
 80064e6:	f04f 0100 	mov.w	r1, #0
 80064ea:	f04f 0200 	mov.w	r2, #0
 80064ee:	f04f 0300 	mov.w	r3, #0
 80064f2:	008b      	lsls	r3, r1, #2
 80064f4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80064f8:	0082      	lsls	r2, r0, #2
 80064fa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80064fe:	f7fa fadd 	bl	8000abc <__aeabi_uldivmod>
 8006502:	4602      	mov	r2, r0
 8006504:	460b      	mov	r3, r1
 8006506:	4b2f      	ldr	r3, [pc, #188]	; (80065c4 <UART_SetConfig+0x38c>)
 8006508:	fba3 1302 	umull	r1, r3, r3, r2
 800650c:	095b      	lsrs	r3, r3, #5
 800650e:	2164      	movs	r1, #100	; 0x64
 8006510:	fb01 f303 	mul.w	r3, r1, r3
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	011b      	lsls	r3, r3, #4
 8006518:	3332      	adds	r3, #50	; 0x32
 800651a:	4a2a      	ldr	r2, [pc, #168]	; (80065c4 <UART_SetConfig+0x38c>)
 800651c:	fba2 2303 	umull	r2, r3, r2, r3
 8006520:	095b      	lsrs	r3, r3, #5
 8006522:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006526:	441e      	add	r6, r3
 8006528:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800652a:	4618      	mov	r0, r3
 800652c:	f04f 0100 	mov.w	r1, #0
 8006530:	4602      	mov	r2, r0
 8006532:	460b      	mov	r3, r1
 8006534:	1894      	adds	r4, r2, r2
 8006536:	603c      	str	r4, [r7, #0]
 8006538:	415b      	adcs	r3, r3
 800653a:	607b      	str	r3, [r7, #4]
 800653c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006540:	1812      	adds	r2, r2, r0
 8006542:	eb41 0303 	adc.w	r3, r1, r3
 8006546:	f04f 0400 	mov.w	r4, #0
 800654a:	f04f 0500 	mov.w	r5, #0
 800654e:	00dd      	lsls	r5, r3, #3
 8006550:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006554:	00d4      	lsls	r4, r2, #3
 8006556:	4622      	mov	r2, r4
 8006558:	462b      	mov	r3, r5
 800655a:	eb12 0a00 	adds.w	sl, r2, r0
 800655e:	eb43 0b01 	adc.w	fp, r3, r1
 8006562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	4618      	mov	r0, r3
 8006568:	f04f 0100 	mov.w	r1, #0
 800656c:	f04f 0200 	mov.w	r2, #0
 8006570:	f04f 0300 	mov.w	r3, #0
 8006574:	008b      	lsls	r3, r1, #2
 8006576:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800657a:	0082      	lsls	r2, r0, #2
 800657c:	4650      	mov	r0, sl
 800657e:	4659      	mov	r1, fp
 8006580:	f7fa fa9c 	bl	8000abc <__aeabi_uldivmod>
 8006584:	4602      	mov	r2, r0
 8006586:	460b      	mov	r3, r1
 8006588:	4b0e      	ldr	r3, [pc, #56]	; (80065c4 <UART_SetConfig+0x38c>)
 800658a:	fba3 1302 	umull	r1, r3, r3, r2
 800658e:	095b      	lsrs	r3, r3, #5
 8006590:	2164      	movs	r1, #100	; 0x64
 8006592:	fb01 f303 	mul.w	r3, r1, r3
 8006596:	1ad3      	subs	r3, r2, r3
 8006598:	011b      	lsls	r3, r3, #4
 800659a:	3332      	adds	r3, #50	; 0x32
 800659c:	4a09      	ldr	r2, [pc, #36]	; (80065c4 <UART_SetConfig+0x38c>)
 800659e:	fba2 2303 	umull	r2, r3, r2, r3
 80065a2:	095b      	lsrs	r3, r3, #5
 80065a4:	f003 020f 	and.w	r2, r3, #15
 80065a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4432      	add	r2, r6
 80065ae:	609a      	str	r2, [r3, #8]
}
 80065b0:	bf00      	nop
 80065b2:	377c      	adds	r7, #124	; 0x7c
 80065b4:	46bd      	mov	sp, r7
 80065b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065ba:	bf00      	nop
 80065bc:	40011000 	.word	0x40011000
 80065c0:	40011400 	.word	0x40011400
 80065c4:	51eb851f 	.word	0x51eb851f

080065c8 <__errno>:
 80065c8:	4b01      	ldr	r3, [pc, #4]	; (80065d0 <__errno+0x8>)
 80065ca:	6818      	ldr	r0, [r3, #0]
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	2000000c 	.word	0x2000000c

080065d4 <__libc_init_array>:
 80065d4:	b570      	push	{r4, r5, r6, lr}
 80065d6:	4d0d      	ldr	r5, [pc, #52]	; (800660c <__libc_init_array+0x38>)
 80065d8:	4c0d      	ldr	r4, [pc, #52]	; (8006610 <__libc_init_array+0x3c>)
 80065da:	1b64      	subs	r4, r4, r5
 80065dc:	10a4      	asrs	r4, r4, #2
 80065de:	2600      	movs	r6, #0
 80065e0:	42a6      	cmp	r6, r4
 80065e2:	d109      	bne.n	80065f8 <__libc_init_array+0x24>
 80065e4:	4d0b      	ldr	r5, [pc, #44]	; (8006614 <__libc_init_array+0x40>)
 80065e6:	4c0c      	ldr	r4, [pc, #48]	; (8006618 <__libc_init_array+0x44>)
 80065e8:	f000 ffec 	bl	80075c4 <_init>
 80065ec:	1b64      	subs	r4, r4, r5
 80065ee:	10a4      	asrs	r4, r4, #2
 80065f0:	2600      	movs	r6, #0
 80065f2:	42a6      	cmp	r6, r4
 80065f4:	d105      	bne.n	8006602 <__libc_init_array+0x2e>
 80065f6:	bd70      	pop	{r4, r5, r6, pc}
 80065f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80065fc:	4798      	blx	r3
 80065fe:	3601      	adds	r6, #1
 8006600:	e7ee      	b.n	80065e0 <__libc_init_array+0xc>
 8006602:	f855 3b04 	ldr.w	r3, [r5], #4
 8006606:	4798      	blx	r3
 8006608:	3601      	adds	r6, #1
 800660a:	e7f2      	b.n	80065f2 <__libc_init_array+0x1e>
 800660c:	08007750 	.word	0x08007750
 8006610:	08007750 	.word	0x08007750
 8006614:	08007750 	.word	0x08007750
 8006618:	08007754 	.word	0x08007754

0800661c <memset>:
 800661c:	4402      	add	r2, r0
 800661e:	4603      	mov	r3, r0
 8006620:	4293      	cmp	r3, r2
 8006622:	d100      	bne.n	8006626 <memset+0xa>
 8006624:	4770      	bx	lr
 8006626:	f803 1b01 	strb.w	r1, [r3], #1
 800662a:	e7f9      	b.n	8006620 <memset+0x4>

0800662c <iprintf>:
 800662c:	b40f      	push	{r0, r1, r2, r3}
 800662e:	4b0a      	ldr	r3, [pc, #40]	; (8006658 <iprintf+0x2c>)
 8006630:	b513      	push	{r0, r1, r4, lr}
 8006632:	681c      	ldr	r4, [r3, #0]
 8006634:	b124      	cbz	r4, 8006640 <iprintf+0x14>
 8006636:	69a3      	ldr	r3, [r4, #24]
 8006638:	b913      	cbnz	r3, 8006640 <iprintf+0x14>
 800663a:	4620      	mov	r0, r4
 800663c:	f000 fa5e 	bl	8006afc <__sinit>
 8006640:	ab05      	add	r3, sp, #20
 8006642:	9a04      	ldr	r2, [sp, #16]
 8006644:	68a1      	ldr	r1, [r4, #8]
 8006646:	9301      	str	r3, [sp, #4]
 8006648:	4620      	mov	r0, r4
 800664a:	f000 fc2f 	bl	8006eac <_vfiprintf_r>
 800664e:	b002      	add	sp, #8
 8006650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006654:	b004      	add	sp, #16
 8006656:	4770      	bx	lr
 8006658:	2000000c 	.word	0x2000000c

0800665c <_puts_r>:
 800665c:	b570      	push	{r4, r5, r6, lr}
 800665e:	460e      	mov	r6, r1
 8006660:	4605      	mov	r5, r0
 8006662:	b118      	cbz	r0, 800666c <_puts_r+0x10>
 8006664:	6983      	ldr	r3, [r0, #24]
 8006666:	b90b      	cbnz	r3, 800666c <_puts_r+0x10>
 8006668:	f000 fa48 	bl	8006afc <__sinit>
 800666c:	69ab      	ldr	r3, [r5, #24]
 800666e:	68ac      	ldr	r4, [r5, #8]
 8006670:	b913      	cbnz	r3, 8006678 <_puts_r+0x1c>
 8006672:	4628      	mov	r0, r5
 8006674:	f000 fa42 	bl	8006afc <__sinit>
 8006678:	4b2c      	ldr	r3, [pc, #176]	; (800672c <_puts_r+0xd0>)
 800667a:	429c      	cmp	r4, r3
 800667c:	d120      	bne.n	80066c0 <_puts_r+0x64>
 800667e:	686c      	ldr	r4, [r5, #4]
 8006680:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006682:	07db      	lsls	r3, r3, #31
 8006684:	d405      	bmi.n	8006692 <_puts_r+0x36>
 8006686:	89a3      	ldrh	r3, [r4, #12]
 8006688:	0598      	lsls	r0, r3, #22
 800668a:	d402      	bmi.n	8006692 <_puts_r+0x36>
 800668c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800668e:	f000 fad3 	bl	8006c38 <__retarget_lock_acquire_recursive>
 8006692:	89a3      	ldrh	r3, [r4, #12]
 8006694:	0719      	lsls	r1, r3, #28
 8006696:	d51d      	bpl.n	80066d4 <_puts_r+0x78>
 8006698:	6923      	ldr	r3, [r4, #16]
 800669a:	b1db      	cbz	r3, 80066d4 <_puts_r+0x78>
 800669c:	3e01      	subs	r6, #1
 800669e:	68a3      	ldr	r3, [r4, #8]
 80066a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80066a4:	3b01      	subs	r3, #1
 80066a6:	60a3      	str	r3, [r4, #8]
 80066a8:	bb39      	cbnz	r1, 80066fa <_puts_r+0x9e>
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	da38      	bge.n	8006720 <_puts_r+0xc4>
 80066ae:	4622      	mov	r2, r4
 80066b0:	210a      	movs	r1, #10
 80066b2:	4628      	mov	r0, r5
 80066b4:	f000 f848 	bl	8006748 <__swbuf_r>
 80066b8:	3001      	adds	r0, #1
 80066ba:	d011      	beq.n	80066e0 <_puts_r+0x84>
 80066bc:	250a      	movs	r5, #10
 80066be:	e011      	b.n	80066e4 <_puts_r+0x88>
 80066c0:	4b1b      	ldr	r3, [pc, #108]	; (8006730 <_puts_r+0xd4>)
 80066c2:	429c      	cmp	r4, r3
 80066c4:	d101      	bne.n	80066ca <_puts_r+0x6e>
 80066c6:	68ac      	ldr	r4, [r5, #8]
 80066c8:	e7da      	b.n	8006680 <_puts_r+0x24>
 80066ca:	4b1a      	ldr	r3, [pc, #104]	; (8006734 <_puts_r+0xd8>)
 80066cc:	429c      	cmp	r4, r3
 80066ce:	bf08      	it	eq
 80066d0:	68ec      	ldreq	r4, [r5, #12]
 80066d2:	e7d5      	b.n	8006680 <_puts_r+0x24>
 80066d4:	4621      	mov	r1, r4
 80066d6:	4628      	mov	r0, r5
 80066d8:	f000 f888 	bl	80067ec <__swsetup_r>
 80066dc:	2800      	cmp	r0, #0
 80066de:	d0dd      	beq.n	800669c <_puts_r+0x40>
 80066e0:	f04f 35ff 	mov.w	r5, #4294967295
 80066e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80066e6:	07da      	lsls	r2, r3, #31
 80066e8:	d405      	bmi.n	80066f6 <_puts_r+0x9a>
 80066ea:	89a3      	ldrh	r3, [r4, #12]
 80066ec:	059b      	lsls	r3, r3, #22
 80066ee:	d402      	bmi.n	80066f6 <_puts_r+0x9a>
 80066f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066f2:	f000 faa2 	bl	8006c3a <__retarget_lock_release_recursive>
 80066f6:	4628      	mov	r0, r5
 80066f8:	bd70      	pop	{r4, r5, r6, pc}
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	da04      	bge.n	8006708 <_puts_r+0xac>
 80066fe:	69a2      	ldr	r2, [r4, #24]
 8006700:	429a      	cmp	r2, r3
 8006702:	dc06      	bgt.n	8006712 <_puts_r+0xb6>
 8006704:	290a      	cmp	r1, #10
 8006706:	d004      	beq.n	8006712 <_puts_r+0xb6>
 8006708:	6823      	ldr	r3, [r4, #0]
 800670a:	1c5a      	adds	r2, r3, #1
 800670c:	6022      	str	r2, [r4, #0]
 800670e:	7019      	strb	r1, [r3, #0]
 8006710:	e7c5      	b.n	800669e <_puts_r+0x42>
 8006712:	4622      	mov	r2, r4
 8006714:	4628      	mov	r0, r5
 8006716:	f000 f817 	bl	8006748 <__swbuf_r>
 800671a:	3001      	adds	r0, #1
 800671c:	d1bf      	bne.n	800669e <_puts_r+0x42>
 800671e:	e7df      	b.n	80066e0 <_puts_r+0x84>
 8006720:	6823      	ldr	r3, [r4, #0]
 8006722:	250a      	movs	r5, #10
 8006724:	1c5a      	adds	r2, r3, #1
 8006726:	6022      	str	r2, [r4, #0]
 8006728:	701d      	strb	r5, [r3, #0]
 800672a:	e7db      	b.n	80066e4 <_puts_r+0x88>
 800672c:	080076d4 	.word	0x080076d4
 8006730:	080076f4 	.word	0x080076f4
 8006734:	080076b4 	.word	0x080076b4

08006738 <puts>:
 8006738:	4b02      	ldr	r3, [pc, #8]	; (8006744 <puts+0xc>)
 800673a:	4601      	mov	r1, r0
 800673c:	6818      	ldr	r0, [r3, #0]
 800673e:	f7ff bf8d 	b.w	800665c <_puts_r>
 8006742:	bf00      	nop
 8006744:	2000000c 	.word	0x2000000c

08006748 <__swbuf_r>:
 8006748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800674a:	460e      	mov	r6, r1
 800674c:	4614      	mov	r4, r2
 800674e:	4605      	mov	r5, r0
 8006750:	b118      	cbz	r0, 800675a <__swbuf_r+0x12>
 8006752:	6983      	ldr	r3, [r0, #24]
 8006754:	b90b      	cbnz	r3, 800675a <__swbuf_r+0x12>
 8006756:	f000 f9d1 	bl	8006afc <__sinit>
 800675a:	4b21      	ldr	r3, [pc, #132]	; (80067e0 <__swbuf_r+0x98>)
 800675c:	429c      	cmp	r4, r3
 800675e:	d12b      	bne.n	80067b8 <__swbuf_r+0x70>
 8006760:	686c      	ldr	r4, [r5, #4]
 8006762:	69a3      	ldr	r3, [r4, #24]
 8006764:	60a3      	str	r3, [r4, #8]
 8006766:	89a3      	ldrh	r3, [r4, #12]
 8006768:	071a      	lsls	r2, r3, #28
 800676a:	d52f      	bpl.n	80067cc <__swbuf_r+0x84>
 800676c:	6923      	ldr	r3, [r4, #16]
 800676e:	b36b      	cbz	r3, 80067cc <__swbuf_r+0x84>
 8006770:	6923      	ldr	r3, [r4, #16]
 8006772:	6820      	ldr	r0, [r4, #0]
 8006774:	1ac0      	subs	r0, r0, r3
 8006776:	6963      	ldr	r3, [r4, #20]
 8006778:	b2f6      	uxtb	r6, r6
 800677a:	4283      	cmp	r3, r0
 800677c:	4637      	mov	r7, r6
 800677e:	dc04      	bgt.n	800678a <__swbuf_r+0x42>
 8006780:	4621      	mov	r1, r4
 8006782:	4628      	mov	r0, r5
 8006784:	f000 f926 	bl	80069d4 <_fflush_r>
 8006788:	bb30      	cbnz	r0, 80067d8 <__swbuf_r+0x90>
 800678a:	68a3      	ldr	r3, [r4, #8]
 800678c:	3b01      	subs	r3, #1
 800678e:	60a3      	str	r3, [r4, #8]
 8006790:	6823      	ldr	r3, [r4, #0]
 8006792:	1c5a      	adds	r2, r3, #1
 8006794:	6022      	str	r2, [r4, #0]
 8006796:	701e      	strb	r6, [r3, #0]
 8006798:	6963      	ldr	r3, [r4, #20]
 800679a:	3001      	adds	r0, #1
 800679c:	4283      	cmp	r3, r0
 800679e:	d004      	beq.n	80067aa <__swbuf_r+0x62>
 80067a0:	89a3      	ldrh	r3, [r4, #12]
 80067a2:	07db      	lsls	r3, r3, #31
 80067a4:	d506      	bpl.n	80067b4 <__swbuf_r+0x6c>
 80067a6:	2e0a      	cmp	r6, #10
 80067a8:	d104      	bne.n	80067b4 <__swbuf_r+0x6c>
 80067aa:	4621      	mov	r1, r4
 80067ac:	4628      	mov	r0, r5
 80067ae:	f000 f911 	bl	80069d4 <_fflush_r>
 80067b2:	b988      	cbnz	r0, 80067d8 <__swbuf_r+0x90>
 80067b4:	4638      	mov	r0, r7
 80067b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067b8:	4b0a      	ldr	r3, [pc, #40]	; (80067e4 <__swbuf_r+0x9c>)
 80067ba:	429c      	cmp	r4, r3
 80067bc:	d101      	bne.n	80067c2 <__swbuf_r+0x7a>
 80067be:	68ac      	ldr	r4, [r5, #8]
 80067c0:	e7cf      	b.n	8006762 <__swbuf_r+0x1a>
 80067c2:	4b09      	ldr	r3, [pc, #36]	; (80067e8 <__swbuf_r+0xa0>)
 80067c4:	429c      	cmp	r4, r3
 80067c6:	bf08      	it	eq
 80067c8:	68ec      	ldreq	r4, [r5, #12]
 80067ca:	e7ca      	b.n	8006762 <__swbuf_r+0x1a>
 80067cc:	4621      	mov	r1, r4
 80067ce:	4628      	mov	r0, r5
 80067d0:	f000 f80c 	bl	80067ec <__swsetup_r>
 80067d4:	2800      	cmp	r0, #0
 80067d6:	d0cb      	beq.n	8006770 <__swbuf_r+0x28>
 80067d8:	f04f 37ff 	mov.w	r7, #4294967295
 80067dc:	e7ea      	b.n	80067b4 <__swbuf_r+0x6c>
 80067de:	bf00      	nop
 80067e0:	080076d4 	.word	0x080076d4
 80067e4:	080076f4 	.word	0x080076f4
 80067e8:	080076b4 	.word	0x080076b4

080067ec <__swsetup_r>:
 80067ec:	4b32      	ldr	r3, [pc, #200]	; (80068b8 <__swsetup_r+0xcc>)
 80067ee:	b570      	push	{r4, r5, r6, lr}
 80067f0:	681d      	ldr	r5, [r3, #0]
 80067f2:	4606      	mov	r6, r0
 80067f4:	460c      	mov	r4, r1
 80067f6:	b125      	cbz	r5, 8006802 <__swsetup_r+0x16>
 80067f8:	69ab      	ldr	r3, [r5, #24]
 80067fa:	b913      	cbnz	r3, 8006802 <__swsetup_r+0x16>
 80067fc:	4628      	mov	r0, r5
 80067fe:	f000 f97d 	bl	8006afc <__sinit>
 8006802:	4b2e      	ldr	r3, [pc, #184]	; (80068bc <__swsetup_r+0xd0>)
 8006804:	429c      	cmp	r4, r3
 8006806:	d10f      	bne.n	8006828 <__swsetup_r+0x3c>
 8006808:	686c      	ldr	r4, [r5, #4]
 800680a:	89a3      	ldrh	r3, [r4, #12]
 800680c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006810:	0719      	lsls	r1, r3, #28
 8006812:	d42c      	bmi.n	800686e <__swsetup_r+0x82>
 8006814:	06dd      	lsls	r5, r3, #27
 8006816:	d411      	bmi.n	800683c <__swsetup_r+0x50>
 8006818:	2309      	movs	r3, #9
 800681a:	6033      	str	r3, [r6, #0]
 800681c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006820:	81a3      	strh	r3, [r4, #12]
 8006822:	f04f 30ff 	mov.w	r0, #4294967295
 8006826:	e03e      	b.n	80068a6 <__swsetup_r+0xba>
 8006828:	4b25      	ldr	r3, [pc, #148]	; (80068c0 <__swsetup_r+0xd4>)
 800682a:	429c      	cmp	r4, r3
 800682c:	d101      	bne.n	8006832 <__swsetup_r+0x46>
 800682e:	68ac      	ldr	r4, [r5, #8]
 8006830:	e7eb      	b.n	800680a <__swsetup_r+0x1e>
 8006832:	4b24      	ldr	r3, [pc, #144]	; (80068c4 <__swsetup_r+0xd8>)
 8006834:	429c      	cmp	r4, r3
 8006836:	bf08      	it	eq
 8006838:	68ec      	ldreq	r4, [r5, #12]
 800683a:	e7e6      	b.n	800680a <__swsetup_r+0x1e>
 800683c:	0758      	lsls	r0, r3, #29
 800683e:	d512      	bpl.n	8006866 <__swsetup_r+0x7a>
 8006840:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006842:	b141      	cbz	r1, 8006856 <__swsetup_r+0x6a>
 8006844:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006848:	4299      	cmp	r1, r3
 800684a:	d002      	beq.n	8006852 <__swsetup_r+0x66>
 800684c:	4630      	mov	r0, r6
 800684e:	f000 fa59 	bl	8006d04 <_free_r>
 8006852:	2300      	movs	r3, #0
 8006854:	6363      	str	r3, [r4, #52]	; 0x34
 8006856:	89a3      	ldrh	r3, [r4, #12]
 8006858:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800685c:	81a3      	strh	r3, [r4, #12]
 800685e:	2300      	movs	r3, #0
 8006860:	6063      	str	r3, [r4, #4]
 8006862:	6923      	ldr	r3, [r4, #16]
 8006864:	6023      	str	r3, [r4, #0]
 8006866:	89a3      	ldrh	r3, [r4, #12]
 8006868:	f043 0308 	orr.w	r3, r3, #8
 800686c:	81a3      	strh	r3, [r4, #12]
 800686e:	6923      	ldr	r3, [r4, #16]
 8006870:	b94b      	cbnz	r3, 8006886 <__swsetup_r+0x9a>
 8006872:	89a3      	ldrh	r3, [r4, #12]
 8006874:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800687c:	d003      	beq.n	8006886 <__swsetup_r+0x9a>
 800687e:	4621      	mov	r1, r4
 8006880:	4630      	mov	r0, r6
 8006882:	f000 f9ff 	bl	8006c84 <__smakebuf_r>
 8006886:	89a0      	ldrh	r0, [r4, #12]
 8006888:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800688c:	f010 0301 	ands.w	r3, r0, #1
 8006890:	d00a      	beq.n	80068a8 <__swsetup_r+0xbc>
 8006892:	2300      	movs	r3, #0
 8006894:	60a3      	str	r3, [r4, #8]
 8006896:	6963      	ldr	r3, [r4, #20]
 8006898:	425b      	negs	r3, r3
 800689a:	61a3      	str	r3, [r4, #24]
 800689c:	6923      	ldr	r3, [r4, #16]
 800689e:	b943      	cbnz	r3, 80068b2 <__swsetup_r+0xc6>
 80068a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80068a4:	d1ba      	bne.n	800681c <__swsetup_r+0x30>
 80068a6:	bd70      	pop	{r4, r5, r6, pc}
 80068a8:	0781      	lsls	r1, r0, #30
 80068aa:	bf58      	it	pl
 80068ac:	6963      	ldrpl	r3, [r4, #20]
 80068ae:	60a3      	str	r3, [r4, #8]
 80068b0:	e7f4      	b.n	800689c <__swsetup_r+0xb0>
 80068b2:	2000      	movs	r0, #0
 80068b4:	e7f7      	b.n	80068a6 <__swsetup_r+0xba>
 80068b6:	bf00      	nop
 80068b8:	2000000c 	.word	0x2000000c
 80068bc:	080076d4 	.word	0x080076d4
 80068c0:	080076f4 	.word	0x080076f4
 80068c4:	080076b4 	.word	0x080076b4

080068c8 <__sflush_r>:
 80068c8:	898a      	ldrh	r2, [r1, #12]
 80068ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068ce:	4605      	mov	r5, r0
 80068d0:	0710      	lsls	r0, r2, #28
 80068d2:	460c      	mov	r4, r1
 80068d4:	d458      	bmi.n	8006988 <__sflush_r+0xc0>
 80068d6:	684b      	ldr	r3, [r1, #4]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	dc05      	bgt.n	80068e8 <__sflush_r+0x20>
 80068dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80068de:	2b00      	cmp	r3, #0
 80068e0:	dc02      	bgt.n	80068e8 <__sflush_r+0x20>
 80068e2:	2000      	movs	r0, #0
 80068e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80068ea:	2e00      	cmp	r6, #0
 80068ec:	d0f9      	beq.n	80068e2 <__sflush_r+0x1a>
 80068ee:	2300      	movs	r3, #0
 80068f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80068f4:	682f      	ldr	r7, [r5, #0]
 80068f6:	602b      	str	r3, [r5, #0]
 80068f8:	d032      	beq.n	8006960 <__sflush_r+0x98>
 80068fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80068fc:	89a3      	ldrh	r3, [r4, #12]
 80068fe:	075a      	lsls	r2, r3, #29
 8006900:	d505      	bpl.n	800690e <__sflush_r+0x46>
 8006902:	6863      	ldr	r3, [r4, #4]
 8006904:	1ac0      	subs	r0, r0, r3
 8006906:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006908:	b10b      	cbz	r3, 800690e <__sflush_r+0x46>
 800690a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800690c:	1ac0      	subs	r0, r0, r3
 800690e:	2300      	movs	r3, #0
 8006910:	4602      	mov	r2, r0
 8006912:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006914:	6a21      	ldr	r1, [r4, #32]
 8006916:	4628      	mov	r0, r5
 8006918:	47b0      	blx	r6
 800691a:	1c43      	adds	r3, r0, #1
 800691c:	89a3      	ldrh	r3, [r4, #12]
 800691e:	d106      	bne.n	800692e <__sflush_r+0x66>
 8006920:	6829      	ldr	r1, [r5, #0]
 8006922:	291d      	cmp	r1, #29
 8006924:	d82c      	bhi.n	8006980 <__sflush_r+0xb8>
 8006926:	4a2a      	ldr	r2, [pc, #168]	; (80069d0 <__sflush_r+0x108>)
 8006928:	40ca      	lsrs	r2, r1
 800692a:	07d6      	lsls	r6, r2, #31
 800692c:	d528      	bpl.n	8006980 <__sflush_r+0xb8>
 800692e:	2200      	movs	r2, #0
 8006930:	6062      	str	r2, [r4, #4]
 8006932:	04d9      	lsls	r1, r3, #19
 8006934:	6922      	ldr	r2, [r4, #16]
 8006936:	6022      	str	r2, [r4, #0]
 8006938:	d504      	bpl.n	8006944 <__sflush_r+0x7c>
 800693a:	1c42      	adds	r2, r0, #1
 800693c:	d101      	bne.n	8006942 <__sflush_r+0x7a>
 800693e:	682b      	ldr	r3, [r5, #0]
 8006940:	b903      	cbnz	r3, 8006944 <__sflush_r+0x7c>
 8006942:	6560      	str	r0, [r4, #84]	; 0x54
 8006944:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006946:	602f      	str	r7, [r5, #0]
 8006948:	2900      	cmp	r1, #0
 800694a:	d0ca      	beq.n	80068e2 <__sflush_r+0x1a>
 800694c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006950:	4299      	cmp	r1, r3
 8006952:	d002      	beq.n	800695a <__sflush_r+0x92>
 8006954:	4628      	mov	r0, r5
 8006956:	f000 f9d5 	bl	8006d04 <_free_r>
 800695a:	2000      	movs	r0, #0
 800695c:	6360      	str	r0, [r4, #52]	; 0x34
 800695e:	e7c1      	b.n	80068e4 <__sflush_r+0x1c>
 8006960:	6a21      	ldr	r1, [r4, #32]
 8006962:	2301      	movs	r3, #1
 8006964:	4628      	mov	r0, r5
 8006966:	47b0      	blx	r6
 8006968:	1c41      	adds	r1, r0, #1
 800696a:	d1c7      	bne.n	80068fc <__sflush_r+0x34>
 800696c:	682b      	ldr	r3, [r5, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d0c4      	beq.n	80068fc <__sflush_r+0x34>
 8006972:	2b1d      	cmp	r3, #29
 8006974:	d001      	beq.n	800697a <__sflush_r+0xb2>
 8006976:	2b16      	cmp	r3, #22
 8006978:	d101      	bne.n	800697e <__sflush_r+0xb6>
 800697a:	602f      	str	r7, [r5, #0]
 800697c:	e7b1      	b.n	80068e2 <__sflush_r+0x1a>
 800697e:	89a3      	ldrh	r3, [r4, #12]
 8006980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006984:	81a3      	strh	r3, [r4, #12]
 8006986:	e7ad      	b.n	80068e4 <__sflush_r+0x1c>
 8006988:	690f      	ldr	r7, [r1, #16]
 800698a:	2f00      	cmp	r7, #0
 800698c:	d0a9      	beq.n	80068e2 <__sflush_r+0x1a>
 800698e:	0793      	lsls	r3, r2, #30
 8006990:	680e      	ldr	r6, [r1, #0]
 8006992:	bf08      	it	eq
 8006994:	694b      	ldreq	r3, [r1, #20]
 8006996:	600f      	str	r7, [r1, #0]
 8006998:	bf18      	it	ne
 800699a:	2300      	movne	r3, #0
 800699c:	eba6 0807 	sub.w	r8, r6, r7
 80069a0:	608b      	str	r3, [r1, #8]
 80069a2:	f1b8 0f00 	cmp.w	r8, #0
 80069a6:	dd9c      	ble.n	80068e2 <__sflush_r+0x1a>
 80069a8:	6a21      	ldr	r1, [r4, #32]
 80069aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80069ac:	4643      	mov	r3, r8
 80069ae:	463a      	mov	r2, r7
 80069b0:	4628      	mov	r0, r5
 80069b2:	47b0      	blx	r6
 80069b4:	2800      	cmp	r0, #0
 80069b6:	dc06      	bgt.n	80069c6 <__sflush_r+0xfe>
 80069b8:	89a3      	ldrh	r3, [r4, #12]
 80069ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069be:	81a3      	strh	r3, [r4, #12]
 80069c0:	f04f 30ff 	mov.w	r0, #4294967295
 80069c4:	e78e      	b.n	80068e4 <__sflush_r+0x1c>
 80069c6:	4407      	add	r7, r0
 80069c8:	eba8 0800 	sub.w	r8, r8, r0
 80069cc:	e7e9      	b.n	80069a2 <__sflush_r+0xda>
 80069ce:	bf00      	nop
 80069d0:	20400001 	.word	0x20400001

080069d4 <_fflush_r>:
 80069d4:	b538      	push	{r3, r4, r5, lr}
 80069d6:	690b      	ldr	r3, [r1, #16]
 80069d8:	4605      	mov	r5, r0
 80069da:	460c      	mov	r4, r1
 80069dc:	b913      	cbnz	r3, 80069e4 <_fflush_r+0x10>
 80069de:	2500      	movs	r5, #0
 80069e0:	4628      	mov	r0, r5
 80069e2:	bd38      	pop	{r3, r4, r5, pc}
 80069e4:	b118      	cbz	r0, 80069ee <_fflush_r+0x1a>
 80069e6:	6983      	ldr	r3, [r0, #24]
 80069e8:	b90b      	cbnz	r3, 80069ee <_fflush_r+0x1a>
 80069ea:	f000 f887 	bl	8006afc <__sinit>
 80069ee:	4b14      	ldr	r3, [pc, #80]	; (8006a40 <_fflush_r+0x6c>)
 80069f0:	429c      	cmp	r4, r3
 80069f2:	d11b      	bne.n	8006a2c <_fflush_r+0x58>
 80069f4:	686c      	ldr	r4, [r5, #4]
 80069f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d0ef      	beq.n	80069de <_fflush_r+0xa>
 80069fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006a00:	07d0      	lsls	r0, r2, #31
 8006a02:	d404      	bmi.n	8006a0e <_fflush_r+0x3a>
 8006a04:	0599      	lsls	r1, r3, #22
 8006a06:	d402      	bmi.n	8006a0e <_fflush_r+0x3a>
 8006a08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a0a:	f000 f915 	bl	8006c38 <__retarget_lock_acquire_recursive>
 8006a0e:	4628      	mov	r0, r5
 8006a10:	4621      	mov	r1, r4
 8006a12:	f7ff ff59 	bl	80068c8 <__sflush_r>
 8006a16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a18:	07da      	lsls	r2, r3, #31
 8006a1a:	4605      	mov	r5, r0
 8006a1c:	d4e0      	bmi.n	80069e0 <_fflush_r+0xc>
 8006a1e:	89a3      	ldrh	r3, [r4, #12]
 8006a20:	059b      	lsls	r3, r3, #22
 8006a22:	d4dd      	bmi.n	80069e0 <_fflush_r+0xc>
 8006a24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a26:	f000 f908 	bl	8006c3a <__retarget_lock_release_recursive>
 8006a2a:	e7d9      	b.n	80069e0 <_fflush_r+0xc>
 8006a2c:	4b05      	ldr	r3, [pc, #20]	; (8006a44 <_fflush_r+0x70>)
 8006a2e:	429c      	cmp	r4, r3
 8006a30:	d101      	bne.n	8006a36 <_fflush_r+0x62>
 8006a32:	68ac      	ldr	r4, [r5, #8]
 8006a34:	e7df      	b.n	80069f6 <_fflush_r+0x22>
 8006a36:	4b04      	ldr	r3, [pc, #16]	; (8006a48 <_fflush_r+0x74>)
 8006a38:	429c      	cmp	r4, r3
 8006a3a:	bf08      	it	eq
 8006a3c:	68ec      	ldreq	r4, [r5, #12]
 8006a3e:	e7da      	b.n	80069f6 <_fflush_r+0x22>
 8006a40:	080076d4 	.word	0x080076d4
 8006a44:	080076f4 	.word	0x080076f4
 8006a48:	080076b4 	.word	0x080076b4

08006a4c <std>:
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	b510      	push	{r4, lr}
 8006a50:	4604      	mov	r4, r0
 8006a52:	e9c0 3300 	strd	r3, r3, [r0]
 8006a56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a5a:	6083      	str	r3, [r0, #8]
 8006a5c:	8181      	strh	r1, [r0, #12]
 8006a5e:	6643      	str	r3, [r0, #100]	; 0x64
 8006a60:	81c2      	strh	r2, [r0, #14]
 8006a62:	6183      	str	r3, [r0, #24]
 8006a64:	4619      	mov	r1, r3
 8006a66:	2208      	movs	r2, #8
 8006a68:	305c      	adds	r0, #92	; 0x5c
 8006a6a:	f7ff fdd7 	bl	800661c <memset>
 8006a6e:	4b05      	ldr	r3, [pc, #20]	; (8006a84 <std+0x38>)
 8006a70:	6263      	str	r3, [r4, #36]	; 0x24
 8006a72:	4b05      	ldr	r3, [pc, #20]	; (8006a88 <std+0x3c>)
 8006a74:	62a3      	str	r3, [r4, #40]	; 0x28
 8006a76:	4b05      	ldr	r3, [pc, #20]	; (8006a8c <std+0x40>)
 8006a78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006a7a:	4b05      	ldr	r3, [pc, #20]	; (8006a90 <std+0x44>)
 8006a7c:	6224      	str	r4, [r4, #32]
 8006a7e:	6323      	str	r3, [r4, #48]	; 0x30
 8006a80:	bd10      	pop	{r4, pc}
 8006a82:	bf00      	nop
 8006a84:	08007455 	.word	0x08007455
 8006a88:	08007477 	.word	0x08007477
 8006a8c:	080074af 	.word	0x080074af
 8006a90:	080074d3 	.word	0x080074d3

08006a94 <_cleanup_r>:
 8006a94:	4901      	ldr	r1, [pc, #4]	; (8006a9c <_cleanup_r+0x8>)
 8006a96:	f000 b8af 	b.w	8006bf8 <_fwalk_reent>
 8006a9a:	bf00      	nop
 8006a9c:	080069d5 	.word	0x080069d5

08006aa0 <__sfmoreglue>:
 8006aa0:	b570      	push	{r4, r5, r6, lr}
 8006aa2:	1e4a      	subs	r2, r1, #1
 8006aa4:	2568      	movs	r5, #104	; 0x68
 8006aa6:	4355      	muls	r5, r2
 8006aa8:	460e      	mov	r6, r1
 8006aaa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006aae:	f000 f979 	bl	8006da4 <_malloc_r>
 8006ab2:	4604      	mov	r4, r0
 8006ab4:	b140      	cbz	r0, 8006ac8 <__sfmoreglue+0x28>
 8006ab6:	2100      	movs	r1, #0
 8006ab8:	e9c0 1600 	strd	r1, r6, [r0]
 8006abc:	300c      	adds	r0, #12
 8006abe:	60a0      	str	r0, [r4, #8]
 8006ac0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006ac4:	f7ff fdaa 	bl	800661c <memset>
 8006ac8:	4620      	mov	r0, r4
 8006aca:	bd70      	pop	{r4, r5, r6, pc}

08006acc <__sfp_lock_acquire>:
 8006acc:	4801      	ldr	r0, [pc, #4]	; (8006ad4 <__sfp_lock_acquire+0x8>)
 8006ace:	f000 b8b3 	b.w	8006c38 <__retarget_lock_acquire_recursive>
 8006ad2:	bf00      	nop
 8006ad4:	20000364 	.word	0x20000364

08006ad8 <__sfp_lock_release>:
 8006ad8:	4801      	ldr	r0, [pc, #4]	; (8006ae0 <__sfp_lock_release+0x8>)
 8006ada:	f000 b8ae 	b.w	8006c3a <__retarget_lock_release_recursive>
 8006ade:	bf00      	nop
 8006ae0:	20000364 	.word	0x20000364

08006ae4 <__sinit_lock_acquire>:
 8006ae4:	4801      	ldr	r0, [pc, #4]	; (8006aec <__sinit_lock_acquire+0x8>)
 8006ae6:	f000 b8a7 	b.w	8006c38 <__retarget_lock_acquire_recursive>
 8006aea:	bf00      	nop
 8006aec:	2000035f 	.word	0x2000035f

08006af0 <__sinit_lock_release>:
 8006af0:	4801      	ldr	r0, [pc, #4]	; (8006af8 <__sinit_lock_release+0x8>)
 8006af2:	f000 b8a2 	b.w	8006c3a <__retarget_lock_release_recursive>
 8006af6:	bf00      	nop
 8006af8:	2000035f 	.word	0x2000035f

08006afc <__sinit>:
 8006afc:	b510      	push	{r4, lr}
 8006afe:	4604      	mov	r4, r0
 8006b00:	f7ff fff0 	bl	8006ae4 <__sinit_lock_acquire>
 8006b04:	69a3      	ldr	r3, [r4, #24]
 8006b06:	b11b      	cbz	r3, 8006b10 <__sinit+0x14>
 8006b08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b0c:	f7ff bff0 	b.w	8006af0 <__sinit_lock_release>
 8006b10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006b14:	6523      	str	r3, [r4, #80]	; 0x50
 8006b16:	4b13      	ldr	r3, [pc, #76]	; (8006b64 <__sinit+0x68>)
 8006b18:	4a13      	ldr	r2, [pc, #76]	; (8006b68 <__sinit+0x6c>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006b1e:	42a3      	cmp	r3, r4
 8006b20:	bf04      	itt	eq
 8006b22:	2301      	moveq	r3, #1
 8006b24:	61a3      	streq	r3, [r4, #24]
 8006b26:	4620      	mov	r0, r4
 8006b28:	f000 f820 	bl	8006b6c <__sfp>
 8006b2c:	6060      	str	r0, [r4, #4]
 8006b2e:	4620      	mov	r0, r4
 8006b30:	f000 f81c 	bl	8006b6c <__sfp>
 8006b34:	60a0      	str	r0, [r4, #8]
 8006b36:	4620      	mov	r0, r4
 8006b38:	f000 f818 	bl	8006b6c <__sfp>
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	60e0      	str	r0, [r4, #12]
 8006b40:	2104      	movs	r1, #4
 8006b42:	6860      	ldr	r0, [r4, #4]
 8006b44:	f7ff ff82 	bl	8006a4c <std>
 8006b48:	68a0      	ldr	r0, [r4, #8]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	2109      	movs	r1, #9
 8006b4e:	f7ff ff7d 	bl	8006a4c <std>
 8006b52:	68e0      	ldr	r0, [r4, #12]
 8006b54:	2202      	movs	r2, #2
 8006b56:	2112      	movs	r1, #18
 8006b58:	f7ff ff78 	bl	8006a4c <std>
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	61a3      	str	r3, [r4, #24]
 8006b60:	e7d2      	b.n	8006b08 <__sinit+0xc>
 8006b62:	bf00      	nop
 8006b64:	080076b0 	.word	0x080076b0
 8006b68:	08006a95 	.word	0x08006a95

08006b6c <__sfp>:
 8006b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b6e:	4607      	mov	r7, r0
 8006b70:	f7ff ffac 	bl	8006acc <__sfp_lock_acquire>
 8006b74:	4b1e      	ldr	r3, [pc, #120]	; (8006bf0 <__sfp+0x84>)
 8006b76:	681e      	ldr	r6, [r3, #0]
 8006b78:	69b3      	ldr	r3, [r6, #24]
 8006b7a:	b913      	cbnz	r3, 8006b82 <__sfp+0x16>
 8006b7c:	4630      	mov	r0, r6
 8006b7e:	f7ff ffbd 	bl	8006afc <__sinit>
 8006b82:	3648      	adds	r6, #72	; 0x48
 8006b84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	d503      	bpl.n	8006b94 <__sfp+0x28>
 8006b8c:	6833      	ldr	r3, [r6, #0]
 8006b8e:	b30b      	cbz	r3, 8006bd4 <__sfp+0x68>
 8006b90:	6836      	ldr	r6, [r6, #0]
 8006b92:	e7f7      	b.n	8006b84 <__sfp+0x18>
 8006b94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006b98:	b9d5      	cbnz	r5, 8006bd0 <__sfp+0x64>
 8006b9a:	4b16      	ldr	r3, [pc, #88]	; (8006bf4 <__sfp+0x88>)
 8006b9c:	60e3      	str	r3, [r4, #12]
 8006b9e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006ba2:	6665      	str	r5, [r4, #100]	; 0x64
 8006ba4:	f000 f847 	bl	8006c36 <__retarget_lock_init_recursive>
 8006ba8:	f7ff ff96 	bl	8006ad8 <__sfp_lock_release>
 8006bac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006bb0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006bb4:	6025      	str	r5, [r4, #0]
 8006bb6:	61a5      	str	r5, [r4, #24]
 8006bb8:	2208      	movs	r2, #8
 8006bba:	4629      	mov	r1, r5
 8006bbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006bc0:	f7ff fd2c 	bl	800661c <memset>
 8006bc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006bc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006bcc:	4620      	mov	r0, r4
 8006bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bd0:	3468      	adds	r4, #104	; 0x68
 8006bd2:	e7d9      	b.n	8006b88 <__sfp+0x1c>
 8006bd4:	2104      	movs	r1, #4
 8006bd6:	4638      	mov	r0, r7
 8006bd8:	f7ff ff62 	bl	8006aa0 <__sfmoreglue>
 8006bdc:	4604      	mov	r4, r0
 8006bde:	6030      	str	r0, [r6, #0]
 8006be0:	2800      	cmp	r0, #0
 8006be2:	d1d5      	bne.n	8006b90 <__sfp+0x24>
 8006be4:	f7ff ff78 	bl	8006ad8 <__sfp_lock_release>
 8006be8:	230c      	movs	r3, #12
 8006bea:	603b      	str	r3, [r7, #0]
 8006bec:	e7ee      	b.n	8006bcc <__sfp+0x60>
 8006bee:	bf00      	nop
 8006bf0:	080076b0 	.word	0x080076b0
 8006bf4:	ffff0001 	.word	0xffff0001

08006bf8 <_fwalk_reent>:
 8006bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bfc:	4606      	mov	r6, r0
 8006bfe:	4688      	mov	r8, r1
 8006c00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006c04:	2700      	movs	r7, #0
 8006c06:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c0a:	f1b9 0901 	subs.w	r9, r9, #1
 8006c0e:	d505      	bpl.n	8006c1c <_fwalk_reent+0x24>
 8006c10:	6824      	ldr	r4, [r4, #0]
 8006c12:	2c00      	cmp	r4, #0
 8006c14:	d1f7      	bne.n	8006c06 <_fwalk_reent+0xe>
 8006c16:	4638      	mov	r0, r7
 8006c18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c1c:	89ab      	ldrh	r3, [r5, #12]
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d907      	bls.n	8006c32 <_fwalk_reent+0x3a>
 8006c22:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c26:	3301      	adds	r3, #1
 8006c28:	d003      	beq.n	8006c32 <_fwalk_reent+0x3a>
 8006c2a:	4629      	mov	r1, r5
 8006c2c:	4630      	mov	r0, r6
 8006c2e:	47c0      	blx	r8
 8006c30:	4307      	orrs	r7, r0
 8006c32:	3568      	adds	r5, #104	; 0x68
 8006c34:	e7e9      	b.n	8006c0a <_fwalk_reent+0x12>

08006c36 <__retarget_lock_init_recursive>:
 8006c36:	4770      	bx	lr

08006c38 <__retarget_lock_acquire_recursive>:
 8006c38:	4770      	bx	lr

08006c3a <__retarget_lock_release_recursive>:
 8006c3a:	4770      	bx	lr

08006c3c <__swhatbuf_r>:
 8006c3c:	b570      	push	{r4, r5, r6, lr}
 8006c3e:	460e      	mov	r6, r1
 8006c40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c44:	2900      	cmp	r1, #0
 8006c46:	b096      	sub	sp, #88	; 0x58
 8006c48:	4614      	mov	r4, r2
 8006c4a:	461d      	mov	r5, r3
 8006c4c:	da07      	bge.n	8006c5e <__swhatbuf_r+0x22>
 8006c4e:	2300      	movs	r3, #0
 8006c50:	602b      	str	r3, [r5, #0]
 8006c52:	89b3      	ldrh	r3, [r6, #12]
 8006c54:	061a      	lsls	r2, r3, #24
 8006c56:	d410      	bmi.n	8006c7a <__swhatbuf_r+0x3e>
 8006c58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c5c:	e00e      	b.n	8006c7c <__swhatbuf_r+0x40>
 8006c5e:	466a      	mov	r2, sp
 8006c60:	f000 fc5e 	bl	8007520 <_fstat_r>
 8006c64:	2800      	cmp	r0, #0
 8006c66:	dbf2      	blt.n	8006c4e <__swhatbuf_r+0x12>
 8006c68:	9a01      	ldr	r2, [sp, #4]
 8006c6a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006c6e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006c72:	425a      	negs	r2, r3
 8006c74:	415a      	adcs	r2, r3
 8006c76:	602a      	str	r2, [r5, #0]
 8006c78:	e7ee      	b.n	8006c58 <__swhatbuf_r+0x1c>
 8006c7a:	2340      	movs	r3, #64	; 0x40
 8006c7c:	2000      	movs	r0, #0
 8006c7e:	6023      	str	r3, [r4, #0]
 8006c80:	b016      	add	sp, #88	; 0x58
 8006c82:	bd70      	pop	{r4, r5, r6, pc}

08006c84 <__smakebuf_r>:
 8006c84:	898b      	ldrh	r3, [r1, #12]
 8006c86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006c88:	079d      	lsls	r5, r3, #30
 8006c8a:	4606      	mov	r6, r0
 8006c8c:	460c      	mov	r4, r1
 8006c8e:	d507      	bpl.n	8006ca0 <__smakebuf_r+0x1c>
 8006c90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006c94:	6023      	str	r3, [r4, #0]
 8006c96:	6123      	str	r3, [r4, #16]
 8006c98:	2301      	movs	r3, #1
 8006c9a:	6163      	str	r3, [r4, #20]
 8006c9c:	b002      	add	sp, #8
 8006c9e:	bd70      	pop	{r4, r5, r6, pc}
 8006ca0:	ab01      	add	r3, sp, #4
 8006ca2:	466a      	mov	r2, sp
 8006ca4:	f7ff ffca 	bl	8006c3c <__swhatbuf_r>
 8006ca8:	9900      	ldr	r1, [sp, #0]
 8006caa:	4605      	mov	r5, r0
 8006cac:	4630      	mov	r0, r6
 8006cae:	f000 f879 	bl	8006da4 <_malloc_r>
 8006cb2:	b948      	cbnz	r0, 8006cc8 <__smakebuf_r+0x44>
 8006cb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cb8:	059a      	lsls	r2, r3, #22
 8006cba:	d4ef      	bmi.n	8006c9c <__smakebuf_r+0x18>
 8006cbc:	f023 0303 	bic.w	r3, r3, #3
 8006cc0:	f043 0302 	orr.w	r3, r3, #2
 8006cc4:	81a3      	strh	r3, [r4, #12]
 8006cc6:	e7e3      	b.n	8006c90 <__smakebuf_r+0xc>
 8006cc8:	4b0d      	ldr	r3, [pc, #52]	; (8006d00 <__smakebuf_r+0x7c>)
 8006cca:	62b3      	str	r3, [r6, #40]	; 0x28
 8006ccc:	89a3      	ldrh	r3, [r4, #12]
 8006cce:	6020      	str	r0, [r4, #0]
 8006cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cd4:	81a3      	strh	r3, [r4, #12]
 8006cd6:	9b00      	ldr	r3, [sp, #0]
 8006cd8:	6163      	str	r3, [r4, #20]
 8006cda:	9b01      	ldr	r3, [sp, #4]
 8006cdc:	6120      	str	r0, [r4, #16]
 8006cde:	b15b      	cbz	r3, 8006cf8 <__smakebuf_r+0x74>
 8006ce0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ce4:	4630      	mov	r0, r6
 8006ce6:	f000 fc2d 	bl	8007544 <_isatty_r>
 8006cea:	b128      	cbz	r0, 8006cf8 <__smakebuf_r+0x74>
 8006cec:	89a3      	ldrh	r3, [r4, #12]
 8006cee:	f023 0303 	bic.w	r3, r3, #3
 8006cf2:	f043 0301 	orr.w	r3, r3, #1
 8006cf6:	81a3      	strh	r3, [r4, #12]
 8006cf8:	89a0      	ldrh	r0, [r4, #12]
 8006cfa:	4305      	orrs	r5, r0
 8006cfc:	81a5      	strh	r5, [r4, #12]
 8006cfe:	e7cd      	b.n	8006c9c <__smakebuf_r+0x18>
 8006d00:	08006a95 	.word	0x08006a95

08006d04 <_free_r>:
 8006d04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d06:	2900      	cmp	r1, #0
 8006d08:	d048      	beq.n	8006d9c <_free_r+0x98>
 8006d0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d0e:	9001      	str	r0, [sp, #4]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	f1a1 0404 	sub.w	r4, r1, #4
 8006d16:	bfb8      	it	lt
 8006d18:	18e4      	addlt	r4, r4, r3
 8006d1a:	f000 fc35 	bl	8007588 <__malloc_lock>
 8006d1e:	4a20      	ldr	r2, [pc, #128]	; (8006da0 <_free_r+0x9c>)
 8006d20:	9801      	ldr	r0, [sp, #4]
 8006d22:	6813      	ldr	r3, [r2, #0]
 8006d24:	4615      	mov	r5, r2
 8006d26:	b933      	cbnz	r3, 8006d36 <_free_r+0x32>
 8006d28:	6063      	str	r3, [r4, #4]
 8006d2a:	6014      	str	r4, [r2, #0]
 8006d2c:	b003      	add	sp, #12
 8006d2e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d32:	f000 bc2f 	b.w	8007594 <__malloc_unlock>
 8006d36:	42a3      	cmp	r3, r4
 8006d38:	d90b      	bls.n	8006d52 <_free_r+0x4e>
 8006d3a:	6821      	ldr	r1, [r4, #0]
 8006d3c:	1862      	adds	r2, r4, r1
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	bf04      	itt	eq
 8006d42:	681a      	ldreq	r2, [r3, #0]
 8006d44:	685b      	ldreq	r3, [r3, #4]
 8006d46:	6063      	str	r3, [r4, #4]
 8006d48:	bf04      	itt	eq
 8006d4a:	1852      	addeq	r2, r2, r1
 8006d4c:	6022      	streq	r2, [r4, #0]
 8006d4e:	602c      	str	r4, [r5, #0]
 8006d50:	e7ec      	b.n	8006d2c <_free_r+0x28>
 8006d52:	461a      	mov	r2, r3
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	b10b      	cbz	r3, 8006d5c <_free_r+0x58>
 8006d58:	42a3      	cmp	r3, r4
 8006d5a:	d9fa      	bls.n	8006d52 <_free_r+0x4e>
 8006d5c:	6811      	ldr	r1, [r2, #0]
 8006d5e:	1855      	adds	r5, r2, r1
 8006d60:	42a5      	cmp	r5, r4
 8006d62:	d10b      	bne.n	8006d7c <_free_r+0x78>
 8006d64:	6824      	ldr	r4, [r4, #0]
 8006d66:	4421      	add	r1, r4
 8006d68:	1854      	adds	r4, r2, r1
 8006d6a:	42a3      	cmp	r3, r4
 8006d6c:	6011      	str	r1, [r2, #0]
 8006d6e:	d1dd      	bne.n	8006d2c <_free_r+0x28>
 8006d70:	681c      	ldr	r4, [r3, #0]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	6053      	str	r3, [r2, #4]
 8006d76:	4421      	add	r1, r4
 8006d78:	6011      	str	r1, [r2, #0]
 8006d7a:	e7d7      	b.n	8006d2c <_free_r+0x28>
 8006d7c:	d902      	bls.n	8006d84 <_free_r+0x80>
 8006d7e:	230c      	movs	r3, #12
 8006d80:	6003      	str	r3, [r0, #0]
 8006d82:	e7d3      	b.n	8006d2c <_free_r+0x28>
 8006d84:	6825      	ldr	r5, [r4, #0]
 8006d86:	1961      	adds	r1, r4, r5
 8006d88:	428b      	cmp	r3, r1
 8006d8a:	bf04      	itt	eq
 8006d8c:	6819      	ldreq	r1, [r3, #0]
 8006d8e:	685b      	ldreq	r3, [r3, #4]
 8006d90:	6063      	str	r3, [r4, #4]
 8006d92:	bf04      	itt	eq
 8006d94:	1949      	addeq	r1, r1, r5
 8006d96:	6021      	streq	r1, [r4, #0]
 8006d98:	6054      	str	r4, [r2, #4]
 8006d9a:	e7c7      	b.n	8006d2c <_free_r+0x28>
 8006d9c:	b003      	add	sp, #12
 8006d9e:	bd30      	pop	{r4, r5, pc}
 8006da0:	20000094 	.word	0x20000094

08006da4 <_malloc_r>:
 8006da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006da6:	1ccd      	adds	r5, r1, #3
 8006da8:	f025 0503 	bic.w	r5, r5, #3
 8006dac:	3508      	adds	r5, #8
 8006dae:	2d0c      	cmp	r5, #12
 8006db0:	bf38      	it	cc
 8006db2:	250c      	movcc	r5, #12
 8006db4:	2d00      	cmp	r5, #0
 8006db6:	4606      	mov	r6, r0
 8006db8:	db01      	blt.n	8006dbe <_malloc_r+0x1a>
 8006dba:	42a9      	cmp	r1, r5
 8006dbc:	d903      	bls.n	8006dc6 <_malloc_r+0x22>
 8006dbe:	230c      	movs	r3, #12
 8006dc0:	6033      	str	r3, [r6, #0]
 8006dc2:	2000      	movs	r0, #0
 8006dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dc6:	f000 fbdf 	bl	8007588 <__malloc_lock>
 8006dca:	4921      	ldr	r1, [pc, #132]	; (8006e50 <_malloc_r+0xac>)
 8006dcc:	680a      	ldr	r2, [r1, #0]
 8006dce:	4614      	mov	r4, r2
 8006dd0:	b99c      	cbnz	r4, 8006dfa <_malloc_r+0x56>
 8006dd2:	4f20      	ldr	r7, [pc, #128]	; (8006e54 <_malloc_r+0xb0>)
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	b923      	cbnz	r3, 8006de2 <_malloc_r+0x3e>
 8006dd8:	4621      	mov	r1, r4
 8006dda:	4630      	mov	r0, r6
 8006ddc:	f000 fb2a 	bl	8007434 <_sbrk_r>
 8006de0:	6038      	str	r0, [r7, #0]
 8006de2:	4629      	mov	r1, r5
 8006de4:	4630      	mov	r0, r6
 8006de6:	f000 fb25 	bl	8007434 <_sbrk_r>
 8006dea:	1c43      	adds	r3, r0, #1
 8006dec:	d123      	bne.n	8006e36 <_malloc_r+0x92>
 8006dee:	230c      	movs	r3, #12
 8006df0:	6033      	str	r3, [r6, #0]
 8006df2:	4630      	mov	r0, r6
 8006df4:	f000 fbce 	bl	8007594 <__malloc_unlock>
 8006df8:	e7e3      	b.n	8006dc2 <_malloc_r+0x1e>
 8006dfa:	6823      	ldr	r3, [r4, #0]
 8006dfc:	1b5b      	subs	r3, r3, r5
 8006dfe:	d417      	bmi.n	8006e30 <_malloc_r+0x8c>
 8006e00:	2b0b      	cmp	r3, #11
 8006e02:	d903      	bls.n	8006e0c <_malloc_r+0x68>
 8006e04:	6023      	str	r3, [r4, #0]
 8006e06:	441c      	add	r4, r3
 8006e08:	6025      	str	r5, [r4, #0]
 8006e0a:	e004      	b.n	8006e16 <_malloc_r+0x72>
 8006e0c:	6863      	ldr	r3, [r4, #4]
 8006e0e:	42a2      	cmp	r2, r4
 8006e10:	bf0c      	ite	eq
 8006e12:	600b      	streq	r3, [r1, #0]
 8006e14:	6053      	strne	r3, [r2, #4]
 8006e16:	4630      	mov	r0, r6
 8006e18:	f000 fbbc 	bl	8007594 <__malloc_unlock>
 8006e1c:	f104 000b 	add.w	r0, r4, #11
 8006e20:	1d23      	adds	r3, r4, #4
 8006e22:	f020 0007 	bic.w	r0, r0, #7
 8006e26:	1ac2      	subs	r2, r0, r3
 8006e28:	d0cc      	beq.n	8006dc4 <_malloc_r+0x20>
 8006e2a:	1a1b      	subs	r3, r3, r0
 8006e2c:	50a3      	str	r3, [r4, r2]
 8006e2e:	e7c9      	b.n	8006dc4 <_malloc_r+0x20>
 8006e30:	4622      	mov	r2, r4
 8006e32:	6864      	ldr	r4, [r4, #4]
 8006e34:	e7cc      	b.n	8006dd0 <_malloc_r+0x2c>
 8006e36:	1cc4      	adds	r4, r0, #3
 8006e38:	f024 0403 	bic.w	r4, r4, #3
 8006e3c:	42a0      	cmp	r0, r4
 8006e3e:	d0e3      	beq.n	8006e08 <_malloc_r+0x64>
 8006e40:	1a21      	subs	r1, r4, r0
 8006e42:	4630      	mov	r0, r6
 8006e44:	f000 faf6 	bl	8007434 <_sbrk_r>
 8006e48:	3001      	adds	r0, #1
 8006e4a:	d1dd      	bne.n	8006e08 <_malloc_r+0x64>
 8006e4c:	e7cf      	b.n	8006dee <_malloc_r+0x4a>
 8006e4e:	bf00      	nop
 8006e50:	20000094 	.word	0x20000094
 8006e54:	20000098 	.word	0x20000098

08006e58 <__sfputc_r>:
 8006e58:	6893      	ldr	r3, [r2, #8]
 8006e5a:	3b01      	subs	r3, #1
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	b410      	push	{r4}
 8006e60:	6093      	str	r3, [r2, #8]
 8006e62:	da08      	bge.n	8006e76 <__sfputc_r+0x1e>
 8006e64:	6994      	ldr	r4, [r2, #24]
 8006e66:	42a3      	cmp	r3, r4
 8006e68:	db01      	blt.n	8006e6e <__sfputc_r+0x16>
 8006e6a:	290a      	cmp	r1, #10
 8006e6c:	d103      	bne.n	8006e76 <__sfputc_r+0x1e>
 8006e6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e72:	f7ff bc69 	b.w	8006748 <__swbuf_r>
 8006e76:	6813      	ldr	r3, [r2, #0]
 8006e78:	1c58      	adds	r0, r3, #1
 8006e7a:	6010      	str	r0, [r2, #0]
 8006e7c:	7019      	strb	r1, [r3, #0]
 8006e7e:	4608      	mov	r0, r1
 8006e80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e84:	4770      	bx	lr

08006e86 <__sfputs_r>:
 8006e86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e88:	4606      	mov	r6, r0
 8006e8a:	460f      	mov	r7, r1
 8006e8c:	4614      	mov	r4, r2
 8006e8e:	18d5      	adds	r5, r2, r3
 8006e90:	42ac      	cmp	r4, r5
 8006e92:	d101      	bne.n	8006e98 <__sfputs_r+0x12>
 8006e94:	2000      	movs	r0, #0
 8006e96:	e007      	b.n	8006ea8 <__sfputs_r+0x22>
 8006e98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e9c:	463a      	mov	r2, r7
 8006e9e:	4630      	mov	r0, r6
 8006ea0:	f7ff ffda 	bl	8006e58 <__sfputc_r>
 8006ea4:	1c43      	adds	r3, r0, #1
 8006ea6:	d1f3      	bne.n	8006e90 <__sfputs_r+0xa>
 8006ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006eac <_vfiprintf_r>:
 8006eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eb0:	460d      	mov	r5, r1
 8006eb2:	b09d      	sub	sp, #116	; 0x74
 8006eb4:	4614      	mov	r4, r2
 8006eb6:	4698      	mov	r8, r3
 8006eb8:	4606      	mov	r6, r0
 8006eba:	b118      	cbz	r0, 8006ec4 <_vfiprintf_r+0x18>
 8006ebc:	6983      	ldr	r3, [r0, #24]
 8006ebe:	b90b      	cbnz	r3, 8006ec4 <_vfiprintf_r+0x18>
 8006ec0:	f7ff fe1c 	bl	8006afc <__sinit>
 8006ec4:	4b89      	ldr	r3, [pc, #548]	; (80070ec <_vfiprintf_r+0x240>)
 8006ec6:	429d      	cmp	r5, r3
 8006ec8:	d11b      	bne.n	8006f02 <_vfiprintf_r+0x56>
 8006eca:	6875      	ldr	r5, [r6, #4]
 8006ecc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ece:	07d9      	lsls	r1, r3, #31
 8006ed0:	d405      	bmi.n	8006ede <_vfiprintf_r+0x32>
 8006ed2:	89ab      	ldrh	r3, [r5, #12]
 8006ed4:	059a      	lsls	r2, r3, #22
 8006ed6:	d402      	bmi.n	8006ede <_vfiprintf_r+0x32>
 8006ed8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006eda:	f7ff fead 	bl	8006c38 <__retarget_lock_acquire_recursive>
 8006ede:	89ab      	ldrh	r3, [r5, #12]
 8006ee0:	071b      	lsls	r3, r3, #28
 8006ee2:	d501      	bpl.n	8006ee8 <_vfiprintf_r+0x3c>
 8006ee4:	692b      	ldr	r3, [r5, #16]
 8006ee6:	b9eb      	cbnz	r3, 8006f24 <_vfiprintf_r+0x78>
 8006ee8:	4629      	mov	r1, r5
 8006eea:	4630      	mov	r0, r6
 8006eec:	f7ff fc7e 	bl	80067ec <__swsetup_r>
 8006ef0:	b1c0      	cbz	r0, 8006f24 <_vfiprintf_r+0x78>
 8006ef2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ef4:	07dc      	lsls	r4, r3, #31
 8006ef6:	d50e      	bpl.n	8006f16 <_vfiprintf_r+0x6a>
 8006ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8006efc:	b01d      	add	sp, #116	; 0x74
 8006efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f02:	4b7b      	ldr	r3, [pc, #492]	; (80070f0 <_vfiprintf_r+0x244>)
 8006f04:	429d      	cmp	r5, r3
 8006f06:	d101      	bne.n	8006f0c <_vfiprintf_r+0x60>
 8006f08:	68b5      	ldr	r5, [r6, #8]
 8006f0a:	e7df      	b.n	8006ecc <_vfiprintf_r+0x20>
 8006f0c:	4b79      	ldr	r3, [pc, #484]	; (80070f4 <_vfiprintf_r+0x248>)
 8006f0e:	429d      	cmp	r5, r3
 8006f10:	bf08      	it	eq
 8006f12:	68f5      	ldreq	r5, [r6, #12]
 8006f14:	e7da      	b.n	8006ecc <_vfiprintf_r+0x20>
 8006f16:	89ab      	ldrh	r3, [r5, #12]
 8006f18:	0598      	lsls	r0, r3, #22
 8006f1a:	d4ed      	bmi.n	8006ef8 <_vfiprintf_r+0x4c>
 8006f1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f1e:	f7ff fe8c 	bl	8006c3a <__retarget_lock_release_recursive>
 8006f22:	e7e9      	b.n	8006ef8 <_vfiprintf_r+0x4c>
 8006f24:	2300      	movs	r3, #0
 8006f26:	9309      	str	r3, [sp, #36]	; 0x24
 8006f28:	2320      	movs	r3, #32
 8006f2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f32:	2330      	movs	r3, #48	; 0x30
 8006f34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80070f8 <_vfiprintf_r+0x24c>
 8006f38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f3c:	f04f 0901 	mov.w	r9, #1
 8006f40:	4623      	mov	r3, r4
 8006f42:	469a      	mov	sl, r3
 8006f44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f48:	b10a      	cbz	r2, 8006f4e <_vfiprintf_r+0xa2>
 8006f4a:	2a25      	cmp	r2, #37	; 0x25
 8006f4c:	d1f9      	bne.n	8006f42 <_vfiprintf_r+0x96>
 8006f4e:	ebba 0b04 	subs.w	fp, sl, r4
 8006f52:	d00b      	beq.n	8006f6c <_vfiprintf_r+0xc0>
 8006f54:	465b      	mov	r3, fp
 8006f56:	4622      	mov	r2, r4
 8006f58:	4629      	mov	r1, r5
 8006f5a:	4630      	mov	r0, r6
 8006f5c:	f7ff ff93 	bl	8006e86 <__sfputs_r>
 8006f60:	3001      	adds	r0, #1
 8006f62:	f000 80aa 	beq.w	80070ba <_vfiprintf_r+0x20e>
 8006f66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f68:	445a      	add	r2, fp
 8006f6a:	9209      	str	r2, [sp, #36]	; 0x24
 8006f6c:	f89a 3000 	ldrb.w	r3, [sl]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	f000 80a2 	beq.w	80070ba <_vfiprintf_r+0x20e>
 8006f76:	2300      	movs	r3, #0
 8006f78:	f04f 32ff 	mov.w	r2, #4294967295
 8006f7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f80:	f10a 0a01 	add.w	sl, sl, #1
 8006f84:	9304      	str	r3, [sp, #16]
 8006f86:	9307      	str	r3, [sp, #28]
 8006f88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f8c:	931a      	str	r3, [sp, #104]	; 0x68
 8006f8e:	4654      	mov	r4, sl
 8006f90:	2205      	movs	r2, #5
 8006f92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f96:	4858      	ldr	r0, [pc, #352]	; (80070f8 <_vfiprintf_r+0x24c>)
 8006f98:	f7f9 f922 	bl	80001e0 <memchr>
 8006f9c:	9a04      	ldr	r2, [sp, #16]
 8006f9e:	b9d8      	cbnz	r0, 8006fd8 <_vfiprintf_r+0x12c>
 8006fa0:	06d1      	lsls	r1, r2, #27
 8006fa2:	bf44      	itt	mi
 8006fa4:	2320      	movmi	r3, #32
 8006fa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006faa:	0713      	lsls	r3, r2, #28
 8006fac:	bf44      	itt	mi
 8006fae:	232b      	movmi	r3, #43	; 0x2b
 8006fb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fb4:	f89a 3000 	ldrb.w	r3, [sl]
 8006fb8:	2b2a      	cmp	r3, #42	; 0x2a
 8006fba:	d015      	beq.n	8006fe8 <_vfiprintf_r+0x13c>
 8006fbc:	9a07      	ldr	r2, [sp, #28]
 8006fbe:	4654      	mov	r4, sl
 8006fc0:	2000      	movs	r0, #0
 8006fc2:	f04f 0c0a 	mov.w	ip, #10
 8006fc6:	4621      	mov	r1, r4
 8006fc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fcc:	3b30      	subs	r3, #48	; 0x30
 8006fce:	2b09      	cmp	r3, #9
 8006fd0:	d94e      	bls.n	8007070 <_vfiprintf_r+0x1c4>
 8006fd2:	b1b0      	cbz	r0, 8007002 <_vfiprintf_r+0x156>
 8006fd4:	9207      	str	r2, [sp, #28]
 8006fd6:	e014      	b.n	8007002 <_vfiprintf_r+0x156>
 8006fd8:	eba0 0308 	sub.w	r3, r0, r8
 8006fdc:	fa09 f303 	lsl.w	r3, r9, r3
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	9304      	str	r3, [sp, #16]
 8006fe4:	46a2      	mov	sl, r4
 8006fe6:	e7d2      	b.n	8006f8e <_vfiprintf_r+0xe2>
 8006fe8:	9b03      	ldr	r3, [sp, #12]
 8006fea:	1d19      	adds	r1, r3, #4
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	9103      	str	r1, [sp, #12]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	bfbb      	ittet	lt
 8006ff4:	425b      	neglt	r3, r3
 8006ff6:	f042 0202 	orrlt.w	r2, r2, #2
 8006ffa:	9307      	strge	r3, [sp, #28]
 8006ffc:	9307      	strlt	r3, [sp, #28]
 8006ffe:	bfb8      	it	lt
 8007000:	9204      	strlt	r2, [sp, #16]
 8007002:	7823      	ldrb	r3, [r4, #0]
 8007004:	2b2e      	cmp	r3, #46	; 0x2e
 8007006:	d10c      	bne.n	8007022 <_vfiprintf_r+0x176>
 8007008:	7863      	ldrb	r3, [r4, #1]
 800700a:	2b2a      	cmp	r3, #42	; 0x2a
 800700c:	d135      	bne.n	800707a <_vfiprintf_r+0x1ce>
 800700e:	9b03      	ldr	r3, [sp, #12]
 8007010:	1d1a      	adds	r2, r3, #4
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	9203      	str	r2, [sp, #12]
 8007016:	2b00      	cmp	r3, #0
 8007018:	bfb8      	it	lt
 800701a:	f04f 33ff 	movlt.w	r3, #4294967295
 800701e:	3402      	adds	r4, #2
 8007020:	9305      	str	r3, [sp, #20]
 8007022:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007108 <_vfiprintf_r+0x25c>
 8007026:	7821      	ldrb	r1, [r4, #0]
 8007028:	2203      	movs	r2, #3
 800702a:	4650      	mov	r0, sl
 800702c:	f7f9 f8d8 	bl	80001e0 <memchr>
 8007030:	b140      	cbz	r0, 8007044 <_vfiprintf_r+0x198>
 8007032:	2340      	movs	r3, #64	; 0x40
 8007034:	eba0 000a 	sub.w	r0, r0, sl
 8007038:	fa03 f000 	lsl.w	r0, r3, r0
 800703c:	9b04      	ldr	r3, [sp, #16]
 800703e:	4303      	orrs	r3, r0
 8007040:	3401      	adds	r4, #1
 8007042:	9304      	str	r3, [sp, #16]
 8007044:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007048:	482c      	ldr	r0, [pc, #176]	; (80070fc <_vfiprintf_r+0x250>)
 800704a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800704e:	2206      	movs	r2, #6
 8007050:	f7f9 f8c6 	bl	80001e0 <memchr>
 8007054:	2800      	cmp	r0, #0
 8007056:	d03f      	beq.n	80070d8 <_vfiprintf_r+0x22c>
 8007058:	4b29      	ldr	r3, [pc, #164]	; (8007100 <_vfiprintf_r+0x254>)
 800705a:	bb1b      	cbnz	r3, 80070a4 <_vfiprintf_r+0x1f8>
 800705c:	9b03      	ldr	r3, [sp, #12]
 800705e:	3307      	adds	r3, #7
 8007060:	f023 0307 	bic.w	r3, r3, #7
 8007064:	3308      	adds	r3, #8
 8007066:	9303      	str	r3, [sp, #12]
 8007068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800706a:	443b      	add	r3, r7
 800706c:	9309      	str	r3, [sp, #36]	; 0x24
 800706e:	e767      	b.n	8006f40 <_vfiprintf_r+0x94>
 8007070:	fb0c 3202 	mla	r2, ip, r2, r3
 8007074:	460c      	mov	r4, r1
 8007076:	2001      	movs	r0, #1
 8007078:	e7a5      	b.n	8006fc6 <_vfiprintf_r+0x11a>
 800707a:	2300      	movs	r3, #0
 800707c:	3401      	adds	r4, #1
 800707e:	9305      	str	r3, [sp, #20]
 8007080:	4619      	mov	r1, r3
 8007082:	f04f 0c0a 	mov.w	ip, #10
 8007086:	4620      	mov	r0, r4
 8007088:	f810 2b01 	ldrb.w	r2, [r0], #1
 800708c:	3a30      	subs	r2, #48	; 0x30
 800708e:	2a09      	cmp	r2, #9
 8007090:	d903      	bls.n	800709a <_vfiprintf_r+0x1ee>
 8007092:	2b00      	cmp	r3, #0
 8007094:	d0c5      	beq.n	8007022 <_vfiprintf_r+0x176>
 8007096:	9105      	str	r1, [sp, #20]
 8007098:	e7c3      	b.n	8007022 <_vfiprintf_r+0x176>
 800709a:	fb0c 2101 	mla	r1, ip, r1, r2
 800709e:	4604      	mov	r4, r0
 80070a0:	2301      	movs	r3, #1
 80070a2:	e7f0      	b.n	8007086 <_vfiprintf_r+0x1da>
 80070a4:	ab03      	add	r3, sp, #12
 80070a6:	9300      	str	r3, [sp, #0]
 80070a8:	462a      	mov	r2, r5
 80070aa:	4b16      	ldr	r3, [pc, #88]	; (8007104 <_vfiprintf_r+0x258>)
 80070ac:	a904      	add	r1, sp, #16
 80070ae:	4630      	mov	r0, r6
 80070b0:	f3af 8000 	nop.w
 80070b4:	4607      	mov	r7, r0
 80070b6:	1c78      	adds	r0, r7, #1
 80070b8:	d1d6      	bne.n	8007068 <_vfiprintf_r+0x1bc>
 80070ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070bc:	07d9      	lsls	r1, r3, #31
 80070be:	d405      	bmi.n	80070cc <_vfiprintf_r+0x220>
 80070c0:	89ab      	ldrh	r3, [r5, #12]
 80070c2:	059a      	lsls	r2, r3, #22
 80070c4:	d402      	bmi.n	80070cc <_vfiprintf_r+0x220>
 80070c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070c8:	f7ff fdb7 	bl	8006c3a <__retarget_lock_release_recursive>
 80070cc:	89ab      	ldrh	r3, [r5, #12]
 80070ce:	065b      	lsls	r3, r3, #25
 80070d0:	f53f af12 	bmi.w	8006ef8 <_vfiprintf_r+0x4c>
 80070d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070d6:	e711      	b.n	8006efc <_vfiprintf_r+0x50>
 80070d8:	ab03      	add	r3, sp, #12
 80070da:	9300      	str	r3, [sp, #0]
 80070dc:	462a      	mov	r2, r5
 80070de:	4b09      	ldr	r3, [pc, #36]	; (8007104 <_vfiprintf_r+0x258>)
 80070e0:	a904      	add	r1, sp, #16
 80070e2:	4630      	mov	r0, r6
 80070e4:	f000 f880 	bl	80071e8 <_printf_i>
 80070e8:	e7e4      	b.n	80070b4 <_vfiprintf_r+0x208>
 80070ea:	bf00      	nop
 80070ec:	080076d4 	.word	0x080076d4
 80070f0:	080076f4 	.word	0x080076f4
 80070f4:	080076b4 	.word	0x080076b4
 80070f8:	08007714 	.word	0x08007714
 80070fc:	0800771e 	.word	0x0800771e
 8007100:	00000000 	.word	0x00000000
 8007104:	08006e87 	.word	0x08006e87
 8007108:	0800771a 	.word	0x0800771a

0800710c <_printf_common>:
 800710c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007110:	4616      	mov	r6, r2
 8007112:	4699      	mov	r9, r3
 8007114:	688a      	ldr	r2, [r1, #8]
 8007116:	690b      	ldr	r3, [r1, #16]
 8007118:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800711c:	4293      	cmp	r3, r2
 800711e:	bfb8      	it	lt
 8007120:	4613      	movlt	r3, r2
 8007122:	6033      	str	r3, [r6, #0]
 8007124:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007128:	4607      	mov	r7, r0
 800712a:	460c      	mov	r4, r1
 800712c:	b10a      	cbz	r2, 8007132 <_printf_common+0x26>
 800712e:	3301      	adds	r3, #1
 8007130:	6033      	str	r3, [r6, #0]
 8007132:	6823      	ldr	r3, [r4, #0]
 8007134:	0699      	lsls	r1, r3, #26
 8007136:	bf42      	ittt	mi
 8007138:	6833      	ldrmi	r3, [r6, #0]
 800713a:	3302      	addmi	r3, #2
 800713c:	6033      	strmi	r3, [r6, #0]
 800713e:	6825      	ldr	r5, [r4, #0]
 8007140:	f015 0506 	ands.w	r5, r5, #6
 8007144:	d106      	bne.n	8007154 <_printf_common+0x48>
 8007146:	f104 0a19 	add.w	sl, r4, #25
 800714a:	68e3      	ldr	r3, [r4, #12]
 800714c:	6832      	ldr	r2, [r6, #0]
 800714e:	1a9b      	subs	r3, r3, r2
 8007150:	42ab      	cmp	r3, r5
 8007152:	dc26      	bgt.n	80071a2 <_printf_common+0x96>
 8007154:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007158:	1e13      	subs	r3, r2, #0
 800715a:	6822      	ldr	r2, [r4, #0]
 800715c:	bf18      	it	ne
 800715e:	2301      	movne	r3, #1
 8007160:	0692      	lsls	r2, r2, #26
 8007162:	d42b      	bmi.n	80071bc <_printf_common+0xb0>
 8007164:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007168:	4649      	mov	r1, r9
 800716a:	4638      	mov	r0, r7
 800716c:	47c0      	blx	r8
 800716e:	3001      	adds	r0, #1
 8007170:	d01e      	beq.n	80071b0 <_printf_common+0xa4>
 8007172:	6823      	ldr	r3, [r4, #0]
 8007174:	68e5      	ldr	r5, [r4, #12]
 8007176:	6832      	ldr	r2, [r6, #0]
 8007178:	f003 0306 	and.w	r3, r3, #6
 800717c:	2b04      	cmp	r3, #4
 800717e:	bf08      	it	eq
 8007180:	1aad      	subeq	r5, r5, r2
 8007182:	68a3      	ldr	r3, [r4, #8]
 8007184:	6922      	ldr	r2, [r4, #16]
 8007186:	bf0c      	ite	eq
 8007188:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800718c:	2500      	movne	r5, #0
 800718e:	4293      	cmp	r3, r2
 8007190:	bfc4      	itt	gt
 8007192:	1a9b      	subgt	r3, r3, r2
 8007194:	18ed      	addgt	r5, r5, r3
 8007196:	2600      	movs	r6, #0
 8007198:	341a      	adds	r4, #26
 800719a:	42b5      	cmp	r5, r6
 800719c:	d11a      	bne.n	80071d4 <_printf_common+0xc8>
 800719e:	2000      	movs	r0, #0
 80071a0:	e008      	b.n	80071b4 <_printf_common+0xa8>
 80071a2:	2301      	movs	r3, #1
 80071a4:	4652      	mov	r2, sl
 80071a6:	4649      	mov	r1, r9
 80071a8:	4638      	mov	r0, r7
 80071aa:	47c0      	blx	r8
 80071ac:	3001      	adds	r0, #1
 80071ae:	d103      	bne.n	80071b8 <_printf_common+0xac>
 80071b0:	f04f 30ff 	mov.w	r0, #4294967295
 80071b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071b8:	3501      	adds	r5, #1
 80071ba:	e7c6      	b.n	800714a <_printf_common+0x3e>
 80071bc:	18e1      	adds	r1, r4, r3
 80071be:	1c5a      	adds	r2, r3, #1
 80071c0:	2030      	movs	r0, #48	; 0x30
 80071c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80071c6:	4422      	add	r2, r4
 80071c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80071cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80071d0:	3302      	adds	r3, #2
 80071d2:	e7c7      	b.n	8007164 <_printf_common+0x58>
 80071d4:	2301      	movs	r3, #1
 80071d6:	4622      	mov	r2, r4
 80071d8:	4649      	mov	r1, r9
 80071da:	4638      	mov	r0, r7
 80071dc:	47c0      	blx	r8
 80071de:	3001      	adds	r0, #1
 80071e0:	d0e6      	beq.n	80071b0 <_printf_common+0xa4>
 80071e2:	3601      	adds	r6, #1
 80071e4:	e7d9      	b.n	800719a <_printf_common+0x8e>
	...

080071e8 <_printf_i>:
 80071e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071ec:	460c      	mov	r4, r1
 80071ee:	4691      	mov	r9, r2
 80071f0:	7e27      	ldrb	r7, [r4, #24]
 80071f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80071f4:	2f78      	cmp	r7, #120	; 0x78
 80071f6:	4680      	mov	r8, r0
 80071f8:	469a      	mov	sl, r3
 80071fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80071fe:	d807      	bhi.n	8007210 <_printf_i+0x28>
 8007200:	2f62      	cmp	r7, #98	; 0x62
 8007202:	d80a      	bhi.n	800721a <_printf_i+0x32>
 8007204:	2f00      	cmp	r7, #0
 8007206:	f000 80d8 	beq.w	80073ba <_printf_i+0x1d2>
 800720a:	2f58      	cmp	r7, #88	; 0x58
 800720c:	f000 80a3 	beq.w	8007356 <_printf_i+0x16e>
 8007210:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007214:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007218:	e03a      	b.n	8007290 <_printf_i+0xa8>
 800721a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800721e:	2b15      	cmp	r3, #21
 8007220:	d8f6      	bhi.n	8007210 <_printf_i+0x28>
 8007222:	a001      	add	r0, pc, #4	; (adr r0, 8007228 <_printf_i+0x40>)
 8007224:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007228:	08007281 	.word	0x08007281
 800722c:	08007295 	.word	0x08007295
 8007230:	08007211 	.word	0x08007211
 8007234:	08007211 	.word	0x08007211
 8007238:	08007211 	.word	0x08007211
 800723c:	08007211 	.word	0x08007211
 8007240:	08007295 	.word	0x08007295
 8007244:	08007211 	.word	0x08007211
 8007248:	08007211 	.word	0x08007211
 800724c:	08007211 	.word	0x08007211
 8007250:	08007211 	.word	0x08007211
 8007254:	080073a1 	.word	0x080073a1
 8007258:	080072c5 	.word	0x080072c5
 800725c:	08007383 	.word	0x08007383
 8007260:	08007211 	.word	0x08007211
 8007264:	08007211 	.word	0x08007211
 8007268:	080073c3 	.word	0x080073c3
 800726c:	08007211 	.word	0x08007211
 8007270:	080072c5 	.word	0x080072c5
 8007274:	08007211 	.word	0x08007211
 8007278:	08007211 	.word	0x08007211
 800727c:	0800738b 	.word	0x0800738b
 8007280:	680b      	ldr	r3, [r1, #0]
 8007282:	1d1a      	adds	r2, r3, #4
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	600a      	str	r2, [r1, #0]
 8007288:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800728c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007290:	2301      	movs	r3, #1
 8007292:	e0a3      	b.n	80073dc <_printf_i+0x1f4>
 8007294:	6825      	ldr	r5, [r4, #0]
 8007296:	6808      	ldr	r0, [r1, #0]
 8007298:	062e      	lsls	r6, r5, #24
 800729a:	f100 0304 	add.w	r3, r0, #4
 800729e:	d50a      	bpl.n	80072b6 <_printf_i+0xce>
 80072a0:	6805      	ldr	r5, [r0, #0]
 80072a2:	600b      	str	r3, [r1, #0]
 80072a4:	2d00      	cmp	r5, #0
 80072a6:	da03      	bge.n	80072b0 <_printf_i+0xc8>
 80072a8:	232d      	movs	r3, #45	; 0x2d
 80072aa:	426d      	negs	r5, r5
 80072ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072b0:	485e      	ldr	r0, [pc, #376]	; (800742c <_printf_i+0x244>)
 80072b2:	230a      	movs	r3, #10
 80072b4:	e019      	b.n	80072ea <_printf_i+0x102>
 80072b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80072ba:	6805      	ldr	r5, [r0, #0]
 80072bc:	600b      	str	r3, [r1, #0]
 80072be:	bf18      	it	ne
 80072c0:	b22d      	sxthne	r5, r5
 80072c2:	e7ef      	b.n	80072a4 <_printf_i+0xbc>
 80072c4:	680b      	ldr	r3, [r1, #0]
 80072c6:	6825      	ldr	r5, [r4, #0]
 80072c8:	1d18      	adds	r0, r3, #4
 80072ca:	6008      	str	r0, [r1, #0]
 80072cc:	0628      	lsls	r0, r5, #24
 80072ce:	d501      	bpl.n	80072d4 <_printf_i+0xec>
 80072d0:	681d      	ldr	r5, [r3, #0]
 80072d2:	e002      	b.n	80072da <_printf_i+0xf2>
 80072d4:	0669      	lsls	r1, r5, #25
 80072d6:	d5fb      	bpl.n	80072d0 <_printf_i+0xe8>
 80072d8:	881d      	ldrh	r5, [r3, #0]
 80072da:	4854      	ldr	r0, [pc, #336]	; (800742c <_printf_i+0x244>)
 80072dc:	2f6f      	cmp	r7, #111	; 0x6f
 80072de:	bf0c      	ite	eq
 80072e0:	2308      	moveq	r3, #8
 80072e2:	230a      	movne	r3, #10
 80072e4:	2100      	movs	r1, #0
 80072e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80072ea:	6866      	ldr	r6, [r4, #4]
 80072ec:	60a6      	str	r6, [r4, #8]
 80072ee:	2e00      	cmp	r6, #0
 80072f0:	bfa2      	ittt	ge
 80072f2:	6821      	ldrge	r1, [r4, #0]
 80072f4:	f021 0104 	bicge.w	r1, r1, #4
 80072f8:	6021      	strge	r1, [r4, #0]
 80072fa:	b90d      	cbnz	r5, 8007300 <_printf_i+0x118>
 80072fc:	2e00      	cmp	r6, #0
 80072fe:	d04d      	beq.n	800739c <_printf_i+0x1b4>
 8007300:	4616      	mov	r6, r2
 8007302:	fbb5 f1f3 	udiv	r1, r5, r3
 8007306:	fb03 5711 	mls	r7, r3, r1, r5
 800730a:	5dc7      	ldrb	r7, [r0, r7]
 800730c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007310:	462f      	mov	r7, r5
 8007312:	42bb      	cmp	r3, r7
 8007314:	460d      	mov	r5, r1
 8007316:	d9f4      	bls.n	8007302 <_printf_i+0x11a>
 8007318:	2b08      	cmp	r3, #8
 800731a:	d10b      	bne.n	8007334 <_printf_i+0x14c>
 800731c:	6823      	ldr	r3, [r4, #0]
 800731e:	07df      	lsls	r7, r3, #31
 8007320:	d508      	bpl.n	8007334 <_printf_i+0x14c>
 8007322:	6923      	ldr	r3, [r4, #16]
 8007324:	6861      	ldr	r1, [r4, #4]
 8007326:	4299      	cmp	r1, r3
 8007328:	bfde      	ittt	le
 800732a:	2330      	movle	r3, #48	; 0x30
 800732c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007330:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007334:	1b92      	subs	r2, r2, r6
 8007336:	6122      	str	r2, [r4, #16]
 8007338:	f8cd a000 	str.w	sl, [sp]
 800733c:	464b      	mov	r3, r9
 800733e:	aa03      	add	r2, sp, #12
 8007340:	4621      	mov	r1, r4
 8007342:	4640      	mov	r0, r8
 8007344:	f7ff fee2 	bl	800710c <_printf_common>
 8007348:	3001      	adds	r0, #1
 800734a:	d14c      	bne.n	80073e6 <_printf_i+0x1fe>
 800734c:	f04f 30ff 	mov.w	r0, #4294967295
 8007350:	b004      	add	sp, #16
 8007352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007356:	4835      	ldr	r0, [pc, #212]	; (800742c <_printf_i+0x244>)
 8007358:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800735c:	6823      	ldr	r3, [r4, #0]
 800735e:	680e      	ldr	r6, [r1, #0]
 8007360:	061f      	lsls	r7, r3, #24
 8007362:	f856 5b04 	ldr.w	r5, [r6], #4
 8007366:	600e      	str	r6, [r1, #0]
 8007368:	d514      	bpl.n	8007394 <_printf_i+0x1ac>
 800736a:	07d9      	lsls	r1, r3, #31
 800736c:	bf44      	itt	mi
 800736e:	f043 0320 	orrmi.w	r3, r3, #32
 8007372:	6023      	strmi	r3, [r4, #0]
 8007374:	b91d      	cbnz	r5, 800737e <_printf_i+0x196>
 8007376:	6823      	ldr	r3, [r4, #0]
 8007378:	f023 0320 	bic.w	r3, r3, #32
 800737c:	6023      	str	r3, [r4, #0]
 800737e:	2310      	movs	r3, #16
 8007380:	e7b0      	b.n	80072e4 <_printf_i+0xfc>
 8007382:	6823      	ldr	r3, [r4, #0]
 8007384:	f043 0320 	orr.w	r3, r3, #32
 8007388:	6023      	str	r3, [r4, #0]
 800738a:	2378      	movs	r3, #120	; 0x78
 800738c:	4828      	ldr	r0, [pc, #160]	; (8007430 <_printf_i+0x248>)
 800738e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007392:	e7e3      	b.n	800735c <_printf_i+0x174>
 8007394:	065e      	lsls	r6, r3, #25
 8007396:	bf48      	it	mi
 8007398:	b2ad      	uxthmi	r5, r5
 800739a:	e7e6      	b.n	800736a <_printf_i+0x182>
 800739c:	4616      	mov	r6, r2
 800739e:	e7bb      	b.n	8007318 <_printf_i+0x130>
 80073a0:	680b      	ldr	r3, [r1, #0]
 80073a2:	6826      	ldr	r6, [r4, #0]
 80073a4:	6960      	ldr	r0, [r4, #20]
 80073a6:	1d1d      	adds	r5, r3, #4
 80073a8:	600d      	str	r5, [r1, #0]
 80073aa:	0635      	lsls	r5, r6, #24
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	d501      	bpl.n	80073b4 <_printf_i+0x1cc>
 80073b0:	6018      	str	r0, [r3, #0]
 80073b2:	e002      	b.n	80073ba <_printf_i+0x1d2>
 80073b4:	0671      	lsls	r1, r6, #25
 80073b6:	d5fb      	bpl.n	80073b0 <_printf_i+0x1c8>
 80073b8:	8018      	strh	r0, [r3, #0]
 80073ba:	2300      	movs	r3, #0
 80073bc:	6123      	str	r3, [r4, #16]
 80073be:	4616      	mov	r6, r2
 80073c0:	e7ba      	b.n	8007338 <_printf_i+0x150>
 80073c2:	680b      	ldr	r3, [r1, #0]
 80073c4:	1d1a      	adds	r2, r3, #4
 80073c6:	600a      	str	r2, [r1, #0]
 80073c8:	681e      	ldr	r6, [r3, #0]
 80073ca:	6862      	ldr	r2, [r4, #4]
 80073cc:	2100      	movs	r1, #0
 80073ce:	4630      	mov	r0, r6
 80073d0:	f7f8 ff06 	bl	80001e0 <memchr>
 80073d4:	b108      	cbz	r0, 80073da <_printf_i+0x1f2>
 80073d6:	1b80      	subs	r0, r0, r6
 80073d8:	6060      	str	r0, [r4, #4]
 80073da:	6863      	ldr	r3, [r4, #4]
 80073dc:	6123      	str	r3, [r4, #16]
 80073de:	2300      	movs	r3, #0
 80073e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073e4:	e7a8      	b.n	8007338 <_printf_i+0x150>
 80073e6:	6923      	ldr	r3, [r4, #16]
 80073e8:	4632      	mov	r2, r6
 80073ea:	4649      	mov	r1, r9
 80073ec:	4640      	mov	r0, r8
 80073ee:	47d0      	blx	sl
 80073f0:	3001      	adds	r0, #1
 80073f2:	d0ab      	beq.n	800734c <_printf_i+0x164>
 80073f4:	6823      	ldr	r3, [r4, #0]
 80073f6:	079b      	lsls	r3, r3, #30
 80073f8:	d413      	bmi.n	8007422 <_printf_i+0x23a>
 80073fa:	68e0      	ldr	r0, [r4, #12]
 80073fc:	9b03      	ldr	r3, [sp, #12]
 80073fe:	4298      	cmp	r0, r3
 8007400:	bfb8      	it	lt
 8007402:	4618      	movlt	r0, r3
 8007404:	e7a4      	b.n	8007350 <_printf_i+0x168>
 8007406:	2301      	movs	r3, #1
 8007408:	4632      	mov	r2, r6
 800740a:	4649      	mov	r1, r9
 800740c:	4640      	mov	r0, r8
 800740e:	47d0      	blx	sl
 8007410:	3001      	adds	r0, #1
 8007412:	d09b      	beq.n	800734c <_printf_i+0x164>
 8007414:	3501      	adds	r5, #1
 8007416:	68e3      	ldr	r3, [r4, #12]
 8007418:	9903      	ldr	r1, [sp, #12]
 800741a:	1a5b      	subs	r3, r3, r1
 800741c:	42ab      	cmp	r3, r5
 800741e:	dcf2      	bgt.n	8007406 <_printf_i+0x21e>
 8007420:	e7eb      	b.n	80073fa <_printf_i+0x212>
 8007422:	2500      	movs	r5, #0
 8007424:	f104 0619 	add.w	r6, r4, #25
 8007428:	e7f5      	b.n	8007416 <_printf_i+0x22e>
 800742a:	bf00      	nop
 800742c:	08007725 	.word	0x08007725
 8007430:	08007736 	.word	0x08007736

08007434 <_sbrk_r>:
 8007434:	b538      	push	{r3, r4, r5, lr}
 8007436:	4d06      	ldr	r5, [pc, #24]	; (8007450 <_sbrk_r+0x1c>)
 8007438:	2300      	movs	r3, #0
 800743a:	4604      	mov	r4, r0
 800743c:	4608      	mov	r0, r1
 800743e:	602b      	str	r3, [r5, #0]
 8007440:	f7fa ff6e 	bl	8002320 <_sbrk>
 8007444:	1c43      	adds	r3, r0, #1
 8007446:	d102      	bne.n	800744e <_sbrk_r+0x1a>
 8007448:	682b      	ldr	r3, [r5, #0]
 800744a:	b103      	cbz	r3, 800744e <_sbrk_r+0x1a>
 800744c:	6023      	str	r3, [r4, #0]
 800744e:	bd38      	pop	{r3, r4, r5, pc}
 8007450:	20000368 	.word	0x20000368

08007454 <__sread>:
 8007454:	b510      	push	{r4, lr}
 8007456:	460c      	mov	r4, r1
 8007458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800745c:	f000 f8a0 	bl	80075a0 <_read_r>
 8007460:	2800      	cmp	r0, #0
 8007462:	bfab      	itete	ge
 8007464:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007466:	89a3      	ldrhlt	r3, [r4, #12]
 8007468:	181b      	addge	r3, r3, r0
 800746a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800746e:	bfac      	ite	ge
 8007470:	6563      	strge	r3, [r4, #84]	; 0x54
 8007472:	81a3      	strhlt	r3, [r4, #12]
 8007474:	bd10      	pop	{r4, pc}

08007476 <__swrite>:
 8007476:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800747a:	461f      	mov	r7, r3
 800747c:	898b      	ldrh	r3, [r1, #12]
 800747e:	05db      	lsls	r3, r3, #23
 8007480:	4605      	mov	r5, r0
 8007482:	460c      	mov	r4, r1
 8007484:	4616      	mov	r6, r2
 8007486:	d505      	bpl.n	8007494 <__swrite+0x1e>
 8007488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800748c:	2302      	movs	r3, #2
 800748e:	2200      	movs	r2, #0
 8007490:	f000 f868 	bl	8007564 <_lseek_r>
 8007494:	89a3      	ldrh	r3, [r4, #12]
 8007496:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800749a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800749e:	81a3      	strh	r3, [r4, #12]
 80074a0:	4632      	mov	r2, r6
 80074a2:	463b      	mov	r3, r7
 80074a4:	4628      	mov	r0, r5
 80074a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074aa:	f000 b817 	b.w	80074dc <_write_r>

080074ae <__sseek>:
 80074ae:	b510      	push	{r4, lr}
 80074b0:	460c      	mov	r4, r1
 80074b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074b6:	f000 f855 	bl	8007564 <_lseek_r>
 80074ba:	1c43      	adds	r3, r0, #1
 80074bc:	89a3      	ldrh	r3, [r4, #12]
 80074be:	bf15      	itete	ne
 80074c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80074c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80074c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80074ca:	81a3      	strheq	r3, [r4, #12]
 80074cc:	bf18      	it	ne
 80074ce:	81a3      	strhne	r3, [r4, #12]
 80074d0:	bd10      	pop	{r4, pc}

080074d2 <__sclose>:
 80074d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074d6:	f000 b813 	b.w	8007500 <_close_r>
	...

080074dc <_write_r>:
 80074dc:	b538      	push	{r3, r4, r5, lr}
 80074de:	4d07      	ldr	r5, [pc, #28]	; (80074fc <_write_r+0x20>)
 80074e0:	4604      	mov	r4, r0
 80074e2:	4608      	mov	r0, r1
 80074e4:	4611      	mov	r1, r2
 80074e6:	2200      	movs	r2, #0
 80074e8:	602a      	str	r2, [r5, #0]
 80074ea:	461a      	mov	r2, r3
 80074ec:	f7fa fec7 	bl	800227e <_write>
 80074f0:	1c43      	adds	r3, r0, #1
 80074f2:	d102      	bne.n	80074fa <_write_r+0x1e>
 80074f4:	682b      	ldr	r3, [r5, #0]
 80074f6:	b103      	cbz	r3, 80074fa <_write_r+0x1e>
 80074f8:	6023      	str	r3, [r4, #0]
 80074fa:	bd38      	pop	{r3, r4, r5, pc}
 80074fc:	20000368 	.word	0x20000368

08007500 <_close_r>:
 8007500:	b538      	push	{r3, r4, r5, lr}
 8007502:	4d06      	ldr	r5, [pc, #24]	; (800751c <_close_r+0x1c>)
 8007504:	2300      	movs	r3, #0
 8007506:	4604      	mov	r4, r0
 8007508:	4608      	mov	r0, r1
 800750a:	602b      	str	r3, [r5, #0]
 800750c:	f7fa fed3 	bl	80022b6 <_close>
 8007510:	1c43      	adds	r3, r0, #1
 8007512:	d102      	bne.n	800751a <_close_r+0x1a>
 8007514:	682b      	ldr	r3, [r5, #0]
 8007516:	b103      	cbz	r3, 800751a <_close_r+0x1a>
 8007518:	6023      	str	r3, [r4, #0]
 800751a:	bd38      	pop	{r3, r4, r5, pc}
 800751c:	20000368 	.word	0x20000368

08007520 <_fstat_r>:
 8007520:	b538      	push	{r3, r4, r5, lr}
 8007522:	4d07      	ldr	r5, [pc, #28]	; (8007540 <_fstat_r+0x20>)
 8007524:	2300      	movs	r3, #0
 8007526:	4604      	mov	r4, r0
 8007528:	4608      	mov	r0, r1
 800752a:	4611      	mov	r1, r2
 800752c:	602b      	str	r3, [r5, #0]
 800752e:	f7fa fece 	bl	80022ce <_fstat>
 8007532:	1c43      	adds	r3, r0, #1
 8007534:	d102      	bne.n	800753c <_fstat_r+0x1c>
 8007536:	682b      	ldr	r3, [r5, #0]
 8007538:	b103      	cbz	r3, 800753c <_fstat_r+0x1c>
 800753a:	6023      	str	r3, [r4, #0]
 800753c:	bd38      	pop	{r3, r4, r5, pc}
 800753e:	bf00      	nop
 8007540:	20000368 	.word	0x20000368

08007544 <_isatty_r>:
 8007544:	b538      	push	{r3, r4, r5, lr}
 8007546:	4d06      	ldr	r5, [pc, #24]	; (8007560 <_isatty_r+0x1c>)
 8007548:	2300      	movs	r3, #0
 800754a:	4604      	mov	r4, r0
 800754c:	4608      	mov	r0, r1
 800754e:	602b      	str	r3, [r5, #0]
 8007550:	f7fa fecd 	bl	80022ee <_isatty>
 8007554:	1c43      	adds	r3, r0, #1
 8007556:	d102      	bne.n	800755e <_isatty_r+0x1a>
 8007558:	682b      	ldr	r3, [r5, #0]
 800755a:	b103      	cbz	r3, 800755e <_isatty_r+0x1a>
 800755c:	6023      	str	r3, [r4, #0]
 800755e:	bd38      	pop	{r3, r4, r5, pc}
 8007560:	20000368 	.word	0x20000368

08007564 <_lseek_r>:
 8007564:	b538      	push	{r3, r4, r5, lr}
 8007566:	4d07      	ldr	r5, [pc, #28]	; (8007584 <_lseek_r+0x20>)
 8007568:	4604      	mov	r4, r0
 800756a:	4608      	mov	r0, r1
 800756c:	4611      	mov	r1, r2
 800756e:	2200      	movs	r2, #0
 8007570:	602a      	str	r2, [r5, #0]
 8007572:	461a      	mov	r2, r3
 8007574:	f7fa fec6 	bl	8002304 <_lseek>
 8007578:	1c43      	adds	r3, r0, #1
 800757a:	d102      	bne.n	8007582 <_lseek_r+0x1e>
 800757c:	682b      	ldr	r3, [r5, #0]
 800757e:	b103      	cbz	r3, 8007582 <_lseek_r+0x1e>
 8007580:	6023      	str	r3, [r4, #0]
 8007582:	bd38      	pop	{r3, r4, r5, pc}
 8007584:	20000368 	.word	0x20000368

08007588 <__malloc_lock>:
 8007588:	4801      	ldr	r0, [pc, #4]	; (8007590 <__malloc_lock+0x8>)
 800758a:	f7ff bb55 	b.w	8006c38 <__retarget_lock_acquire_recursive>
 800758e:	bf00      	nop
 8007590:	20000360 	.word	0x20000360

08007594 <__malloc_unlock>:
 8007594:	4801      	ldr	r0, [pc, #4]	; (800759c <__malloc_unlock+0x8>)
 8007596:	f7ff bb50 	b.w	8006c3a <__retarget_lock_release_recursive>
 800759a:	bf00      	nop
 800759c:	20000360 	.word	0x20000360

080075a0 <_read_r>:
 80075a0:	b538      	push	{r3, r4, r5, lr}
 80075a2:	4d07      	ldr	r5, [pc, #28]	; (80075c0 <_read_r+0x20>)
 80075a4:	4604      	mov	r4, r0
 80075a6:	4608      	mov	r0, r1
 80075a8:	4611      	mov	r1, r2
 80075aa:	2200      	movs	r2, #0
 80075ac:	602a      	str	r2, [r5, #0]
 80075ae:	461a      	mov	r2, r3
 80075b0:	f7fa fe48 	bl	8002244 <_read>
 80075b4:	1c43      	adds	r3, r0, #1
 80075b6:	d102      	bne.n	80075be <_read_r+0x1e>
 80075b8:	682b      	ldr	r3, [r5, #0]
 80075ba:	b103      	cbz	r3, 80075be <_read_r+0x1e>
 80075bc:	6023      	str	r3, [r4, #0]
 80075be:	bd38      	pop	{r3, r4, r5, pc}
 80075c0:	20000368 	.word	0x20000368

080075c4 <_init>:
 80075c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075c6:	bf00      	nop
 80075c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075ca:	bc08      	pop	{r3}
 80075cc:	469e      	mov	lr, r3
 80075ce:	4770      	bx	lr

080075d0 <_fini>:
 80075d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075d2:	bf00      	nop
 80075d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075d6:	bc08      	pop	{r3}
 80075d8:	469e      	mov	lr, r3
 80075da:	4770      	bx	lr
