
onion_house.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064c8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08006668  08006668  00016668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067c0  080067c0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080067c0  080067c0  000167c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067c8  080067c8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067c8  080067c8  000167c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067cc  080067cc  000167cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080067d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  20000074  08006844  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  08006844  00020378  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015ffd  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b6f  00000000  00000000  000360a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f8  00000000  00000000  00038c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001108  00000000  00000000  00039e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019a57  00000000  00000000  0003af10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015ce9  00000000  00000000  00054967  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ead6  00000000  00000000  0006a650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00109126  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053b4  00000000  00000000  0010917c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006650 	.word	0x08006650

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08006650 	.word	0x08006650

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <TCS34725_init>:
 */

#include "TCS34725.h"


void TCS34725_init(ColorSensor *color_sensor, I2C_HandleTypeDef *hi2c){
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	6039      	str	r1, [r7, #0]
	color_sensor->_hi2c = hi2c;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	683a      	ldr	r2, [r7, #0]
 8000586:	601a      	str	r2, [r3, #0]
	while(HAL_I2C_IsDeviceReady(hi2c, 0x29 << 1, 10, HAL_MAX_DELAY)){
 8000588:	e002      	b.n	8000590 <TCS34725_init+0x18>
		  HAL_Delay(5);
 800058a:	2005      	movs	r0, #5
 800058c:	f001 fc42 	bl	8001e14 <HAL_Delay>
	while(HAL_I2C_IsDeviceReady(hi2c, 0x29 << 1, 10, HAL_MAX_DELAY)){
 8000590:	f04f 33ff 	mov.w	r3, #4294967295
 8000594:	220a      	movs	r2, #10
 8000596:	2152      	movs	r1, #82	; 0x52
 8000598:	6838      	ldr	r0, [r7, #0]
 800059a:	f003 f8cd 	bl	8003738 <HAL_I2C_IsDeviceReady>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d1f2      	bne.n	800058a <TCS34725_init+0x12>
	}
	// SET INTEGRETION TIME
	uint8_t data = TCS34725_INTEGRATIONTIME_50MS;
 80005a4:	23eb      	movs	r3, #235	; 0xeb
 80005a6:	73fb      	strb	r3, [r7, #15]
	writeReg(color_sensor, TCS34725_ATIME, data);
 80005a8:	7bfb      	ldrb	r3, [r7, #15]
 80005aa:	461a      	mov	r2, r3
 80005ac:	2101      	movs	r1, #1
 80005ae:	6878      	ldr	r0, [r7, #4]
 80005b0:	f000 f81f 	bl	80005f2 <writeReg>

	// GAIN
	data = TCS34725_GAIN_4X;
 80005b4:	2301      	movs	r3, #1
 80005b6:	73fb      	strb	r3, [r7, #15]
	writeReg(color_sensor, TCS34725_CONTROL, data);
 80005b8:	7bfb      	ldrb	r3, [r7, #15]
 80005ba:	461a      	mov	r2, r3
 80005bc:	210f      	movs	r1, #15
 80005be:	6878      	ldr	r0, [r7, #4]
 80005c0:	f000 f817 	bl	80005f2 <writeReg>

	// ENABLE
	data = TCS34725_ENABLE_PON;
 80005c4:	2301      	movs	r3, #1
 80005c6:	73fb      	strb	r3, [r7, #15]
	writeReg(color_sensor, TCS34725_ENABLE, data);
 80005c8:	7bfb      	ldrb	r3, [r7, #15]
 80005ca:	461a      	mov	r2, r3
 80005cc:	2100      	movs	r1, #0
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f000 f80f 	bl	80005f2 <writeReg>
	data = TCS34725_ENABLE_PON | TCS34725_ENABLE_AEN;
 80005d4:	2303      	movs	r3, #3
 80005d6:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(5);
 80005d8:	2005      	movs	r0, #5
 80005da:	f001 fc1b 	bl	8001e14 <HAL_Delay>
	writeReg(color_sensor, TCS34725_ENABLE, data);
 80005de:	7bfb      	ldrb	r3, [r7, #15]
 80005e0:	461a      	mov	r2, r3
 80005e2:	2100      	movs	r1, #0
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f000 f804 	bl	80005f2 <writeReg>
}
 80005ea:	bf00      	nop
 80005ec:	3710      	adds	r7, #16
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <writeReg>:
HAL_StatusTypeDef readRegword(ColorSensor *color_sensor, uint8_t reg, uint16_t* value){
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(color_sensor->_hi2c, (TCS34725_ADDRESS << 1)|0x01, reg | 0x80, 1, (uint8_t*) value, sizeof(*value), 100);
	return status;
}

HAL_StatusTypeDef writeReg(ColorSensor *color_sensor, uint8_t reg, uint8_t value){
 80005f2:	b580      	push	{r7, lr}
 80005f4:	b088      	sub	sp, #32
 80005f6:	af04      	add	r7, sp, #16
 80005f8:	6078      	str	r0, [r7, #4]
 80005fa:	460b      	mov	r3, r1
 80005fc:	70fb      	strb	r3, [r7, #3]
 80005fe:	4613      	mov	r3, r2
 8000600:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Write(color_sensor->_hi2c, (TCS34725_ADDRESS << 1), reg | 0x80, 1, (uint8_t*)&value, sizeof(value), 100);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	6818      	ldr	r0, [r3, #0]
 8000606:	78fb      	ldrb	r3, [r7, #3]
 8000608:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800060c:	b2db      	uxtb	r3, r3
 800060e:	b29a      	uxth	r2, r3
 8000610:	2364      	movs	r3, #100	; 0x64
 8000612:	9302      	str	r3, [sp, #8]
 8000614:	2301      	movs	r3, #1
 8000616:	9301      	str	r3, [sp, #4]
 8000618:	1cbb      	adds	r3, r7, #2
 800061a:	9300      	str	r3, [sp, #0]
 800061c:	2301      	movs	r3, #1
 800061e:	2152      	movs	r1, #82	; 0x52
 8000620:	f002 ff90 	bl	8003544 <HAL_I2C_Mem_Write>
 8000624:	4603      	mov	r3, r0
 8000626:	73fb      	strb	r3, [r7, #15]
	return status;
 8000628:	7bfb      	ldrb	r3, [r7, #15]
}
 800062a:	4618      	mov	r0, r3
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
	...

08000634 <HAL_ADC_ConvCpltCallback>:
volatile uint8_t conversion_complete = 0;
ADC_HandleTypeDef* _hadc1;
volatile uint16_t* _ktir_results;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	conversion_complete = 1;
 800063c:	4b04      	ldr	r3, [pc, #16]	; (8000650 <HAL_ADC_ConvCpltCallback+0x1c>)
 800063e:	2201      	movs	r2, #1
 8000640:	701a      	strb	r2, [r3, #0]
}
 8000642:	bf00      	nop
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	20000090 	.word	0x20000090

08000654 <KTIR_Init>:

void KTIR_Init(ADC_HandleTypeDef* hadc1, volatile uint16_t* ktir_results){
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
 800065c:	6039      	str	r1, [r7, #0]
	_hadc1 = hadc1;
 800065e:	4a06      	ldr	r2, [pc, #24]	; (8000678 <KTIR_Init+0x24>)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6013      	str	r3, [r2, #0]
	_ktir_results = ktir_results;
 8000664:	4a05      	ldr	r2, [pc, #20]	; (800067c <KTIR_Init+0x28>)
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	6013      	str	r3, [r2, #0]
}
 800066a:	bf00      	nop
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	200000ac 	.word	0x200000ac
 800067c:	200000a8 	.word	0x200000a8

08000680 <KTIR_read>:

void KTIR_read(){
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(_hadc1, (uint32_t*) _ktir_results, NUMBER_OF_SENSORS);
 8000684:	4b04      	ldr	r3, [pc, #16]	; (8000698 <KTIR_read+0x18>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a04      	ldr	r2, [pc, #16]	; (800069c <KTIR_read+0x1c>)
 800068a:	6811      	ldr	r1, [r2, #0]
 800068c:	2204      	movs	r2, #4
 800068e:	4618      	mov	r0, r3
 8000690:	f001 fc28 	bl	8001ee4 <HAL_ADC_Start_DMA>
}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	200000ac 	.word	0x200000ac
 800069c:	200000a8 	.word	0x200000a8

080006a0 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2b0a      	cmp	r3, #10
 80006ac:	d102      	bne.n	80006b4 <__io_putchar+0x14>
    __io_putchar('\r');
 80006ae:	200d      	movs	r0, #13
 80006b0:	f7ff fff6 	bl	80006a0 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80006b4:	1d39      	adds	r1, r7, #4
 80006b6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ba:	2201      	movs	r2, #1
 80006bc:	4803      	ldr	r0, [pc, #12]	; (80006cc <__io_putchar+0x2c>)
 80006be:	f004 fd76 	bl	80051ae <HAL_UART_Transmit>

  return 1;
 80006c2:	2301      	movs	r3, #1
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	2000030c 	.word	0x2000030c

080006d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d4:	f001 fb2c 	bl	8001d30 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d8:	f000 f93e 	bl	8000958 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006dc:	f000 fc28 	bl	8000f30 <MX_GPIO_Init>
  MX_DMA_Init();
 80006e0:	f000 fc06 	bl	8000ef0 <MX_DMA_Init>
  MX_ADC1_Init();
 80006e4:	f000 f9a0 	bl	8000a28 <MX_ADC1_Init>
  MX_I2C1_Init();
 80006e8:	f000 fa1a 	bl	8000b20 <MX_I2C1_Init>
  MX_I2C2_Init();
 80006ec:	f000 fa46 	bl	8000b7c <MX_I2C2_Init>
  MX_TIM1_Init();
 80006f0:	f000 fa72 	bl	8000bd8 <MX_TIM1_Init>
  MX_TIM3_Init();
 80006f4:	f000 fb18 	bl	8000d28 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80006f8:	f000 fbd0 	bl	8000e9c <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80006fc:	f000 fb7a 	bl	8000df4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  servo_init(&right_servo, &SERVO_RIGHT_TIMER, SERVO_RIGHT_CHANNEL);
 8000700:	2208      	movs	r2, #8
 8000702:	4980      	ldr	r1, [pc, #512]	; (8000904 <main+0x234>)
 8000704:	4880      	ldr	r0, [pc, #512]	; (8000908 <main+0x238>)
 8000706:	f000 ff2d 	bl	8001564 <servo_init>
  servo_init(&left_servo, &SERVO_LEFT_TIMER, SERVO_LEFT_CHANNEL);
 800070a:	220c      	movs	r2, #12
 800070c:	497d      	ldr	r1, [pc, #500]	; (8000904 <main+0x234>)
 800070e:	487f      	ldr	r0, [pc, #508]	; (800090c <main+0x23c>)
 8000710:	f000 ff28 	bl	8001564 <servo_init>

  motor_init(&right_motor, &MOTOR_RIGHT_TIMER, MOTOR_RIGHT_CHANNEL_A, MOTOR_RIGHT_CHANNEL_B);
 8000714:	230c      	movs	r3, #12
 8000716:	2208      	movs	r2, #8
 8000718:	497d      	ldr	r1, [pc, #500]	; (8000910 <main+0x240>)
 800071a:	487e      	ldr	r0, [pc, #504]	; (8000914 <main+0x244>)
 800071c:	f000 fde9 	bl	80012f2 <motor_init>
  motor_init(&left_motor, &MOTOR_LEFT_TIMER, MOTOR_LEFT_CHANNEL_A, MOTOR_LEFT_CHANNEL_B);
 8000720:	2300      	movs	r3, #0
 8000722:	2204      	movs	r2, #4
 8000724:	497a      	ldr	r1, [pc, #488]	; (8000910 <main+0x240>)
 8000726:	487c      	ldr	r0, [pc, #496]	; (8000918 <main+0x248>)
 8000728:	f000 fde3 	bl	80012f2 <motor_init>

  //ENCODER_init(&left_encoder, &htim3);

  //ENCODER_init(&right_encoder, &htim4);

  TCS34725_init(&left_color, &COLOR_LEFT_I2C);
 800072c:	497b      	ldr	r1, [pc, #492]	; (800091c <main+0x24c>)
 800072e:	487c      	ldr	r0, [pc, #496]	; (8000920 <main+0x250>)
 8000730:	f7ff ff22 	bl	8000578 <TCS34725_init>
  TCS34725_init(&right_color, &COLOR_RIGHT_I2C);
 8000734:	497b      	ldr	r1, [pc, #492]	; (8000924 <main+0x254>)
 8000736:	487c      	ldr	r0, [pc, #496]	; (8000928 <main+0x258>)
 8000738:	f7ff ff1e 	bl	8000578 <TCS34725_init>

  KTIR_Init(&KTIR_ADC, ktir_results);
 800073c:	497b      	ldr	r1, [pc, #492]	; (800092c <main+0x25c>)
 800073e:	487c      	ldr	r0, [pc, #496]	; (8000930 <main+0x260>)
 8000740:	f7ff ff88 	bl	8000654 <KTIR_Init>
  //int8_t count = 1;

  //ENCODER_get_value(&left_encoder);
  //ENCODER_get_value(&right_encoder);

  servo_set_angle(&right_servo, 60);
 8000744:	213c      	movs	r1, #60	; 0x3c
 8000746:	4870      	ldr	r0, [pc, #448]	; (8000908 <main+0x238>)
 8000748:	f000 ff4b 	bl	80015e2 <servo_set_angle>

  servo_set_angle(&left_servo, 100);
 800074c:	2164      	movs	r1, #100	; 0x64
 800074e:	486f      	ldr	r0, [pc, #444]	; (800090c <main+0x23c>)
 8000750:	f000 ff47 	bl	80015e2 <servo_set_angle>
	   * 	- i potem ruch do następnego skrzyżowania i znowu 90 stopni
	   * - sprawdzać kolor i w zależności od tego odpowiednio poruszać bramkami (open_close_gates)
	   * - liczyć czas - jeżeli już mało to długa do bazy
	   * -
	   */
	if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 0){
 8000754:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000758:	4876      	ldr	r0, [pc, #472]	; (8000934 <main+0x264>)
 800075a:	f002 fd7d 	bl	8003258 <HAL_GPIO_ReadPin>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d115      	bne.n	8000790 <main+0xc0>
		STOP = STOP == 0 ? 1:0;
 8000764:	4b74      	ldr	r3, [pc, #464]	; (8000938 <main+0x268>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	bf0c      	ite	eq
 800076c:	2301      	moveq	r3, #1
 800076e:	2300      	movne	r3, #0
 8000770:	b2db      	uxtb	r3, r3
 8000772:	461a      	mov	r2, r3
 8000774:	4b70      	ldr	r3, [pc, #448]	; (8000938 <main+0x268>)
 8000776:	701a      	strb	r2, [r3, #0]
		while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 0){
 8000778:	e002      	b.n	8000780 <main+0xb0>
			HAL_Delay(10);
 800077a:	200a      	movs	r0, #10
 800077c:	f001 fb4a 	bl	8001e14 <HAL_Delay>
		while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 0){
 8000780:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000784:	486b      	ldr	r0, [pc, #428]	; (8000934 <main+0x264>)
 8000786:	f002 fd67 	bl	8003258 <HAL_GPIO_ReadPin>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d0f4      	beq.n	800077a <main+0xaa>
		}
	}
	KTIR_read();
 8000790:	f7ff ff76 	bl	8000680 <KTIR_read>
	//printf("-----\nPrawy\n");
	//show_color_for_calibration(&right_color);
	//printf("Lewy\n");
	//show_color_for_calibration(&left_color);

	show_for_calibration();
 8000794:	f000 fc50 	bl	8001038 <show_for_calibration>


	if(!STOP){
 8000798:	4b67      	ldr	r3, [pc, #412]	; (8000938 <main+0x268>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	f040 80aa 	bne.w	80008f6 <main+0x226>

		//servo_set_angle(&right_servo, 180);

		//servo_set_angle(&left_servo, 0);
		if (turns < 6){
 80007a2:	4b66      	ldr	r3, [pc, #408]	; (800093c <main+0x26c>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2b05      	cmp	r3, #5
 80007a8:	f200 809f 	bhi.w	80008ea <main+0x21a>
			if(!rotating){
 80007ac:	4b64      	ldr	r3, [pc, #400]	; (8000940 <main+0x270>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d101      	bne.n	80007b8 <main+0xe8>
				follow_the_line();
 80007b4:	f000 fcca 	bl	800114c <follow_the_line>
			}
			// Jeśli wykryje skryżowanie to sprawdź czas
			if(is_crossing() && !now_crossing){
 80007b8:	f000 fd5c 	bl	8001274 <is_crossing>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d00d      	beq.n	80007de <main+0x10e>
 80007c2:	4b60      	ldr	r3, [pc, #384]	; (8000944 <main+0x274>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d109      	bne.n	80007de <main+0x10e>
				/*rotating = 1;
				tick_start_rotating = HAL_GetTick();*/
				crossings += 1;
 80007ca:	4b5f      	ldr	r3, [pc, #380]	; (8000948 <main+0x278>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	3301      	adds	r3, #1
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	4b5d      	ldr	r3, [pc, #372]	; (8000948 <main+0x278>)
 80007d4:	701a      	strb	r2, [r3, #0]
				now_crossing = 1;
 80007d6:	4b5b      	ldr	r3, [pc, #364]	; (8000944 <main+0x274>)
 80007d8:	2201      	movs	r2, #1
 80007da:	701a      	strb	r2, [r3, #0]
 80007dc:	e007      	b.n	80007ee <main+0x11e>
			} else if (!is_crossing()){
 80007de:	f000 fd49 	bl	8001274 <is_crossing>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d102      	bne.n	80007ee <main+0x11e>
				now_crossing = 0;
 80007e8:	4b56      	ldr	r3, [pc, #344]	; (8000944 <main+0x274>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	701a      	strb	r2, [r3, #0]
			}

			if(crossings == side_length){
 80007ee:	4b56      	ldr	r3, [pc, #344]	; (8000948 <main+0x278>)
 80007f0:	781a      	ldrb	r2, [r3, #0]
 80007f2:	4b56      	ldr	r3, [pc, #344]	; (800094c <main+0x27c>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	429a      	cmp	r2, r3
 80007f8:	d115      	bne.n	8000826 <main+0x156>
				rotating = 1;
 80007fa:	4b51      	ldr	r3, [pc, #324]	; (8000940 <main+0x270>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	701a      	strb	r2, [r3, #0]
				tick_start_rotating = HAL_GetTick();
 8000800:	f001 fafc 	bl	8001dfc <HAL_GetTick>
 8000804:	4603      	mov	r3, r0
 8000806:	4a52      	ldr	r2, [pc, #328]	; (8000950 <main+0x280>)
 8000808:	6013      	str	r3, [r2, #0]
				if(side_length >= 3) side_length = 1;
 800080a:	4b50      	ldr	r3, [pc, #320]	; (800094c <main+0x27c>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	2b02      	cmp	r3, #2
 8000810:	d903      	bls.n	800081a <main+0x14a>
 8000812:	4b4e      	ldr	r3, [pc, #312]	; (800094c <main+0x27c>)
 8000814:	2201      	movs	r2, #1
 8000816:	701a      	strb	r2, [r3, #0]
 8000818:	e002      	b.n	8000820 <main+0x150>
				else side_length = 3;
 800081a:	4b4c      	ldr	r3, [pc, #304]	; (800094c <main+0x27c>)
 800081c:	2203      	movs	r2, #3
 800081e:	701a      	strb	r2, [r3, #0]
				crossings = 0;
 8000820:	4b49      	ldr	r3, [pc, #292]	; (8000948 <main+0x278>)
 8000822:	2200      	movs	r2, #0
 8000824:	701a      	strb	r2, [r3, #0]
			}

			//Po upływie pewnego czasu zacznij skręcać
			if(rotating && HAL_GetTick() - tick_start_rotating > 200){
 8000826:	4b46      	ldr	r3, [pc, #280]	; (8000940 <main+0x270>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d01f      	beq.n	800086e <main+0x19e>
 800082e:	f001 fae5 	bl	8001dfc <HAL_GetTick>
 8000832:	4602      	mov	r2, r0
 8000834:	4b46      	ldr	r3, [pc, #280]	; (8000950 <main+0x280>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	1ad3      	subs	r3, r2, r3
 800083a:	2bc8      	cmp	r3, #200	; 0xc8
 800083c:	d917      	bls.n	800086e <main+0x19e>
				motor_run(&right_motor, MOTOR_SPEED-20);
 800083e:	4b45      	ldr	r3, [pc, #276]	; (8000954 <main+0x284>)
 8000840:	f993 3000 	ldrsb.w	r3, [r3]
 8000844:	b2db      	uxtb	r3, r3
 8000846:	3b14      	subs	r3, #20
 8000848:	b2db      	uxtb	r3, r3
 800084a:	b25b      	sxtb	r3, r3
 800084c:	4619      	mov	r1, r3
 800084e:	4831      	ldr	r0, [pc, #196]	; (8000914 <main+0x244>)
 8000850:	f000 fd6e 	bl	8001330 <motor_run>
				motor_run(&left_motor, -MOTOR_SPEED-15);
 8000854:	4b3f      	ldr	r3, [pc, #252]	; (8000954 <main+0x284>)
 8000856:	f993 3000 	ldrsb.w	r3, [r3]
 800085a:	b2da      	uxtb	r2, r3
 800085c:	f06f 030e 	mvn.w	r3, #14
 8000860:	1a9b      	subs	r3, r3, r2
 8000862:	b2db      	uxtb	r3, r3
 8000864:	b25b      	sxtb	r3, r3
 8000866:	4619      	mov	r1, r3
 8000868:	482b      	ldr	r0, [pc, #172]	; (8000918 <main+0x248>)
 800086a:	f000 fd61 	bl	8001330 <motor_run>
			}
			//Jeśli wrócisz na linie to zakończ skręcanie
			if(!is_black(ktir_results[0], KTIR_CRITICAL_VALUES[0]) && is_black(ktir_results[1], KTIR_CRITICAL_VALUES[1])
 800086e:	4b2f      	ldr	r3, [pc, #188]	; (800092c <main+0x25c>)
 8000870:	881b      	ldrh	r3, [r3, #0]
 8000872:	b29b      	uxth	r3, r3
 8000874:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000878:	4611      	mov	r1, r2
 800087a:	4618      	mov	r0, r3
 800087c:	f000 fbc6 	bl	800100c <is_black>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d133      	bne.n	80008ee <main+0x21e>
 8000886:	4b29      	ldr	r3, [pc, #164]	; (800092c <main+0x25c>)
 8000888:	885b      	ldrh	r3, [r3, #2]
 800088a:	b29b      	uxth	r3, r3
 800088c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000890:	4611      	mov	r1, r2
 8000892:	4618      	mov	r0, r3
 8000894:	f000 fbba 	bl	800100c <is_black>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d027      	beq.n	80008ee <main+0x21e>
					&& is_black(ktir_results[2], KTIR_CRITICAL_VALUES[2]) && !is_black(ktir_results[3], KTIR_CRITICAL_VALUES[3]) && rotating){
 800089e:	4b23      	ldr	r3, [pc, #140]	; (800092c <main+0x25c>)
 80008a0:	889b      	ldrh	r3, [r3, #4]
 80008a2:	b29b      	uxth	r3, r3
 80008a4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80008a8:	4611      	mov	r1, r2
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 fbae 	bl	800100c <is_black>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d01b      	beq.n	80008ee <main+0x21e>
 80008b6:	4b1d      	ldr	r3, [pc, #116]	; (800092c <main+0x25c>)
 80008b8:	88db      	ldrh	r3, [r3, #6]
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80008c0:	4611      	mov	r1, r2
 80008c2:	4618      	mov	r0, r3
 80008c4:	f000 fba2 	bl	800100c <is_black>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d10f      	bne.n	80008ee <main+0x21e>
 80008ce:	4b1c      	ldr	r3, [pc, #112]	; (8000940 <main+0x270>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d00b      	beq.n	80008ee <main+0x21e>
				//turn(&left_motor, &right_motor, 5);
				rotating = 0;
 80008d6:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <main+0x270>)
 80008d8:	2200      	movs	r2, #0
 80008da:	701a      	strb	r2, [r3, #0]
				turns += 1;
 80008dc:	4b17      	ldr	r3, [pc, #92]	; (800093c <main+0x26c>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	3301      	adds	r3, #1
 80008e2:	b2da      	uxtb	r2, r3
 80008e4:	4b15      	ldr	r3, [pc, #84]	; (800093c <main+0x26c>)
 80008e6:	701a      	strb	r2, [r3, #0]
 80008e8:	e001      	b.n	80008ee <main+0x21e>
				//motor_brake(&right_motor);
				//motor_brake(&left_motor);
			}
		}
		else {
			follow_the_line();
 80008ea:	f000 fc2f 	bl	800114c <follow_the_line>
			turn(&right_motor, &left_motor, 5);
		}


		*/
		HAL_Delay(5);
 80008ee:	2005      	movs	r0, #5
 80008f0:	f001 fa90 	bl	8001e14 <HAL_Delay>
 80008f4:	e72e      	b.n	8000754 <main+0x84>
	}
	else {
		motor_brake(&right_motor);
 80008f6:	4807      	ldr	r0, [pc, #28]	; (8000914 <main+0x244>)
 80008f8:	f000 fde4 	bl	80014c4 <motor_brake>
		motor_brake(&left_motor);
 80008fc:	4806      	ldr	r0, [pc, #24]	; (8000918 <main+0x248>)
 80008fe:	f000 fde1 	bl	80014c4 <motor_brake>
	if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 0){
 8000902:	e727      	b.n	8000754 <main+0x84>
 8000904:	200001b8 	.word	0x200001b8
 8000908:	20000358 	.word	0x20000358
 800090c:	200001b0 	.word	0x200001b0
 8000910:	200002c4 	.word	0x200002c4
 8000914:	200000b0 	.word	0x200000b0
 8000918:	20000250 	.word	0x20000250
 800091c:	20000104 	.word	0x20000104
 8000920:	20000360 	.word	0x20000360
 8000924:	20000158 	.word	0x20000158
 8000928:	200001ac 	.word	0x200001ac
 800092c:	20000248 	.word	0x20000248
 8000930:	20000200 	.word	0x20000200
 8000934:	40020800 	.word	0x40020800
 8000938:	20000001 	.word	0x20000001
 800093c:	20000093 	.word	0x20000093
 8000940:	20000094 	.word	0x20000094
 8000944:	20000092 	.word	0x20000092
 8000948:	20000091 	.word	0x20000091
 800094c:	20000002 	.word	0x20000002
 8000950:	20000098 	.word	0x20000098
 8000954:	20000000 	.word	0x20000000

08000958 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b094      	sub	sp, #80	; 0x50
 800095c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095e:	f107 0320 	add.w	r3, r7, #32
 8000962:	2230      	movs	r2, #48	; 0x30
 8000964:	2100      	movs	r1, #0
 8000966:	4618      	mov	r0, r3
 8000968:	f004 ff14 	bl	8005794 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800096c:	f107 030c 	add.w	r3, r7, #12
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800097c:	2300      	movs	r3, #0
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	4b27      	ldr	r3, [pc, #156]	; (8000a20 <SystemClock_Config+0xc8>)
 8000982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000984:	4a26      	ldr	r2, [pc, #152]	; (8000a20 <SystemClock_Config+0xc8>)
 8000986:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800098a:	6413      	str	r3, [r2, #64]	; 0x40
 800098c:	4b24      	ldr	r3, [pc, #144]	; (8000a20 <SystemClock_Config+0xc8>)
 800098e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000994:	60bb      	str	r3, [r7, #8]
 8000996:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000998:	2300      	movs	r3, #0
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	4b21      	ldr	r3, [pc, #132]	; (8000a24 <SystemClock_Config+0xcc>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a20      	ldr	r2, [pc, #128]	; (8000a24 <SystemClock_Config+0xcc>)
 80009a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009a6:	6013      	str	r3, [r2, #0]
 80009a8:	4b1e      	ldr	r3, [pc, #120]	; (8000a24 <SystemClock_Config+0xcc>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009b4:	2302      	movs	r3, #2
 80009b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009b8:	2301      	movs	r3, #1
 80009ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009bc:	2310      	movs	r3, #16
 80009be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c0:	2302      	movs	r3, #2
 80009c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009c4:	2300      	movs	r3, #0
 80009c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009c8:	2308      	movs	r3, #8
 80009ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80009cc:	2364      	movs	r3, #100	; 0x64
 80009ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009d0:	2302      	movs	r3, #2
 80009d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009d4:	2304      	movs	r3, #4
 80009d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d8:	f107 0320 	add.w	r3, r7, #32
 80009dc:	4618      	mov	r0, r3
 80009de:	f003 f9f7 	bl	8003dd0 <HAL_RCC_OscConfig>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009e8:	f000 fc7e 	bl	80012e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ec:	230f      	movs	r3, #15
 80009ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009f0:	2302      	movs	r3, #2
 80009f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a02:	f107 030c 	add.w	r3, r7, #12
 8000a06:	2103      	movs	r1, #3
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f003 fc59 	bl	80042c0 <HAL_RCC_ClockConfig>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000a14:	f000 fc68 	bl	80012e8 <Error_Handler>
  }
}
 8000a18:	bf00      	nop
 8000a1a:	3750      	adds	r7, #80	; 0x50
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40007000 	.word	0x40007000

08000a28 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a2e:	463b      	mov	r3, r7
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a3a:	4b36      	ldr	r3, [pc, #216]	; (8000b14 <MX_ADC1_Init+0xec>)
 8000a3c:	4a36      	ldr	r2, [pc, #216]	; (8000b18 <MX_ADC1_Init+0xf0>)
 8000a3e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a40:	4b34      	ldr	r3, [pc, #208]	; (8000b14 <MX_ADC1_Init+0xec>)
 8000a42:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a46:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a48:	4b32      	ldr	r3, [pc, #200]	; (8000b14 <MX_ADC1_Init+0xec>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000a4e:	4b31      	ldr	r3, [pc, #196]	; (8000b14 <MX_ADC1_Init+0xec>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a54:	4b2f      	ldr	r3, [pc, #188]	; (8000b14 <MX_ADC1_Init+0xec>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a5a:	4b2e      	ldr	r3, [pc, #184]	; (8000b14 <MX_ADC1_Init+0xec>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a62:	4b2c      	ldr	r3, [pc, #176]	; (8000b14 <MX_ADC1_Init+0xec>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a68:	4b2a      	ldr	r3, [pc, #168]	; (8000b14 <MX_ADC1_Init+0xec>)
 8000a6a:	4a2c      	ldr	r2, [pc, #176]	; (8000b1c <MX_ADC1_Init+0xf4>)
 8000a6c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a6e:	4b29      	ldr	r3, [pc, #164]	; (8000b14 <MX_ADC1_Init+0xec>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000a74:	4b27      	ldr	r3, [pc, #156]	; (8000b14 <MX_ADC1_Init+0xec>)
 8000a76:	2204      	movs	r2, #4
 8000a78:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a7a:	4b26      	ldr	r3, [pc, #152]	; (8000b14 <MX_ADC1_Init+0xec>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a82:	4b24      	ldr	r3, [pc, #144]	; (8000b14 <MX_ADC1_Init+0xec>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a88:	4822      	ldr	r0, [pc, #136]	; (8000b14 <MX_ADC1_Init+0xec>)
 8000a8a:	f001 f9e7 	bl	8001e5c <HAL_ADC_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a94:	f000 fc28 	bl	80012e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aa4:	463b      	mov	r3, r7
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	481a      	ldr	r0, [pc, #104]	; (8000b14 <MX_ADC1_Init+0xec>)
 8000aaa:	f001 fb1f 	bl	80020ec <HAL_ADC_ConfigChannel>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ab4:	f000 fc18 	bl	80012e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000abc:	2302      	movs	r3, #2
 8000abe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ac0:	463b      	mov	r3, r7
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4813      	ldr	r0, [pc, #76]	; (8000b14 <MX_ADC1_Init+0xec>)
 8000ac6:	f001 fb11 	bl	80020ec <HAL_ADC_ConfigChannel>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000ad0:	f000 fc0a 	bl	80012e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000ad4:	2306      	movs	r3, #6
 8000ad6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000ad8:	2303      	movs	r3, #3
 8000ada:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000adc:	463b      	mov	r3, r7
 8000ade:	4619      	mov	r1, r3
 8000ae0:	480c      	ldr	r0, [pc, #48]	; (8000b14 <MX_ADC1_Init+0xec>)
 8000ae2:	f001 fb03 	bl	80020ec <HAL_ADC_ConfigChannel>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000aec:	f000 fbfc 	bl	80012e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000af0:	2307      	movs	r3, #7
 8000af2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000af4:	2304      	movs	r3, #4
 8000af6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000af8:	463b      	mov	r3, r7
 8000afa:	4619      	mov	r1, r3
 8000afc:	4805      	ldr	r0, [pc, #20]	; (8000b14 <MX_ADC1_Init+0xec>)
 8000afe:	f001 faf5 	bl	80020ec <HAL_ADC_ConfigChannel>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000b08:	f000 fbee 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b0c:	bf00      	nop
 8000b0e:	3710      	adds	r7, #16
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000200 	.word	0x20000200
 8000b18:	40012000 	.word	0x40012000
 8000b1c:	0f000001 	.word	0x0f000001

08000b20 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b24:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <MX_I2C1_Init+0x50>)
 8000b26:	4a13      	ldr	r2, [pc, #76]	; (8000b74 <MX_I2C1_Init+0x54>)
 8000b28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b2a:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <MX_I2C1_Init+0x50>)
 8000b2c:	4a12      	ldr	r2, [pc, #72]	; (8000b78 <MX_I2C1_Init+0x58>)
 8000b2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b30:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <MX_I2C1_Init+0x50>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <MX_I2C1_Init+0x50>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <MX_I2C1_Init+0x50>)
 8000b3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b42:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b44:	4b0a      	ldr	r3, [pc, #40]	; (8000b70 <MX_I2C1_Init+0x50>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <MX_I2C1_Init+0x50>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b50:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <MX_I2C1_Init+0x50>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <MX_I2C1_Init+0x50>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b5c:	4804      	ldr	r0, [pc, #16]	; (8000b70 <MX_I2C1_Init+0x50>)
 8000b5e:	f002 fbad 	bl	80032bc <HAL_I2C_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b68:	f000 fbbe 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000104 	.word	0x20000104
 8000b74:	40005400 	.word	0x40005400
 8000b78:	000186a0 	.word	0x000186a0

08000b7c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b80:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <MX_I2C2_Init+0x50>)
 8000b82:	4a13      	ldr	r2, [pc, #76]	; (8000bd0 <MX_I2C2_Init+0x54>)
 8000b84:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000b86:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <MX_I2C2_Init+0x50>)
 8000b88:	4a12      	ldr	r2, [pc, #72]	; (8000bd4 <MX_I2C2_Init+0x58>)
 8000b8a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <MX_I2C2_Init+0x50>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000b92:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <MX_I2C2_Init+0x50>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b98:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <MX_I2C2_Init+0x50>)
 8000b9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b9e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ba0:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <MX_I2C2_Init+0x50>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000ba6:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <MX_I2C2_Init+0x50>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bac:	4b07      	ldr	r3, [pc, #28]	; (8000bcc <MX_I2C2_Init+0x50>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <MX_I2C2_Init+0x50>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000bb8:	4804      	ldr	r0, [pc, #16]	; (8000bcc <MX_I2C2_Init+0x50>)
 8000bba:	f002 fb7f 	bl	80032bc <HAL_I2C_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000bc4:	f000 fb90 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000158 	.word	0x20000158
 8000bd0:	40005800 	.word	0x40005800
 8000bd4:	000186a0 	.word	0x000186a0

08000bd8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b092      	sub	sp, #72	; 0x48
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bde:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
 8000bf8:	615a      	str	r2, [r3, #20]
 8000bfa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	2220      	movs	r2, #32
 8000c00:	2100      	movs	r1, #0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f004 fdc6 	bl	8005794 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c08:	4b45      	ldr	r3, [pc, #276]	; (8000d20 <MX_TIM1_Init+0x148>)
 8000c0a:	4a46      	ldr	r2, [pc, #280]	; (8000d24 <MX_TIM1_Init+0x14c>)
 8000c0c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10-1;
 8000c0e:	4b44      	ldr	r3, [pc, #272]	; (8000d20 <MX_TIM1_Init+0x148>)
 8000c10:	2209      	movs	r2, #9
 8000c12:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c14:	4b42      	ldr	r3, [pc, #264]	; (8000d20 <MX_TIM1_Init+0x148>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000c1a:	4b41      	ldr	r3, [pc, #260]	; (8000d20 <MX_TIM1_Init+0x148>)
 8000c1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c20:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c22:	4b3f      	ldr	r3, [pc, #252]	; (8000d20 <MX_TIM1_Init+0x148>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c28:	4b3d      	ldr	r3, [pc, #244]	; (8000d20 <MX_TIM1_Init+0x148>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c2e:	4b3c      	ldr	r3, [pc, #240]	; (8000d20 <MX_TIM1_Init+0x148>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c34:	483a      	ldr	r0, [pc, #232]	; (8000d20 <MX_TIM1_Init+0x148>)
 8000c36:	f003 fd13 	bl	8004660 <HAL_TIM_PWM_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000c40:	f000 fb52 	bl	80012e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c44:	2300      	movs	r3, #0
 8000c46:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c4c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c50:	4619      	mov	r1, r3
 8000c52:	4833      	ldr	r0, [pc, #204]	; (8000d20 <MX_TIM1_Init+0x148>)
 8000c54:	f004 f99e 	bl	8004f94 <HAL_TIMEx_MasterConfigSynchronization>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000c5e:	f000 fb43 	bl	80012e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c62:	2360      	movs	r3, #96	; 0x60
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c72:	2300      	movs	r3, #0
 8000c74:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c76:	2300      	movs	r3, #0
 8000c78:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c82:	2200      	movs	r2, #0
 8000c84:	4619      	mov	r1, r3
 8000c86:	4826      	ldr	r0, [pc, #152]	; (8000d20 <MX_TIM1_Init+0x148>)
 8000c88:	f003 fe90 	bl	80049ac <HAL_TIM_PWM_ConfigChannel>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000c92:	f000 fb29 	bl	80012e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9a:	2204      	movs	r2, #4
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4820      	ldr	r0, [pc, #128]	; (8000d20 <MX_TIM1_Init+0x148>)
 8000ca0:	f003 fe84 	bl	80049ac <HAL_TIM_PWM_ConfigChannel>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000caa:	f000 fb1d 	bl	80012e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb2:	2208      	movs	r2, #8
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	481a      	ldr	r0, [pc, #104]	; (8000d20 <MX_TIM1_Init+0x148>)
 8000cb8:	f003 fe78 	bl	80049ac <HAL_TIM_PWM_ConfigChannel>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8000cc2:	f000 fb11 	bl	80012e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000cc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cca:	220c      	movs	r2, #12
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4814      	ldr	r0, [pc, #80]	; (8000d20 <MX_TIM1_Init+0x148>)
 8000cd0:	f003 fe6c 	bl	80049ac <HAL_TIM_PWM_ConfigChannel>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8000cda:	f000 fb05 	bl	80012e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cf2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cf6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4807      	ldr	r0, [pc, #28]	; (8000d20 <MX_TIM1_Init+0x148>)
 8000d02:	f004 f9b5 	bl	8005070 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8000d0c:	f000 faec 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d10:	4803      	ldr	r0, [pc, #12]	; (8000d20 <MX_TIM1_Init+0x148>)
 8000d12:	f000 fe4f 	bl	80019b4 <HAL_TIM_MspPostInit>

}
 8000d16:	bf00      	nop
 8000d18:	3748      	adds	r7, #72	; 0x48
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	200002c4 	.word	0x200002c4
 8000d24:	40010000 	.word	0x40010000

08000d28 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08a      	sub	sp, #40	; 0x28
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d2e:	f107 0320 	add.w	r3, r7, #32
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	60da      	str	r2, [r3, #12]
 8000d44:	611a      	str	r2, [r3, #16]
 8000d46:	615a      	str	r2, [r3, #20]
 8000d48:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d4a:	4b28      	ldr	r3, [pc, #160]	; (8000dec <MX_TIM3_Init+0xc4>)
 8000d4c:	4a28      	ldr	r2, [pc, #160]	; (8000df0 <MX_TIM3_Init+0xc8>)
 8000d4e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8000d50:	4b26      	ldr	r3, [pc, #152]	; (8000dec <MX_TIM3_Init+0xc4>)
 8000d52:	2263      	movs	r2, #99	; 0x63
 8000d54:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d56:	4b25      	ldr	r3, [pc, #148]	; (8000dec <MX_TIM3_Init+0xc4>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8000d5c:	4b23      	ldr	r3, [pc, #140]	; (8000dec <MX_TIM3_Init+0xc4>)
 8000d5e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000d62:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d64:	4b21      	ldr	r3, [pc, #132]	; (8000dec <MX_TIM3_Init+0xc4>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d6a:	4b20      	ldr	r3, [pc, #128]	; (8000dec <MX_TIM3_Init+0xc4>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d70:	481e      	ldr	r0, [pc, #120]	; (8000dec <MX_TIM3_Init+0xc4>)
 8000d72:	f003 fc75 	bl	8004660 <HAL_TIM_PWM_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000d7c:	f000 fab4 	bl	80012e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d80:	2300      	movs	r3, #0
 8000d82:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d84:	2300      	movs	r3, #0
 8000d86:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d88:	f107 0320 	add.w	r3, r7, #32
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4817      	ldr	r0, [pc, #92]	; (8000dec <MX_TIM3_Init+0xc4>)
 8000d90:	f004 f900 	bl	8004f94 <HAL_TIMEx_MasterConfigSynchronization>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000d9a:	f000 faa5 	bl	80012e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d9e:	2360      	movs	r3, #96	; 0x60
 8000da0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8000da2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000da8:	2300      	movs	r3, #0
 8000daa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	2208      	movs	r2, #8
 8000db4:	4619      	mov	r1, r3
 8000db6:	480d      	ldr	r0, [pc, #52]	; (8000dec <MX_TIM3_Init+0xc4>)
 8000db8:	f003 fdf8 	bl	80049ac <HAL_TIM_PWM_ConfigChannel>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000dc2:	f000 fa91 	bl	80012e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	220c      	movs	r2, #12
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4807      	ldr	r0, [pc, #28]	; (8000dec <MX_TIM3_Init+0xc4>)
 8000dce:	f003 fded 	bl	80049ac <HAL_TIM_PWM_ConfigChannel>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000dd8:	f000 fa86 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ddc:	4803      	ldr	r0, [pc, #12]	; (8000dec <MX_TIM3_Init+0xc4>)
 8000dde:	f000 fde9 	bl	80019b4 <HAL_TIM_MspPostInit>

}
 8000de2:	bf00      	nop
 8000de4:	3728      	adds	r7, #40	; 0x28
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	200001b8 	.word	0x200001b8
 8000df0:	40000400 	.word	0x40000400

08000df4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08c      	sub	sp, #48	; 0x30
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000dfa:	f107 030c 	add.w	r3, r7, #12
 8000dfe:	2224      	movs	r2, #36	; 0x24
 8000e00:	2100      	movs	r1, #0
 8000e02:	4618      	mov	r0, r3
 8000e04:	f004 fcc6 	bl	8005794 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e08:	1d3b      	adds	r3, r7, #4
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e10:	4b20      	ldr	r3, [pc, #128]	; (8000e94 <MX_TIM4_Init+0xa0>)
 8000e12:	4a21      	ldr	r2, [pc, #132]	; (8000e98 <MX_TIM4_Init+0xa4>)
 8000e14:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000e16:	4b1f      	ldr	r3, [pc, #124]	; (8000e94 <MX_TIM4_Init+0xa0>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e1c:	4b1d      	ldr	r3, [pc, #116]	; (8000e94 <MX_TIM4_Init+0xa0>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000e22:	4b1c      	ldr	r3, [pc, #112]	; (8000e94 <MX_TIM4_Init+0xa0>)
 8000e24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e28:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e2a:	4b1a      	ldr	r3, [pc, #104]	; (8000e94 <MX_TIM4_Init+0xa0>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e30:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <MX_TIM4_Init+0xa0>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000e36:	2303      	movs	r3, #3
 8000e38:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000e46:	230f      	movs	r3, #15
 8000e48:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e52:	2300      	movs	r3, #0
 8000e54:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8000e56:	230f      	movs	r3, #15
 8000e58:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000e5a:	f107 030c 	add.w	r3, r7, #12
 8000e5e:	4619      	mov	r1, r3
 8000e60:	480c      	ldr	r0, [pc, #48]	; (8000e94 <MX_TIM4_Init+0xa0>)
 8000e62:	f003 fcfd 	bl	8004860 <HAL_TIM_Encoder_Init>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000e6c:	f000 fa3c 	bl	80012e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e70:	2300      	movs	r3, #0
 8000e72:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e74:	2300      	movs	r3, #0
 8000e76:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e78:	1d3b      	adds	r3, r7, #4
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4805      	ldr	r0, [pc, #20]	; (8000e94 <MX_TIM4_Init+0xa0>)
 8000e7e:	f004 f889 	bl	8004f94 <HAL_TIMEx_MasterConfigSynchronization>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000e88:	f000 fa2e 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000e8c:	bf00      	nop
 8000e8e:	3730      	adds	r7, #48	; 0x30
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	200000bc 	.word	0x200000bc
 8000e98:	40000800 	.word	0x40000800

08000e9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ea0:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000ea2:	4a12      	ldr	r2, [pc, #72]	; (8000eec <MX_USART2_UART_Init+0x50>)
 8000ea4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ea6:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000ea8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eae:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eba:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ec0:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ec6:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ed2:	4805      	ldr	r0, [pc, #20]	; (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000ed4:	f004 f91e 	bl	8005114 <HAL_UART_Init>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ede:	f000 fa03 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	2000030c 	.word	0x2000030c
 8000eec:	40004400 	.word	0x40004400

08000ef0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	607b      	str	r3, [r7, #4]
 8000efa:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <MX_DMA_Init+0x3c>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	4a0b      	ldr	r2, [pc, #44]	; (8000f2c <MX_DMA_Init+0x3c>)
 8000f00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <MX_DMA_Init+0x3c>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2100      	movs	r1, #0
 8000f16:	2038      	movs	r0, #56	; 0x38
 8000f18:	f001 fc73 	bl	8002802 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000f1c:	2038      	movs	r0, #56	; 0x38
 8000f1e:	f001 fc8c 	bl	800283a <HAL_NVIC_EnableIRQ>

}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40023800 	.word	0x40023800

08000f30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08a      	sub	sp, #40	; 0x28
 8000f34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f36:	f107 0314 	add.w	r3, r7, #20
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
 8000f42:	60da      	str	r2, [r3, #12]
 8000f44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
 8000f4a:	4b2d      	ldr	r3, [pc, #180]	; (8001000 <MX_GPIO_Init+0xd0>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a2c      	ldr	r2, [pc, #176]	; (8001000 <MX_GPIO_Init+0xd0>)
 8000f50:	f043 0304 	orr.w	r3, r3, #4
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b2a      	ldr	r3, [pc, #168]	; (8001000 <MX_GPIO_Init+0xd0>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0304 	and.w	r3, r3, #4
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	4b26      	ldr	r3, [pc, #152]	; (8001000 <MX_GPIO_Init+0xd0>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a25      	ldr	r2, [pc, #148]	; (8001000 <MX_GPIO_Init+0xd0>)
 8000f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b23      	ldr	r3, [pc, #140]	; (8001000 <MX_GPIO_Init+0xd0>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	4b1f      	ldr	r3, [pc, #124]	; (8001000 <MX_GPIO_Init+0xd0>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a1e      	ldr	r2, [pc, #120]	; (8001000 <MX_GPIO_Init+0xd0>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b1c      	ldr	r3, [pc, #112]	; (8001000 <MX_GPIO_Init+0xd0>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	60bb      	str	r3, [r7, #8]
 8000f98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	4b18      	ldr	r3, [pc, #96]	; (8001000 <MX_GPIO_Init+0xd0>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a17      	ldr	r2, [pc, #92]	; (8001000 <MX_GPIO_Init+0xd0>)
 8000fa4:	f043 0302 	orr.w	r3, r3, #2
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b15      	ldr	r3, [pc, #84]	; (8001000 <MX_GPIO_Init+0xd0>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2120      	movs	r1, #32
 8000fba:	4812      	ldr	r0, [pc, #72]	; (8001004 <MX_GPIO_Init+0xd4>)
 8000fbc:	f002 f964 	bl	8003288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fce:	f107 0314 	add.w	r3, r7, #20
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	480c      	ldr	r0, [pc, #48]	; (8001008 <MX_GPIO_Init+0xd8>)
 8000fd6:	f001 ffbb 	bl	8002f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000fda:	2320      	movs	r3, #32
 8000fdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4804      	ldr	r0, [pc, #16]	; (8001004 <MX_GPIO_Init+0xd4>)
 8000ff2:	f001 ffad 	bl	8002f50 <HAL_GPIO_Init>

}
 8000ff6:	bf00      	nop
 8000ff8:	3728      	adds	r7, #40	; 0x28
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40023800 	.word	0x40023800
 8001004:	40020000 	.word	0x40020000
 8001008:	40020800 	.word	0x40020800

0800100c <is_black>:
	else {
		return 0;
	}
}

uint8_t is_black(uint16_t value, uint16_t critical_value){
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	460a      	mov	r2, r1
 8001016:	80fb      	strh	r3, [r7, #6]
 8001018:	4613      	mov	r3, r2
 800101a:	80bb      	strh	r3, [r7, #4]
	return value > critical_value ? 1:0;
 800101c:	88fa      	ldrh	r2, [r7, #6]
 800101e:	88bb      	ldrh	r3, [r7, #4]
 8001020:	429a      	cmp	r2, r3
 8001022:	bf8c      	ite	hi
 8001024:	2301      	movhi	r3, #1
 8001026:	2300      	movls	r3, #0
 8001028:	b2db      	uxtb	r3, r3
}
 800102a:	4618      	mov	r0, r3
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
	...

08001038 <show_for_calibration>:

void show_for_calibration(){
 8001038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800103a:	b083      	sub	sp, #12
 800103c:	af02      	add	r7, sp, #8
	/**
   * Poniżej fragment do kalibracji krytycznych wartości
   */
	printf("Sensor[0]: %d\tSensor[1]: %d\tSensor[2]: %d\tSensor[3]: %d\n", ktir_results[0], ktir_results[1], ktir_results[2], ktir_results[3]);
 800103e:	4b25      	ldr	r3, [pc, #148]	; (80010d4 <show_for_calibration+0x9c>)
 8001040:	881b      	ldrh	r3, [r3, #0]
 8001042:	b29b      	uxth	r3, r3
 8001044:	4619      	mov	r1, r3
 8001046:	4b23      	ldr	r3, [pc, #140]	; (80010d4 <show_for_calibration+0x9c>)
 8001048:	885b      	ldrh	r3, [r3, #2]
 800104a:	b29b      	uxth	r3, r3
 800104c:	461a      	mov	r2, r3
 800104e:	4b21      	ldr	r3, [pc, #132]	; (80010d4 <show_for_calibration+0x9c>)
 8001050:	889b      	ldrh	r3, [r3, #4]
 8001052:	b29b      	uxth	r3, r3
 8001054:	4618      	mov	r0, r3
 8001056:	4b1f      	ldr	r3, [pc, #124]	; (80010d4 <show_for_calibration+0x9c>)
 8001058:	88db      	ldrh	r3, [r3, #6]
 800105a:	b29b      	uxth	r3, r3
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	4603      	mov	r3, r0
 8001060:	481d      	ldr	r0, [pc, #116]	; (80010d8 <show_for_calibration+0xa0>)
 8001062:	f004 fb9f 	bl	80057a4 <iprintf>

  	printf("------\nCzarne[0]: %d\tCzarne[1]: %d\tCzarne[2]: %d\tCzarne[3]: %d\n",
	is_black(ktir_results[0], KTIR_CRITICAL_VALUES[0]), is_black(ktir_results[1], KTIR_CRITICAL_VALUES[1]),
 8001066:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <show_for_calibration+0x9c>)
 8001068:	881b      	ldrh	r3, [r3, #0]
 800106a:	b29b      	uxth	r3, r3
 800106c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001070:	4611      	mov	r1, r2
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff ffca 	bl	800100c <is_black>
 8001078:	4603      	mov	r3, r0
  	printf("------\nCzarne[0]: %d\tCzarne[1]: %d\tCzarne[2]: %d\tCzarne[3]: %d\n",
 800107a:	461c      	mov	r4, r3
	is_black(ktir_results[0], KTIR_CRITICAL_VALUES[0]), is_black(ktir_results[1], KTIR_CRITICAL_VALUES[1]),
 800107c:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <show_for_calibration+0x9c>)
 800107e:	885b      	ldrh	r3, [r3, #2]
 8001080:	b29b      	uxth	r3, r3
 8001082:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001086:	4611      	mov	r1, r2
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ffbf 	bl	800100c <is_black>
 800108e:	4603      	mov	r3, r0
  	printf("------\nCzarne[0]: %d\tCzarne[1]: %d\tCzarne[2]: %d\tCzarne[3]: %d\n",
 8001090:	461d      	mov	r5, r3
	is_black(ktir_results[2], KTIR_CRITICAL_VALUES[2]), is_black(ktir_results[3], KTIR_CRITICAL_VALUES[0]));
 8001092:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <show_for_calibration+0x9c>)
 8001094:	889b      	ldrh	r3, [r3, #4]
 8001096:	b29b      	uxth	r3, r3
 8001098:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800109c:	4611      	mov	r1, r2
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ffb4 	bl	800100c <is_black>
 80010a4:	4603      	mov	r3, r0
  	printf("------\nCzarne[0]: %d\tCzarne[1]: %d\tCzarne[2]: %d\tCzarne[3]: %d\n",
 80010a6:	461e      	mov	r6, r3
	is_black(ktir_results[2], KTIR_CRITICAL_VALUES[2]), is_black(ktir_results[3], KTIR_CRITICAL_VALUES[0]));
 80010a8:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <show_for_calibration+0x9c>)
 80010aa:	88db      	ldrh	r3, [r3, #6]
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80010b2:	4611      	mov	r1, r2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ffa9 	bl	800100c <is_black>
 80010ba:	4603      	mov	r3, r0
  	printf("------\nCzarne[0]: %d\tCzarne[1]: %d\tCzarne[2]: %d\tCzarne[3]: %d\n",
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	4633      	mov	r3, r6
 80010c0:	462a      	mov	r2, r5
 80010c2:	4621      	mov	r1, r4
 80010c4:	4805      	ldr	r0, [pc, #20]	; (80010dc <show_for_calibration+0xa4>)
 80010c6:	f004 fb6d 	bl	80057a4 <iprintf>
}
 80010ca:	bf00      	nop
 80010cc:	3704      	adds	r7, #4
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000248 	.word	0x20000248
 80010d8:	08006668 	.word	0x08006668
 80010dc:	080066a4 	.word	0x080066a4

080010e0 <go_straight>:
void turn_slight(Motor* slower, Motor* faster, uint8_t value){
	motor_run(slower, MOTOR_BASE_SPEED - value);
	motor_run(faster, MOTOR_BASE_SPEED);
}

void go_straight(int8_t speed){
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
	motor_run(&left_motor, speed);
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	4619      	mov	r1, r3
 80010f0:	4806      	ldr	r0, [pc, #24]	; (800110c <go_straight+0x2c>)
 80010f2:	f000 f91d 	bl	8001330 <motor_run>
	motor_run(&right_motor, speed);
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	4619      	mov	r1, r3
 80010fc:	4804      	ldr	r0, [pc, #16]	; (8001110 <go_straight+0x30>)
 80010fe:	f000 f917 	bl	8001330 <motor_run>

}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000250 	.word	0x20000250
 8001110:	200000b0 	.word	0x200000b0

08001114 <turn>:

void turn(Motor* slower, Motor* faster, uint8_t value){
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	4613      	mov	r3, r2
 8001120:	71fb      	strb	r3, [r7, #7]
	motor_run(slower, MOTOR_BASE_SPEED - value);
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	f1c3 032d 	rsb	r3, r3, #45	; 0x2d
 8001128:	b2db      	uxtb	r3, r3
 800112a:	b25b      	sxtb	r3, r3
 800112c:	4619      	mov	r1, r3
 800112e:	68f8      	ldr	r0, [r7, #12]
 8001130:	f000 f8fe 	bl	8001330 <motor_run>
	motor_run(faster, MOTOR_BASE_SPEED + value);
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	332d      	adds	r3, #45	; 0x2d
 8001138:	b2db      	uxtb	r3, r3
 800113a:	b25b      	sxtb	r3, r3
 800113c:	4619      	mov	r1, r3
 800113e:	68b8      	ldr	r0, [r7, #8]
 8001140:	f000 f8f6 	bl	8001330 <motor_run>
}
 8001144:	bf00      	nop
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <follow_the_line>:
				  opened_gates = 0;
			}
		}
}

void follow_the_line(){
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
	if(turns < 6 && is_black(ktir_results[1], KTIR_CRITICAL_VALUES[1]) && is_black(ktir_results[2], KTIR_CRITICAL_VALUES[2])){
 8001150:	4b44      	ldr	r3, [pc, #272]	; (8001264 <follow_the_line+0x118>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b05      	cmp	r3, #5
 8001156:	d81b      	bhi.n	8001190 <follow_the_line+0x44>
 8001158:	4b43      	ldr	r3, [pc, #268]	; (8001268 <follow_the_line+0x11c>)
 800115a:	885b      	ldrh	r3, [r3, #2]
 800115c:	b29b      	uxth	r3, r3
 800115e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001162:	4611      	mov	r1, r2
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ff51 	bl	800100c <is_black>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d00f      	beq.n	8001190 <follow_the_line+0x44>
 8001170:	4b3d      	ldr	r3, [pc, #244]	; (8001268 <follow_the_line+0x11c>)
 8001172:	889b      	ldrh	r3, [r3, #4]
 8001174:	b29b      	uxth	r3, r3
 8001176:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800117a:	4611      	mov	r1, r2
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff ff45 	bl	800100c <is_black>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d003      	beq.n	8001190 <follow_the_line+0x44>
		go_straight(MOTOR_BASE_SPEED);
 8001188:	202d      	movs	r0, #45	; 0x2d
 800118a:	f7ff ffa9 	bl	80010e0 <go_straight>
 800118e:	e067      	b.n	8001260 <follow_the_line+0x114>
	}
	else if(!is_black(ktir_results[1], KTIR_CRITICAL_VALUES[1]) && is_black(ktir_results[2], KTIR_CRITICAL_VALUES[2])){
 8001190:	4b35      	ldr	r3, [pc, #212]	; (8001268 <follow_the_line+0x11c>)
 8001192:	885b      	ldrh	r3, [r3, #2]
 8001194:	b29b      	uxth	r3, r3
 8001196:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800119a:	4611      	mov	r1, r2
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff35 	bl	800100c <is_black>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d123      	bne.n	80011f0 <follow_the_line+0xa4>
 80011a8:	4b2f      	ldr	r3, [pc, #188]	; (8001268 <follow_the_line+0x11c>)
 80011aa:	889b      	ldrh	r3, [r3, #4]
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80011b2:	4611      	mov	r1, r2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff29 	bl	800100c <is_black>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d017      	beq.n	80011f0 <follow_the_line+0xa4>
		if(!is_black(ktir_results[3], KTIR_CRITICAL_VALUES[3])){
 80011c0:	4b29      	ldr	r3, [pc, #164]	; (8001268 <follow_the_line+0x11c>)
 80011c2:	88db      	ldrh	r3, [r3, #6]
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80011ca:	4611      	mov	r1, r2
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff ff1d 	bl	800100c <is_black>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d105      	bne.n	80011e4 <follow_the_line+0x98>
			turn(&left_motor, &right_motor, 7);
 80011d8:	2207      	movs	r2, #7
 80011da:	4924      	ldr	r1, [pc, #144]	; (800126c <follow_the_line+0x120>)
 80011dc:	4824      	ldr	r0, [pc, #144]	; (8001270 <follow_the_line+0x124>)
 80011de:	f7ff ff99 	bl	8001114 <turn>
		if(!is_black(ktir_results[3], KTIR_CRITICAL_VALUES[3])){
 80011e2:	e03d      	b.n	8001260 <follow_the_line+0x114>
		} else {
			turn(&left_motor, &right_motor, 13);
 80011e4:	220d      	movs	r2, #13
 80011e6:	4921      	ldr	r1, [pc, #132]	; (800126c <follow_the_line+0x120>)
 80011e8:	4821      	ldr	r0, [pc, #132]	; (8001270 <follow_the_line+0x124>)
 80011ea:	f7ff ff93 	bl	8001114 <turn>
		if(!is_black(ktir_results[3], KTIR_CRITICAL_VALUES[3])){
 80011ee:	e037      	b.n	8001260 <follow_the_line+0x114>
		}
	}
	else if(is_black(ktir_results[1], KTIR_CRITICAL_VALUES[1]) && !is_black(ktir_results[2], KTIR_CRITICAL_VALUES[2])){
 80011f0:	4b1d      	ldr	r3, [pc, #116]	; (8001268 <follow_the_line+0x11c>)
 80011f2:	885b      	ldrh	r3, [r3, #2]
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80011fa:	4611      	mov	r1, r2
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff ff05 	bl	800100c <is_black>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d023      	beq.n	8001250 <follow_the_line+0x104>
 8001208:	4b17      	ldr	r3, [pc, #92]	; (8001268 <follow_the_line+0x11c>)
 800120a:	889b      	ldrh	r3, [r3, #4]
 800120c:	b29b      	uxth	r3, r3
 800120e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001212:	4611      	mov	r1, r2
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff fef9 	bl	800100c <is_black>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d117      	bne.n	8001250 <follow_the_line+0x104>
		if(!is_black(ktir_results[0], KTIR_CRITICAL_VALUES[0])){
 8001220:	4b11      	ldr	r3, [pc, #68]	; (8001268 <follow_the_line+0x11c>)
 8001222:	881b      	ldrh	r3, [r3, #0]
 8001224:	b29b      	uxth	r3, r3
 8001226:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800122a:	4611      	mov	r1, r2
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff feed 	bl	800100c <is_black>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d105      	bne.n	8001244 <follow_the_line+0xf8>
			turn(&right_motor, &left_motor, 7);
 8001238:	2207      	movs	r2, #7
 800123a:	490d      	ldr	r1, [pc, #52]	; (8001270 <follow_the_line+0x124>)
 800123c:	480b      	ldr	r0, [pc, #44]	; (800126c <follow_the_line+0x120>)
 800123e:	f7ff ff69 	bl	8001114 <turn>
		if(!is_black(ktir_results[0], KTIR_CRITICAL_VALUES[0])){
 8001242:	e00d      	b.n	8001260 <follow_the_line+0x114>
		} else {
			turn(&right_motor, &left_motor, 13);
 8001244:	220d      	movs	r2, #13
 8001246:	490a      	ldr	r1, [pc, #40]	; (8001270 <follow_the_line+0x124>)
 8001248:	4808      	ldr	r0, [pc, #32]	; (800126c <follow_the_line+0x120>)
 800124a:	f7ff ff63 	bl	8001114 <turn>
		if(!is_black(ktir_results[0], KTIR_CRITICAL_VALUES[0])){
 800124e:	e007      	b.n	8001260 <follow_the_line+0x114>
		}
	}
	else if (turns == 6){
 8001250:	4b04      	ldr	r3, [pc, #16]	; (8001264 <follow_the_line+0x118>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b06      	cmp	r3, #6
 8001256:	d103      	bne.n	8001260 <follow_the_line+0x114>
		go_straight(MOTOR_BASE_SPEED);
 8001258:	202d      	movs	r0, #45	; 0x2d
 800125a:	f7ff ff41 	bl	80010e0 <go_straight>
	}
}
 800125e:	e7ff      	b.n	8001260 <follow_the_line+0x114>
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000093 	.word	0x20000093
 8001268:	20000248 	.word	0x20000248
 800126c:	200000b0 	.word	0x200000b0
 8001270:	20000250 	.word	0x20000250

08001274 <is_crossing>:

uint8_t is_crossing(){
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
	return is_black(ktir_results[0], KTIR_CRITICAL_VALUES[0]) && is_black(ktir_results[1], KTIR_CRITICAL_VALUES[1])
 8001278:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <is_crossing+0x70>)
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	b29b      	uxth	r3, r3
 800127e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001282:	4611      	mov	r1, r2
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff fec1 	bl	800100c <is_black>
 800128a:	4603      	mov	r3, r0
			&& is_black(ktir_results[2], KTIR_CRITICAL_VALUES[2]) && is_black(ktir_results[3], KTIR_CRITICAL_VALUES[3]);
 800128c:	2b00      	cmp	r3, #0
 800128e:	d025      	beq.n	80012dc <is_crossing+0x68>
	return is_black(ktir_results[0], KTIR_CRITICAL_VALUES[0]) && is_black(ktir_results[1], KTIR_CRITICAL_VALUES[1])
 8001290:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <is_crossing+0x70>)
 8001292:	885b      	ldrh	r3, [r3, #2]
 8001294:	b29b      	uxth	r3, r3
 8001296:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800129a:	4611      	mov	r1, r2
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff feb5 	bl	800100c <is_black>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d019      	beq.n	80012dc <is_crossing+0x68>
			&& is_black(ktir_results[2], KTIR_CRITICAL_VALUES[2]) && is_black(ktir_results[3], KTIR_CRITICAL_VALUES[3]);
 80012a8:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <is_crossing+0x70>)
 80012aa:	889b      	ldrh	r3, [r3, #4]
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80012b2:	4611      	mov	r1, r2
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fea9 	bl	800100c <is_black>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d00d      	beq.n	80012dc <is_crossing+0x68>
 80012c0:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <is_crossing+0x70>)
 80012c2:	88db      	ldrh	r3, [r3, #6]
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80012ca:	4611      	mov	r1, r2
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff fe9d 	bl	800100c <is_black>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <is_crossing+0x68>
 80012d8:	2301      	movs	r3, #1
 80012da:	e000      	b.n	80012de <is_crossing+0x6a>
 80012dc:	2300      	movs	r3, #0
 80012de:	b2db      	uxtb	r3, r3
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000248 	.word	0x20000248

080012e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012ec:	b672      	cpsid	i
}
 80012ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <Error_Handler+0x8>

080012f2 <motor_init>:
 *      Author: Hyperbook
 */

#include "motor.h"

HAL_StatusTypeDef motor_init(Motor* motor, TIM_HandleTypeDef* pwm_tim, uint32_t channel_A, uint32_t channel_B){
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b086      	sub	sp, #24
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	60f8      	str	r0, [r7, #12]
 80012fa:	60b9      	str	r1, [r7, #8]
 80012fc:	607a      	str	r2, [r7, #4]
 80012fe:	603b      	str	r3, [r7, #0]
	motor->channel_A = channel_A;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	601a      	str	r2, [r3, #0]
	motor->channel_B = channel_B;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	683a      	ldr	r2, [r7, #0]
 800130a:	605a      	str	r2, [r3, #4]
	motor->pwm_tim = pwm_tim;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	68ba      	ldr	r2, [r7, #8]
 8001310:	609a      	str	r2, [r3, #8]
	HAL_StatusTypeDef status = HAL_TIM_PWM_Start(pwm_tim, channel_A);
 8001312:	6879      	ldr	r1, [r7, #4]
 8001314:	68b8      	ldr	r0, [r7, #8]
 8001316:	f003 f9f3 	bl	8004700 <HAL_TIM_PWM_Start>
 800131a:	4603      	mov	r3, r0
 800131c:	75fb      	strb	r3, [r7, #23]
	HAL_TIM_PWM_Start(pwm_tim, channel_B);
 800131e:	6839      	ldr	r1, [r7, #0]
 8001320:	68b8      	ldr	r0, [r7, #8]
 8001322:	f003 f9ed 	bl	8004700 <HAL_TIM_PWM_Start>
	return status;
 8001326:	7dfb      	ldrb	r3, [r7, #23]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3718      	adds	r7, #24
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <motor_run>:

uint32_t motor_run(Motor* motor, int8_t speed){
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	460b      	mov	r3, r1
 800133a:	70fb      	strb	r3, [r7, #3]
	// speed <-100; 100>
	uint32_t duty;
	speed = speed > 100 ? 100 : (speed < -100 ? -100 : speed);
 800133c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001340:	2b64      	cmp	r3, #100	; 0x64
 8001342:	dc08      	bgt.n	8001356 <motor_run+0x26>
 8001344:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001348:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800134c:	4293      	cmp	r3, r2
 800134e:	bfb8      	it	lt
 8001350:	4613      	movlt	r3, r2
 8001352:	b25b      	sxtb	r3, r3
 8001354:	e000      	b.n	8001358 <motor_run+0x28>
 8001356:	2364      	movs	r3, #100	; 0x64
 8001358:	70fb      	strb	r3, [r7, #3]
	if (speed >= 0){
 800135a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800135e:	2b00      	cmp	r3, #0
 8001360:	db53      	blt.n	800140a <motor_run+0xda>
		duty = speed * CLOCK_COUNTER_PERIOD / 100;
 8001362:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001366:	f240 32e7 	movw	r2, #999	; 0x3e7
 800136a:	fb02 f303 	mul.w	r3, r2, r3
 800136e:	4a53      	ldr	r2, [pc, #332]	; (80014bc <motor_run+0x18c>)
 8001370:	fb82 1203 	smull	r1, r2, r2, r3
 8001374:	1152      	asrs	r2, r2, #5
 8001376:	17db      	asrs	r3, r3, #31
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	60fb      	str	r3, [r7, #12]
		__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->channel_B, 0);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d105      	bne.n	8001390 <motor_run+0x60>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2200      	movs	r2, #0
 800138c:	635a      	str	r2, [r3, #52]	; 0x34
 800138e:	e018      	b.n	80013c2 <motor_run+0x92>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	2b04      	cmp	r3, #4
 8001396:	d105      	bne.n	80013a4 <motor_run+0x74>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	2300      	movs	r3, #0
 80013a0:	6393      	str	r3, [r2, #56]	; 0x38
 80013a2:	e00e      	b.n	80013c2 <motor_run+0x92>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	2b08      	cmp	r3, #8
 80013aa:	d105      	bne.n	80013b8 <motor_run+0x88>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	2300      	movs	r3, #0
 80013b4:	63d3      	str	r3, [r2, #60]	; 0x3c
 80013b6:	e004      	b.n	80013c2 <motor_run+0x92>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	2300      	movs	r3, #0
 80013c0:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->channel_A, duty);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d105      	bne.n	80013d6 <motor_run+0xa6>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	68fa      	ldr	r2, [r7, #12]
 80013d2:	635a      	str	r2, [r3, #52]	; 0x34
 80013d4:	e06b      	b.n	80014ae <motor_run+0x17e>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2b04      	cmp	r3, #4
 80013dc:	d105      	bne.n	80013ea <motor_run+0xba>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	6393      	str	r3, [r2, #56]	; 0x38
 80013e8:	e061      	b.n	80014ae <motor_run+0x17e>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2b08      	cmp	r3, #8
 80013f0:	d105      	bne.n	80013fe <motor_run+0xce>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	63d3      	str	r3, [r2, #60]	; 0x3c
 80013fc:	e057      	b.n	80014ae <motor_run+0x17e>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	6413      	str	r3, [r2, #64]	; 0x40
 8001408:	e051      	b.n	80014ae <motor_run+0x17e>
	} else {
		duty = (-speed) * CLOCK_COUNTER_PERIOD / 100;
 800140a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800140e:	4a2c      	ldr	r2, [pc, #176]	; (80014c0 <motor_run+0x190>)
 8001410:	fb02 f303 	mul.w	r3, r2, r3
 8001414:	4a29      	ldr	r2, [pc, #164]	; (80014bc <motor_run+0x18c>)
 8001416:	fb82 1203 	smull	r1, r2, r2, r3
 800141a:	1152      	asrs	r2, r2, #5
 800141c:	17db      	asrs	r3, r3, #31
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	60fb      	str	r3, [r7, #12]
		__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->channel_A, 0);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d105      	bne.n	8001436 <motor_run+0x106>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2200      	movs	r2, #0
 8001432:	635a      	str	r2, [r3, #52]	; 0x34
 8001434:	e018      	b.n	8001468 <motor_run+0x138>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2b04      	cmp	r3, #4
 800143c:	d105      	bne.n	800144a <motor_run+0x11a>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	2300      	movs	r3, #0
 8001446:	6393      	str	r3, [r2, #56]	; 0x38
 8001448:	e00e      	b.n	8001468 <motor_run+0x138>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2b08      	cmp	r3, #8
 8001450:	d105      	bne.n	800145e <motor_run+0x12e>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	2300      	movs	r3, #0
 800145a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800145c:	e004      	b.n	8001468 <motor_run+0x138>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	2300      	movs	r3, #0
 8001466:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->channel_B, duty);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d105      	bne.n	800147c <motor_run+0x14c>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	635a      	str	r2, [r3, #52]	; 0x34
 800147a:	e018      	b.n	80014ae <motor_run+0x17e>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	2b04      	cmp	r3, #4
 8001482:	d105      	bne.n	8001490 <motor_run+0x160>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	6393      	str	r3, [r2, #56]	; 0x38
 800148e:	e00e      	b.n	80014ae <motor_run+0x17e>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	2b08      	cmp	r3, #8
 8001496:	d105      	bne.n	80014a4 <motor_run+0x174>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	63d3      	str	r3, [r2, #60]	; 0x3c
 80014a2:	e004      	b.n	80014ae <motor_run+0x17e>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	6413      	str	r3, [r2, #64]	; 0x40
	}
	return duty;
 80014ae:	68fb      	ldr	r3, [r7, #12]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	51eb851f 	.word	0x51eb851f
 80014c0:	fffffc19 	.word	0xfffffc19

080014c4 <motor_brake>:

void motor_brake(Motor* motor){
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->channel_A, 0);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d105      	bne.n	80014e0 <motor_brake+0x1c>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2200      	movs	r2, #0
 80014dc:	635a      	str	r2, [r3, #52]	; 0x34
 80014de:	e018      	b.n	8001512 <motor_brake+0x4e>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b04      	cmp	r3, #4
 80014e6:	d105      	bne.n	80014f4 <motor_brake+0x30>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	2300      	movs	r3, #0
 80014f0:	6393      	str	r3, [r2, #56]	; 0x38
 80014f2:	e00e      	b.n	8001512 <motor_brake+0x4e>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2b08      	cmp	r3, #8
 80014fa:	d105      	bne.n	8001508 <motor_brake+0x44>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	2300      	movs	r3, #0
 8001504:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001506:	e004      	b.n	8001512 <motor_brake+0x4e>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	2300      	movs	r3, #0
 8001510:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->channel_B, 0);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d105      	bne.n	8001526 <motor_brake+0x62>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2200      	movs	r2, #0
 8001522:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001524:	e018      	b.n	8001558 <motor_brake+0x94>
	__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->channel_B, 0);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2b04      	cmp	r3, #4
 800152c:	d105      	bne.n	800153a <motor_brake+0x76>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	2300      	movs	r3, #0
 8001536:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001538:	e00e      	b.n	8001558 <motor_brake+0x94>
	__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->channel_B, 0);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	2b08      	cmp	r3, #8
 8001540:	d105      	bne.n	800154e <motor_brake+0x8a>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	2300      	movs	r3, #0
 800154a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800154c:	e004      	b.n	8001558 <motor_brake+0x94>
	__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->channel_B, 0);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	2300      	movs	r3, #0
 8001556:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <servo_init>:

#include "servo.h"


void servo_init(Servo* servo, TIM_HandleTypeDef *tim, uint32_t channel)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
	servo->_pwm_tim = tim;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	68ba      	ldr	r2, [r7, #8]
 8001574:	601a      	str	r2, [r3, #0]
	servo->_pwm_channel = channel;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	605a      	str	r2, [r3, #4]

	__HAL_TIM_SET_COMPARE(servo->_pwm_tim, servo->_pwm_channel, SERVO_MAX_US);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d106      	bne.n	8001592 <servo_init+0x2e>
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800158e:	635a      	str	r2, [r3, #52]	; 0x34
 8001590:	e01b      	b.n	80015ca <servo_init+0x66>
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	2b04      	cmp	r3, #4
 8001598:	d106      	bne.n	80015a8 <servo_init+0x44>
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80015a4:	6393      	str	r3, [r2, #56]	; 0x38
 80015a6:	e010      	b.n	80015ca <servo_init+0x66>
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	2b08      	cmp	r3, #8
 80015ae:	d106      	bne.n	80015be <servo_init+0x5a>
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80015ba:	63d3      	str	r3, [r2, #60]	; 0x3c
 80015bc:	e005      	b.n	80015ca <servo_init+0x66>
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80015c8:	6413      	str	r3, [r2, #64]	; 0x40
	HAL_TIM_PWM_Start(servo->_pwm_tim, servo->_pwm_channel);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	4619      	mov	r1, r3
 80015d4:	4610      	mov	r0, r2
 80015d6:	f003 f893 	bl	8004700 <HAL_TIM_PWM_Start>
}
 80015da:	bf00      	nop
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <servo_set_angle>:

uint32_t servo_set_angle(Servo* servo, uint8_t angle)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b085      	sub	sp, #20
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
 80015ea:	460b      	mov	r3, r1
 80015ec:	70fb      	strb	r3, [r7, #3]
	if(angle < SERVO_MIN_ANGLE)
		angle = SERVO_MIN_ANGLE;
	else if(angle > SERVO_MAX_ANGLE)
 80015ee:	78fb      	ldrb	r3, [r7, #3]
 80015f0:	2bb4      	cmp	r3, #180	; 0xb4
 80015f2:	d901      	bls.n	80015f8 <servo_set_angle+0x16>
		angle = SERVO_MAX_ANGLE;
 80015f4:	23b4      	movs	r3, #180	; 0xb4
 80015f6:	70fb      	strb	r3, [r7, #3]

	uint32_t pwm_duty_us;

	pwm_duty_us = SERVO_MIN_US + (angle * (SERVO_MAX_US - SERVO_MIN_US))/SERVO_MAX_ANGLE;
 80015f8:	78fa      	ldrb	r2, [r7, #3]
 80015fa:	4613      	mov	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	4413      	add	r3, r2
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8001606:	60fb      	str	r3, [r7, #12]

	__HAL_TIM_SET_COMPARE(servo->_pwm_tim, servo->_pwm_channel, pwm_duty_us);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d105      	bne.n	800161c <servo_set_angle+0x3a>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	635a      	str	r2, [r3, #52]	; 0x34
 800161a:	e018      	b.n	800164e <servo_set_angle+0x6c>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	2b04      	cmp	r3, #4
 8001622:	d105      	bne.n	8001630 <servo_set_angle+0x4e>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	6393      	str	r3, [r2, #56]	; 0x38
 800162e:	e00e      	b.n	800164e <servo_set_angle+0x6c>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	2b08      	cmp	r3, #8
 8001636:	d105      	bne.n	8001644 <servo_set_angle+0x62>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001642:	e004      	b.n	800164e <servo_set_angle+0x6c>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6413      	str	r3, [r2, #64]	; 0x40

	return pwm_duty_us;
 800164e:	68fb      	ldr	r3, [r7, #12]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	607b      	str	r3, [r7, #4]
 8001666:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <HAL_MspInit+0x4c>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166a:	4a0f      	ldr	r2, [pc, #60]	; (80016a8 <HAL_MspInit+0x4c>)
 800166c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001670:	6453      	str	r3, [r2, #68]	; 0x44
 8001672:	4b0d      	ldr	r3, [pc, #52]	; (80016a8 <HAL_MspInit+0x4c>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800167a:	607b      	str	r3, [r7, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	603b      	str	r3, [r7, #0]
 8001682:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <HAL_MspInit+0x4c>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	4a08      	ldr	r2, [pc, #32]	; (80016a8 <HAL_MspInit+0x4c>)
 8001688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800168c:	6413      	str	r3, [r2, #64]	; 0x40
 800168e:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <HAL_MspInit+0x4c>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001696:	603b      	str	r3, [r7, #0]
 8001698:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	40023800 	.word	0x40023800

080016ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08a      	sub	sp, #40	; 0x28
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 0314 	add.w	r3, r7, #20
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a2e      	ldr	r2, [pc, #184]	; (8001784 <HAL_ADC_MspInit+0xd8>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d156      	bne.n	800177c <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	613b      	str	r3, [r7, #16]
 80016d2:	4b2d      	ldr	r3, [pc, #180]	; (8001788 <HAL_ADC_MspInit+0xdc>)
 80016d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d6:	4a2c      	ldr	r2, [pc, #176]	; (8001788 <HAL_ADC_MspInit+0xdc>)
 80016d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016dc:	6453      	str	r3, [r2, #68]	; 0x44
 80016de:	4b2a      	ldr	r3, [pc, #168]	; (8001788 <HAL_ADC_MspInit+0xdc>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	4b26      	ldr	r3, [pc, #152]	; (8001788 <HAL_ADC_MspInit+0xdc>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a25      	ldr	r2, [pc, #148]	; (8001788 <HAL_ADC_MspInit+0xdc>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b23      	ldr	r3, [pc, #140]	; (8001788 <HAL_ADC_MspInit+0xdc>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = KTIR_1_Pin|KTIR_2_Pin|KTIR_3_Pin|KTIR_4_Pin;
 8001706:	23c3      	movs	r3, #195	; 0xc3
 8001708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800170a:	2303      	movs	r3, #3
 800170c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001712:	f107 0314 	add.w	r3, r7, #20
 8001716:	4619      	mov	r1, r3
 8001718:	481c      	ldr	r0, [pc, #112]	; (800178c <HAL_ADC_MspInit+0xe0>)
 800171a:	f001 fc19 	bl	8002f50 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800171e:	4b1c      	ldr	r3, [pc, #112]	; (8001790 <HAL_ADC_MspInit+0xe4>)
 8001720:	4a1c      	ldr	r2, [pc, #112]	; (8001794 <HAL_ADC_MspInit+0xe8>)
 8001722:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001724:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <HAL_ADC_MspInit+0xe4>)
 8001726:	2200      	movs	r2, #0
 8001728:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800172a:	4b19      	ldr	r3, [pc, #100]	; (8001790 <HAL_ADC_MspInit+0xe4>)
 800172c:	2200      	movs	r2, #0
 800172e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001730:	4b17      	ldr	r3, [pc, #92]	; (8001790 <HAL_ADC_MspInit+0xe4>)
 8001732:	2200      	movs	r2, #0
 8001734:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001736:	4b16      	ldr	r3, [pc, #88]	; (8001790 <HAL_ADC_MspInit+0xe4>)
 8001738:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800173c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800173e:	4b14      	ldr	r3, [pc, #80]	; (8001790 <HAL_ADC_MspInit+0xe4>)
 8001740:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001744:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001746:	4b12      	ldr	r3, [pc, #72]	; (8001790 <HAL_ADC_MspInit+0xe4>)
 8001748:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800174c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800174e:	4b10      	ldr	r3, [pc, #64]	; (8001790 <HAL_ADC_MspInit+0xe4>)
 8001750:	2200      	movs	r2, #0
 8001752:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001754:	4b0e      	ldr	r3, [pc, #56]	; (8001790 <HAL_ADC_MspInit+0xe4>)
 8001756:	2200      	movs	r2, #0
 8001758:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800175a:	4b0d      	ldr	r3, [pc, #52]	; (8001790 <HAL_ADC_MspInit+0xe4>)
 800175c:	2200      	movs	r2, #0
 800175e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001760:	480b      	ldr	r0, [pc, #44]	; (8001790 <HAL_ADC_MspInit+0xe4>)
 8001762:	f001 f885 	bl	8002870 <HAL_DMA_Init>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 800176c:	f7ff fdbc 	bl	80012e8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a07      	ldr	r2, [pc, #28]	; (8001790 <HAL_ADC_MspInit+0xe4>)
 8001774:	639a      	str	r2, [r3, #56]	; 0x38
 8001776:	4a06      	ldr	r2, [pc, #24]	; (8001790 <HAL_ADC_MspInit+0xe4>)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800177c:	bf00      	nop
 800177e:	3728      	adds	r7, #40	; 0x28
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40012000 	.word	0x40012000
 8001788:	40023800 	.word	0x40023800
 800178c:	40020000 	.word	0x40020000
 8001790:	20000264 	.word	0x20000264
 8001794:	40026410 	.word	0x40026410

08001798 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08c      	sub	sp, #48	; 0x30
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a0:	f107 031c 	add.w	r3, r7, #28
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a3b      	ldr	r2, [pc, #236]	; (80018a4 <HAL_I2C_MspInit+0x10c>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d12d      	bne.n	8001816 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	61bb      	str	r3, [r7, #24]
 80017be:	4b3a      	ldr	r3, [pc, #232]	; (80018a8 <HAL_I2C_MspInit+0x110>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	4a39      	ldr	r2, [pc, #228]	; (80018a8 <HAL_I2C_MspInit+0x110>)
 80017c4:	f043 0302 	orr.w	r3, r3, #2
 80017c8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ca:	4b37      	ldr	r3, [pc, #220]	; (80018a8 <HAL_I2C_MspInit+0x110>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	61bb      	str	r3, [r7, #24]
 80017d4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = COLOR_LEFT_SCL_Pin|COLOR_LEFT_SDA_Pin;
 80017d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017dc:	2312      	movs	r3, #18
 80017de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017e0:	2301      	movs	r3, #1
 80017e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e4:	2303      	movs	r3, #3
 80017e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017e8:	2304      	movs	r3, #4
 80017ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ec:	f107 031c 	add.w	r3, r7, #28
 80017f0:	4619      	mov	r1, r3
 80017f2:	482e      	ldr	r0, [pc, #184]	; (80018ac <HAL_I2C_MspInit+0x114>)
 80017f4:	f001 fbac 	bl	8002f50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	4b2a      	ldr	r3, [pc, #168]	; (80018a8 <HAL_I2C_MspInit+0x110>)
 80017fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001800:	4a29      	ldr	r2, [pc, #164]	; (80018a8 <HAL_I2C_MspInit+0x110>)
 8001802:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001806:	6413      	str	r3, [r2, #64]	; 0x40
 8001808:	4b27      	ldr	r3, [pc, #156]	; (80018a8 <HAL_I2C_MspInit+0x110>)
 800180a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001810:	617b      	str	r3, [r7, #20]
 8001812:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001814:	e041      	b.n	800189a <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a25      	ldr	r2, [pc, #148]	; (80018b0 <HAL_I2C_MspInit+0x118>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d13c      	bne.n	800189a <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001820:	2300      	movs	r3, #0
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	4b20      	ldr	r3, [pc, #128]	; (80018a8 <HAL_I2C_MspInit+0x110>)
 8001826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001828:	4a1f      	ldr	r2, [pc, #124]	; (80018a8 <HAL_I2C_MspInit+0x110>)
 800182a:	f043 0302 	orr.w	r3, r3, #2
 800182e:	6313      	str	r3, [r2, #48]	; 0x30
 8001830:	4b1d      	ldr	r3, [pc, #116]	; (80018a8 <HAL_I2C_MspInit+0x110>)
 8001832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	613b      	str	r3, [r7, #16]
 800183a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = COLOR_RIGHT_SCL_Pin;
 800183c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001840:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001842:	2312      	movs	r3, #18
 8001844:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001846:	2301      	movs	r3, #1
 8001848:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184a:	2303      	movs	r3, #3
 800184c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800184e:	2304      	movs	r3, #4
 8001850:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(COLOR_RIGHT_SCL_GPIO_Port, &GPIO_InitStruct);
 8001852:	f107 031c 	add.w	r3, r7, #28
 8001856:	4619      	mov	r1, r3
 8001858:	4814      	ldr	r0, [pc, #80]	; (80018ac <HAL_I2C_MspInit+0x114>)
 800185a:	f001 fb79 	bl	8002f50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = COLOR_RIGHT_SDA_Pin;
 800185e:	2308      	movs	r3, #8
 8001860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001862:	2312      	movs	r3, #18
 8001864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001866:	2301      	movs	r3, #1
 8001868:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186a:	2303      	movs	r3, #3
 800186c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800186e:	2309      	movs	r3, #9
 8001870:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(COLOR_RIGHT_SDA_GPIO_Port, &GPIO_InitStruct);
 8001872:	f107 031c 	add.w	r3, r7, #28
 8001876:	4619      	mov	r1, r3
 8001878:	480c      	ldr	r0, [pc, #48]	; (80018ac <HAL_I2C_MspInit+0x114>)
 800187a:	f001 fb69 	bl	8002f50 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <HAL_I2C_MspInit+0x110>)
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	4a08      	ldr	r2, [pc, #32]	; (80018a8 <HAL_I2C_MspInit+0x110>)
 8001888:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800188c:	6413      	str	r3, [r2, #64]	; 0x40
 800188e:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <HAL_I2C_MspInit+0x110>)
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
}
 800189a:	bf00      	nop
 800189c:	3730      	adds	r7, #48	; 0x30
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40005400 	.word	0x40005400
 80018a8:	40023800 	.word	0x40023800
 80018ac:	40020400 	.word	0x40020400
 80018b0:	40005800 	.word	0x40005800

080018b4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a15      	ldr	r2, [pc, #84]	; (8001918 <HAL_TIM_PWM_MspInit+0x64>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d10e      	bne.n	80018e4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	4b14      	ldr	r3, [pc, #80]	; (800191c <HAL_TIM_PWM_MspInit+0x68>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ce:	4a13      	ldr	r2, [pc, #76]	; (800191c <HAL_TIM_PWM_MspInit+0x68>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6453      	str	r3, [r2, #68]	; 0x44
 80018d6:	4b11      	ldr	r3, [pc, #68]	; (800191c <HAL_TIM_PWM_MspInit+0x68>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80018e2:	e012      	b.n	800190a <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a0d      	ldr	r2, [pc, #52]	; (8001920 <HAL_TIM_PWM_MspInit+0x6c>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d10d      	bne.n	800190a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	60bb      	str	r3, [r7, #8]
 80018f2:	4b0a      	ldr	r3, [pc, #40]	; (800191c <HAL_TIM_PWM_MspInit+0x68>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	4a09      	ldr	r2, [pc, #36]	; (800191c <HAL_TIM_PWM_MspInit+0x68>)
 80018f8:	f043 0302 	orr.w	r3, r3, #2
 80018fc:	6413      	str	r3, [r2, #64]	; 0x40
 80018fe:	4b07      	ldr	r3, [pc, #28]	; (800191c <HAL_TIM_PWM_MspInit+0x68>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	68bb      	ldr	r3, [r7, #8]
}
 800190a:	bf00      	nop
 800190c:	3714      	adds	r7, #20
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	40010000 	.word	0x40010000
 800191c:	40023800 	.word	0x40023800
 8001920:	40000400 	.word	0x40000400

08001924 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08a      	sub	sp, #40	; 0x28
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a19      	ldr	r2, [pc, #100]	; (80019a8 <HAL_TIM_Encoder_MspInit+0x84>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d12b      	bne.n	800199e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	613b      	str	r3, [r7, #16]
 800194a:	4b18      	ldr	r3, [pc, #96]	; (80019ac <HAL_TIM_Encoder_MspInit+0x88>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	4a17      	ldr	r2, [pc, #92]	; (80019ac <HAL_TIM_Encoder_MspInit+0x88>)
 8001950:	f043 0304 	orr.w	r3, r3, #4
 8001954:	6413      	str	r3, [r2, #64]	; 0x40
 8001956:	4b15      	ldr	r3, [pc, #84]	; (80019ac <HAL_TIM_Encoder_MspInit+0x88>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	f003 0304 	and.w	r3, r3, #4
 800195e:	613b      	str	r3, [r7, #16]
 8001960:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	4b11      	ldr	r3, [pc, #68]	; (80019ac <HAL_TIM_Encoder_MspInit+0x88>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	4a10      	ldr	r2, [pc, #64]	; (80019ac <HAL_TIM_Encoder_MspInit+0x88>)
 800196c:	f043 0302 	orr.w	r3, r3, #2
 8001970:	6313      	str	r3, [r2, #48]	; 0x30
 8001972:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <HAL_TIM_Encoder_MspInit+0x88>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_RIGHT_1_Pin|ENCODER_RIGHT_2_Pin;
 800197e:	23c0      	movs	r3, #192	; 0xc0
 8001980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001982:	2302      	movs	r3, #2
 8001984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198a:	2300      	movs	r3, #0
 800198c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800198e:	2302      	movs	r3, #2
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001992:	f107 0314 	add.w	r3, r7, #20
 8001996:	4619      	mov	r1, r3
 8001998:	4805      	ldr	r0, [pc, #20]	; (80019b0 <HAL_TIM_Encoder_MspInit+0x8c>)
 800199a:	f001 fad9 	bl	8002f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800199e:	bf00      	nop
 80019a0:	3728      	adds	r7, #40	; 0x28
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40000800 	.word	0x40000800
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40020400 	.word	0x40020400

080019b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b08a      	sub	sp, #40	; 0x28
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	60da      	str	r2, [r3, #12]
 80019ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a24      	ldr	r2, [pc, #144]	; (8001a64 <HAL_TIM_MspPostInit+0xb0>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d11f      	bne.n	8001a16 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	613b      	str	r3, [r7, #16]
 80019da:	4b23      	ldr	r3, [pc, #140]	; (8001a68 <HAL_TIM_MspPostInit+0xb4>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	4a22      	ldr	r2, [pc, #136]	; (8001a68 <HAL_TIM_MspPostInit+0xb4>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	6313      	str	r3, [r2, #48]	; 0x30
 80019e6:	4b20      	ldr	r3, [pc, #128]	; (8001a68 <HAL_TIM_MspPostInit+0xb4>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	613b      	str	r3, [r7, #16]
 80019f0:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_LEFT_A_Pin|MOTOR_LEFT_B_Pin|MOTOR_RIGHT_A_Pin|MOTOR_RIGHT_B_Pin;
 80019f2:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80019f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f8:	2302      	movs	r3, #2
 80019fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a00:	2300      	movs	r3, #0
 8001a02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a04:	2301      	movs	r3, #1
 8001a06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a08:	f107 0314 	add.w	r3, r7, #20
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4817      	ldr	r0, [pc, #92]	; (8001a6c <HAL_TIM_MspPostInit+0xb8>)
 8001a10:	f001 fa9e 	bl	8002f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a14:	e022      	b.n	8001a5c <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a15      	ldr	r2, [pc, #84]	; (8001a70 <HAL_TIM_MspPostInit+0xbc>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d11d      	bne.n	8001a5c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a20:	2300      	movs	r3, #0
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	4b10      	ldr	r3, [pc, #64]	; (8001a68 <HAL_TIM_MspPostInit+0xb4>)
 8001a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a28:	4a0f      	ldr	r2, [pc, #60]	; (8001a68 <HAL_TIM_MspPostInit+0xb4>)
 8001a2a:	f043 0302 	orr.w	r3, r3, #2
 8001a2e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a30:	4b0d      	ldr	r3, [pc, #52]	; (8001a68 <HAL_TIM_MspPostInit+0xb4>)
 8001a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_RIGHT_Pin|SERVO_LEFT_Pin;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a40:	2302      	movs	r3, #2
 8001a42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a50:	f107 0314 	add.w	r3, r7, #20
 8001a54:	4619      	mov	r1, r3
 8001a56:	4807      	ldr	r0, [pc, #28]	; (8001a74 <HAL_TIM_MspPostInit+0xc0>)
 8001a58:	f001 fa7a 	bl	8002f50 <HAL_GPIO_Init>
}
 8001a5c:	bf00      	nop
 8001a5e:	3728      	adds	r7, #40	; 0x28
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40010000 	.word	0x40010000
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	40020000 	.word	0x40020000
 8001a70:	40000400 	.word	0x40000400
 8001a74:	40020400 	.word	0x40020400

08001a78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08a      	sub	sp, #40	; 0x28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
 8001a8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a19      	ldr	r2, [pc, #100]	; (8001afc <HAL_UART_MspInit+0x84>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d12b      	bne.n	8001af2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	4b18      	ldr	r3, [pc, #96]	; (8001b00 <HAL_UART_MspInit+0x88>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	4a17      	ldr	r2, [pc, #92]	; (8001b00 <HAL_UART_MspInit+0x88>)
 8001aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aaa:	4b15      	ldr	r3, [pc, #84]	; (8001b00 <HAL_UART_MspInit+0x88>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab2:	613b      	str	r3, [r7, #16]
 8001ab4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <HAL_UART_MspInit+0x88>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	4a10      	ldr	r2, [pc, #64]	; (8001b00 <HAL_UART_MspInit+0x88>)
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac6:	4b0e      	ldr	r3, [pc, #56]	; (8001b00 <HAL_UART_MspInit+0x88>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ad2:	230c      	movs	r3, #12
 8001ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ae2:	2307      	movs	r3, #7
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae6:	f107 0314 	add.w	r3, r7, #20
 8001aea:	4619      	mov	r1, r3
 8001aec:	4805      	ldr	r0, [pc, #20]	; (8001b04 <HAL_UART_MspInit+0x8c>)
 8001aee:	f001 fa2f 	bl	8002f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001af2:	bf00      	nop
 8001af4:	3728      	adds	r7, #40	; 0x28
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40004400 	.word	0x40004400
 8001b00:	40023800 	.word	0x40023800
 8001b04:	40020000 	.word	0x40020000

08001b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b0c:	e7fe      	b.n	8001b0c <NMI_Handler+0x4>

08001b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b12:	e7fe      	b.n	8001b12 <HardFault_Handler+0x4>

08001b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b18:	e7fe      	b.n	8001b18 <MemManage_Handler+0x4>

08001b1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b1e:	e7fe      	b.n	8001b1e <BusFault_Handler+0x4>

08001b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b24:	e7fe      	b.n	8001b24 <UsageFault_Handler+0x4>

08001b26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b38:	bf00      	nop
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b42:	b480      	push	{r7}
 8001b44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b54:	f000 f93e 	bl	8001dd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b58:	bf00      	nop
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b60:	4802      	ldr	r0, [pc, #8]	; (8001b6c <DMA2_Stream0_IRQHandler+0x10>)
 8001b62:	f000 ff8b 	bl	8002a7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000264 	.word	0x20000264

08001b70 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]
 8001b80:	e00a      	b.n	8001b98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b82:	f3af 8000 	nop.w
 8001b86:	4601      	mov	r1, r0
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	1c5a      	adds	r2, r3, #1
 8001b8c:	60ba      	str	r2, [r7, #8]
 8001b8e:	b2ca      	uxtb	r2, r1
 8001b90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	3301      	adds	r3, #1
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	dbf0      	blt.n	8001b82 <_read+0x12>
	}

return len;
 8001ba0:	687b      	ldr	r3, [r7, #4]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3718      	adds	r7, #24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b086      	sub	sp, #24
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	60f8      	str	r0, [r7, #12]
 8001bb2:	60b9      	str	r1, [r7, #8]
 8001bb4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	617b      	str	r3, [r7, #20]
 8001bba:	e009      	b.n	8001bd0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	1c5a      	adds	r2, r3, #1
 8001bc0:	60ba      	str	r2, [r7, #8]
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7fe fd6b 	bl	80006a0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	617b      	str	r3, [r7, #20]
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	dbf1      	blt.n	8001bbc <_write+0x12>
	}
	return len;
 8001bd8:	687b      	ldr	r3, [r7, #4]
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <_close>:

int _close(int file)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
	return -1;
 8001bea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
 8001c02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c0a:	605a      	str	r2, [r3, #4]
	return 0;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <_isatty>:

int _isatty(int file)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
	return 1;
 8001c22:	2301      	movs	r3, #1
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
	return 0;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3714      	adds	r7, #20
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
	...

08001c4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c54:	4a14      	ldr	r2, [pc, #80]	; (8001ca8 <_sbrk+0x5c>)
 8001c56:	4b15      	ldr	r3, [pc, #84]	; (8001cac <_sbrk+0x60>)
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c60:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <_sbrk+0x64>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d102      	bne.n	8001c6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c68:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <_sbrk+0x64>)
 8001c6a:	4a12      	ldr	r2, [pc, #72]	; (8001cb4 <_sbrk+0x68>)
 8001c6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c6e:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <_sbrk+0x64>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4413      	add	r3, r2
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d207      	bcs.n	8001c8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c7c:	f003 fd60 	bl	8005740 <__errno>
 8001c80:	4603      	mov	r3, r0
 8001c82:	220c      	movs	r2, #12
 8001c84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c86:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8a:	e009      	b.n	8001ca0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c8c:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <_sbrk+0x64>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c92:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <_sbrk+0x64>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4413      	add	r3, r2
 8001c9a:	4a05      	ldr	r2, [pc, #20]	; (8001cb0 <_sbrk+0x64>)
 8001c9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3718      	adds	r7, #24
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20020000 	.word	0x20020000
 8001cac:	00000400 	.word	0x00000400
 8001cb0:	2000009c 	.word	0x2000009c
 8001cb4:	20000378 	.word	0x20000378

08001cb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cbc:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <SystemInit+0x20>)
 8001cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cc2:	4a05      	ldr	r2, [pc, #20]	; (8001cd8 <SystemInit+0x20>)
 8001cc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ccc:	bf00      	nop
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ce0:	480d      	ldr	r0, [pc, #52]	; (8001d18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ce2:	490e      	ldr	r1, [pc, #56]	; (8001d1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ce4:	4a0e      	ldr	r2, [pc, #56]	; (8001d20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ce6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ce8:	e002      	b.n	8001cf0 <LoopCopyDataInit>

08001cea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cee:	3304      	adds	r3, #4

08001cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cf4:	d3f9      	bcc.n	8001cea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cf6:	4a0b      	ldr	r2, [pc, #44]	; (8001d24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001cf8:	4c0b      	ldr	r4, [pc, #44]	; (8001d28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cfc:	e001      	b.n	8001d02 <LoopFillZerobss>

08001cfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d00:	3204      	adds	r2, #4

08001d02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d04:	d3fb      	bcc.n	8001cfe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d06:	f7ff ffd7 	bl	8001cb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d0a:	f003 fd1f 	bl	800574c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d0e:	f7fe fcdf 	bl	80006d0 <main>
  bx  lr    
 8001d12:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d1c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001d20:	080067d0 	.word	0x080067d0
  ldr r2, =_sbss
 8001d24:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001d28:	20000378 	.word	0x20000378

08001d2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d2c:	e7fe      	b.n	8001d2c <ADC_IRQHandler>
	...

08001d30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d34:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <HAL_Init+0x40>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a0d      	ldr	r2, [pc, #52]	; (8001d70 <HAL_Init+0x40>)
 8001d3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d40:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <HAL_Init+0x40>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a0a      	ldr	r2, [pc, #40]	; (8001d70 <HAL_Init+0x40>)
 8001d46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d4c:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <HAL_Init+0x40>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a07      	ldr	r2, [pc, #28]	; (8001d70 <HAL_Init+0x40>)
 8001d52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d58:	2003      	movs	r0, #3
 8001d5a:	f000 fd47 	bl	80027ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d5e:	200f      	movs	r0, #15
 8001d60:	f000 f808 	bl	8001d74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d64:	f7ff fc7a 	bl	800165c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40023c00 	.word	0x40023c00

08001d74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d7c:	4b12      	ldr	r3, [pc, #72]	; (8001dc8 <HAL_InitTick+0x54>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	4b12      	ldr	r3, [pc, #72]	; (8001dcc <HAL_InitTick+0x58>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	4619      	mov	r1, r3
 8001d86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d92:	4618      	mov	r0, r3
 8001d94:	f000 fd5f 	bl	8002856 <HAL_SYSTICK_Config>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e00e      	b.n	8001dc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b0f      	cmp	r3, #15
 8001da6:	d80a      	bhi.n	8001dbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001da8:	2200      	movs	r2, #0
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	f04f 30ff 	mov.w	r0, #4294967295
 8001db0:	f000 fd27 	bl	8002802 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001db4:	4a06      	ldr	r2, [pc, #24]	; (8001dd0 <HAL_InitTick+0x5c>)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	e000      	b.n	8001dc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	20000004 	.word	0x20000004
 8001dcc:	2000000c 	.word	0x2000000c
 8001dd0:	20000008 	.word	0x20000008

08001dd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dd8:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <HAL_IncTick+0x20>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <HAL_IncTick+0x24>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4413      	add	r3, r2
 8001de4:	4a04      	ldr	r2, [pc, #16]	; (8001df8 <HAL_IncTick+0x24>)
 8001de6:	6013      	str	r3, [r2, #0]
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	2000000c 	.word	0x2000000c
 8001df8:	20000364 	.word	0x20000364

08001dfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  return uwTick;
 8001e00:	4b03      	ldr	r3, [pc, #12]	; (8001e10 <HAL_GetTick+0x14>)
 8001e02:	681b      	ldr	r3, [r3, #0]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	20000364 	.word	0x20000364

08001e14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e1c:	f7ff ffee 	bl	8001dfc <HAL_GetTick>
 8001e20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e2c:	d005      	beq.n	8001e3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e2e:	4b0a      	ldr	r3, [pc, #40]	; (8001e58 <HAL_Delay+0x44>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	461a      	mov	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	4413      	add	r3, r2
 8001e38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e3a:	bf00      	nop
 8001e3c:	f7ff ffde 	bl	8001dfc <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d8f7      	bhi.n	8001e3c <HAL_Delay+0x28>
  {
  }
}
 8001e4c:	bf00      	nop
 8001e4e:	bf00      	nop
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	2000000c 	.word	0x2000000c

08001e5c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e64:	2300      	movs	r3, #0
 8001e66:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e033      	b.n	8001eda <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d109      	bne.n	8001e8e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7ff fc16 	bl	80016ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	f003 0310 	and.w	r3, r3, #16
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d118      	bne.n	8001ecc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ea2:	f023 0302 	bic.w	r3, r3, #2
 8001ea6:	f043 0202 	orr.w	r2, r3, #2
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 fa4e 	bl	8002350 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	f023 0303 	bic.w	r3, r3, #3
 8001ec2:	f043 0201 	orr.w	r2, r3, #1
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	641a      	str	r2, [r3, #64]	; 0x40
 8001eca:	e001      	b.n	8001ed0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
	...

08001ee4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d101      	bne.n	8001f02 <HAL_ADC_Start_DMA+0x1e>
 8001efe:	2302      	movs	r3, #2
 8001f00:	e0ce      	b.n	80020a0 <HAL_ADC_Start_DMA+0x1bc>
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d018      	beq.n	8001f4a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	689a      	ldr	r2, [r3, #8]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f042 0201 	orr.w	r2, r2, #1
 8001f26:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f28:	4b5f      	ldr	r3, [pc, #380]	; (80020a8 <HAL_ADC_Start_DMA+0x1c4>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a5f      	ldr	r2, [pc, #380]	; (80020ac <HAL_ADC_Start_DMA+0x1c8>)
 8001f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f32:	0c9a      	lsrs	r2, r3, #18
 8001f34:	4613      	mov	r3, r2
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	4413      	add	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001f3c:	e002      	b.n	8001f44 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	3b01      	subs	r3, #1
 8001f42:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1f9      	bne.n	8001f3e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f58:	d107      	bne.n	8001f6a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f68:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	f040 8086 	bne.w	8002086 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f82:	f023 0301 	bic.w	r3, r3, #1
 8001f86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d007      	beq.n	8001fac <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fa4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fb8:	d106      	bne.n	8001fc8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbe:	f023 0206 	bic.w	r2, r3, #6
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	645a      	str	r2, [r3, #68]	; 0x44
 8001fc6:	e002      	b.n	8001fce <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fd6:	4b36      	ldr	r3, [pc, #216]	; (80020b0 <HAL_ADC_Start_DMA+0x1cc>)
 8001fd8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fde:	4a35      	ldr	r2, [pc, #212]	; (80020b4 <HAL_ADC_Start_DMA+0x1d0>)
 8001fe0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fe6:	4a34      	ldr	r2, [pc, #208]	; (80020b8 <HAL_ADC_Start_DMA+0x1d4>)
 8001fe8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fee:	4a33      	ldr	r2, [pc, #204]	; (80020bc <HAL_ADC_Start_DMA+0x1d8>)
 8001ff0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001ffa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800200a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	689a      	ldr	r2, [r3, #8]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800201a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	334c      	adds	r3, #76	; 0x4c
 8002026:	4619      	mov	r1, r3
 8002028:	68ba      	ldr	r2, [r7, #8]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f000 fcce 	bl	80029cc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 031f 	and.w	r3, r3, #31
 8002038:	2b00      	cmp	r3, #0
 800203a:	d10f      	bne.n	800205c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d129      	bne.n	800209e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002058:	609a      	str	r2, [r3, #8]
 800205a:	e020      	b.n	800209e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a17      	ldr	r2, [pc, #92]	; (80020c0 <HAL_ADC_Start_DMA+0x1dc>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d11b      	bne.n	800209e <HAL_ADC_Start_DMA+0x1ba>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d114      	bne.n	800209e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	689a      	ldr	r2, [r3, #8]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	e00b      	b.n	800209e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	f043 0210 	orr.w	r2, r3, #16
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002096:	f043 0201 	orr.w	r2, r3, #1
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3718      	adds	r7, #24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	20000004 	.word	0x20000004
 80020ac:	431bde83 	.word	0x431bde83
 80020b0:	40012300 	.word	0x40012300
 80020b4:	08002549 	.word	0x08002549
 80020b8:	08002603 	.word	0x08002603
 80020bc:	0800261f 	.word	0x0800261f
 80020c0:	40012000 	.word	0x40012000

080020c4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002100:	2b01      	cmp	r3, #1
 8002102:	d101      	bne.n	8002108 <HAL_ADC_ConfigChannel+0x1c>
 8002104:	2302      	movs	r3, #2
 8002106:	e113      	b.n	8002330 <HAL_ADC_ConfigChannel+0x244>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2b09      	cmp	r3, #9
 8002116:	d925      	bls.n	8002164 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68d9      	ldr	r1, [r3, #12]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	b29b      	uxth	r3, r3
 8002124:	461a      	mov	r2, r3
 8002126:	4613      	mov	r3, r2
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	4413      	add	r3, r2
 800212c:	3b1e      	subs	r3, #30
 800212e:	2207      	movs	r2, #7
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	43da      	mvns	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	400a      	ands	r2, r1
 800213c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68d9      	ldr	r1, [r3, #12]
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	b29b      	uxth	r3, r3
 800214e:	4618      	mov	r0, r3
 8002150:	4603      	mov	r3, r0
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	4403      	add	r3, r0
 8002156:	3b1e      	subs	r3, #30
 8002158:	409a      	lsls	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	430a      	orrs	r2, r1
 8002160:	60da      	str	r2, [r3, #12]
 8002162:	e022      	b.n	80021aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6919      	ldr	r1, [r3, #16]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	b29b      	uxth	r3, r3
 8002170:	461a      	mov	r2, r3
 8002172:	4613      	mov	r3, r2
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	4413      	add	r3, r2
 8002178:	2207      	movs	r2, #7
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	43da      	mvns	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	400a      	ands	r2, r1
 8002186:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6919      	ldr	r1, [r3, #16]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	689a      	ldr	r2, [r3, #8]
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	b29b      	uxth	r3, r3
 8002198:	4618      	mov	r0, r3
 800219a:	4603      	mov	r3, r0
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	4403      	add	r3, r0
 80021a0:	409a      	lsls	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	430a      	orrs	r2, r1
 80021a8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b06      	cmp	r3, #6
 80021b0:	d824      	bhi.n	80021fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	4613      	mov	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	3b05      	subs	r3, #5
 80021c4:	221f      	movs	r2, #31
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	43da      	mvns	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	400a      	ands	r2, r1
 80021d2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	b29b      	uxth	r3, r3
 80021e0:	4618      	mov	r0, r3
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685a      	ldr	r2, [r3, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	3b05      	subs	r3, #5
 80021ee:	fa00 f203 	lsl.w	r2, r0, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	430a      	orrs	r2, r1
 80021f8:	635a      	str	r2, [r3, #52]	; 0x34
 80021fa:	e04c      	b.n	8002296 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	2b0c      	cmp	r3, #12
 8002202:	d824      	bhi.n	800224e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685a      	ldr	r2, [r3, #4]
 800220e:	4613      	mov	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4413      	add	r3, r2
 8002214:	3b23      	subs	r3, #35	; 0x23
 8002216:	221f      	movs	r2, #31
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	43da      	mvns	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	400a      	ands	r2, r1
 8002224:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	b29b      	uxth	r3, r3
 8002232:	4618      	mov	r0, r3
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685a      	ldr	r2, [r3, #4]
 8002238:	4613      	mov	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4413      	add	r3, r2
 800223e:	3b23      	subs	r3, #35	; 0x23
 8002240:	fa00 f203 	lsl.w	r2, r0, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	430a      	orrs	r2, r1
 800224a:	631a      	str	r2, [r3, #48]	; 0x30
 800224c:	e023      	b.n	8002296 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685a      	ldr	r2, [r3, #4]
 8002258:	4613      	mov	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4413      	add	r3, r2
 800225e:	3b41      	subs	r3, #65	; 0x41
 8002260:	221f      	movs	r2, #31
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	43da      	mvns	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	400a      	ands	r2, r1
 800226e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	b29b      	uxth	r3, r3
 800227c:	4618      	mov	r0, r3
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	4613      	mov	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	3b41      	subs	r3, #65	; 0x41
 800228a:	fa00 f203 	lsl.w	r2, r0, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	430a      	orrs	r2, r1
 8002294:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002296:	4b29      	ldr	r3, [pc, #164]	; (800233c <HAL_ADC_ConfigChannel+0x250>)
 8002298:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a28      	ldr	r2, [pc, #160]	; (8002340 <HAL_ADC_ConfigChannel+0x254>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d10f      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x1d8>
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2b12      	cmp	r3, #18
 80022aa:	d10b      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a1d      	ldr	r2, [pc, #116]	; (8002340 <HAL_ADC_ConfigChannel+0x254>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d12b      	bne.n	8002326 <HAL_ADC_ConfigChannel+0x23a>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a1c      	ldr	r2, [pc, #112]	; (8002344 <HAL_ADC_ConfigChannel+0x258>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d003      	beq.n	80022e0 <HAL_ADC_ConfigChannel+0x1f4>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2b11      	cmp	r3, #17
 80022de:	d122      	bne.n	8002326 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a11      	ldr	r2, [pc, #68]	; (8002344 <HAL_ADC_ConfigChannel+0x258>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d111      	bne.n	8002326 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002302:	4b11      	ldr	r3, [pc, #68]	; (8002348 <HAL_ADC_ConfigChannel+0x25c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a11      	ldr	r2, [pc, #68]	; (800234c <HAL_ADC_ConfigChannel+0x260>)
 8002308:	fba2 2303 	umull	r2, r3, r2, r3
 800230c:	0c9a      	lsrs	r2, r3, #18
 800230e:	4613      	mov	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	4413      	add	r3, r2
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002318:	e002      	b.n	8002320 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	3b01      	subs	r3, #1
 800231e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1f9      	bne.n	800231a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	40012300 	.word	0x40012300
 8002340:	40012000 	.word	0x40012000
 8002344:	10000012 	.word	0x10000012
 8002348:	20000004 	.word	0x20000004
 800234c:	431bde83 	.word	0x431bde83

08002350 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002358:	4b79      	ldr	r3, [pc, #484]	; (8002540 <ADC_Init+0x1f0>)
 800235a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	431a      	orrs	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002384:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	6859      	ldr	r1, [r3, #4]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	021a      	lsls	r2, r3, #8
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	430a      	orrs	r2, r1
 8002398:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80023a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6859      	ldr	r1, [r3, #4]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	430a      	orrs	r2, r1
 80023ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	689a      	ldr	r2, [r3, #8]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6899      	ldr	r1, [r3, #8]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68da      	ldr	r2, [r3, #12]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	430a      	orrs	r2, r1
 80023dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e2:	4a58      	ldr	r2, [pc, #352]	; (8002544 <ADC_Init+0x1f4>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d022      	beq.n	800242e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689a      	ldr	r2, [r3, #8]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6899      	ldr	r1, [r3, #8]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	430a      	orrs	r2, r1
 8002408:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002418:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6899      	ldr	r1, [r3, #8]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	430a      	orrs	r2, r1
 800242a:	609a      	str	r2, [r3, #8]
 800242c:	e00f      	b.n	800244e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800243c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800244c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 0202 	bic.w	r2, r2, #2
 800245c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6899      	ldr	r1, [r3, #8]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	7e1b      	ldrb	r3, [r3, #24]
 8002468:	005a      	lsls	r2, r3, #1
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	430a      	orrs	r2, r1
 8002470:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d01b      	beq.n	80024b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800248a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800249a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6859      	ldr	r1, [r3, #4]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a6:	3b01      	subs	r3, #1
 80024a8:	035a      	lsls	r2, r3, #13
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	605a      	str	r2, [r3, #4]
 80024b2:	e007      	b.n	80024c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	685a      	ldr	r2, [r3, #4]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80024d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	3b01      	subs	r3, #1
 80024e0:	051a      	lsls	r2, r3, #20
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	430a      	orrs	r2, r1
 80024e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80024f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6899      	ldr	r1, [r3, #8]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002506:	025a      	lsls	r2, r3, #9
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	430a      	orrs	r2, r1
 800250e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689a      	ldr	r2, [r3, #8]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800251e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6899      	ldr	r1, [r3, #8]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	029a      	lsls	r2, r3, #10
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	430a      	orrs	r2, r1
 8002532:	609a      	str	r2, [r3, #8]
}
 8002534:	bf00      	nop
 8002536:	3714      	adds	r7, #20
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	40012300 	.word	0x40012300
 8002544:	0f000001 	.word	0x0f000001

08002548 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002554:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800255e:	2b00      	cmp	r3, #0
 8002560:	d13c      	bne.n	80025dc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d12b      	bne.n	80025d4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002580:	2b00      	cmp	r3, #0
 8002582:	d127      	bne.n	80025d4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800258e:	2b00      	cmp	r3, #0
 8002590:	d006      	beq.n	80025a0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800259c:	2b00      	cmp	r3, #0
 800259e:	d119      	bne.n	80025d4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	685a      	ldr	r2, [r3, #4]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 0220 	bic.w	r2, r2, #32
 80025ae:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d105      	bne.n	80025d4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025cc:	f043 0201 	orr.w	r2, r3, #1
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	f7fe f82d 	bl	8000634 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80025da:	e00e      	b.n	80025fa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e0:	f003 0310 	and.w	r3, r3, #16
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d003      	beq.n	80025f0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80025e8:	68f8      	ldr	r0, [r7, #12]
 80025ea:	f7ff fd75 	bl	80020d8 <HAL_ADC_ErrorCallback>
}
 80025ee:	e004      	b.n	80025fa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	4798      	blx	r3
}
 80025fa:	bf00      	nop
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b084      	sub	sp, #16
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800260e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f7ff fd57 	bl	80020c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002616:	bf00      	nop
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b084      	sub	sp, #16
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2240      	movs	r2, #64	; 0x40
 8002630:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002636:	f043 0204 	orr.w	r2, r3, #4
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f7ff fd4a 	bl	80020d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002644:	bf00      	nop
 8002646:	3710      	adds	r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800265c:	4b0c      	ldr	r3, [pc, #48]	; (8002690 <__NVIC_SetPriorityGrouping+0x44>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002662:	68ba      	ldr	r2, [r7, #8]
 8002664:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002668:	4013      	ands	r3, r2
 800266a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002674:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800267c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800267e:	4a04      	ldr	r2, [pc, #16]	; (8002690 <__NVIC_SetPriorityGrouping+0x44>)
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	60d3      	str	r3, [r2, #12]
}
 8002684:	bf00      	nop
 8002686:	3714      	adds	r7, #20
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	e000ed00 	.word	0xe000ed00

08002694 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002698:	4b04      	ldr	r3, [pc, #16]	; (80026ac <__NVIC_GetPriorityGrouping+0x18>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	0a1b      	lsrs	r3, r3, #8
 800269e:	f003 0307 	and.w	r3, r3, #7
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	e000ed00 	.word	0xe000ed00

080026b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	db0b      	blt.n	80026da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026c2:	79fb      	ldrb	r3, [r7, #7]
 80026c4:	f003 021f 	and.w	r2, r3, #31
 80026c8:	4907      	ldr	r1, [pc, #28]	; (80026e8 <__NVIC_EnableIRQ+0x38>)
 80026ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ce:	095b      	lsrs	r3, r3, #5
 80026d0:	2001      	movs	r0, #1
 80026d2:	fa00 f202 	lsl.w	r2, r0, r2
 80026d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	e000e100 	.word	0xe000e100

080026ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	6039      	str	r1, [r7, #0]
 80026f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	db0a      	blt.n	8002716 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	b2da      	uxtb	r2, r3
 8002704:	490c      	ldr	r1, [pc, #48]	; (8002738 <__NVIC_SetPriority+0x4c>)
 8002706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270a:	0112      	lsls	r2, r2, #4
 800270c:	b2d2      	uxtb	r2, r2
 800270e:	440b      	add	r3, r1
 8002710:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002714:	e00a      	b.n	800272c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	b2da      	uxtb	r2, r3
 800271a:	4908      	ldr	r1, [pc, #32]	; (800273c <__NVIC_SetPriority+0x50>)
 800271c:	79fb      	ldrb	r3, [r7, #7]
 800271e:	f003 030f 	and.w	r3, r3, #15
 8002722:	3b04      	subs	r3, #4
 8002724:	0112      	lsls	r2, r2, #4
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	440b      	add	r3, r1
 800272a:	761a      	strb	r2, [r3, #24]
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	e000e100 	.word	0xe000e100
 800273c:	e000ed00 	.word	0xe000ed00

08002740 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002740:	b480      	push	{r7}
 8002742:	b089      	sub	sp, #36	; 0x24
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f1c3 0307 	rsb	r3, r3, #7
 800275a:	2b04      	cmp	r3, #4
 800275c:	bf28      	it	cs
 800275e:	2304      	movcs	r3, #4
 8002760:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	3304      	adds	r3, #4
 8002766:	2b06      	cmp	r3, #6
 8002768:	d902      	bls.n	8002770 <NVIC_EncodePriority+0x30>
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	3b03      	subs	r3, #3
 800276e:	e000      	b.n	8002772 <NVIC_EncodePriority+0x32>
 8002770:	2300      	movs	r3, #0
 8002772:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002774:	f04f 32ff 	mov.w	r2, #4294967295
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	43da      	mvns	r2, r3
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	401a      	ands	r2, r3
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002788:	f04f 31ff 	mov.w	r1, #4294967295
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	fa01 f303 	lsl.w	r3, r1, r3
 8002792:	43d9      	mvns	r1, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002798:	4313      	orrs	r3, r2
         );
}
 800279a:	4618      	mov	r0, r3
 800279c:	3724      	adds	r7, #36	; 0x24
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
	...

080027a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3b01      	subs	r3, #1
 80027b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027b8:	d301      	bcc.n	80027be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027ba:	2301      	movs	r3, #1
 80027bc:	e00f      	b.n	80027de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027be:	4a0a      	ldr	r2, [pc, #40]	; (80027e8 <SysTick_Config+0x40>)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3b01      	subs	r3, #1
 80027c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027c6:	210f      	movs	r1, #15
 80027c8:	f04f 30ff 	mov.w	r0, #4294967295
 80027cc:	f7ff ff8e 	bl	80026ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027d0:	4b05      	ldr	r3, [pc, #20]	; (80027e8 <SysTick_Config+0x40>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027d6:	4b04      	ldr	r3, [pc, #16]	; (80027e8 <SysTick_Config+0x40>)
 80027d8:	2207      	movs	r2, #7
 80027da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	e000e010 	.word	0xe000e010

080027ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f7ff ff29 	bl	800264c <__NVIC_SetPriorityGrouping>
}
 80027fa:	bf00      	nop
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002802:	b580      	push	{r7, lr}
 8002804:	b086      	sub	sp, #24
 8002806:	af00      	add	r7, sp, #0
 8002808:	4603      	mov	r3, r0
 800280a:	60b9      	str	r1, [r7, #8]
 800280c:	607a      	str	r2, [r7, #4]
 800280e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002810:	2300      	movs	r3, #0
 8002812:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002814:	f7ff ff3e 	bl	8002694 <__NVIC_GetPriorityGrouping>
 8002818:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	68b9      	ldr	r1, [r7, #8]
 800281e:	6978      	ldr	r0, [r7, #20]
 8002820:	f7ff ff8e 	bl	8002740 <NVIC_EncodePriority>
 8002824:	4602      	mov	r2, r0
 8002826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800282a:	4611      	mov	r1, r2
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff ff5d 	bl	80026ec <__NVIC_SetPriority>
}
 8002832:	bf00      	nop
 8002834:	3718      	adds	r7, #24
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b082      	sub	sp, #8
 800283e:	af00      	add	r7, sp, #0
 8002840:	4603      	mov	r3, r0
 8002842:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff ff31 	bl	80026b0 <__NVIC_EnableIRQ>
}
 800284e:	bf00      	nop
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b082      	sub	sp, #8
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f7ff ffa2 	bl	80027a8 <SysTick_Config>
 8002864:	4603      	mov	r3, r0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
	...

08002870 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002878:	2300      	movs	r3, #0
 800287a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800287c:	f7ff fabe 	bl	8001dfc <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d101      	bne.n	800288c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e099      	b.n	80029c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2202      	movs	r2, #2
 8002890:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f022 0201 	bic.w	r2, r2, #1
 80028aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028ac:	e00f      	b.n	80028ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028ae:	f7ff faa5 	bl	8001dfc <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b05      	cmp	r3, #5
 80028ba:	d908      	bls.n	80028ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2220      	movs	r2, #32
 80028c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2203      	movs	r2, #3
 80028c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e078      	b.n	80029c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1e8      	bne.n	80028ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028e4:	697a      	ldr	r2, [r7, #20]
 80028e6:	4b38      	ldr	r3, [pc, #224]	; (80029c8 <HAL_DMA_Init+0x158>)
 80028e8:	4013      	ands	r3, r2
 80028ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002906:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002912:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	4313      	orrs	r3, r2
 800291e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002924:	2b04      	cmp	r3, #4
 8002926:	d107      	bne.n	8002938 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002930:	4313      	orrs	r3, r2
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	4313      	orrs	r3, r2
 8002936:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	697a      	ldr	r2, [r7, #20]
 800293e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	f023 0307 	bic.w	r3, r3, #7
 800294e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	4313      	orrs	r3, r2
 8002958:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295e:	2b04      	cmp	r3, #4
 8002960:	d117      	bne.n	8002992 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	4313      	orrs	r3, r2
 800296a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00e      	beq.n	8002992 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 fa6f 	bl	8002e58 <DMA_CheckFifoParam>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d008      	beq.n	8002992 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2240      	movs	r2, #64	; 0x40
 8002984:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800298e:	2301      	movs	r3, #1
 8002990:	e016      	b.n	80029c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 fa26 	bl	8002dec <DMA_CalcBaseAndBitshift>
 80029a0:	4603      	mov	r3, r0
 80029a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a8:	223f      	movs	r2, #63	; 0x3f
 80029aa:	409a      	lsls	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3718      	adds	r7, #24
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	f010803f 	.word	0xf010803f

080029cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
 80029d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029da:	2300      	movs	r3, #0
 80029dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d101      	bne.n	80029f2 <HAL_DMA_Start_IT+0x26>
 80029ee:	2302      	movs	r3, #2
 80029f0:	e040      	b.n	8002a74 <HAL_DMA_Start_IT+0xa8>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d12f      	bne.n	8002a66 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2202      	movs	r2, #2
 8002a0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	68b9      	ldr	r1, [r7, #8]
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	f000 f9b8 	bl	8002d90 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a24:	223f      	movs	r2, #63	; 0x3f
 8002a26:	409a      	lsls	r2, r3
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f042 0216 	orr.w	r2, r2, #22
 8002a3a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d007      	beq.n	8002a54 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f042 0208 	orr.w	r2, r2, #8
 8002a52:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f042 0201 	orr.w	r2, r2, #1
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	e005      	b.n	8002a72 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a6e:	2302      	movs	r3, #2
 8002a70:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a72:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3718      	adds	r7, #24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a88:	4b92      	ldr	r3, [pc, #584]	; (8002cd4 <HAL_DMA_IRQHandler+0x258>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a92      	ldr	r2, [pc, #584]	; (8002cd8 <HAL_DMA_IRQHandler+0x25c>)
 8002a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a92:	0a9b      	lsrs	r3, r3, #10
 8002a94:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa6:	2208      	movs	r2, #8
 8002aa8:	409a      	lsls	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	4013      	ands	r3, r2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d01a      	beq.n	8002ae8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d013      	beq.n	8002ae8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f022 0204 	bic.w	r2, r2, #4
 8002ace:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad4:	2208      	movs	r2, #8
 8002ad6:	409a      	lsls	r2, r3
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae0:	f043 0201 	orr.w	r2, r3, #1
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aec:	2201      	movs	r2, #1
 8002aee:	409a      	lsls	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	4013      	ands	r3, r2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d012      	beq.n	8002b1e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00b      	beq.n	8002b1e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	409a      	lsls	r2, r3
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b16:	f043 0202 	orr.w	r2, r3, #2
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b22:	2204      	movs	r2, #4
 8002b24:	409a      	lsls	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d012      	beq.n	8002b54 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0302 	and.w	r3, r3, #2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00b      	beq.n	8002b54 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b40:	2204      	movs	r2, #4
 8002b42:	409a      	lsls	r2, r3
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4c:	f043 0204 	orr.w	r2, r3, #4
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b58:	2210      	movs	r2, #16
 8002b5a:	409a      	lsls	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d043      	beq.n	8002bec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0308 	and.w	r3, r3, #8
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d03c      	beq.n	8002bec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b76:	2210      	movs	r2, #16
 8002b78:	409a      	lsls	r2, r3
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d018      	beq.n	8002bbe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d108      	bne.n	8002bac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d024      	beq.n	8002bec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	4798      	blx	r3
 8002baa:	e01f      	b.n	8002bec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d01b      	beq.n	8002bec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	4798      	blx	r3
 8002bbc:	e016      	b.n	8002bec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d107      	bne.n	8002bdc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 0208 	bic.w	r2, r2, #8
 8002bda:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d003      	beq.n	8002bec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	409a      	lsls	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 808e 	beq.w	8002d1a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0310 	and.w	r3, r3, #16
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 8086 	beq.w	8002d1a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c12:	2220      	movs	r2, #32
 8002c14:	409a      	lsls	r2, r3
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b05      	cmp	r3, #5
 8002c24:	d136      	bne.n	8002c94 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 0216 	bic.w	r2, r2, #22
 8002c34:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	695a      	ldr	r2, [r3, #20]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c44:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d103      	bne.n	8002c56 <HAL_DMA_IRQHandler+0x1da>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d007      	beq.n	8002c66 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 0208 	bic.w	r2, r2, #8
 8002c64:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c6a:	223f      	movs	r2, #63	; 0x3f
 8002c6c:	409a      	lsls	r2, r3
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d07d      	beq.n	8002d86 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	4798      	blx	r3
        }
        return;
 8002c92:	e078      	b.n	8002d86 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d01c      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d108      	bne.n	8002cc2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d030      	beq.n	8002d1a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	4798      	blx	r3
 8002cc0:	e02b      	b.n	8002d1a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d027      	beq.n	8002d1a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	4798      	blx	r3
 8002cd2:	e022      	b.n	8002d1a <HAL_DMA_IRQHandler+0x29e>
 8002cd4:	20000004 	.word	0x20000004
 8002cd8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d10f      	bne.n	8002d0a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 0210 	bic.w	r2, r2, #16
 8002cf8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d003      	beq.n	8002d1a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d032      	beq.n	8002d88 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d022      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2205      	movs	r2, #5
 8002d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f022 0201 	bic.w	r2, r2, #1
 8002d44:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	60bb      	str	r3, [r7, #8]
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d307      	bcc.n	8002d62 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1f2      	bne.n	8002d46 <HAL_DMA_IRQHandler+0x2ca>
 8002d60:	e000      	b.n	8002d64 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002d62:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d005      	beq.n	8002d88 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	4798      	blx	r3
 8002d84:	e000      	b.n	8002d88 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002d86:	bf00      	nop
    }
  }
}
 8002d88:	3718      	adds	r7, #24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop

08002d90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
 8002d9c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002dac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	2b40      	cmp	r3, #64	; 0x40
 8002dbc:	d108      	bne.n	8002dd0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68ba      	ldr	r2, [r7, #8]
 8002dcc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002dce:	e007      	b.n	8002de0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68ba      	ldr	r2, [r7, #8]
 8002dd6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	60da      	str	r2, [r3, #12]
}
 8002de0:	bf00      	nop
 8002de2:	3714      	adds	r7, #20
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	3b10      	subs	r3, #16
 8002dfc:	4a14      	ldr	r2, [pc, #80]	; (8002e50 <DMA_CalcBaseAndBitshift+0x64>)
 8002dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002e02:	091b      	lsrs	r3, r3, #4
 8002e04:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e06:	4a13      	ldr	r2, [pc, #76]	; (8002e54 <DMA_CalcBaseAndBitshift+0x68>)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2b03      	cmp	r3, #3
 8002e18:	d909      	bls.n	8002e2e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e22:	f023 0303 	bic.w	r3, r3, #3
 8002e26:	1d1a      	adds	r2, r3, #4
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	659a      	str	r2, [r3, #88]	; 0x58
 8002e2c:	e007      	b.n	8002e3e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e36:	f023 0303 	bic.w	r3, r3, #3
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3714      	adds	r7, #20
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	aaaaaaab 	.word	0xaaaaaaab
 8002e54:	08006720 	.word	0x08006720

08002e58 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e60:	2300      	movs	r3, #0
 8002e62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e68:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d11f      	bne.n	8002eb2 <DMA_CheckFifoParam+0x5a>
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	2b03      	cmp	r3, #3
 8002e76:	d856      	bhi.n	8002f26 <DMA_CheckFifoParam+0xce>
 8002e78:	a201      	add	r2, pc, #4	; (adr r2, 8002e80 <DMA_CheckFifoParam+0x28>)
 8002e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e7e:	bf00      	nop
 8002e80:	08002e91 	.word	0x08002e91
 8002e84:	08002ea3 	.word	0x08002ea3
 8002e88:	08002e91 	.word	0x08002e91
 8002e8c:	08002f27 	.word	0x08002f27
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d046      	beq.n	8002f2a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ea0:	e043      	b.n	8002f2a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002eaa:	d140      	bne.n	8002f2e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eb0:	e03d      	b.n	8002f2e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eba:	d121      	bne.n	8002f00 <DMA_CheckFifoParam+0xa8>
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	2b03      	cmp	r3, #3
 8002ec0:	d837      	bhi.n	8002f32 <DMA_CheckFifoParam+0xda>
 8002ec2:	a201      	add	r2, pc, #4	; (adr r2, 8002ec8 <DMA_CheckFifoParam+0x70>)
 8002ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec8:	08002ed9 	.word	0x08002ed9
 8002ecc:	08002edf 	.word	0x08002edf
 8002ed0:	08002ed9 	.word	0x08002ed9
 8002ed4:	08002ef1 	.word	0x08002ef1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	73fb      	strb	r3, [r7, #15]
      break;
 8002edc:	e030      	b.n	8002f40 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d025      	beq.n	8002f36 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eee:	e022      	b.n	8002f36 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ef8:	d11f      	bne.n	8002f3a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002efe:	e01c      	b.n	8002f3a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d903      	bls.n	8002f0e <DMA_CheckFifoParam+0xb6>
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	2b03      	cmp	r3, #3
 8002f0a:	d003      	beq.n	8002f14 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f0c:	e018      	b.n	8002f40 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	73fb      	strb	r3, [r7, #15]
      break;
 8002f12:	e015      	b.n	8002f40 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00e      	beq.n	8002f3e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	73fb      	strb	r3, [r7, #15]
      break;
 8002f24:	e00b      	b.n	8002f3e <DMA_CheckFifoParam+0xe6>
      break;
 8002f26:	bf00      	nop
 8002f28:	e00a      	b.n	8002f40 <DMA_CheckFifoParam+0xe8>
      break;
 8002f2a:	bf00      	nop
 8002f2c:	e008      	b.n	8002f40 <DMA_CheckFifoParam+0xe8>
      break;
 8002f2e:	bf00      	nop
 8002f30:	e006      	b.n	8002f40 <DMA_CheckFifoParam+0xe8>
      break;
 8002f32:	bf00      	nop
 8002f34:	e004      	b.n	8002f40 <DMA_CheckFifoParam+0xe8>
      break;
 8002f36:	bf00      	nop
 8002f38:	e002      	b.n	8002f40 <DMA_CheckFifoParam+0xe8>
      break;   
 8002f3a:	bf00      	nop
 8002f3c:	e000      	b.n	8002f40 <DMA_CheckFifoParam+0xe8>
      break;
 8002f3e:	bf00      	nop
    }
  } 
  
  return status; 
 8002f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3714      	adds	r7, #20
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop

08002f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b089      	sub	sp, #36	; 0x24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f62:	2300      	movs	r3, #0
 8002f64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f66:	2300      	movs	r3, #0
 8002f68:	61fb      	str	r3, [r7, #28]
 8002f6a:	e159      	b.n	8003220 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	f040 8148 	bne.w	800321a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f003 0303 	and.w	r3, r3, #3
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d005      	beq.n	8002fa2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d130      	bne.n	8003004 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	2203      	movs	r2, #3
 8002fae:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb2:	43db      	mvns	r3, r3
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	68da      	ldr	r2, [r3, #12]
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fd8:	2201      	movs	r2, #1
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	091b      	lsrs	r3, r3, #4
 8002fee:	f003 0201 	and.w	r2, r3, #1
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f003 0303 	and.w	r3, r3, #3
 800300c:	2b03      	cmp	r3, #3
 800300e:	d017      	beq.n	8003040 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	2203      	movs	r2, #3
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	43db      	mvns	r3, r3
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	4013      	ands	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	4313      	orrs	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f003 0303 	and.w	r3, r3, #3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d123      	bne.n	8003094 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	08da      	lsrs	r2, r3, #3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3208      	adds	r2, #8
 8003054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003058:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	f003 0307 	and.w	r3, r3, #7
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	220f      	movs	r2, #15
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	43db      	mvns	r3, r3
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	4013      	ands	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	691a      	ldr	r2, [r3, #16]
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	4313      	orrs	r3, r2
 8003084:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	08da      	lsrs	r2, r3, #3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	3208      	adds	r2, #8
 800308e:	69b9      	ldr	r1, [r7, #24]
 8003090:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	2203      	movs	r2, #3
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	43db      	mvns	r3, r3
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	4013      	ands	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f003 0203 	and.w	r2, r3, #3
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	4313      	orrs	r3, r2
 80030c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f000 80a2 	beq.w	800321a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030d6:	2300      	movs	r3, #0
 80030d8:	60fb      	str	r3, [r7, #12]
 80030da:	4b57      	ldr	r3, [pc, #348]	; (8003238 <HAL_GPIO_Init+0x2e8>)
 80030dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030de:	4a56      	ldr	r2, [pc, #344]	; (8003238 <HAL_GPIO_Init+0x2e8>)
 80030e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030e4:	6453      	str	r3, [r2, #68]	; 0x44
 80030e6:	4b54      	ldr	r3, [pc, #336]	; (8003238 <HAL_GPIO_Init+0x2e8>)
 80030e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ee:	60fb      	str	r3, [r7, #12]
 80030f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030f2:	4a52      	ldr	r2, [pc, #328]	; (800323c <HAL_GPIO_Init+0x2ec>)
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	089b      	lsrs	r3, r3, #2
 80030f8:	3302      	adds	r3, #2
 80030fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	220f      	movs	r2, #15
 800310a:	fa02 f303 	lsl.w	r3, r2, r3
 800310e:	43db      	mvns	r3, r3
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	4013      	ands	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a49      	ldr	r2, [pc, #292]	; (8003240 <HAL_GPIO_Init+0x2f0>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d019      	beq.n	8003152 <HAL_GPIO_Init+0x202>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a48      	ldr	r2, [pc, #288]	; (8003244 <HAL_GPIO_Init+0x2f4>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d013      	beq.n	800314e <HAL_GPIO_Init+0x1fe>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a47      	ldr	r2, [pc, #284]	; (8003248 <HAL_GPIO_Init+0x2f8>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d00d      	beq.n	800314a <HAL_GPIO_Init+0x1fa>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a46      	ldr	r2, [pc, #280]	; (800324c <HAL_GPIO_Init+0x2fc>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d007      	beq.n	8003146 <HAL_GPIO_Init+0x1f6>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a45      	ldr	r2, [pc, #276]	; (8003250 <HAL_GPIO_Init+0x300>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d101      	bne.n	8003142 <HAL_GPIO_Init+0x1f2>
 800313e:	2304      	movs	r3, #4
 8003140:	e008      	b.n	8003154 <HAL_GPIO_Init+0x204>
 8003142:	2307      	movs	r3, #7
 8003144:	e006      	b.n	8003154 <HAL_GPIO_Init+0x204>
 8003146:	2303      	movs	r3, #3
 8003148:	e004      	b.n	8003154 <HAL_GPIO_Init+0x204>
 800314a:	2302      	movs	r3, #2
 800314c:	e002      	b.n	8003154 <HAL_GPIO_Init+0x204>
 800314e:	2301      	movs	r3, #1
 8003150:	e000      	b.n	8003154 <HAL_GPIO_Init+0x204>
 8003152:	2300      	movs	r3, #0
 8003154:	69fa      	ldr	r2, [r7, #28]
 8003156:	f002 0203 	and.w	r2, r2, #3
 800315a:	0092      	lsls	r2, r2, #2
 800315c:	4093      	lsls	r3, r2
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	4313      	orrs	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003164:	4935      	ldr	r1, [pc, #212]	; (800323c <HAL_GPIO_Init+0x2ec>)
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	089b      	lsrs	r3, r3, #2
 800316a:	3302      	adds	r3, #2
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003172:	4b38      	ldr	r3, [pc, #224]	; (8003254 <HAL_GPIO_Init+0x304>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	43db      	mvns	r3, r3
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	4013      	ands	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	4313      	orrs	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003196:	4a2f      	ldr	r2, [pc, #188]	; (8003254 <HAL_GPIO_Init+0x304>)
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800319c:	4b2d      	ldr	r3, [pc, #180]	; (8003254 <HAL_GPIO_Init+0x304>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	43db      	mvns	r3, r3
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	4013      	ands	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d003      	beq.n	80031c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	4313      	orrs	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031c0:	4a24      	ldr	r2, [pc, #144]	; (8003254 <HAL_GPIO_Init+0x304>)
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031c6:	4b23      	ldr	r3, [pc, #140]	; (8003254 <HAL_GPIO_Init+0x304>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	43db      	mvns	r3, r3
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	4013      	ands	r3, r2
 80031d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031ea:	4a1a      	ldr	r2, [pc, #104]	; (8003254 <HAL_GPIO_Init+0x304>)
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031f0:	4b18      	ldr	r3, [pc, #96]	; (8003254 <HAL_GPIO_Init+0x304>)
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	43db      	mvns	r3, r3
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	4013      	ands	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d003      	beq.n	8003214 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	4313      	orrs	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003214:	4a0f      	ldr	r2, [pc, #60]	; (8003254 <HAL_GPIO_Init+0x304>)
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	3301      	adds	r3, #1
 800321e:	61fb      	str	r3, [r7, #28]
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	2b0f      	cmp	r3, #15
 8003224:	f67f aea2 	bls.w	8002f6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003228:	bf00      	nop
 800322a:	bf00      	nop
 800322c:	3724      	adds	r7, #36	; 0x24
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	40023800 	.word	0x40023800
 800323c:	40013800 	.word	0x40013800
 8003240:	40020000 	.word	0x40020000
 8003244:	40020400 	.word	0x40020400
 8003248:	40020800 	.word	0x40020800
 800324c:	40020c00 	.word	0x40020c00
 8003250:	40021000 	.word	0x40021000
 8003254:	40013c00 	.word	0x40013c00

08003258 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	460b      	mov	r3, r1
 8003262:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	691a      	ldr	r2, [r3, #16]
 8003268:	887b      	ldrh	r3, [r7, #2]
 800326a:	4013      	ands	r3, r2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d002      	beq.n	8003276 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003270:	2301      	movs	r3, #1
 8003272:	73fb      	strb	r3, [r7, #15]
 8003274:	e001      	b.n	800327a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003276:	2300      	movs	r3, #0
 8003278:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800327a:	7bfb      	ldrb	r3, [r7, #15]
}
 800327c:	4618      	mov	r0, r3
 800327e:	3714      	adds	r7, #20
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	460b      	mov	r3, r1
 8003292:	807b      	strh	r3, [r7, #2]
 8003294:	4613      	mov	r3, r2
 8003296:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003298:	787b      	ldrb	r3, [r7, #1]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d003      	beq.n	80032a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800329e:	887a      	ldrh	r2, [r7, #2]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032a4:	e003      	b.n	80032ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032a6:	887b      	ldrh	r3, [r7, #2]
 80032a8:	041a      	lsls	r2, r3, #16
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	619a      	str	r2, [r3, #24]
}
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
	...

080032bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e12b      	b.n	8003526 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d106      	bne.n	80032e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7fe fa58 	bl	8001798 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2224      	movs	r2, #36	; 0x24
 80032ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 0201 	bic.w	r2, r2, #1
 80032fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800330e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800331e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003320:	f001 f976 	bl	8004610 <HAL_RCC_GetPCLK1Freq>
 8003324:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	4a81      	ldr	r2, [pc, #516]	; (8003530 <HAL_I2C_Init+0x274>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d807      	bhi.n	8003340 <HAL_I2C_Init+0x84>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	4a80      	ldr	r2, [pc, #512]	; (8003534 <HAL_I2C_Init+0x278>)
 8003334:	4293      	cmp	r3, r2
 8003336:	bf94      	ite	ls
 8003338:	2301      	movls	r3, #1
 800333a:	2300      	movhi	r3, #0
 800333c:	b2db      	uxtb	r3, r3
 800333e:	e006      	b.n	800334e <HAL_I2C_Init+0x92>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	4a7d      	ldr	r2, [pc, #500]	; (8003538 <HAL_I2C_Init+0x27c>)
 8003344:	4293      	cmp	r3, r2
 8003346:	bf94      	ite	ls
 8003348:	2301      	movls	r3, #1
 800334a:	2300      	movhi	r3, #0
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e0e7      	b.n	8003526 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	4a78      	ldr	r2, [pc, #480]	; (800353c <HAL_I2C_Init+0x280>)
 800335a:	fba2 2303 	umull	r2, r3, r2, r3
 800335e:	0c9b      	lsrs	r3, r3, #18
 8003360:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	430a      	orrs	r2, r1
 8003374:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	4a6a      	ldr	r2, [pc, #424]	; (8003530 <HAL_I2C_Init+0x274>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d802      	bhi.n	8003390 <HAL_I2C_Init+0xd4>
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	3301      	adds	r3, #1
 800338e:	e009      	b.n	80033a4 <HAL_I2C_Init+0xe8>
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003396:	fb02 f303 	mul.w	r3, r2, r3
 800339a:	4a69      	ldr	r2, [pc, #420]	; (8003540 <HAL_I2C_Init+0x284>)
 800339c:	fba2 2303 	umull	r2, r3, r2, r3
 80033a0:	099b      	lsrs	r3, r3, #6
 80033a2:	3301      	adds	r3, #1
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	6812      	ldr	r2, [r2, #0]
 80033a8:	430b      	orrs	r3, r1
 80033aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80033b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	495c      	ldr	r1, [pc, #368]	; (8003530 <HAL_I2C_Init+0x274>)
 80033c0:	428b      	cmp	r3, r1
 80033c2:	d819      	bhi.n	80033f8 <HAL_I2C_Init+0x13c>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	1e59      	subs	r1, r3, #1
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80033d2:	1c59      	adds	r1, r3, #1
 80033d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80033d8:	400b      	ands	r3, r1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00a      	beq.n	80033f4 <HAL_I2C_Init+0x138>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	1e59      	subs	r1, r3, #1
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80033ec:	3301      	adds	r3, #1
 80033ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033f2:	e051      	b.n	8003498 <HAL_I2C_Init+0x1dc>
 80033f4:	2304      	movs	r3, #4
 80033f6:	e04f      	b.n	8003498 <HAL_I2C_Init+0x1dc>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d111      	bne.n	8003424 <HAL_I2C_Init+0x168>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	1e58      	subs	r0, r3, #1
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6859      	ldr	r1, [r3, #4]
 8003408:	460b      	mov	r3, r1
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	440b      	add	r3, r1
 800340e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003412:	3301      	adds	r3, #1
 8003414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003418:	2b00      	cmp	r3, #0
 800341a:	bf0c      	ite	eq
 800341c:	2301      	moveq	r3, #1
 800341e:	2300      	movne	r3, #0
 8003420:	b2db      	uxtb	r3, r3
 8003422:	e012      	b.n	800344a <HAL_I2C_Init+0x18e>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	1e58      	subs	r0, r3, #1
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6859      	ldr	r1, [r3, #4]
 800342c:	460b      	mov	r3, r1
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	440b      	add	r3, r1
 8003432:	0099      	lsls	r1, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	fbb0 f3f3 	udiv	r3, r0, r3
 800343a:	3301      	adds	r3, #1
 800343c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003440:	2b00      	cmp	r3, #0
 8003442:	bf0c      	ite	eq
 8003444:	2301      	moveq	r3, #1
 8003446:	2300      	movne	r3, #0
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <HAL_I2C_Init+0x196>
 800344e:	2301      	movs	r3, #1
 8003450:	e022      	b.n	8003498 <HAL_I2C_Init+0x1dc>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10e      	bne.n	8003478 <HAL_I2C_Init+0x1bc>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	1e58      	subs	r0, r3, #1
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6859      	ldr	r1, [r3, #4]
 8003462:	460b      	mov	r3, r1
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	440b      	add	r3, r1
 8003468:	fbb0 f3f3 	udiv	r3, r0, r3
 800346c:	3301      	adds	r3, #1
 800346e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003472:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003476:	e00f      	b.n	8003498 <HAL_I2C_Init+0x1dc>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	1e58      	subs	r0, r3, #1
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6859      	ldr	r1, [r3, #4]
 8003480:	460b      	mov	r3, r1
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	440b      	add	r3, r1
 8003486:	0099      	lsls	r1, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	fbb0 f3f3 	udiv	r3, r0, r3
 800348e:	3301      	adds	r3, #1
 8003490:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003494:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	6809      	ldr	r1, [r1, #0]
 800349c:	4313      	orrs	r3, r2
 800349e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	69da      	ldr	r2, [r3, #28]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	431a      	orrs	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	430a      	orrs	r2, r1
 80034ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80034c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6911      	ldr	r1, [r2, #16]
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	68d2      	ldr	r2, [r2, #12]
 80034d2:	4311      	orrs	r1, r2
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	6812      	ldr	r2, [r2, #0]
 80034d8:	430b      	orrs	r3, r1
 80034da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	695a      	ldr	r2, [r3, #20]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	431a      	orrs	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	430a      	orrs	r2, r1
 80034f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f042 0201 	orr.w	r2, r2, #1
 8003506:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2220      	movs	r2, #32
 8003512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	000186a0 	.word	0x000186a0
 8003534:	001e847f 	.word	0x001e847f
 8003538:	003d08ff 	.word	0x003d08ff
 800353c:	431bde83 	.word	0x431bde83
 8003540:	10624dd3 	.word	0x10624dd3

08003544 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b088      	sub	sp, #32
 8003548:	af02      	add	r7, sp, #8
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	4608      	mov	r0, r1
 800354e:	4611      	mov	r1, r2
 8003550:	461a      	mov	r2, r3
 8003552:	4603      	mov	r3, r0
 8003554:	817b      	strh	r3, [r7, #10]
 8003556:	460b      	mov	r3, r1
 8003558:	813b      	strh	r3, [r7, #8]
 800355a:	4613      	mov	r3, r2
 800355c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800355e:	f7fe fc4d 	bl	8001dfc <HAL_GetTick>
 8003562:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b20      	cmp	r3, #32
 800356e:	f040 80d9 	bne.w	8003724 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	2319      	movs	r3, #25
 8003578:	2201      	movs	r2, #1
 800357a:	496d      	ldr	r1, [pc, #436]	; (8003730 <HAL_I2C_Mem_Write+0x1ec>)
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f000 fa9f 	bl	8003ac0 <I2C_WaitOnFlagUntilTimeout>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003588:	2302      	movs	r3, #2
 800358a:	e0cc      	b.n	8003726 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003592:	2b01      	cmp	r3, #1
 8003594:	d101      	bne.n	800359a <HAL_I2C_Mem_Write+0x56>
 8003596:	2302      	movs	r3, #2
 8003598:	e0c5      	b.n	8003726 <HAL_I2C_Mem_Write+0x1e2>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d007      	beq.n	80035c0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f042 0201 	orr.w	r2, r2, #1
 80035be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2221      	movs	r2, #33	; 0x21
 80035d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2240      	movs	r2, #64	; 0x40
 80035dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6a3a      	ldr	r2, [r7, #32]
 80035ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80035f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	4a4d      	ldr	r2, [pc, #308]	; (8003734 <HAL_I2C_Mem_Write+0x1f0>)
 8003600:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003602:	88f8      	ldrh	r0, [r7, #6]
 8003604:	893a      	ldrh	r2, [r7, #8]
 8003606:	8979      	ldrh	r1, [r7, #10]
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	9301      	str	r3, [sp, #4]
 800360c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	4603      	mov	r3, r0
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f000 f9be 	bl	8003994 <I2C_RequestMemoryWrite>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d052      	beq.n	80036c4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e081      	b.n	8003726 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	f000 fb20 	bl	8003c6c <I2C_WaitOnTXEFlagUntilTimeout>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00d      	beq.n	800364e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	2b04      	cmp	r3, #4
 8003638:	d107      	bne.n	800364a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003648:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e06b      	b.n	8003726 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003652:	781a      	ldrb	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365e:	1c5a      	adds	r2, r3, #1
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003668:	3b01      	subs	r3, #1
 800366a:	b29a      	uxth	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003674:	b29b      	uxth	r3, r3
 8003676:	3b01      	subs	r3, #1
 8003678:	b29a      	uxth	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	2b04      	cmp	r3, #4
 800368a:	d11b      	bne.n	80036c4 <HAL_I2C_Mem_Write+0x180>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003690:	2b00      	cmp	r3, #0
 8003692:	d017      	beq.n	80036c4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	781a      	ldrb	r2, [r3, #0]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a4:	1c5a      	adds	r2, r3, #1
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ae:	3b01      	subs	r3, #1
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	3b01      	subs	r3, #1
 80036be:	b29a      	uxth	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1aa      	bne.n	8003622 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036cc:	697a      	ldr	r2, [r7, #20]
 80036ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f000 fb0c 	bl	8003cee <I2C_WaitOnBTFFlagUntilTimeout>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00d      	beq.n	80036f8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e0:	2b04      	cmp	r3, #4
 80036e2:	d107      	bne.n	80036f4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036f2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e016      	b.n	8003726 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003706:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2220      	movs	r2, #32
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003720:	2300      	movs	r3, #0
 8003722:	e000      	b.n	8003726 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003724:	2302      	movs	r3, #2
  }
}
 8003726:	4618      	mov	r0, r3
 8003728:	3718      	adds	r7, #24
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	00100002 	.word	0x00100002
 8003734:	ffff0000 	.word	0xffff0000

08003738 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b08a      	sub	sp, #40	; 0x28
 800373c:	af02      	add	r7, sp, #8
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	607a      	str	r2, [r7, #4]
 8003742:	603b      	str	r3, [r7, #0]
 8003744:	460b      	mov	r3, r1
 8003746:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003748:	f7fe fb58 	bl	8001dfc <HAL_GetTick>
 800374c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800374e:	2301      	movs	r3, #1
 8003750:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b20      	cmp	r3, #32
 800375c:	f040 8111 	bne.w	8003982 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	9300      	str	r3, [sp, #0]
 8003764:	2319      	movs	r3, #25
 8003766:	2201      	movs	r2, #1
 8003768:	4988      	ldr	r1, [pc, #544]	; (800398c <HAL_I2C_IsDeviceReady+0x254>)
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f000 f9a8 	bl	8003ac0 <I2C_WaitOnFlagUntilTimeout>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003776:	2302      	movs	r3, #2
 8003778:	e104      	b.n	8003984 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003780:	2b01      	cmp	r3, #1
 8003782:	d101      	bne.n	8003788 <HAL_I2C_IsDeviceReady+0x50>
 8003784:	2302      	movs	r3, #2
 8003786:	e0fd      	b.n	8003984 <HAL_I2C_IsDeviceReady+0x24c>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b01      	cmp	r3, #1
 800379c:	d007      	beq.n	80037ae <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f042 0201 	orr.w	r2, r2, #1
 80037ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2224      	movs	r2, #36	; 0x24
 80037c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	4a70      	ldr	r2, [pc, #448]	; (8003990 <HAL_I2C_IsDeviceReady+0x258>)
 80037d0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037e0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f000 f966 	bl	8003ac0 <I2C_WaitOnFlagUntilTimeout>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00d      	beq.n	8003816 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003804:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003808:	d103      	bne.n	8003812 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003810:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e0b6      	b.n	8003984 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003816:	897b      	ldrh	r3, [r7, #10]
 8003818:	b2db      	uxtb	r3, r3
 800381a:	461a      	mov	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003824:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003826:	f7fe fae9 	bl	8001dfc <HAL_GetTick>
 800382a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b02      	cmp	r3, #2
 8003838:	bf0c      	ite	eq
 800383a:	2301      	moveq	r3, #1
 800383c:	2300      	movne	r3, #0
 800383e:	b2db      	uxtb	r3, r3
 8003840:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	695b      	ldr	r3, [r3, #20]
 8003848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800384c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003850:	bf0c      	ite	eq
 8003852:	2301      	moveq	r3, #1
 8003854:	2300      	movne	r3, #0
 8003856:	b2db      	uxtb	r3, r3
 8003858:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800385a:	e025      	b.n	80038a8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800385c:	f7fe face 	bl	8001dfc <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	429a      	cmp	r2, r3
 800386a:	d302      	bcc.n	8003872 <HAL_I2C_IsDeviceReady+0x13a>
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d103      	bne.n	800387a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	22a0      	movs	r2, #160	; 0xa0
 8003876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b02      	cmp	r3, #2
 8003886:	bf0c      	ite	eq
 8003888:	2301      	moveq	r3, #1
 800388a:	2300      	movne	r3, #0
 800388c:	b2db      	uxtb	r3, r3
 800388e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800389a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800389e:	bf0c      	ite	eq
 80038a0:	2301      	moveq	r3, #1
 80038a2:	2300      	movne	r3, #0
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	2ba0      	cmp	r3, #160	; 0xa0
 80038b2:	d005      	beq.n	80038c0 <HAL_I2C_IsDeviceReady+0x188>
 80038b4:	7dfb      	ldrb	r3, [r7, #23]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d102      	bne.n	80038c0 <HAL_I2C_IsDeviceReady+0x188>
 80038ba:	7dbb      	ldrb	r3, [r7, #22]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d0cd      	beq.n	800385c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2220      	movs	r2, #32
 80038c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d129      	bne.n	800392a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038e4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038e6:	2300      	movs	r3, #0
 80038e8:	613b      	str	r3, [r7, #16]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	613b      	str	r3, [r7, #16]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	613b      	str	r3, [r7, #16]
 80038fa:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	9300      	str	r3, [sp, #0]
 8003900:	2319      	movs	r3, #25
 8003902:	2201      	movs	r2, #1
 8003904:	4921      	ldr	r1, [pc, #132]	; (800398c <HAL_I2C_IsDeviceReady+0x254>)
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f000 f8da 	bl	8003ac0 <I2C_WaitOnFlagUntilTimeout>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e036      	b.n	8003984 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2220      	movs	r2, #32
 800391a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003926:	2300      	movs	r3, #0
 8003928:	e02c      	b.n	8003984 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003938:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003942:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	2319      	movs	r3, #25
 800394a:	2201      	movs	r2, #1
 800394c:	490f      	ldr	r1, [pc, #60]	; (800398c <HAL_I2C_IsDeviceReady+0x254>)
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f000 f8b6 	bl	8003ac0 <I2C_WaitOnFlagUntilTimeout>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e012      	b.n	8003984 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	3301      	adds	r3, #1
 8003962:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	429a      	cmp	r2, r3
 800396a:	f4ff af32 	bcc.w	80037d2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2220      	movs	r2, #32
 8003972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e000      	b.n	8003984 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003982:	2302      	movs	r3, #2
  }
}
 8003984:	4618      	mov	r0, r3
 8003986:	3720      	adds	r7, #32
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	00100002 	.word	0x00100002
 8003990:	ffff0000 	.word	0xffff0000

08003994 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b088      	sub	sp, #32
 8003998:	af02      	add	r7, sp, #8
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	4608      	mov	r0, r1
 800399e:	4611      	mov	r1, r2
 80039a0:	461a      	mov	r2, r3
 80039a2:	4603      	mov	r3, r0
 80039a4:	817b      	strh	r3, [r7, #10]
 80039a6:	460b      	mov	r3, r1
 80039a8:	813b      	strh	r3, [r7, #8]
 80039aa:	4613      	mov	r3, r2
 80039ac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f000 f878 	bl	8003ac0 <I2C_WaitOnFlagUntilTimeout>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00d      	beq.n	80039f2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039e4:	d103      	bne.n	80039ee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e05f      	b.n	8003ab2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039f2:	897b      	ldrh	r3, [r7, #10]
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	461a      	mov	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a00:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a04:	6a3a      	ldr	r2, [r7, #32]
 8003a06:	492d      	ldr	r1, [pc, #180]	; (8003abc <I2C_RequestMemoryWrite+0x128>)
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	f000 f8b0 	bl	8003b6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d001      	beq.n	8003a18 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e04c      	b.n	8003ab2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a18:	2300      	movs	r3, #0
 8003a1a:	617b      	str	r3, [r7, #20]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	617b      	str	r3, [r7, #20]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	617b      	str	r3, [r7, #20]
 8003a2c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a30:	6a39      	ldr	r1, [r7, #32]
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f000 f91a 	bl	8003c6c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00d      	beq.n	8003a5a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	2b04      	cmp	r3, #4
 8003a44:	d107      	bne.n	8003a56 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a54:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e02b      	b.n	8003ab2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a5a:	88fb      	ldrh	r3, [r7, #6]
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d105      	bne.n	8003a6c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a60:	893b      	ldrh	r3, [r7, #8]
 8003a62:	b2da      	uxtb	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	611a      	str	r2, [r3, #16]
 8003a6a:	e021      	b.n	8003ab0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a6c:	893b      	ldrh	r3, [r7, #8]
 8003a6e:	0a1b      	lsrs	r3, r3, #8
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	b2da      	uxtb	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a7c:	6a39      	ldr	r1, [r7, #32]
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f000 f8f4 	bl	8003c6c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00d      	beq.n	8003aa6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8e:	2b04      	cmp	r3, #4
 8003a90:	d107      	bne.n	8003aa2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aa0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e005      	b.n	8003ab2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003aa6:	893b      	ldrh	r3, [r7, #8]
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3718      	adds	r7, #24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	00010002 	.word	0x00010002

08003ac0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	603b      	str	r3, [r7, #0]
 8003acc:	4613      	mov	r3, r2
 8003ace:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ad0:	e025      	b.n	8003b1e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad8:	d021      	beq.n	8003b1e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ada:	f7fe f98f 	bl	8001dfc <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d302      	bcc.n	8003af0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d116      	bne.n	8003b1e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2220      	movs	r2, #32
 8003afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	f043 0220 	orr.w	r2, r3, #32
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e023      	b.n	8003b66 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	0c1b      	lsrs	r3, r3, #16
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d10d      	bne.n	8003b44 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	43da      	mvns	r2, r3
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	4013      	ands	r3, r2
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	bf0c      	ite	eq
 8003b3a:	2301      	moveq	r3, #1
 8003b3c:	2300      	movne	r3, #0
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	461a      	mov	r2, r3
 8003b42:	e00c      	b.n	8003b5e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	43da      	mvns	r2, r3
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	4013      	ands	r3, r2
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	bf0c      	ite	eq
 8003b56:	2301      	moveq	r3, #1
 8003b58:	2300      	movne	r3, #0
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	79fb      	ldrb	r3, [r7, #7]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d0b6      	beq.n	8003ad2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b084      	sub	sp, #16
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	60f8      	str	r0, [r7, #12]
 8003b76:	60b9      	str	r1, [r7, #8]
 8003b78:	607a      	str	r2, [r7, #4]
 8003b7a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b7c:	e051      	b.n	8003c22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b8c:	d123      	bne.n	8003bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b9c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ba6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	f043 0204 	orr.w	r2, r3, #4
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e046      	b.n	8003c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bdc:	d021      	beq.n	8003c22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bde:	f7fe f90d 	bl	8001dfc <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d302      	bcc.n	8003bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d116      	bne.n	8003c22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2220      	movs	r2, #32
 8003bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	f043 0220 	orr.w	r2, r3, #32
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e020      	b.n	8003c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	0c1b      	lsrs	r3, r3, #16
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d10c      	bne.n	8003c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	43da      	mvns	r2, r3
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	4013      	ands	r3, r2
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	bf14      	ite	ne
 8003c3e:	2301      	movne	r3, #1
 8003c40:	2300      	moveq	r3, #0
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	e00b      	b.n	8003c5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	43da      	mvns	r2, r3
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	4013      	ands	r3, r2
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	bf14      	ite	ne
 8003c58:	2301      	movne	r3, #1
 8003c5a:	2300      	moveq	r3, #0
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d18d      	bne.n	8003b7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c78:	e02d      	b.n	8003cd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 f878 	bl	8003d70 <I2C_IsAcknowledgeFailed>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e02d      	b.n	8003ce6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c90:	d021      	beq.n	8003cd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c92:	f7fe f8b3 	bl	8001dfc <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d302      	bcc.n	8003ca8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d116      	bne.n	8003cd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	f043 0220 	orr.w	r2, r3, #32
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e007      	b.n	8003ce6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce0:	2b80      	cmp	r3, #128	; 0x80
 8003ce2:	d1ca      	bne.n	8003c7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b084      	sub	sp, #16
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	60f8      	str	r0, [r7, #12]
 8003cf6:	60b9      	str	r1, [r7, #8]
 8003cf8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003cfa:	e02d      	b.n	8003d58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f000 f837 	bl	8003d70 <I2C_IsAcknowledgeFailed>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d001      	beq.n	8003d0c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e02d      	b.n	8003d68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d12:	d021      	beq.n	8003d58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d14:	f7fe f872 	bl	8001dfc <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d302      	bcc.n	8003d2a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d116      	bne.n	8003d58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2220      	movs	r2, #32
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d44:	f043 0220 	orr.w	r2, r3, #32
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e007      	b.n	8003d68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	f003 0304 	and.w	r3, r3, #4
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	d1ca      	bne.n	8003cfc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d86:	d11b      	bne.n	8003dc0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d90:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dac:	f043 0204 	orr.w	r2, r3, #4
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e000      	b.n	8003dc2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
	...

08003dd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e264      	b.n	80042ac <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d075      	beq.n	8003eda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dee:	4ba3      	ldr	r3, [pc, #652]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f003 030c 	and.w	r3, r3, #12
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d00c      	beq.n	8003e14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dfa:	4ba0      	ldr	r3, [pc, #640]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e02:	2b08      	cmp	r3, #8
 8003e04:	d112      	bne.n	8003e2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e06:	4b9d      	ldr	r3, [pc, #628]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e12:	d10b      	bne.n	8003e2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e14:	4b99      	ldr	r3, [pc, #612]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d05b      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x108>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d157      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e23f      	b.n	80042ac <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e34:	d106      	bne.n	8003e44 <HAL_RCC_OscConfig+0x74>
 8003e36:	4b91      	ldr	r3, [pc, #580]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a90      	ldr	r2, [pc, #576]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	e01d      	b.n	8003e80 <HAL_RCC_OscConfig+0xb0>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e4c:	d10c      	bne.n	8003e68 <HAL_RCC_OscConfig+0x98>
 8003e4e:	4b8b      	ldr	r3, [pc, #556]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a8a      	ldr	r2, [pc, #552]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e58:	6013      	str	r3, [r2, #0]
 8003e5a:	4b88      	ldr	r3, [pc, #544]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a87      	ldr	r2, [pc, #540]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e64:	6013      	str	r3, [r2, #0]
 8003e66:	e00b      	b.n	8003e80 <HAL_RCC_OscConfig+0xb0>
 8003e68:	4b84      	ldr	r3, [pc, #528]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a83      	ldr	r2, [pc, #524]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e72:	6013      	str	r3, [r2, #0]
 8003e74:	4b81      	ldr	r3, [pc, #516]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a80      	ldr	r2, [pc, #512]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d013      	beq.n	8003eb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e88:	f7fd ffb8 	bl	8001dfc <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e90:	f7fd ffb4 	bl	8001dfc <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b64      	cmp	r3, #100	; 0x64
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e204      	b.n	80042ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ea2:	4b76      	ldr	r3, [pc, #472]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d0f0      	beq.n	8003e90 <HAL_RCC_OscConfig+0xc0>
 8003eae:	e014      	b.n	8003eda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb0:	f7fd ffa4 	bl	8001dfc <HAL_GetTick>
 8003eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eb6:	e008      	b.n	8003eca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003eb8:	f7fd ffa0 	bl	8001dfc <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b64      	cmp	r3, #100	; 0x64
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e1f0      	b.n	80042ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eca:	4b6c      	ldr	r3, [pc, #432]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1f0      	bne.n	8003eb8 <HAL_RCC_OscConfig+0xe8>
 8003ed6:	e000      	b.n	8003eda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d063      	beq.n	8003fae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ee6:	4b65      	ldr	r3, [pc, #404]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 030c 	and.w	r3, r3, #12
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00b      	beq.n	8003f0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ef2:	4b62      	ldr	r3, [pc, #392]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003efa:	2b08      	cmp	r3, #8
 8003efc:	d11c      	bne.n	8003f38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003efe:	4b5f      	ldr	r3, [pc, #380]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d116      	bne.n	8003f38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f0a:	4b5c      	ldr	r3, [pc, #368]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d005      	beq.n	8003f22 <HAL_RCC_OscConfig+0x152>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d001      	beq.n	8003f22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e1c4      	b.n	80042ac <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f22:	4b56      	ldr	r3, [pc, #344]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	4952      	ldr	r1, [pc, #328]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f36:	e03a      	b.n	8003fae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d020      	beq.n	8003f82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f40:	4b4f      	ldr	r3, [pc, #316]	; (8004080 <HAL_RCC_OscConfig+0x2b0>)
 8003f42:	2201      	movs	r2, #1
 8003f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f46:	f7fd ff59 	bl	8001dfc <HAL_GetTick>
 8003f4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f4c:	e008      	b.n	8003f60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f4e:	f7fd ff55 	bl	8001dfc <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e1a5      	b.n	80042ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f60:	4b46      	ldr	r3, [pc, #280]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d0f0      	beq.n	8003f4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f6c:	4b43      	ldr	r3, [pc, #268]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	00db      	lsls	r3, r3, #3
 8003f7a:	4940      	ldr	r1, [pc, #256]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	600b      	str	r3, [r1, #0]
 8003f80:	e015      	b.n	8003fae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f82:	4b3f      	ldr	r3, [pc, #252]	; (8004080 <HAL_RCC_OscConfig+0x2b0>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f88:	f7fd ff38 	bl	8001dfc <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f90:	f7fd ff34 	bl	8001dfc <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e184      	b.n	80042ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fa2:	4b36      	ldr	r3, [pc, #216]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1f0      	bne.n	8003f90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0308 	and.w	r3, r3, #8
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d030      	beq.n	800401c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d016      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fc2:	4b30      	ldr	r3, [pc, #192]	; (8004084 <HAL_RCC_OscConfig+0x2b4>)
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc8:	f7fd ff18 	bl	8001dfc <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fd0:	f7fd ff14 	bl	8001dfc <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e164      	b.n	80042ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fe2:	4b26      	ldr	r3, [pc, #152]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003fe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0f0      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x200>
 8003fee:	e015      	b.n	800401c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ff0:	4b24      	ldr	r3, [pc, #144]	; (8004084 <HAL_RCC_OscConfig+0x2b4>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ff6:	f7fd ff01 	bl	8001dfc <HAL_GetTick>
 8003ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ffc:	e008      	b.n	8004010 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ffe:	f7fd fefd 	bl	8001dfc <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b02      	cmp	r3, #2
 800400a:	d901      	bls.n	8004010 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e14d      	b.n	80042ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004010:	4b1a      	ldr	r3, [pc, #104]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8004012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004014:	f003 0302 	and.w	r3, r3, #2
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1f0      	bne.n	8003ffe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0304 	and.w	r3, r3, #4
 8004024:	2b00      	cmp	r3, #0
 8004026:	f000 80a0 	beq.w	800416a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800402a:	2300      	movs	r3, #0
 800402c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800402e:	4b13      	ldr	r3, [pc, #76]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8004030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10f      	bne.n	800405a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800403a:	2300      	movs	r3, #0
 800403c:	60bb      	str	r3, [r7, #8]
 800403e:	4b0f      	ldr	r3, [pc, #60]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	4a0e      	ldr	r2, [pc, #56]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8004044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004048:	6413      	str	r3, [r2, #64]	; 0x40
 800404a:	4b0c      	ldr	r3, [pc, #48]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 800404c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004052:	60bb      	str	r3, [r7, #8]
 8004054:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004056:	2301      	movs	r3, #1
 8004058:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800405a:	4b0b      	ldr	r3, [pc, #44]	; (8004088 <HAL_RCC_OscConfig+0x2b8>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004062:	2b00      	cmp	r3, #0
 8004064:	d121      	bne.n	80040aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004066:	4b08      	ldr	r3, [pc, #32]	; (8004088 <HAL_RCC_OscConfig+0x2b8>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a07      	ldr	r2, [pc, #28]	; (8004088 <HAL_RCC_OscConfig+0x2b8>)
 800406c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004070:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004072:	f7fd fec3 	bl	8001dfc <HAL_GetTick>
 8004076:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004078:	e011      	b.n	800409e <HAL_RCC_OscConfig+0x2ce>
 800407a:	bf00      	nop
 800407c:	40023800 	.word	0x40023800
 8004080:	42470000 	.word	0x42470000
 8004084:	42470e80 	.word	0x42470e80
 8004088:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800408c:	f7fd feb6 	bl	8001dfc <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b02      	cmp	r3, #2
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e106      	b.n	80042ac <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800409e:	4b85      	ldr	r3, [pc, #532]	; (80042b4 <HAL_RCC_OscConfig+0x4e4>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d0f0      	beq.n	800408c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d106      	bne.n	80040c0 <HAL_RCC_OscConfig+0x2f0>
 80040b2:	4b81      	ldr	r3, [pc, #516]	; (80042b8 <HAL_RCC_OscConfig+0x4e8>)
 80040b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b6:	4a80      	ldr	r2, [pc, #512]	; (80042b8 <HAL_RCC_OscConfig+0x4e8>)
 80040b8:	f043 0301 	orr.w	r3, r3, #1
 80040bc:	6713      	str	r3, [r2, #112]	; 0x70
 80040be:	e01c      	b.n	80040fa <HAL_RCC_OscConfig+0x32a>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	2b05      	cmp	r3, #5
 80040c6:	d10c      	bne.n	80040e2 <HAL_RCC_OscConfig+0x312>
 80040c8:	4b7b      	ldr	r3, [pc, #492]	; (80042b8 <HAL_RCC_OscConfig+0x4e8>)
 80040ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040cc:	4a7a      	ldr	r2, [pc, #488]	; (80042b8 <HAL_RCC_OscConfig+0x4e8>)
 80040ce:	f043 0304 	orr.w	r3, r3, #4
 80040d2:	6713      	str	r3, [r2, #112]	; 0x70
 80040d4:	4b78      	ldr	r3, [pc, #480]	; (80042b8 <HAL_RCC_OscConfig+0x4e8>)
 80040d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d8:	4a77      	ldr	r2, [pc, #476]	; (80042b8 <HAL_RCC_OscConfig+0x4e8>)
 80040da:	f043 0301 	orr.w	r3, r3, #1
 80040de:	6713      	str	r3, [r2, #112]	; 0x70
 80040e0:	e00b      	b.n	80040fa <HAL_RCC_OscConfig+0x32a>
 80040e2:	4b75      	ldr	r3, [pc, #468]	; (80042b8 <HAL_RCC_OscConfig+0x4e8>)
 80040e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e6:	4a74      	ldr	r2, [pc, #464]	; (80042b8 <HAL_RCC_OscConfig+0x4e8>)
 80040e8:	f023 0301 	bic.w	r3, r3, #1
 80040ec:	6713      	str	r3, [r2, #112]	; 0x70
 80040ee:	4b72      	ldr	r3, [pc, #456]	; (80042b8 <HAL_RCC_OscConfig+0x4e8>)
 80040f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f2:	4a71      	ldr	r2, [pc, #452]	; (80042b8 <HAL_RCC_OscConfig+0x4e8>)
 80040f4:	f023 0304 	bic.w	r3, r3, #4
 80040f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d015      	beq.n	800412e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004102:	f7fd fe7b 	bl	8001dfc <HAL_GetTick>
 8004106:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004108:	e00a      	b.n	8004120 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800410a:	f7fd fe77 	bl	8001dfc <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	f241 3288 	movw	r2, #5000	; 0x1388
 8004118:	4293      	cmp	r3, r2
 800411a:	d901      	bls.n	8004120 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e0c5      	b.n	80042ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004120:	4b65      	ldr	r3, [pc, #404]	; (80042b8 <HAL_RCC_OscConfig+0x4e8>)
 8004122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d0ee      	beq.n	800410a <HAL_RCC_OscConfig+0x33a>
 800412c:	e014      	b.n	8004158 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800412e:	f7fd fe65 	bl	8001dfc <HAL_GetTick>
 8004132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004134:	e00a      	b.n	800414c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004136:	f7fd fe61 	bl	8001dfc <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	f241 3288 	movw	r2, #5000	; 0x1388
 8004144:	4293      	cmp	r3, r2
 8004146:	d901      	bls.n	800414c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e0af      	b.n	80042ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800414c:	4b5a      	ldr	r3, [pc, #360]	; (80042b8 <HAL_RCC_OscConfig+0x4e8>)
 800414e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1ee      	bne.n	8004136 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004158:	7dfb      	ldrb	r3, [r7, #23]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d105      	bne.n	800416a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800415e:	4b56      	ldr	r3, [pc, #344]	; (80042b8 <HAL_RCC_OscConfig+0x4e8>)
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	4a55      	ldr	r2, [pc, #340]	; (80042b8 <HAL_RCC_OscConfig+0x4e8>)
 8004164:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004168:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	2b00      	cmp	r3, #0
 8004170:	f000 809b 	beq.w	80042aa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004174:	4b50      	ldr	r3, [pc, #320]	; (80042b8 <HAL_RCC_OscConfig+0x4e8>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f003 030c 	and.w	r3, r3, #12
 800417c:	2b08      	cmp	r3, #8
 800417e:	d05c      	beq.n	800423a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	2b02      	cmp	r3, #2
 8004186:	d141      	bne.n	800420c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004188:	4b4c      	ldr	r3, [pc, #304]	; (80042bc <HAL_RCC_OscConfig+0x4ec>)
 800418a:	2200      	movs	r2, #0
 800418c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800418e:	f7fd fe35 	bl	8001dfc <HAL_GetTick>
 8004192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004194:	e008      	b.n	80041a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004196:	f7fd fe31 	bl	8001dfc <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d901      	bls.n	80041a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e081      	b.n	80042ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041a8:	4b43      	ldr	r3, [pc, #268]	; (80042b8 <HAL_RCC_OscConfig+0x4e8>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1f0      	bne.n	8004196 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	69da      	ldr	r2, [r3, #28]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a1b      	ldr	r3, [r3, #32]
 80041bc:	431a      	orrs	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	019b      	lsls	r3, r3, #6
 80041c4:	431a      	orrs	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ca:	085b      	lsrs	r3, r3, #1
 80041cc:	3b01      	subs	r3, #1
 80041ce:	041b      	lsls	r3, r3, #16
 80041d0:	431a      	orrs	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d6:	061b      	lsls	r3, r3, #24
 80041d8:	4937      	ldr	r1, [pc, #220]	; (80042b8 <HAL_RCC_OscConfig+0x4e8>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041de:	4b37      	ldr	r3, [pc, #220]	; (80042bc <HAL_RCC_OscConfig+0x4ec>)
 80041e0:	2201      	movs	r2, #1
 80041e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e4:	f7fd fe0a 	bl	8001dfc <HAL_GetTick>
 80041e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ea:	e008      	b.n	80041fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041ec:	f7fd fe06 	bl	8001dfc <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e056      	b.n	80042ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041fe:	4b2e      	ldr	r3, [pc, #184]	; (80042b8 <HAL_RCC_OscConfig+0x4e8>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d0f0      	beq.n	80041ec <HAL_RCC_OscConfig+0x41c>
 800420a:	e04e      	b.n	80042aa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800420c:	4b2b      	ldr	r3, [pc, #172]	; (80042bc <HAL_RCC_OscConfig+0x4ec>)
 800420e:	2200      	movs	r2, #0
 8004210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004212:	f7fd fdf3 	bl	8001dfc <HAL_GetTick>
 8004216:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004218:	e008      	b.n	800422c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800421a:	f7fd fdef 	bl	8001dfc <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d901      	bls.n	800422c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e03f      	b.n	80042ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800422c:	4b22      	ldr	r3, [pc, #136]	; (80042b8 <HAL_RCC_OscConfig+0x4e8>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1f0      	bne.n	800421a <HAL_RCC_OscConfig+0x44a>
 8004238:	e037      	b.n	80042aa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d101      	bne.n	8004246 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e032      	b.n	80042ac <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004246:	4b1c      	ldr	r3, [pc, #112]	; (80042b8 <HAL_RCC_OscConfig+0x4e8>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d028      	beq.n	80042a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800425e:	429a      	cmp	r2, r3
 8004260:	d121      	bne.n	80042a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800426c:	429a      	cmp	r2, r3
 800426e:	d11a      	bne.n	80042a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004276:	4013      	ands	r3, r2
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800427c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800427e:	4293      	cmp	r3, r2
 8004280:	d111      	bne.n	80042a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428c:	085b      	lsrs	r3, r3, #1
 800428e:	3b01      	subs	r3, #1
 8004290:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004292:	429a      	cmp	r2, r3
 8004294:	d107      	bne.n	80042a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d001      	beq.n	80042aa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e000      	b.n	80042ac <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3718      	adds	r7, #24
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	40007000 	.word	0x40007000
 80042b8:	40023800 	.word	0x40023800
 80042bc:	42470060 	.word	0x42470060

080042c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d101      	bne.n	80042d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e0cc      	b.n	800446e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042d4:	4b68      	ldr	r3, [pc, #416]	; (8004478 <HAL_RCC_ClockConfig+0x1b8>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0307 	and.w	r3, r3, #7
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d90c      	bls.n	80042fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042e2:	4b65      	ldr	r3, [pc, #404]	; (8004478 <HAL_RCC_ClockConfig+0x1b8>)
 80042e4:	683a      	ldr	r2, [r7, #0]
 80042e6:	b2d2      	uxtb	r2, r2
 80042e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ea:	4b63      	ldr	r3, [pc, #396]	; (8004478 <HAL_RCC_ClockConfig+0x1b8>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0307 	and.w	r3, r3, #7
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d001      	beq.n	80042fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e0b8      	b.n	800446e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d020      	beq.n	800434a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b00      	cmp	r3, #0
 8004312:	d005      	beq.n	8004320 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004314:	4b59      	ldr	r3, [pc, #356]	; (800447c <HAL_RCC_ClockConfig+0x1bc>)
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	4a58      	ldr	r2, [pc, #352]	; (800447c <HAL_RCC_ClockConfig+0x1bc>)
 800431a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800431e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0308 	and.w	r3, r3, #8
 8004328:	2b00      	cmp	r3, #0
 800432a:	d005      	beq.n	8004338 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800432c:	4b53      	ldr	r3, [pc, #332]	; (800447c <HAL_RCC_ClockConfig+0x1bc>)
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	4a52      	ldr	r2, [pc, #328]	; (800447c <HAL_RCC_ClockConfig+0x1bc>)
 8004332:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004336:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004338:	4b50      	ldr	r3, [pc, #320]	; (800447c <HAL_RCC_ClockConfig+0x1bc>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	494d      	ldr	r1, [pc, #308]	; (800447c <HAL_RCC_ClockConfig+0x1bc>)
 8004346:	4313      	orrs	r3, r2
 8004348:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	2b00      	cmp	r3, #0
 8004354:	d044      	beq.n	80043e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d107      	bne.n	800436e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800435e:	4b47      	ldr	r3, [pc, #284]	; (800447c <HAL_RCC_ClockConfig+0x1bc>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d119      	bne.n	800439e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e07f      	b.n	800446e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	2b02      	cmp	r3, #2
 8004374:	d003      	beq.n	800437e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800437a:	2b03      	cmp	r3, #3
 800437c:	d107      	bne.n	800438e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800437e:	4b3f      	ldr	r3, [pc, #252]	; (800447c <HAL_RCC_ClockConfig+0x1bc>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d109      	bne.n	800439e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e06f      	b.n	800446e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800438e:	4b3b      	ldr	r3, [pc, #236]	; (800447c <HAL_RCC_ClockConfig+0x1bc>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e067      	b.n	800446e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800439e:	4b37      	ldr	r3, [pc, #220]	; (800447c <HAL_RCC_ClockConfig+0x1bc>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f023 0203 	bic.w	r2, r3, #3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	4934      	ldr	r1, [pc, #208]	; (800447c <HAL_RCC_ClockConfig+0x1bc>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043b0:	f7fd fd24 	bl	8001dfc <HAL_GetTick>
 80043b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043b6:	e00a      	b.n	80043ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043b8:	f7fd fd20 	bl	8001dfc <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e04f      	b.n	800446e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ce:	4b2b      	ldr	r3, [pc, #172]	; (800447c <HAL_RCC_ClockConfig+0x1bc>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f003 020c 	and.w	r2, r3, #12
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	429a      	cmp	r2, r3
 80043de:	d1eb      	bne.n	80043b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043e0:	4b25      	ldr	r3, [pc, #148]	; (8004478 <HAL_RCC_ClockConfig+0x1b8>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0307 	and.w	r3, r3, #7
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d20c      	bcs.n	8004408 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ee:	4b22      	ldr	r3, [pc, #136]	; (8004478 <HAL_RCC_ClockConfig+0x1b8>)
 80043f0:	683a      	ldr	r2, [r7, #0]
 80043f2:	b2d2      	uxtb	r2, r2
 80043f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043f6:	4b20      	ldr	r3, [pc, #128]	; (8004478 <HAL_RCC_ClockConfig+0x1b8>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0307 	and.w	r3, r3, #7
 80043fe:	683a      	ldr	r2, [r7, #0]
 8004400:	429a      	cmp	r2, r3
 8004402:	d001      	beq.n	8004408 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e032      	b.n	800446e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0304 	and.w	r3, r3, #4
 8004410:	2b00      	cmp	r3, #0
 8004412:	d008      	beq.n	8004426 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004414:	4b19      	ldr	r3, [pc, #100]	; (800447c <HAL_RCC_ClockConfig+0x1bc>)
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	4916      	ldr	r1, [pc, #88]	; (800447c <HAL_RCC_ClockConfig+0x1bc>)
 8004422:	4313      	orrs	r3, r2
 8004424:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0308 	and.w	r3, r3, #8
 800442e:	2b00      	cmp	r3, #0
 8004430:	d009      	beq.n	8004446 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004432:	4b12      	ldr	r3, [pc, #72]	; (800447c <HAL_RCC_ClockConfig+0x1bc>)
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	00db      	lsls	r3, r3, #3
 8004440:	490e      	ldr	r1, [pc, #56]	; (800447c <HAL_RCC_ClockConfig+0x1bc>)
 8004442:	4313      	orrs	r3, r2
 8004444:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004446:	f000 f821 	bl	800448c <HAL_RCC_GetSysClockFreq>
 800444a:	4602      	mov	r2, r0
 800444c:	4b0b      	ldr	r3, [pc, #44]	; (800447c <HAL_RCC_ClockConfig+0x1bc>)
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	091b      	lsrs	r3, r3, #4
 8004452:	f003 030f 	and.w	r3, r3, #15
 8004456:	490a      	ldr	r1, [pc, #40]	; (8004480 <HAL_RCC_ClockConfig+0x1c0>)
 8004458:	5ccb      	ldrb	r3, [r1, r3]
 800445a:	fa22 f303 	lsr.w	r3, r2, r3
 800445e:	4a09      	ldr	r2, [pc, #36]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 8004460:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004462:	4b09      	ldr	r3, [pc, #36]	; (8004488 <HAL_RCC_ClockConfig+0x1c8>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4618      	mov	r0, r3
 8004468:	f7fd fc84 	bl	8001d74 <HAL_InitTick>

  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3710      	adds	r7, #16
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	40023c00 	.word	0x40023c00
 800447c:	40023800 	.word	0x40023800
 8004480:	08006708 	.word	0x08006708
 8004484:	20000004 	.word	0x20000004
 8004488:	20000008 	.word	0x20000008

0800448c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800448c:	b5b0      	push	{r4, r5, r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004492:	2100      	movs	r1, #0
 8004494:	6079      	str	r1, [r7, #4]
 8004496:	2100      	movs	r1, #0
 8004498:	60f9      	str	r1, [r7, #12]
 800449a:	2100      	movs	r1, #0
 800449c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800449e:	2100      	movs	r1, #0
 80044a0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044a2:	4952      	ldr	r1, [pc, #328]	; (80045ec <HAL_RCC_GetSysClockFreq+0x160>)
 80044a4:	6889      	ldr	r1, [r1, #8]
 80044a6:	f001 010c 	and.w	r1, r1, #12
 80044aa:	2908      	cmp	r1, #8
 80044ac:	d00d      	beq.n	80044ca <HAL_RCC_GetSysClockFreq+0x3e>
 80044ae:	2908      	cmp	r1, #8
 80044b0:	f200 8094 	bhi.w	80045dc <HAL_RCC_GetSysClockFreq+0x150>
 80044b4:	2900      	cmp	r1, #0
 80044b6:	d002      	beq.n	80044be <HAL_RCC_GetSysClockFreq+0x32>
 80044b8:	2904      	cmp	r1, #4
 80044ba:	d003      	beq.n	80044c4 <HAL_RCC_GetSysClockFreq+0x38>
 80044bc:	e08e      	b.n	80045dc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044be:	4b4c      	ldr	r3, [pc, #304]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x164>)
 80044c0:	60bb      	str	r3, [r7, #8]
       break;
 80044c2:	e08e      	b.n	80045e2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044c4:	4b4b      	ldr	r3, [pc, #300]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x168>)
 80044c6:	60bb      	str	r3, [r7, #8]
      break;
 80044c8:	e08b      	b.n	80045e2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044ca:	4948      	ldr	r1, [pc, #288]	; (80045ec <HAL_RCC_GetSysClockFreq+0x160>)
 80044cc:	6849      	ldr	r1, [r1, #4]
 80044ce:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80044d2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044d4:	4945      	ldr	r1, [pc, #276]	; (80045ec <HAL_RCC_GetSysClockFreq+0x160>)
 80044d6:	6849      	ldr	r1, [r1, #4]
 80044d8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80044dc:	2900      	cmp	r1, #0
 80044de:	d024      	beq.n	800452a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044e0:	4942      	ldr	r1, [pc, #264]	; (80045ec <HAL_RCC_GetSysClockFreq+0x160>)
 80044e2:	6849      	ldr	r1, [r1, #4]
 80044e4:	0989      	lsrs	r1, r1, #6
 80044e6:	4608      	mov	r0, r1
 80044e8:	f04f 0100 	mov.w	r1, #0
 80044ec:	f240 14ff 	movw	r4, #511	; 0x1ff
 80044f0:	f04f 0500 	mov.w	r5, #0
 80044f4:	ea00 0204 	and.w	r2, r0, r4
 80044f8:	ea01 0305 	and.w	r3, r1, r5
 80044fc:	493d      	ldr	r1, [pc, #244]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x168>)
 80044fe:	fb01 f003 	mul.w	r0, r1, r3
 8004502:	2100      	movs	r1, #0
 8004504:	fb01 f102 	mul.w	r1, r1, r2
 8004508:	1844      	adds	r4, r0, r1
 800450a:	493a      	ldr	r1, [pc, #232]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x168>)
 800450c:	fba2 0101 	umull	r0, r1, r2, r1
 8004510:	1863      	adds	r3, r4, r1
 8004512:	4619      	mov	r1, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	461a      	mov	r2, r3
 8004518:	f04f 0300 	mov.w	r3, #0
 800451c:	f7fb feb0 	bl	8000280 <__aeabi_uldivmod>
 8004520:	4602      	mov	r2, r0
 8004522:	460b      	mov	r3, r1
 8004524:	4613      	mov	r3, r2
 8004526:	60fb      	str	r3, [r7, #12]
 8004528:	e04a      	b.n	80045c0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800452a:	4b30      	ldr	r3, [pc, #192]	; (80045ec <HAL_RCC_GetSysClockFreq+0x160>)
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	099b      	lsrs	r3, r3, #6
 8004530:	461a      	mov	r2, r3
 8004532:	f04f 0300 	mov.w	r3, #0
 8004536:	f240 10ff 	movw	r0, #511	; 0x1ff
 800453a:	f04f 0100 	mov.w	r1, #0
 800453e:	ea02 0400 	and.w	r4, r2, r0
 8004542:	ea03 0501 	and.w	r5, r3, r1
 8004546:	4620      	mov	r0, r4
 8004548:	4629      	mov	r1, r5
 800454a:	f04f 0200 	mov.w	r2, #0
 800454e:	f04f 0300 	mov.w	r3, #0
 8004552:	014b      	lsls	r3, r1, #5
 8004554:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004558:	0142      	lsls	r2, r0, #5
 800455a:	4610      	mov	r0, r2
 800455c:	4619      	mov	r1, r3
 800455e:	1b00      	subs	r0, r0, r4
 8004560:	eb61 0105 	sbc.w	r1, r1, r5
 8004564:	f04f 0200 	mov.w	r2, #0
 8004568:	f04f 0300 	mov.w	r3, #0
 800456c:	018b      	lsls	r3, r1, #6
 800456e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004572:	0182      	lsls	r2, r0, #6
 8004574:	1a12      	subs	r2, r2, r0
 8004576:	eb63 0301 	sbc.w	r3, r3, r1
 800457a:	f04f 0000 	mov.w	r0, #0
 800457e:	f04f 0100 	mov.w	r1, #0
 8004582:	00d9      	lsls	r1, r3, #3
 8004584:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004588:	00d0      	lsls	r0, r2, #3
 800458a:	4602      	mov	r2, r0
 800458c:	460b      	mov	r3, r1
 800458e:	1912      	adds	r2, r2, r4
 8004590:	eb45 0303 	adc.w	r3, r5, r3
 8004594:	f04f 0000 	mov.w	r0, #0
 8004598:	f04f 0100 	mov.w	r1, #0
 800459c:	0299      	lsls	r1, r3, #10
 800459e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80045a2:	0290      	lsls	r0, r2, #10
 80045a4:	4602      	mov	r2, r0
 80045a6:	460b      	mov	r3, r1
 80045a8:	4610      	mov	r0, r2
 80045aa:	4619      	mov	r1, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	461a      	mov	r2, r3
 80045b0:	f04f 0300 	mov.w	r3, #0
 80045b4:	f7fb fe64 	bl	8000280 <__aeabi_uldivmod>
 80045b8:	4602      	mov	r2, r0
 80045ba:	460b      	mov	r3, r1
 80045bc:	4613      	mov	r3, r2
 80045be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045c0:	4b0a      	ldr	r3, [pc, #40]	; (80045ec <HAL_RCC_GetSysClockFreq+0x160>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	0c1b      	lsrs	r3, r3, #16
 80045c6:	f003 0303 	and.w	r3, r3, #3
 80045ca:	3301      	adds	r3, #1
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d8:	60bb      	str	r3, [r7, #8]
      break;
 80045da:	e002      	b.n	80045e2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045dc:	4b04      	ldr	r3, [pc, #16]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x164>)
 80045de:	60bb      	str	r3, [r7, #8]
      break;
 80045e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045e2:	68bb      	ldr	r3, [r7, #8]
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3710      	adds	r7, #16
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bdb0      	pop	{r4, r5, r7, pc}
 80045ec:	40023800 	.word	0x40023800
 80045f0:	00f42400 	.word	0x00f42400
 80045f4:	017d7840 	.word	0x017d7840

080045f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045f8:	b480      	push	{r7}
 80045fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045fc:	4b03      	ldr	r3, [pc, #12]	; (800460c <HAL_RCC_GetHCLKFreq+0x14>)
 80045fe:	681b      	ldr	r3, [r3, #0]
}
 8004600:	4618      	mov	r0, r3
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	20000004 	.word	0x20000004

08004610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004614:	f7ff fff0 	bl	80045f8 <HAL_RCC_GetHCLKFreq>
 8004618:	4602      	mov	r2, r0
 800461a:	4b05      	ldr	r3, [pc, #20]	; (8004630 <HAL_RCC_GetPCLK1Freq+0x20>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	0a9b      	lsrs	r3, r3, #10
 8004620:	f003 0307 	and.w	r3, r3, #7
 8004624:	4903      	ldr	r1, [pc, #12]	; (8004634 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004626:	5ccb      	ldrb	r3, [r1, r3]
 8004628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800462c:	4618      	mov	r0, r3
 800462e:	bd80      	pop	{r7, pc}
 8004630:	40023800 	.word	0x40023800
 8004634:	08006718 	.word	0x08006718

08004638 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800463c:	f7ff ffdc 	bl	80045f8 <HAL_RCC_GetHCLKFreq>
 8004640:	4602      	mov	r2, r0
 8004642:	4b05      	ldr	r3, [pc, #20]	; (8004658 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	0b5b      	lsrs	r3, r3, #13
 8004648:	f003 0307 	and.w	r3, r3, #7
 800464c:	4903      	ldr	r1, [pc, #12]	; (800465c <HAL_RCC_GetPCLK2Freq+0x24>)
 800464e:	5ccb      	ldrb	r3, [r1, r3]
 8004650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004654:	4618      	mov	r0, r3
 8004656:	bd80      	pop	{r7, pc}
 8004658:	40023800 	.word	0x40023800
 800465c:	08006718 	.word	0x08006718

08004660 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e041      	b.n	80046f6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b00      	cmp	r3, #0
 800467c:	d106      	bne.n	800468c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f7fd f914 	bl	80018b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2202      	movs	r2, #2
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	3304      	adds	r3, #4
 800469c:	4619      	mov	r1, r3
 800469e:	4610      	mov	r0, r2
 80046a0:	f000 fa46 	bl	8004b30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3708      	adds	r7, #8
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
	...

08004700 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d109      	bne.n	8004724 <HAL_TIM_PWM_Start+0x24>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b01      	cmp	r3, #1
 800471a:	bf14      	ite	ne
 800471c:	2301      	movne	r3, #1
 800471e:	2300      	moveq	r3, #0
 8004720:	b2db      	uxtb	r3, r3
 8004722:	e022      	b.n	800476a <HAL_TIM_PWM_Start+0x6a>
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	2b04      	cmp	r3, #4
 8004728:	d109      	bne.n	800473e <HAL_TIM_PWM_Start+0x3e>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b01      	cmp	r3, #1
 8004734:	bf14      	ite	ne
 8004736:	2301      	movne	r3, #1
 8004738:	2300      	moveq	r3, #0
 800473a:	b2db      	uxtb	r3, r3
 800473c:	e015      	b.n	800476a <HAL_TIM_PWM_Start+0x6a>
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	2b08      	cmp	r3, #8
 8004742:	d109      	bne.n	8004758 <HAL_TIM_PWM_Start+0x58>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b01      	cmp	r3, #1
 800474e:	bf14      	ite	ne
 8004750:	2301      	movne	r3, #1
 8004752:	2300      	moveq	r3, #0
 8004754:	b2db      	uxtb	r3, r3
 8004756:	e008      	b.n	800476a <HAL_TIM_PWM_Start+0x6a>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800475e:	b2db      	uxtb	r3, r3
 8004760:	2b01      	cmp	r3, #1
 8004762:	bf14      	ite	ne
 8004764:	2301      	movne	r3, #1
 8004766:	2300      	moveq	r3, #0
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d001      	beq.n	8004772 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e068      	b.n	8004844 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d104      	bne.n	8004782 <HAL_TIM_PWM_Start+0x82>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2202      	movs	r2, #2
 800477c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004780:	e013      	b.n	80047aa <HAL_TIM_PWM_Start+0xaa>
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	2b04      	cmp	r3, #4
 8004786:	d104      	bne.n	8004792 <HAL_TIM_PWM_Start+0x92>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2202      	movs	r2, #2
 800478c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004790:	e00b      	b.n	80047aa <HAL_TIM_PWM_Start+0xaa>
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2b08      	cmp	r3, #8
 8004796:	d104      	bne.n	80047a2 <HAL_TIM_PWM_Start+0xa2>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2202      	movs	r2, #2
 800479c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047a0:	e003      	b.n	80047aa <HAL_TIM_PWM_Start+0xaa>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2202      	movs	r2, #2
 80047a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2201      	movs	r2, #1
 80047b0:	6839      	ldr	r1, [r7, #0]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 fbc8 	bl	8004f48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a23      	ldr	r2, [pc, #140]	; (800484c <HAL_TIM_PWM_Start+0x14c>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d107      	bne.n	80047d2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a1d      	ldr	r2, [pc, #116]	; (800484c <HAL_TIM_PWM_Start+0x14c>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d018      	beq.n	800480e <HAL_TIM_PWM_Start+0x10e>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047e4:	d013      	beq.n	800480e <HAL_TIM_PWM_Start+0x10e>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a19      	ldr	r2, [pc, #100]	; (8004850 <HAL_TIM_PWM_Start+0x150>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d00e      	beq.n	800480e <HAL_TIM_PWM_Start+0x10e>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a17      	ldr	r2, [pc, #92]	; (8004854 <HAL_TIM_PWM_Start+0x154>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d009      	beq.n	800480e <HAL_TIM_PWM_Start+0x10e>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a16      	ldr	r2, [pc, #88]	; (8004858 <HAL_TIM_PWM_Start+0x158>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d004      	beq.n	800480e <HAL_TIM_PWM_Start+0x10e>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a14      	ldr	r2, [pc, #80]	; (800485c <HAL_TIM_PWM_Start+0x15c>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d111      	bne.n	8004832 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f003 0307 	and.w	r3, r3, #7
 8004818:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2b06      	cmp	r3, #6
 800481e:	d010      	beq.n	8004842 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f042 0201 	orr.w	r2, r2, #1
 800482e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004830:	e007      	b.n	8004842 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f042 0201 	orr.w	r2, r2, #1
 8004840:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3710      	adds	r7, #16
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	40010000 	.word	0x40010000
 8004850:	40000400 	.word	0x40000400
 8004854:	40000800 	.word	0x40000800
 8004858:	40000c00 	.word	0x40000c00
 800485c:	40014000 	.word	0x40014000

08004860 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b086      	sub	sp, #24
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d101      	bne.n	8004874 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e097      	b.n	80049a4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800487a:	b2db      	uxtb	r3, r3
 800487c:	2b00      	cmp	r3, #0
 800487e:	d106      	bne.n	800488e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f7fd f84b 	bl	8001924 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2202      	movs	r2, #2
 8004892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	6812      	ldr	r2, [r2, #0]
 80048a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048a4:	f023 0307 	bic.w	r3, r3, #7
 80048a8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	3304      	adds	r3, #4
 80048b2:	4619      	mov	r1, r3
 80048b4:	4610      	mov	r0, r2
 80048b6:	f000 f93b 	bl	8004b30 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	6a1b      	ldr	r3, [r3, #32]
 80048d0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	4313      	orrs	r3, r2
 80048da:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048e2:	f023 0303 	bic.w	r3, r3, #3
 80048e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	689a      	ldr	r2, [r3, #8]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	021b      	lsls	r3, r3, #8
 80048f2:	4313      	orrs	r3, r2
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004900:	f023 030c 	bic.w	r3, r3, #12
 8004904:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800490c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004910:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	68da      	ldr	r2, [r3, #12]
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	69db      	ldr	r3, [r3, #28]
 800491a:	021b      	lsls	r3, r3, #8
 800491c:	4313      	orrs	r3, r2
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	4313      	orrs	r3, r2
 8004922:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	011a      	lsls	r2, r3, #4
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	031b      	lsls	r3, r3, #12
 8004930:	4313      	orrs	r3, r2
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	4313      	orrs	r3, r2
 8004936:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800493e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004946:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	685a      	ldr	r2, [r3, #4]
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	695b      	ldr	r3, [r3, #20]
 8004950:	011b      	lsls	r3, r3, #4
 8004952:	4313      	orrs	r3, r2
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	4313      	orrs	r3, r2
 8004958:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2201      	movs	r2, #1
 800498e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2201      	movs	r2, #1
 8004996:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3718      	adds	r7, #24
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b086      	sub	sp, #24
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049b8:	2300      	movs	r3, #0
 80049ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d101      	bne.n	80049ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80049c6:	2302      	movs	r3, #2
 80049c8:	e0ae      	b.n	8004b28 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2b0c      	cmp	r3, #12
 80049d6:	f200 809f 	bhi.w	8004b18 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80049da:	a201      	add	r2, pc, #4	; (adr r2, 80049e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80049dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e0:	08004a15 	.word	0x08004a15
 80049e4:	08004b19 	.word	0x08004b19
 80049e8:	08004b19 	.word	0x08004b19
 80049ec:	08004b19 	.word	0x08004b19
 80049f0:	08004a55 	.word	0x08004a55
 80049f4:	08004b19 	.word	0x08004b19
 80049f8:	08004b19 	.word	0x08004b19
 80049fc:	08004b19 	.word	0x08004b19
 8004a00:	08004a97 	.word	0x08004a97
 8004a04:	08004b19 	.word	0x08004b19
 8004a08:	08004b19 	.word	0x08004b19
 8004a0c:	08004b19 	.word	0x08004b19
 8004a10:	08004ad7 	.word	0x08004ad7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68b9      	ldr	r1, [r7, #8]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f000 f908 	bl	8004c30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	699a      	ldr	r2, [r3, #24]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f042 0208 	orr.w	r2, r2, #8
 8004a2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	699a      	ldr	r2, [r3, #24]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f022 0204 	bic.w	r2, r2, #4
 8004a3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	6999      	ldr	r1, [r3, #24]
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	691a      	ldr	r2, [r3, #16]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	619a      	str	r2, [r3, #24]
      break;
 8004a52:	e064      	b.n	8004b1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68b9      	ldr	r1, [r7, #8]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f000 f94e 	bl	8004cfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	699a      	ldr	r2, [r3, #24]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	699a      	ldr	r2, [r3, #24]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6999      	ldr	r1, [r3, #24]
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	021a      	lsls	r2, r3, #8
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	430a      	orrs	r2, r1
 8004a92:	619a      	str	r2, [r3, #24]
      break;
 8004a94:	e043      	b.n	8004b1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68b9      	ldr	r1, [r7, #8]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f000 f999 	bl	8004dd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	69da      	ldr	r2, [r3, #28]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f042 0208 	orr.w	r2, r2, #8
 8004ab0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	69da      	ldr	r2, [r3, #28]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f022 0204 	bic.w	r2, r2, #4
 8004ac0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	69d9      	ldr	r1, [r3, #28]
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	691a      	ldr	r2, [r3, #16]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	61da      	str	r2, [r3, #28]
      break;
 8004ad4:	e023      	b.n	8004b1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68b9      	ldr	r1, [r7, #8]
 8004adc:	4618      	mov	r0, r3
 8004ade:	f000 f9e3 	bl	8004ea8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	69da      	ldr	r2, [r3, #28]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004af0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	69da      	ldr	r2, [r3, #28]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	69d9      	ldr	r1, [r3, #28]
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	021a      	lsls	r2, r3, #8
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	61da      	str	r2, [r3, #28]
      break;
 8004b16:	e002      	b.n	8004b1e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	75fb      	strb	r3, [r7, #23]
      break;
 8004b1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b26:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3718      	adds	r7, #24
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a34      	ldr	r2, [pc, #208]	; (8004c14 <TIM_Base_SetConfig+0xe4>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d00f      	beq.n	8004b68 <TIM_Base_SetConfig+0x38>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b4e:	d00b      	beq.n	8004b68 <TIM_Base_SetConfig+0x38>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a31      	ldr	r2, [pc, #196]	; (8004c18 <TIM_Base_SetConfig+0xe8>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d007      	beq.n	8004b68 <TIM_Base_SetConfig+0x38>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a30      	ldr	r2, [pc, #192]	; (8004c1c <TIM_Base_SetConfig+0xec>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d003      	beq.n	8004b68 <TIM_Base_SetConfig+0x38>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a2f      	ldr	r2, [pc, #188]	; (8004c20 <TIM_Base_SetConfig+0xf0>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d108      	bne.n	8004b7a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a25      	ldr	r2, [pc, #148]	; (8004c14 <TIM_Base_SetConfig+0xe4>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d01b      	beq.n	8004bba <TIM_Base_SetConfig+0x8a>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b88:	d017      	beq.n	8004bba <TIM_Base_SetConfig+0x8a>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a22      	ldr	r2, [pc, #136]	; (8004c18 <TIM_Base_SetConfig+0xe8>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d013      	beq.n	8004bba <TIM_Base_SetConfig+0x8a>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a21      	ldr	r2, [pc, #132]	; (8004c1c <TIM_Base_SetConfig+0xec>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d00f      	beq.n	8004bba <TIM_Base_SetConfig+0x8a>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a20      	ldr	r2, [pc, #128]	; (8004c20 <TIM_Base_SetConfig+0xf0>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d00b      	beq.n	8004bba <TIM_Base_SetConfig+0x8a>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a1f      	ldr	r2, [pc, #124]	; (8004c24 <TIM_Base_SetConfig+0xf4>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d007      	beq.n	8004bba <TIM_Base_SetConfig+0x8a>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a1e      	ldr	r2, [pc, #120]	; (8004c28 <TIM_Base_SetConfig+0xf8>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d003      	beq.n	8004bba <TIM_Base_SetConfig+0x8a>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a1d      	ldr	r2, [pc, #116]	; (8004c2c <TIM_Base_SetConfig+0xfc>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d108      	bne.n	8004bcc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	689a      	ldr	r2, [r3, #8]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a08      	ldr	r2, [pc, #32]	; (8004c14 <TIM_Base_SetConfig+0xe4>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d103      	bne.n	8004c00 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	691a      	ldr	r2, [r3, #16]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	615a      	str	r2, [r3, #20]
}
 8004c06:	bf00      	nop
 8004c08:	3714      	adds	r7, #20
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	40010000 	.word	0x40010000
 8004c18:	40000400 	.word	0x40000400
 8004c1c:	40000800 	.word	0x40000800
 8004c20:	40000c00 	.word	0x40000c00
 8004c24:	40014000 	.word	0x40014000
 8004c28:	40014400 	.word	0x40014400
 8004c2c:	40014800 	.word	0x40014800

08004c30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b087      	sub	sp, #28
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	f023 0201 	bic.w	r2, r3, #1
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f023 0303 	bic.w	r3, r3, #3
 8004c66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	f023 0302 	bic.w	r3, r3, #2
 8004c78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a1c      	ldr	r2, [pc, #112]	; (8004cf8 <TIM_OC1_SetConfig+0xc8>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d10c      	bne.n	8004ca6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	f023 0308 	bic.w	r3, r3, #8
 8004c92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	f023 0304 	bic.w	r3, r3, #4
 8004ca4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a13      	ldr	r2, [pc, #76]	; (8004cf8 <TIM_OC1_SetConfig+0xc8>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d111      	bne.n	8004cd2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004cbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	693a      	ldr	r2, [r7, #16]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	685a      	ldr	r2, [r3, #4]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	697a      	ldr	r2, [r7, #20]
 8004cea:	621a      	str	r2, [r3, #32]
}
 8004cec:	bf00      	nop
 8004cee:	371c      	adds	r7, #28
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr
 8004cf8:	40010000 	.word	0x40010000

08004cfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b087      	sub	sp, #28
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	f023 0210 	bic.w	r2, r3, #16
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a1b      	ldr	r3, [r3, #32]
 8004d16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	021b      	lsls	r3, r3, #8
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	f023 0320 	bic.w	r3, r3, #32
 8004d46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	011b      	lsls	r3, r3, #4
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a1e      	ldr	r2, [pc, #120]	; (8004dd0 <TIM_OC2_SetConfig+0xd4>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d10d      	bne.n	8004d78 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	011b      	lsls	r3, r3, #4
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a15      	ldr	r2, [pc, #84]	; (8004dd0 <TIM_OC2_SetConfig+0xd4>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d113      	bne.n	8004da8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	693a      	ldr	r2, [r7, #16]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	685a      	ldr	r2, [r3, #4]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	697a      	ldr	r2, [r7, #20]
 8004dc0:	621a      	str	r2, [r3, #32]
}
 8004dc2:	bf00      	nop
 8004dc4:	371c      	adds	r7, #28
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	40010000 	.word	0x40010000

08004dd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b087      	sub	sp, #28
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	69db      	ldr	r3, [r3, #28]
 8004dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f023 0303 	bic.w	r3, r3, #3
 8004e0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	021b      	lsls	r3, r3, #8
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a1d      	ldr	r2, [pc, #116]	; (8004ea4 <TIM_OC3_SetConfig+0xd0>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d10d      	bne.n	8004e4e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	021b      	lsls	r3, r3, #8
 8004e40:	697a      	ldr	r2, [r7, #20]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a14      	ldr	r2, [pc, #80]	; (8004ea4 <TIM_OC3_SetConfig+0xd0>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d113      	bne.n	8004e7e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	011b      	lsls	r3, r3, #4
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	011b      	lsls	r3, r3, #4
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	685a      	ldr	r2, [r3, #4]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	621a      	str	r2, [r3, #32]
}
 8004e98:	bf00      	nop
 8004e9a:	371c      	adds	r7, #28
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr
 8004ea4:	40010000 	.word	0x40010000

08004ea8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b087      	sub	sp, #28
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
 8004ec2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	69db      	ldr	r3, [r3, #28]
 8004ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ede:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	021b      	lsls	r3, r3, #8
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ef2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	031b      	lsls	r3, r3, #12
 8004efa:	693a      	ldr	r2, [r7, #16]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a10      	ldr	r2, [pc, #64]	; (8004f44 <TIM_OC4_SetConfig+0x9c>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d109      	bne.n	8004f1c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	695b      	ldr	r3, [r3, #20]
 8004f14:	019b      	lsls	r3, r3, #6
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	685a      	ldr	r2, [r3, #4]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	621a      	str	r2, [r3, #32]
}
 8004f36:	bf00      	nop
 8004f38:	371c      	adds	r7, #28
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	40010000 	.word	0x40010000

08004f48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b087      	sub	sp, #28
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	f003 031f 	and.w	r3, r3, #31
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6a1a      	ldr	r2, [r3, #32]
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	43db      	mvns	r3, r3
 8004f6a:	401a      	ands	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6a1a      	ldr	r2, [r3, #32]
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	f003 031f 	and.w	r3, r3, #31
 8004f7a:	6879      	ldr	r1, [r7, #4]
 8004f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f80:	431a      	orrs	r2, r3
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	621a      	str	r2, [r3, #32]
}
 8004f86:	bf00      	nop
 8004f88:	371c      	adds	r7, #28
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
	...

08004f94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d101      	bne.n	8004fac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fa8:	2302      	movs	r3, #2
 8004faa:	e050      	b.n	800504e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2202      	movs	r2, #2
 8004fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a1c      	ldr	r2, [pc, #112]	; (800505c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d018      	beq.n	8005022 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ff8:	d013      	beq.n	8005022 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a18      	ldr	r2, [pc, #96]	; (8005060 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d00e      	beq.n	8005022 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a16      	ldr	r2, [pc, #88]	; (8005064 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d009      	beq.n	8005022 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a15      	ldr	r2, [pc, #84]	; (8005068 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d004      	beq.n	8005022 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a13      	ldr	r2, [pc, #76]	; (800506c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d10c      	bne.n	800503c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005028:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	68ba      	ldr	r2, [r7, #8]
 8005030:	4313      	orrs	r3, r2
 8005032:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68ba      	ldr	r2, [r7, #8]
 800503a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3714      	adds	r7, #20
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	40010000 	.word	0x40010000
 8005060:	40000400 	.word	0x40000400
 8005064:	40000800 	.word	0x40000800
 8005068:	40000c00 	.word	0x40000c00
 800506c:	40014000 	.word	0x40014000

08005070 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800507a:	2300      	movs	r3, #0
 800507c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005084:	2b01      	cmp	r3, #1
 8005086:	d101      	bne.n	800508c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005088:	2302      	movs	r3, #2
 800508a:	e03d      	b.n	8005108 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	4313      	orrs	r3, r2
 80050a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	695b      	ldr	r3, [r3, #20]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	69db      	ldr	r3, [r3, #28]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005106:	2300      	movs	r3, #0
}
 8005108:	4618      	mov	r0, r3
 800510a:	3714      	adds	r7, #20
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d101      	bne.n	8005126 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e03f      	b.n	80051a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b00      	cmp	r3, #0
 8005130:	d106      	bne.n	8005140 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f7fc fc9c 	bl	8001a78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2224      	movs	r2, #36	; 0x24
 8005144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68da      	ldr	r2, [r3, #12]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005156:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 f929 	bl	80053b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	691a      	ldr	r2, [r3, #16]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800516c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	695a      	ldr	r2, [r3, #20]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800517c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68da      	ldr	r2, [r3, #12]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800518c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2220      	movs	r2, #32
 8005198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2220      	movs	r2, #32
 80051a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3708      	adds	r7, #8
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051ae:	b580      	push	{r7, lr}
 80051b0:	b08a      	sub	sp, #40	; 0x28
 80051b2:	af02      	add	r7, sp, #8
 80051b4:	60f8      	str	r0, [r7, #12]
 80051b6:	60b9      	str	r1, [r7, #8]
 80051b8:	603b      	str	r3, [r7, #0]
 80051ba:	4613      	mov	r3, r2
 80051bc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80051be:	2300      	movs	r3, #0
 80051c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	2b20      	cmp	r3, #32
 80051cc:	d17c      	bne.n	80052c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d002      	beq.n	80051da <HAL_UART_Transmit+0x2c>
 80051d4:	88fb      	ldrh	r3, [r7, #6]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d101      	bne.n	80051de <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e075      	b.n	80052ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d101      	bne.n	80051ec <HAL_UART_Transmit+0x3e>
 80051e8:	2302      	movs	r3, #2
 80051ea:	e06e      	b.n	80052ca <HAL_UART_Transmit+0x11c>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2221      	movs	r2, #33	; 0x21
 80051fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005202:	f7fc fdfb 	bl	8001dfc <HAL_GetTick>
 8005206:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	88fa      	ldrh	r2, [r7, #6]
 800520c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	88fa      	ldrh	r2, [r7, #6]
 8005212:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800521c:	d108      	bne.n	8005230 <HAL_UART_Transmit+0x82>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d104      	bne.n	8005230 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005226:	2300      	movs	r3, #0
 8005228:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	61bb      	str	r3, [r7, #24]
 800522e:	e003      	b.n	8005238 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005234:	2300      	movs	r3, #0
 8005236:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005240:	e02a      	b.n	8005298 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	9300      	str	r3, [sp, #0]
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	2200      	movs	r2, #0
 800524a:	2180      	movs	r1, #128	; 0x80
 800524c:	68f8      	ldr	r0, [r7, #12]
 800524e:	f000 f840 	bl	80052d2 <UART_WaitOnFlagUntilTimeout>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d001      	beq.n	800525c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e036      	b.n	80052ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d10b      	bne.n	800527a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	881b      	ldrh	r3, [r3, #0]
 8005266:	461a      	mov	r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005270:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	3302      	adds	r3, #2
 8005276:	61bb      	str	r3, [r7, #24]
 8005278:	e007      	b.n	800528a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	781a      	ldrb	r2, [r3, #0]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	3301      	adds	r3, #1
 8005288:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800528e:	b29b      	uxth	r3, r3
 8005290:	3b01      	subs	r3, #1
 8005292:	b29a      	uxth	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800529c:	b29b      	uxth	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1cf      	bne.n	8005242 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	2200      	movs	r2, #0
 80052aa:	2140      	movs	r1, #64	; 0x40
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f000 f810 	bl	80052d2 <UART_WaitOnFlagUntilTimeout>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d001      	beq.n	80052bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e006      	b.n	80052ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2220      	movs	r2, #32
 80052c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80052c4:	2300      	movs	r3, #0
 80052c6:	e000      	b.n	80052ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80052c8:	2302      	movs	r3, #2
  }
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3720      	adds	r7, #32
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b090      	sub	sp, #64	; 0x40
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	60f8      	str	r0, [r7, #12]
 80052da:	60b9      	str	r1, [r7, #8]
 80052dc:	603b      	str	r3, [r7, #0]
 80052de:	4613      	mov	r3, r2
 80052e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052e2:	e050      	b.n	8005386 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ea:	d04c      	beq.n	8005386 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80052ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d007      	beq.n	8005302 <UART_WaitOnFlagUntilTimeout+0x30>
 80052f2:	f7fc fd83 	bl	8001dfc <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052fe:	429a      	cmp	r2, r3
 8005300:	d241      	bcs.n	8005386 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	330c      	adds	r3, #12
 8005308:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530c:	e853 3f00 	ldrex	r3, [r3]
 8005310:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005314:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005318:	63fb      	str	r3, [r7, #60]	; 0x3c
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	330c      	adds	r3, #12
 8005320:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005322:	637a      	str	r2, [r7, #52]	; 0x34
 8005324:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005326:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005328:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800532a:	e841 2300 	strex	r3, r2, [r1]
 800532e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1e5      	bne.n	8005302 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	3314      	adds	r3, #20
 800533c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	e853 3f00 	ldrex	r3, [r3]
 8005344:	613b      	str	r3, [r7, #16]
   return(result);
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	f023 0301 	bic.w	r3, r3, #1
 800534c:	63bb      	str	r3, [r7, #56]	; 0x38
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	3314      	adds	r3, #20
 8005354:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005356:	623a      	str	r2, [r7, #32]
 8005358:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535a:	69f9      	ldr	r1, [r7, #28]
 800535c:	6a3a      	ldr	r2, [r7, #32]
 800535e:	e841 2300 	strex	r3, r2, [r1]
 8005362:	61bb      	str	r3, [r7, #24]
   return(result);
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d1e5      	bne.n	8005336 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2220      	movs	r2, #32
 800536e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2220      	movs	r2, #32
 8005376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e00f      	b.n	80053a6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	4013      	ands	r3, r2
 8005390:	68ba      	ldr	r2, [r7, #8]
 8005392:	429a      	cmp	r2, r3
 8005394:	bf0c      	ite	eq
 8005396:	2301      	moveq	r3, #1
 8005398:	2300      	movne	r3, #0
 800539a:	b2db      	uxtb	r3, r3
 800539c:	461a      	mov	r2, r3
 800539e:	79fb      	ldrb	r3, [r7, #7]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d09f      	beq.n	80052e4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3740      	adds	r7, #64	; 0x40
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
	...

080053b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053b4:	b09f      	sub	sp, #124	; 0x7c
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80053c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053c6:	68d9      	ldr	r1, [r3, #12]
 80053c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	ea40 0301 	orr.w	r3, r0, r1
 80053d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053d4:	689a      	ldr	r2, [r3, #8]
 80053d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	431a      	orrs	r2, r3
 80053dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053de:	695b      	ldr	r3, [r3, #20]
 80053e0:	431a      	orrs	r2, r3
 80053e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053e4:	69db      	ldr	r3, [r3, #28]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80053ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80053f4:	f021 010c 	bic.w	r1, r1, #12
 80053f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053fe:	430b      	orrs	r3, r1
 8005400:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	695b      	ldr	r3, [r3, #20]
 8005408:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800540c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800540e:	6999      	ldr	r1, [r3, #24]
 8005410:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	ea40 0301 	orr.w	r3, r0, r1
 8005418:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800541a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	4bc5      	ldr	r3, [pc, #788]	; (8005734 <UART_SetConfig+0x384>)
 8005420:	429a      	cmp	r2, r3
 8005422:	d004      	beq.n	800542e <UART_SetConfig+0x7e>
 8005424:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	4bc3      	ldr	r3, [pc, #780]	; (8005738 <UART_SetConfig+0x388>)
 800542a:	429a      	cmp	r2, r3
 800542c:	d103      	bne.n	8005436 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800542e:	f7ff f903 	bl	8004638 <HAL_RCC_GetPCLK2Freq>
 8005432:	6778      	str	r0, [r7, #116]	; 0x74
 8005434:	e002      	b.n	800543c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005436:	f7ff f8eb 	bl	8004610 <HAL_RCC_GetPCLK1Freq>
 800543a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800543c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800543e:	69db      	ldr	r3, [r3, #28]
 8005440:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005444:	f040 80b6 	bne.w	80055b4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005448:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800544a:	461c      	mov	r4, r3
 800544c:	f04f 0500 	mov.w	r5, #0
 8005450:	4622      	mov	r2, r4
 8005452:	462b      	mov	r3, r5
 8005454:	1891      	adds	r1, r2, r2
 8005456:	6439      	str	r1, [r7, #64]	; 0x40
 8005458:	415b      	adcs	r3, r3
 800545a:	647b      	str	r3, [r7, #68]	; 0x44
 800545c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005460:	1912      	adds	r2, r2, r4
 8005462:	eb45 0303 	adc.w	r3, r5, r3
 8005466:	f04f 0000 	mov.w	r0, #0
 800546a:	f04f 0100 	mov.w	r1, #0
 800546e:	00d9      	lsls	r1, r3, #3
 8005470:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005474:	00d0      	lsls	r0, r2, #3
 8005476:	4602      	mov	r2, r0
 8005478:	460b      	mov	r3, r1
 800547a:	1911      	adds	r1, r2, r4
 800547c:	6639      	str	r1, [r7, #96]	; 0x60
 800547e:	416b      	adcs	r3, r5
 8005480:	667b      	str	r3, [r7, #100]	; 0x64
 8005482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	461a      	mov	r2, r3
 8005488:	f04f 0300 	mov.w	r3, #0
 800548c:	1891      	adds	r1, r2, r2
 800548e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005490:	415b      	adcs	r3, r3
 8005492:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005494:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005498:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800549c:	f7fa fef0 	bl	8000280 <__aeabi_uldivmod>
 80054a0:	4602      	mov	r2, r0
 80054a2:	460b      	mov	r3, r1
 80054a4:	4ba5      	ldr	r3, [pc, #660]	; (800573c <UART_SetConfig+0x38c>)
 80054a6:	fba3 2302 	umull	r2, r3, r3, r2
 80054aa:	095b      	lsrs	r3, r3, #5
 80054ac:	011e      	lsls	r6, r3, #4
 80054ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054b0:	461c      	mov	r4, r3
 80054b2:	f04f 0500 	mov.w	r5, #0
 80054b6:	4622      	mov	r2, r4
 80054b8:	462b      	mov	r3, r5
 80054ba:	1891      	adds	r1, r2, r2
 80054bc:	6339      	str	r1, [r7, #48]	; 0x30
 80054be:	415b      	adcs	r3, r3
 80054c0:	637b      	str	r3, [r7, #52]	; 0x34
 80054c2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80054c6:	1912      	adds	r2, r2, r4
 80054c8:	eb45 0303 	adc.w	r3, r5, r3
 80054cc:	f04f 0000 	mov.w	r0, #0
 80054d0:	f04f 0100 	mov.w	r1, #0
 80054d4:	00d9      	lsls	r1, r3, #3
 80054d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80054da:	00d0      	lsls	r0, r2, #3
 80054dc:	4602      	mov	r2, r0
 80054de:	460b      	mov	r3, r1
 80054e0:	1911      	adds	r1, r2, r4
 80054e2:	65b9      	str	r1, [r7, #88]	; 0x58
 80054e4:	416b      	adcs	r3, r5
 80054e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	461a      	mov	r2, r3
 80054ee:	f04f 0300 	mov.w	r3, #0
 80054f2:	1891      	adds	r1, r2, r2
 80054f4:	62b9      	str	r1, [r7, #40]	; 0x28
 80054f6:	415b      	adcs	r3, r3
 80054f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80054fe:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005502:	f7fa febd 	bl	8000280 <__aeabi_uldivmod>
 8005506:	4602      	mov	r2, r0
 8005508:	460b      	mov	r3, r1
 800550a:	4b8c      	ldr	r3, [pc, #560]	; (800573c <UART_SetConfig+0x38c>)
 800550c:	fba3 1302 	umull	r1, r3, r3, r2
 8005510:	095b      	lsrs	r3, r3, #5
 8005512:	2164      	movs	r1, #100	; 0x64
 8005514:	fb01 f303 	mul.w	r3, r1, r3
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	00db      	lsls	r3, r3, #3
 800551c:	3332      	adds	r3, #50	; 0x32
 800551e:	4a87      	ldr	r2, [pc, #540]	; (800573c <UART_SetConfig+0x38c>)
 8005520:	fba2 2303 	umull	r2, r3, r2, r3
 8005524:	095b      	lsrs	r3, r3, #5
 8005526:	005b      	lsls	r3, r3, #1
 8005528:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800552c:	441e      	add	r6, r3
 800552e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005530:	4618      	mov	r0, r3
 8005532:	f04f 0100 	mov.w	r1, #0
 8005536:	4602      	mov	r2, r0
 8005538:	460b      	mov	r3, r1
 800553a:	1894      	adds	r4, r2, r2
 800553c:	623c      	str	r4, [r7, #32]
 800553e:	415b      	adcs	r3, r3
 8005540:	627b      	str	r3, [r7, #36]	; 0x24
 8005542:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005546:	1812      	adds	r2, r2, r0
 8005548:	eb41 0303 	adc.w	r3, r1, r3
 800554c:	f04f 0400 	mov.w	r4, #0
 8005550:	f04f 0500 	mov.w	r5, #0
 8005554:	00dd      	lsls	r5, r3, #3
 8005556:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800555a:	00d4      	lsls	r4, r2, #3
 800555c:	4622      	mov	r2, r4
 800555e:	462b      	mov	r3, r5
 8005560:	1814      	adds	r4, r2, r0
 8005562:	653c      	str	r4, [r7, #80]	; 0x50
 8005564:	414b      	adcs	r3, r1
 8005566:	657b      	str	r3, [r7, #84]	; 0x54
 8005568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	461a      	mov	r2, r3
 800556e:	f04f 0300 	mov.w	r3, #0
 8005572:	1891      	adds	r1, r2, r2
 8005574:	61b9      	str	r1, [r7, #24]
 8005576:	415b      	adcs	r3, r3
 8005578:	61fb      	str	r3, [r7, #28]
 800557a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800557e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005582:	f7fa fe7d 	bl	8000280 <__aeabi_uldivmod>
 8005586:	4602      	mov	r2, r0
 8005588:	460b      	mov	r3, r1
 800558a:	4b6c      	ldr	r3, [pc, #432]	; (800573c <UART_SetConfig+0x38c>)
 800558c:	fba3 1302 	umull	r1, r3, r3, r2
 8005590:	095b      	lsrs	r3, r3, #5
 8005592:	2164      	movs	r1, #100	; 0x64
 8005594:	fb01 f303 	mul.w	r3, r1, r3
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	00db      	lsls	r3, r3, #3
 800559c:	3332      	adds	r3, #50	; 0x32
 800559e:	4a67      	ldr	r2, [pc, #412]	; (800573c <UART_SetConfig+0x38c>)
 80055a0:	fba2 2303 	umull	r2, r3, r2, r3
 80055a4:	095b      	lsrs	r3, r3, #5
 80055a6:	f003 0207 	and.w	r2, r3, #7
 80055aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4432      	add	r2, r6
 80055b0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80055b2:	e0b9      	b.n	8005728 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055b6:	461c      	mov	r4, r3
 80055b8:	f04f 0500 	mov.w	r5, #0
 80055bc:	4622      	mov	r2, r4
 80055be:	462b      	mov	r3, r5
 80055c0:	1891      	adds	r1, r2, r2
 80055c2:	6139      	str	r1, [r7, #16]
 80055c4:	415b      	adcs	r3, r3
 80055c6:	617b      	str	r3, [r7, #20]
 80055c8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80055cc:	1912      	adds	r2, r2, r4
 80055ce:	eb45 0303 	adc.w	r3, r5, r3
 80055d2:	f04f 0000 	mov.w	r0, #0
 80055d6:	f04f 0100 	mov.w	r1, #0
 80055da:	00d9      	lsls	r1, r3, #3
 80055dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80055e0:	00d0      	lsls	r0, r2, #3
 80055e2:	4602      	mov	r2, r0
 80055e4:	460b      	mov	r3, r1
 80055e6:	eb12 0804 	adds.w	r8, r2, r4
 80055ea:	eb43 0905 	adc.w	r9, r3, r5
 80055ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	4618      	mov	r0, r3
 80055f4:	f04f 0100 	mov.w	r1, #0
 80055f8:	f04f 0200 	mov.w	r2, #0
 80055fc:	f04f 0300 	mov.w	r3, #0
 8005600:	008b      	lsls	r3, r1, #2
 8005602:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005606:	0082      	lsls	r2, r0, #2
 8005608:	4640      	mov	r0, r8
 800560a:	4649      	mov	r1, r9
 800560c:	f7fa fe38 	bl	8000280 <__aeabi_uldivmod>
 8005610:	4602      	mov	r2, r0
 8005612:	460b      	mov	r3, r1
 8005614:	4b49      	ldr	r3, [pc, #292]	; (800573c <UART_SetConfig+0x38c>)
 8005616:	fba3 2302 	umull	r2, r3, r3, r2
 800561a:	095b      	lsrs	r3, r3, #5
 800561c:	011e      	lsls	r6, r3, #4
 800561e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005620:	4618      	mov	r0, r3
 8005622:	f04f 0100 	mov.w	r1, #0
 8005626:	4602      	mov	r2, r0
 8005628:	460b      	mov	r3, r1
 800562a:	1894      	adds	r4, r2, r2
 800562c:	60bc      	str	r4, [r7, #8]
 800562e:	415b      	adcs	r3, r3
 8005630:	60fb      	str	r3, [r7, #12]
 8005632:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005636:	1812      	adds	r2, r2, r0
 8005638:	eb41 0303 	adc.w	r3, r1, r3
 800563c:	f04f 0400 	mov.w	r4, #0
 8005640:	f04f 0500 	mov.w	r5, #0
 8005644:	00dd      	lsls	r5, r3, #3
 8005646:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800564a:	00d4      	lsls	r4, r2, #3
 800564c:	4622      	mov	r2, r4
 800564e:	462b      	mov	r3, r5
 8005650:	1814      	adds	r4, r2, r0
 8005652:	64bc      	str	r4, [r7, #72]	; 0x48
 8005654:	414b      	adcs	r3, r1
 8005656:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	4618      	mov	r0, r3
 800565e:	f04f 0100 	mov.w	r1, #0
 8005662:	f04f 0200 	mov.w	r2, #0
 8005666:	f04f 0300 	mov.w	r3, #0
 800566a:	008b      	lsls	r3, r1, #2
 800566c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005670:	0082      	lsls	r2, r0, #2
 8005672:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005676:	f7fa fe03 	bl	8000280 <__aeabi_uldivmod>
 800567a:	4602      	mov	r2, r0
 800567c:	460b      	mov	r3, r1
 800567e:	4b2f      	ldr	r3, [pc, #188]	; (800573c <UART_SetConfig+0x38c>)
 8005680:	fba3 1302 	umull	r1, r3, r3, r2
 8005684:	095b      	lsrs	r3, r3, #5
 8005686:	2164      	movs	r1, #100	; 0x64
 8005688:	fb01 f303 	mul.w	r3, r1, r3
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	011b      	lsls	r3, r3, #4
 8005690:	3332      	adds	r3, #50	; 0x32
 8005692:	4a2a      	ldr	r2, [pc, #168]	; (800573c <UART_SetConfig+0x38c>)
 8005694:	fba2 2303 	umull	r2, r3, r2, r3
 8005698:	095b      	lsrs	r3, r3, #5
 800569a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800569e:	441e      	add	r6, r3
 80056a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056a2:	4618      	mov	r0, r3
 80056a4:	f04f 0100 	mov.w	r1, #0
 80056a8:	4602      	mov	r2, r0
 80056aa:	460b      	mov	r3, r1
 80056ac:	1894      	adds	r4, r2, r2
 80056ae:	603c      	str	r4, [r7, #0]
 80056b0:	415b      	adcs	r3, r3
 80056b2:	607b      	str	r3, [r7, #4]
 80056b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056b8:	1812      	adds	r2, r2, r0
 80056ba:	eb41 0303 	adc.w	r3, r1, r3
 80056be:	f04f 0400 	mov.w	r4, #0
 80056c2:	f04f 0500 	mov.w	r5, #0
 80056c6:	00dd      	lsls	r5, r3, #3
 80056c8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80056cc:	00d4      	lsls	r4, r2, #3
 80056ce:	4622      	mov	r2, r4
 80056d0:	462b      	mov	r3, r5
 80056d2:	eb12 0a00 	adds.w	sl, r2, r0
 80056d6:	eb43 0b01 	adc.w	fp, r3, r1
 80056da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	4618      	mov	r0, r3
 80056e0:	f04f 0100 	mov.w	r1, #0
 80056e4:	f04f 0200 	mov.w	r2, #0
 80056e8:	f04f 0300 	mov.w	r3, #0
 80056ec:	008b      	lsls	r3, r1, #2
 80056ee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80056f2:	0082      	lsls	r2, r0, #2
 80056f4:	4650      	mov	r0, sl
 80056f6:	4659      	mov	r1, fp
 80056f8:	f7fa fdc2 	bl	8000280 <__aeabi_uldivmod>
 80056fc:	4602      	mov	r2, r0
 80056fe:	460b      	mov	r3, r1
 8005700:	4b0e      	ldr	r3, [pc, #56]	; (800573c <UART_SetConfig+0x38c>)
 8005702:	fba3 1302 	umull	r1, r3, r3, r2
 8005706:	095b      	lsrs	r3, r3, #5
 8005708:	2164      	movs	r1, #100	; 0x64
 800570a:	fb01 f303 	mul.w	r3, r1, r3
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	011b      	lsls	r3, r3, #4
 8005712:	3332      	adds	r3, #50	; 0x32
 8005714:	4a09      	ldr	r2, [pc, #36]	; (800573c <UART_SetConfig+0x38c>)
 8005716:	fba2 2303 	umull	r2, r3, r2, r3
 800571a:	095b      	lsrs	r3, r3, #5
 800571c:	f003 020f 	and.w	r2, r3, #15
 8005720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4432      	add	r2, r6
 8005726:	609a      	str	r2, [r3, #8]
}
 8005728:	bf00      	nop
 800572a:	377c      	adds	r7, #124	; 0x7c
 800572c:	46bd      	mov	sp, r7
 800572e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005732:	bf00      	nop
 8005734:	40011000 	.word	0x40011000
 8005738:	40011400 	.word	0x40011400
 800573c:	51eb851f 	.word	0x51eb851f

08005740 <__errno>:
 8005740:	4b01      	ldr	r3, [pc, #4]	; (8005748 <__errno+0x8>)
 8005742:	6818      	ldr	r0, [r3, #0]
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	20000010 	.word	0x20000010

0800574c <__libc_init_array>:
 800574c:	b570      	push	{r4, r5, r6, lr}
 800574e:	4d0d      	ldr	r5, [pc, #52]	; (8005784 <__libc_init_array+0x38>)
 8005750:	4c0d      	ldr	r4, [pc, #52]	; (8005788 <__libc_init_array+0x3c>)
 8005752:	1b64      	subs	r4, r4, r5
 8005754:	10a4      	asrs	r4, r4, #2
 8005756:	2600      	movs	r6, #0
 8005758:	42a6      	cmp	r6, r4
 800575a:	d109      	bne.n	8005770 <__libc_init_array+0x24>
 800575c:	4d0b      	ldr	r5, [pc, #44]	; (800578c <__libc_init_array+0x40>)
 800575e:	4c0c      	ldr	r4, [pc, #48]	; (8005790 <__libc_init_array+0x44>)
 8005760:	f000 ff76 	bl	8006650 <_init>
 8005764:	1b64      	subs	r4, r4, r5
 8005766:	10a4      	asrs	r4, r4, #2
 8005768:	2600      	movs	r6, #0
 800576a:	42a6      	cmp	r6, r4
 800576c:	d105      	bne.n	800577a <__libc_init_array+0x2e>
 800576e:	bd70      	pop	{r4, r5, r6, pc}
 8005770:	f855 3b04 	ldr.w	r3, [r5], #4
 8005774:	4798      	blx	r3
 8005776:	3601      	adds	r6, #1
 8005778:	e7ee      	b.n	8005758 <__libc_init_array+0xc>
 800577a:	f855 3b04 	ldr.w	r3, [r5], #4
 800577e:	4798      	blx	r3
 8005780:	3601      	adds	r6, #1
 8005782:	e7f2      	b.n	800576a <__libc_init_array+0x1e>
 8005784:	080067c8 	.word	0x080067c8
 8005788:	080067c8 	.word	0x080067c8
 800578c:	080067c8 	.word	0x080067c8
 8005790:	080067cc 	.word	0x080067cc

08005794 <memset>:
 8005794:	4402      	add	r2, r0
 8005796:	4603      	mov	r3, r0
 8005798:	4293      	cmp	r3, r2
 800579a:	d100      	bne.n	800579e <memset+0xa>
 800579c:	4770      	bx	lr
 800579e:	f803 1b01 	strb.w	r1, [r3], #1
 80057a2:	e7f9      	b.n	8005798 <memset+0x4>

080057a4 <iprintf>:
 80057a4:	b40f      	push	{r0, r1, r2, r3}
 80057a6:	4b0a      	ldr	r3, [pc, #40]	; (80057d0 <iprintf+0x2c>)
 80057a8:	b513      	push	{r0, r1, r4, lr}
 80057aa:	681c      	ldr	r4, [r3, #0]
 80057ac:	b124      	cbz	r4, 80057b8 <iprintf+0x14>
 80057ae:	69a3      	ldr	r3, [r4, #24]
 80057b0:	b913      	cbnz	r3, 80057b8 <iprintf+0x14>
 80057b2:	4620      	mov	r0, r4
 80057b4:	f000 f866 	bl	8005884 <__sinit>
 80057b8:	ab05      	add	r3, sp, #20
 80057ba:	9a04      	ldr	r2, [sp, #16]
 80057bc:	68a1      	ldr	r1, [r4, #8]
 80057be:	9301      	str	r3, [sp, #4]
 80057c0:	4620      	mov	r0, r4
 80057c2:	f000 f983 	bl	8005acc <_vfiprintf_r>
 80057c6:	b002      	add	sp, #8
 80057c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057cc:	b004      	add	sp, #16
 80057ce:	4770      	bx	lr
 80057d0:	20000010 	.word	0x20000010

080057d4 <std>:
 80057d4:	2300      	movs	r3, #0
 80057d6:	b510      	push	{r4, lr}
 80057d8:	4604      	mov	r4, r0
 80057da:	e9c0 3300 	strd	r3, r3, [r0]
 80057de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057e2:	6083      	str	r3, [r0, #8]
 80057e4:	8181      	strh	r1, [r0, #12]
 80057e6:	6643      	str	r3, [r0, #100]	; 0x64
 80057e8:	81c2      	strh	r2, [r0, #14]
 80057ea:	6183      	str	r3, [r0, #24]
 80057ec:	4619      	mov	r1, r3
 80057ee:	2208      	movs	r2, #8
 80057f0:	305c      	adds	r0, #92	; 0x5c
 80057f2:	f7ff ffcf 	bl	8005794 <memset>
 80057f6:	4b05      	ldr	r3, [pc, #20]	; (800580c <std+0x38>)
 80057f8:	6263      	str	r3, [r4, #36]	; 0x24
 80057fa:	4b05      	ldr	r3, [pc, #20]	; (8005810 <std+0x3c>)
 80057fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80057fe:	4b05      	ldr	r3, [pc, #20]	; (8005814 <std+0x40>)
 8005800:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005802:	4b05      	ldr	r3, [pc, #20]	; (8005818 <std+0x44>)
 8005804:	6224      	str	r4, [r4, #32]
 8005806:	6323      	str	r3, [r4, #48]	; 0x30
 8005808:	bd10      	pop	{r4, pc}
 800580a:	bf00      	nop
 800580c:	08006075 	.word	0x08006075
 8005810:	08006097 	.word	0x08006097
 8005814:	080060cf 	.word	0x080060cf
 8005818:	080060f3 	.word	0x080060f3

0800581c <_cleanup_r>:
 800581c:	4901      	ldr	r1, [pc, #4]	; (8005824 <_cleanup_r+0x8>)
 800581e:	f000 b8af 	b.w	8005980 <_fwalk_reent>
 8005822:	bf00      	nop
 8005824:	080063cd 	.word	0x080063cd

08005828 <__sfmoreglue>:
 8005828:	b570      	push	{r4, r5, r6, lr}
 800582a:	1e4a      	subs	r2, r1, #1
 800582c:	2568      	movs	r5, #104	; 0x68
 800582e:	4355      	muls	r5, r2
 8005830:	460e      	mov	r6, r1
 8005832:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005836:	f000 f8c5 	bl	80059c4 <_malloc_r>
 800583a:	4604      	mov	r4, r0
 800583c:	b140      	cbz	r0, 8005850 <__sfmoreglue+0x28>
 800583e:	2100      	movs	r1, #0
 8005840:	e9c0 1600 	strd	r1, r6, [r0]
 8005844:	300c      	adds	r0, #12
 8005846:	60a0      	str	r0, [r4, #8]
 8005848:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800584c:	f7ff ffa2 	bl	8005794 <memset>
 8005850:	4620      	mov	r0, r4
 8005852:	bd70      	pop	{r4, r5, r6, pc}

08005854 <__sfp_lock_acquire>:
 8005854:	4801      	ldr	r0, [pc, #4]	; (800585c <__sfp_lock_acquire+0x8>)
 8005856:	f000 b8b3 	b.w	80059c0 <__retarget_lock_acquire_recursive>
 800585a:	bf00      	nop
 800585c:	20000370 	.word	0x20000370

08005860 <__sfp_lock_release>:
 8005860:	4801      	ldr	r0, [pc, #4]	; (8005868 <__sfp_lock_release+0x8>)
 8005862:	f000 b8ae 	b.w	80059c2 <__retarget_lock_release_recursive>
 8005866:	bf00      	nop
 8005868:	20000370 	.word	0x20000370

0800586c <__sinit_lock_acquire>:
 800586c:	4801      	ldr	r0, [pc, #4]	; (8005874 <__sinit_lock_acquire+0x8>)
 800586e:	f000 b8a7 	b.w	80059c0 <__retarget_lock_acquire_recursive>
 8005872:	bf00      	nop
 8005874:	2000036b 	.word	0x2000036b

08005878 <__sinit_lock_release>:
 8005878:	4801      	ldr	r0, [pc, #4]	; (8005880 <__sinit_lock_release+0x8>)
 800587a:	f000 b8a2 	b.w	80059c2 <__retarget_lock_release_recursive>
 800587e:	bf00      	nop
 8005880:	2000036b 	.word	0x2000036b

08005884 <__sinit>:
 8005884:	b510      	push	{r4, lr}
 8005886:	4604      	mov	r4, r0
 8005888:	f7ff fff0 	bl	800586c <__sinit_lock_acquire>
 800588c:	69a3      	ldr	r3, [r4, #24]
 800588e:	b11b      	cbz	r3, 8005898 <__sinit+0x14>
 8005890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005894:	f7ff bff0 	b.w	8005878 <__sinit_lock_release>
 8005898:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800589c:	6523      	str	r3, [r4, #80]	; 0x50
 800589e:	4b13      	ldr	r3, [pc, #76]	; (80058ec <__sinit+0x68>)
 80058a0:	4a13      	ldr	r2, [pc, #76]	; (80058f0 <__sinit+0x6c>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80058a6:	42a3      	cmp	r3, r4
 80058a8:	bf04      	itt	eq
 80058aa:	2301      	moveq	r3, #1
 80058ac:	61a3      	streq	r3, [r4, #24]
 80058ae:	4620      	mov	r0, r4
 80058b0:	f000 f820 	bl	80058f4 <__sfp>
 80058b4:	6060      	str	r0, [r4, #4]
 80058b6:	4620      	mov	r0, r4
 80058b8:	f000 f81c 	bl	80058f4 <__sfp>
 80058bc:	60a0      	str	r0, [r4, #8]
 80058be:	4620      	mov	r0, r4
 80058c0:	f000 f818 	bl	80058f4 <__sfp>
 80058c4:	2200      	movs	r2, #0
 80058c6:	60e0      	str	r0, [r4, #12]
 80058c8:	2104      	movs	r1, #4
 80058ca:	6860      	ldr	r0, [r4, #4]
 80058cc:	f7ff ff82 	bl	80057d4 <std>
 80058d0:	68a0      	ldr	r0, [r4, #8]
 80058d2:	2201      	movs	r2, #1
 80058d4:	2109      	movs	r1, #9
 80058d6:	f7ff ff7d 	bl	80057d4 <std>
 80058da:	68e0      	ldr	r0, [r4, #12]
 80058dc:	2202      	movs	r2, #2
 80058de:	2112      	movs	r1, #18
 80058e0:	f7ff ff78 	bl	80057d4 <std>
 80058e4:	2301      	movs	r3, #1
 80058e6:	61a3      	str	r3, [r4, #24]
 80058e8:	e7d2      	b.n	8005890 <__sinit+0xc>
 80058ea:	bf00      	nop
 80058ec:	08006728 	.word	0x08006728
 80058f0:	0800581d 	.word	0x0800581d

080058f4 <__sfp>:
 80058f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058f6:	4607      	mov	r7, r0
 80058f8:	f7ff ffac 	bl	8005854 <__sfp_lock_acquire>
 80058fc:	4b1e      	ldr	r3, [pc, #120]	; (8005978 <__sfp+0x84>)
 80058fe:	681e      	ldr	r6, [r3, #0]
 8005900:	69b3      	ldr	r3, [r6, #24]
 8005902:	b913      	cbnz	r3, 800590a <__sfp+0x16>
 8005904:	4630      	mov	r0, r6
 8005906:	f7ff ffbd 	bl	8005884 <__sinit>
 800590a:	3648      	adds	r6, #72	; 0x48
 800590c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005910:	3b01      	subs	r3, #1
 8005912:	d503      	bpl.n	800591c <__sfp+0x28>
 8005914:	6833      	ldr	r3, [r6, #0]
 8005916:	b30b      	cbz	r3, 800595c <__sfp+0x68>
 8005918:	6836      	ldr	r6, [r6, #0]
 800591a:	e7f7      	b.n	800590c <__sfp+0x18>
 800591c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005920:	b9d5      	cbnz	r5, 8005958 <__sfp+0x64>
 8005922:	4b16      	ldr	r3, [pc, #88]	; (800597c <__sfp+0x88>)
 8005924:	60e3      	str	r3, [r4, #12]
 8005926:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800592a:	6665      	str	r5, [r4, #100]	; 0x64
 800592c:	f000 f847 	bl	80059be <__retarget_lock_init_recursive>
 8005930:	f7ff ff96 	bl	8005860 <__sfp_lock_release>
 8005934:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005938:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800593c:	6025      	str	r5, [r4, #0]
 800593e:	61a5      	str	r5, [r4, #24]
 8005940:	2208      	movs	r2, #8
 8005942:	4629      	mov	r1, r5
 8005944:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005948:	f7ff ff24 	bl	8005794 <memset>
 800594c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005950:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005954:	4620      	mov	r0, r4
 8005956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005958:	3468      	adds	r4, #104	; 0x68
 800595a:	e7d9      	b.n	8005910 <__sfp+0x1c>
 800595c:	2104      	movs	r1, #4
 800595e:	4638      	mov	r0, r7
 8005960:	f7ff ff62 	bl	8005828 <__sfmoreglue>
 8005964:	4604      	mov	r4, r0
 8005966:	6030      	str	r0, [r6, #0]
 8005968:	2800      	cmp	r0, #0
 800596a:	d1d5      	bne.n	8005918 <__sfp+0x24>
 800596c:	f7ff ff78 	bl	8005860 <__sfp_lock_release>
 8005970:	230c      	movs	r3, #12
 8005972:	603b      	str	r3, [r7, #0]
 8005974:	e7ee      	b.n	8005954 <__sfp+0x60>
 8005976:	bf00      	nop
 8005978:	08006728 	.word	0x08006728
 800597c:	ffff0001 	.word	0xffff0001

08005980 <_fwalk_reent>:
 8005980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005984:	4606      	mov	r6, r0
 8005986:	4688      	mov	r8, r1
 8005988:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800598c:	2700      	movs	r7, #0
 800598e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005992:	f1b9 0901 	subs.w	r9, r9, #1
 8005996:	d505      	bpl.n	80059a4 <_fwalk_reent+0x24>
 8005998:	6824      	ldr	r4, [r4, #0]
 800599a:	2c00      	cmp	r4, #0
 800599c:	d1f7      	bne.n	800598e <_fwalk_reent+0xe>
 800599e:	4638      	mov	r0, r7
 80059a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059a4:	89ab      	ldrh	r3, [r5, #12]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d907      	bls.n	80059ba <_fwalk_reent+0x3a>
 80059aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80059ae:	3301      	adds	r3, #1
 80059b0:	d003      	beq.n	80059ba <_fwalk_reent+0x3a>
 80059b2:	4629      	mov	r1, r5
 80059b4:	4630      	mov	r0, r6
 80059b6:	47c0      	blx	r8
 80059b8:	4307      	orrs	r7, r0
 80059ba:	3568      	adds	r5, #104	; 0x68
 80059bc:	e7e9      	b.n	8005992 <_fwalk_reent+0x12>

080059be <__retarget_lock_init_recursive>:
 80059be:	4770      	bx	lr

080059c0 <__retarget_lock_acquire_recursive>:
 80059c0:	4770      	bx	lr

080059c2 <__retarget_lock_release_recursive>:
 80059c2:	4770      	bx	lr

080059c4 <_malloc_r>:
 80059c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059c6:	1ccd      	adds	r5, r1, #3
 80059c8:	f025 0503 	bic.w	r5, r5, #3
 80059cc:	3508      	adds	r5, #8
 80059ce:	2d0c      	cmp	r5, #12
 80059d0:	bf38      	it	cc
 80059d2:	250c      	movcc	r5, #12
 80059d4:	2d00      	cmp	r5, #0
 80059d6:	4606      	mov	r6, r0
 80059d8:	db01      	blt.n	80059de <_malloc_r+0x1a>
 80059da:	42a9      	cmp	r1, r5
 80059dc:	d903      	bls.n	80059e6 <_malloc_r+0x22>
 80059de:	230c      	movs	r3, #12
 80059e0:	6033      	str	r3, [r6, #0]
 80059e2:	2000      	movs	r0, #0
 80059e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059e6:	f000 fda3 	bl	8006530 <__malloc_lock>
 80059ea:	4921      	ldr	r1, [pc, #132]	; (8005a70 <_malloc_r+0xac>)
 80059ec:	680a      	ldr	r2, [r1, #0]
 80059ee:	4614      	mov	r4, r2
 80059f0:	b99c      	cbnz	r4, 8005a1a <_malloc_r+0x56>
 80059f2:	4f20      	ldr	r7, [pc, #128]	; (8005a74 <_malloc_r+0xb0>)
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	b923      	cbnz	r3, 8005a02 <_malloc_r+0x3e>
 80059f8:	4621      	mov	r1, r4
 80059fa:	4630      	mov	r0, r6
 80059fc:	f000 fb2a 	bl	8006054 <_sbrk_r>
 8005a00:	6038      	str	r0, [r7, #0]
 8005a02:	4629      	mov	r1, r5
 8005a04:	4630      	mov	r0, r6
 8005a06:	f000 fb25 	bl	8006054 <_sbrk_r>
 8005a0a:	1c43      	adds	r3, r0, #1
 8005a0c:	d123      	bne.n	8005a56 <_malloc_r+0x92>
 8005a0e:	230c      	movs	r3, #12
 8005a10:	6033      	str	r3, [r6, #0]
 8005a12:	4630      	mov	r0, r6
 8005a14:	f000 fd92 	bl	800653c <__malloc_unlock>
 8005a18:	e7e3      	b.n	80059e2 <_malloc_r+0x1e>
 8005a1a:	6823      	ldr	r3, [r4, #0]
 8005a1c:	1b5b      	subs	r3, r3, r5
 8005a1e:	d417      	bmi.n	8005a50 <_malloc_r+0x8c>
 8005a20:	2b0b      	cmp	r3, #11
 8005a22:	d903      	bls.n	8005a2c <_malloc_r+0x68>
 8005a24:	6023      	str	r3, [r4, #0]
 8005a26:	441c      	add	r4, r3
 8005a28:	6025      	str	r5, [r4, #0]
 8005a2a:	e004      	b.n	8005a36 <_malloc_r+0x72>
 8005a2c:	6863      	ldr	r3, [r4, #4]
 8005a2e:	42a2      	cmp	r2, r4
 8005a30:	bf0c      	ite	eq
 8005a32:	600b      	streq	r3, [r1, #0]
 8005a34:	6053      	strne	r3, [r2, #4]
 8005a36:	4630      	mov	r0, r6
 8005a38:	f000 fd80 	bl	800653c <__malloc_unlock>
 8005a3c:	f104 000b 	add.w	r0, r4, #11
 8005a40:	1d23      	adds	r3, r4, #4
 8005a42:	f020 0007 	bic.w	r0, r0, #7
 8005a46:	1ac2      	subs	r2, r0, r3
 8005a48:	d0cc      	beq.n	80059e4 <_malloc_r+0x20>
 8005a4a:	1a1b      	subs	r3, r3, r0
 8005a4c:	50a3      	str	r3, [r4, r2]
 8005a4e:	e7c9      	b.n	80059e4 <_malloc_r+0x20>
 8005a50:	4622      	mov	r2, r4
 8005a52:	6864      	ldr	r4, [r4, #4]
 8005a54:	e7cc      	b.n	80059f0 <_malloc_r+0x2c>
 8005a56:	1cc4      	adds	r4, r0, #3
 8005a58:	f024 0403 	bic.w	r4, r4, #3
 8005a5c:	42a0      	cmp	r0, r4
 8005a5e:	d0e3      	beq.n	8005a28 <_malloc_r+0x64>
 8005a60:	1a21      	subs	r1, r4, r0
 8005a62:	4630      	mov	r0, r6
 8005a64:	f000 faf6 	bl	8006054 <_sbrk_r>
 8005a68:	3001      	adds	r0, #1
 8005a6a:	d1dd      	bne.n	8005a28 <_malloc_r+0x64>
 8005a6c:	e7cf      	b.n	8005a0e <_malloc_r+0x4a>
 8005a6e:	bf00      	nop
 8005a70:	200000a0 	.word	0x200000a0
 8005a74:	200000a4 	.word	0x200000a4

08005a78 <__sfputc_r>:
 8005a78:	6893      	ldr	r3, [r2, #8]
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	b410      	push	{r4}
 8005a80:	6093      	str	r3, [r2, #8]
 8005a82:	da08      	bge.n	8005a96 <__sfputc_r+0x1e>
 8005a84:	6994      	ldr	r4, [r2, #24]
 8005a86:	42a3      	cmp	r3, r4
 8005a88:	db01      	blt.n	8005a8e <__sfputc_r+0x16>
 8005a8a:	290a      	cmp	r1, #10
 8005a8c:	d103      	bne.n	8005a96 <__sfputc_r+0x1e>
 8005a8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a92:	f000 bb33 	b.w	80060fc <__swbuf_r>
 8005a96:	6813      	ldr	r3, [r2, #0]
 8005a98:	1c58      	adds	r0, r3, #1
 8005a9a:	6010      	str	r0, [r2, #0]
 8005a9c:	7019      	strb	r1, [r3, #0]
 8005a9e:	4608      	mov	r0, r1
 8005aa0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005aa4:	4770      	bx	lr

08005aa6 <__sfputs_r>:
 8005aa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aa8:	4606      	mov	r6, r0
 8005aaa:	460f      	mov	r7, r1
 8005aac:	4614      	mov	r4, r2
 8005aae:	18d5      	adds	r5, r2, r3
 8005ab0:	42ac      	cmp	r4, r5
 8005ab2:	d101      	bne.n	8005ab8 <__sfputs_r+0x12>
 8005ab4:	2000      	movs	r0, #0
 8005ab6:	e007      	b.n	8005ac8 <__sfputs_r+0x22>
 8005ab8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005abc:	463a      	mov	r2, r7
 8005abe:	4630      	mov	r0, r6
 8005ac0:	f7ff ffda 	bl	8005a78 <__sfputc_r>
 8005ac4:	1c43      	adds	r3, r0, #1
 8005ac6:	d1f3      	bne.n	8005ab0 <__sfputs_r+0xa>
 8005ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005acc <_vfiprintf_r>:
 8005acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ad0:	460d      	mov	r5, r1
 8005ad2:	b09d      	sub	sp, #116	; 0x74
 8005ad4:	4614      	mov	r4, r2
 8005ad6:	4698      	mov	r8, r3
 8005ad8:	4606      	mov	r6, r0
 8005ada:	b118      	cbz	r0, 8005ae4 <_vfiprintf_r+0x18>
 8005adc:	6983      	ldr	r3, [r0, #24]
 8005ade:	b90b      	cbnz	r3, 8005ae4 <_vfiprintf_r+0x18>
 8005ae0:	f7ff fed0 	bl	8005884 <__sinit>
 8005ae4:	4b89      	ldr	r3, [pc, #548]	; (8005d0c <_vfiprintf_r+0x240>)
 8005ae6:	429d      	cmp	r5, r3
 8005ae8:	d11b      	bne.n	8005b22 <_vfiprintf_r+0x56>
 8005aea:	6875      	ldr	r5, [r6, #4]
 8005aec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005aee:	07d9      	lsls	r1, r3, #31
 8005af0:	d405      	bmi.n	8005afe <_vfiprintf_r+0x32>
 8005af2:	89ab      	ldrh	r3, [r5, #12]
 8005af4:	059a      	lsls	r2, r3, #22
 8005af6:	d402      	bmi.n	8005afe <_vfiprintf_r+0x32>
 8005af8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005afa:	f7ff ff61 	bl	80059c0 <__retarget_lock_acquire_recursive>
 8005afe:	89ab      	ldrh	r3, [r5, #12]
 8005b00:	071b      	lsls	r3, r3, #28
 8005b02:	d501      	bpl.n	8005b08 <_vfiprintf_r+0x3c>
 8005b04:	692b      	ldr	r3, [r5, #16]
 8005b06:	b9eb      	cbnz	r3, 8005b44 <_vfiprintf_r+0x78>
 8005b08:	4629      	mov	r1, r5
 8005b0a:	4630      	mov	r0, r6
 8005b0c:	f000 fb5a 	bl	80061c4 <__swsetup_r>
 8005b10:	b1c0      	cbz	r0, 8005b44 <_vfiprintf_r+0x78>
 8005b12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b14:	07dc      	lsls	r4, r3, #31
 8005b16:	d50e      	bpl.n	8005b36 <_vfiprintf_r+0x6a>
 8005b18:	f04f 30ff 	mov.w	r0, #4294967295
 8005b1c:	b01d      	add	sp, #116	; 0x74
 8005b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b22:	4b7b      	ldr	r3, [pc, #492]	; (8005d10 <_vfiprintf_r+0x244>)
 8005b24:	429d      	cmp	r5, r3
 8005b26:	d101      	bne.n	8005b2c <_vfiprintf_r+0x60>
 8005b28:	68b5      	ldr	r5, [r6, #8]
 8005b2a:	e7df      	b.n	8005aec <_vfiprintf_r+0x20>
 8005b2c:	4b79      	ldr	r3, [pc, #484]	; (8005d14 <_vfiprintf_r+0x248>)
 8005b2e:	429d      	cmp	r5, r3
 8005b30:	bf08      	it	eq
 8005b32:	68f5      	ldreq	r5, [r6, #12]
 8005b34:	e7da      	b.n	8005aec <_vfiprintf_r+0x20>
 8005b36:	89ab      	ldrh	r3, [r5, #12]
 8005b38:	0598      	lsls	r0, r3, #22
 8005b3a:	d4ed      	bmi.n	8005b18 <_vfiprintf_r+0x4c>
 8005b3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b3e:	f7ff ff40 	bl	80059c2 <__retarget_lock_release_recursive>
 8005b42:	e7e9      	b.n	8005b18 <_vfiprintf_r+0x4c>
 8005b44:	2300      	movs	r3, #0
 8005b46:	9309      	str	r3, [sp, #36]	; 0x24
 8005b48:	2320      	movs	r3, #32
 8005b4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b52:	2330      	movs	r3, #48	; 0x30
 8005b54:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005d18 <_vfiprintf_r+0x24c>
 8005b58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b5c:	f04f 0901 	mov.w	r9, #1
 8005b60:	4623      	mov	r3, r4
 8005b62:	469a      	mov	sl, r3
 8005b64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b68:	b10a      	cbz	r2, 8005b6e <_vfiprintf_r+0xa2>
 8005b6a:	2a25      	cmp	r2, #37	; 0x25
 8005b6c:	d1f9      	bne.n	8005b62 <_vfiprintf_r+0x96>
 8005b6e:	ebba 0b04 	subs.w	fp, sl, r4
 8005b72:	d00b      	beq.n	8005b8c <_vfiprintf_r+0xc0>
 8005b74:	465b      	mov	r3, fp
 8005b76:	4622      	mov	r2, r4
 8005b78:	4629      	mov	r1, r5
 8005b7a:	4630      	mov	r0, r6
 8005b7c:	f7ff ff93 	bl	8005aa6 <__sfputs_r>
 8005b80:	3001      	adds	r0, #1
 8005b82:	f000 80aa 	beq.w	8005cda <_vfiprintf_r+0x20e>
 8005b86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b88:	445a      	add	r2, fp
 8005b8a:	9209      	str	r2, [sp, #36]	; 0x24
 8005b8c:	f89a 3000 	ldrb.w	r3, [sl]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f000 80a2 	beq.w	8005cda <_vfiprintf_r+0x20e>
 8005b96:	2300      	movs	r3, #0
 8005b98:	f04f 32ff 	mov.w	r2, #4294967295
 8005b9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ba0:	f10a 0a01 	add.w	sl, sl, #1
 8005ba4:	9304      	str	r3, [sp, #16]
 8005ba6:	9307      	str	r3, [sp, #28]
 8005ba8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005bac:	931a      	str	r3, [sp, #104]	; 0x68
 8005bae:	4654      	mov	r4, sl
 8005bb0:	2205      	movs	r2, #5
 8005bb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bb6:	4858      	ldr	r0, [pc, #352]	; (8005d18 <_vfiprintf_r+0x24c>)
 8005bb8:	f7fa fb12 	bl	80001e0 <memchr>
 8005bbc:	9a04      	ldr	r2, [sp, #16]
 8005bbe:	b9d8      	cbnz	r0, 8005bf8 <_vfiprintf_r+0x12c>
 8005bc0:	06d1      	lsls	r1, r2, #27
 8005bc2:	bf44      	itt	mi
 8005bc4:	2320      	movmi	r3, #32
 8005bc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bca:	0713      	lsls	r3, r2, #28
 8005bcc:	bf44      	itt	mi
 8005bce:	232b      	movmi	r3, #43	; 0x2b
 8005bd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bd4:	f89a 3000 	ldrb.w	r3, [sl]
 8005bd8:	2b2a      	cmp	r3, #42	; 0x2a
 8005bda:	d015      	beq.n	8005c08 <_vfiprintf_r+0x13c>
 8005bdc:	9a07      	ldr	r2, [sp, #28]
 8005bde:	4654      	mov	r4, sl
 8005be0:	2000      	movs	r0, #0
 8005be2:	f04f 0c0a 	mov.w	ip, #10
 8005be6:	4621      	mov	r1, r4
 8005be8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005bec:	3b30      	subs	r3, #48	; 0x30
 8005bee:	2b09      	cmp	r3, #9
 8005bf0:	d94e      	bls.n	8005c90 <_vfiprintf_r+0x1c4>
 8005bf2:	b1b0      	cbz	r0, 8005c22 <_vfiprintf_r+0x156>
 8005bf4:	9207      	str	r2, [sp, #28]
 8005bf6:	e014      	b.n	8005c22 <_vfiprintf_r+0x156>
 8005bf8:	eba0 0308 	sub.w	r3, r0, r8
 8005bfc:	fa09 f303 	lsl.w	r3, r9, r3
 8005c00:	4313      	orrs	r3, r2
 8005c02:	9304      	str	r3, [sp, #16]
 8005c04:	46a2      	mov	sl, r4
 8005c06:	e7d2      	b.n	8005bae <_vfiprintf_r+0xe2>
 8005c08:	9b03      	ldr	r3, [sp, #12]
 8005c0a:	1d19      	adds	r1, r3, #4
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	9103      	str	r1, [sp, #12]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	bfbb      	ittet	lt
 8005c14:	425b      	neglt	r3, r3
 8005c16:	f042 0202 	orrlt.w	r2, r2, #2
 8005c1a:	9307      	strge	r3, [sp, #28]
 8005c1c:	9307      	strlt	r3, [sp, #28]
 8005c1e:	bfb8      	it	lt
 8005c20:	9204      	strlt	r2, [sp, #16]
 8005c22:	7823      	ldrb	r3, [r4, #0]
 8005c24:	2b2e      	cmp	r3, #46	; 0x2e
 8005c26:	d10c      	bne.n	8005c42 <_vfiprintf_r+0x176>
 8005c28:	7863      	ldrb	r3, [r4, #1]
 8005c2a:	2b2a      	cmp	r3, #42	; 0x2a
 8005c2c:	d135      	bne.n	8005c9a <_vfiprintf_r+0x1ce>
 8005c2e:	9b03      	ldr	r3, [sp, #12]
 8005c30:	1d1a      	adds	r2, r3, #4
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	9203      	str	r2, [sp, #12]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	bfb8      	it	lt
 8005c3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c3e:	3402      	adds	r4, #2
 8005c40:	9305      	str	r3, [sp, #20]
 8005c42:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005d28 <_vfiprintf_r+0x25c>
 8005c46:	7821      	ldrb	r1, [r4, #0]
 8005c48:	2203      	movs	r2, #3
 8005c4a:	4650      	mov	r0, sl
 8005c4c:	f7fa fac8 	bl	80001e0 <memchr>
 8005c50:	b140      	cbz	r0, 8005c64 <_vfiprintf_r+0x198>
 8005c52:	2340      	movs	r3, #64	; 0x40
 8005c54:	eba0 000a 	sub.w	r0, r0, sl
 8005c58:	fa03 f000 	lsl.w	r0, r3, r0
 8005c5c:	9b04      	ldr	r3, [sp, #16]
 8005c5e:	4303      	orrs	r3, r0
 8005c60:	3401      	adds	r4, #1
 8005c62:	9304      	str	r3, [sp, #16]
 8005c64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c68:	482c      	ldr	r0, [pc, #176]	; (8005d1c <_vfiprintf_r+0x250>)
 8005c6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c6e:	2206      	movs	r2, #6
 8005c70:	f7fa fab6 	bl	80001e0 <memchr>
 8005c74:	2800      	cmp	r0, #0
 8005c76:	d03f      	beq.n	8005cf8 <_vfiprintf_r+0x22c>
 8005c78:	4b29      	ldr	r3, [pc, #164]	; (8005d20 <_vfiprintf_r+0x254>)
 8005c7a:	bb1b      	cbnz	r3, 8005cc4 <_vfiprintf_r+0x1f8>
 8005c7c:	9b03      	ldr	r3, [sp, #12]
 8005c7e:	3307      	adds	r3, #7
 8005c80:	f023 0307 	bic.w	r3, r3, #7
 8005c84:	3308      	adds	r3, #8
 8005c86:	9303      	str	r3, [sp, #12]
 8005c88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c8a:	443b      	add	r3, r7
 8005c8c:	9309      	str	r3, [sp, #36]	; 0x24
 8005c8e:	e767      	b.n	8005b60 <_vfiprintf_r+0x94>
 8005c90:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c94:	460c      	mov	r4, r1
 8005c96:	2001      	movs	r0, #1
 8005c98:	e7a5      	b.n	8005be6 <_vfiprintf_r+0x11a>
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	3401      	adds	r4, #1
 8005c9e:	9305      	str	r3, [sp, #20]
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	f04f 0c0a 	mov.w	ip, #10
 8005ca6:	4620      	mov	r0, r4
 8005ca8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cac:	3a30      	subs	r2, #48	; 0x30
 8005cae:	2a09      	cmp	r2, #9
 8005cb0:	d903      	bls.n	8005cba <_vfiprintf_r+0x1ee>
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d0c5      	beq.n	8005c42 <_vfiprintf_r+0x176>
 8005cb6:	9105      	str	r1, [sp, #20]
 8005cb8:	e7c3      	b.n	8005c42 <_vfiprintf_r+0x176>
 8005cba:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cbe:	4604      	mov	r4, r0
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e7f0      	b.n	8005ca6 <_vfiprintf_r+0x1da>
 8005cc4:	ab03      	add	r3, sp, #12
 8005cc6:	9300      	str	r3, [sp, #0]
 8005cc8:	462a      	mov	r2, r5
 8005cca:	4b16      	ldr	r3, [pc, #88]	; (8005d24 <_vfiprintf_r+0x258>)
 8005ccc:	a904      	add	r1, sp, #16
 8005cce:	4630      	mov	r0, r6
 8005cd0:	f3af 8000 	nop.w
 8005cd4:	4607      	mov	r7, r0
 8005cd6:	1c78      	adds	r0, r7, #1
 8005cd8:	d1d6      	bne.n	8005c88 <_vfiprintf_r+0x1bc>
 8005cda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005cdc:	07d9      	lsls	r1, r3, #31
 8005cde:	d405      	bmi.n	8005cec <_vfiprintf_r+0x220>
 8005ce0:	89ab      	ldrh	r3, [r5, #12]
 8005ce2:	059a      	lsls	r2, r3, #22
 8005ce4:	d402      	bmi.n	8005cec <_vfiprintf_r+0x220>
 8005ce6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ce8:	f7ff fe6b 	bl	80059c2 <__retarget_lock_release_recursive>
 8005cec:	89ab      	ldrh	r3, [r5, #12]
 8005cee:	065b      	lsls	r3, r3, #25
 8005cf0:	f53f af12 	bmi.w	8005b18 <_vfiprintf_r+0x4c>
 8005cf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005cf6:	e711      	b.n	8005b1c <_vfiprintf_r+0x50>
 8005cf8:	ab03      	add	r3, sp, #12
 8005cfa:	9300      	str	r3, [sp, #0]
 8005cfc:	462a      	mov	r2, r5
 8005cfe:	4b09      	ldr	r3, [pc, #36]	; (8005d24 <_vfiprintf_r+0x258>)
 8005d00:	a904      	add	r1, sp, #16
 8005d02:	4630      	mov	r0, r6
 8005d04:	f000 f880 	bl	8005e08 <_printf_i>
 8005d08:	e7e4      	b.n	8005cd4 <_vfiprintf_r+0x208>
 8005d0a:	bf00      	nop
 8005d0c:	0800674c 	.word	0x0800674c
 8005d10:	0800676c 	.word	0x0800676c
 8005d14:	0800672c 	.word	0x0800672c
 8005d18:	0800678c 	.word	0x0800678c
 8005d1c:	08006796 	.word	0x08006796
 8005d20:	00000000 	.word	0x00000000
 8005d24:	08005aa7 	.word	0x08005aa7
 8005d28:	08006792 	.word	0x08006792

08005d2c <_printf_common>:
 8005d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d30:	4616      	mov	r6, r2
 8005d32:	4699      	mov	r9, r3
 8005d34:	688a      	ldr	r2, [r1, #8]
 8005d36:	690b      	ldr	r3, [r1, #16]
 8005d38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	bfb8      	it	lt
 8005d40:	4613      	movlt	r3, r2
 8005d42:	6033      	str	r3, [r6, #0]
 8005d44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d48:	4607      	mov	r7, r0
 8005d4a:	460c      	mov	r4, r1
 8005d4c:	b10a      	cbz	r2, 8005d52 <_printf_common+0x26>
 8005d4e:	3301      	adds	r3, #1
 8005d50:	6033      	str	r3, [r6, #0]
 8005d52:	6823      	ldr	r3, [r4, #0]
 8005d54:	0699      	lsls	r1, r3, #26
 8005d56:	bf42      	ittt	mi
 8005d58:	6833      	ldrmi	r3, [r6, #0]
 8005d5a:	3302      	addmi	r3, #2
 8005d5c:	6033      	strmi	r3, [r6, #0]
 8005d5e:	6825      	ldr	r5, [r4, #0]
 8005d60:	f015 0506 	ands.w	r5, r5, #6
 8005d64:	d106      	bne.n	8005d74 <_printf_common+0x48>
 8005d66:	f104 0a19 	add.w	sl, r4, #25
 8005d6a:	68e3      	ldr	r3, [r4, #12]
 8005d6c:	6832      	ldr	r2, [r6, #0]
 8005d6e:	1a9b      	subs	r3, r3, r2
 8005d70:	42ab      	cmp	r3, r5
 8005d72:	dc26      	bgt.n	8005dc2 <_printf_common+0x96>
 8005d74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d78:	1e13      	subs	r3, r2, #0
 8005d7a:	6822      	ldr	r2, [r4, #0]
 8005d7c:	bf18      	it	ne
 8005d7e:	2301      	movne	r3, #1
 8005d80:	0692      	lsls	r2, r2, #26
 8005d82:	d42b      	bmi.n	8005ddc <_printf_common+0xb0>
 8005d84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d88:	4649      	mov	r1, r9
 8005d8a:	4638      	mov	r0, r7
 8005d8c:	47c0      	blx	r8
 8005d8e:	3001      	adds	r0, #1
 8005d90:	d01e      	beq.n	8005dd0 <_printf_common+0xa4>
 8005d92:	6823      	ldr	r3, [r4, #0]
 8005d94:	68e5      	ldr	r5, [r4, #12]
 8005d96:	6832      	ldr	r2, [r6, #0]
 8005d98:	f003 0306 	and.w	r3, r3, #6
 8005d9c:	2b04      	cmp	r3, #4
 8005d9e:	bf08      	it	eq
 8005da0:	1aad      	subeq	r5, r5, r2
 8005da2:	68a3      	ldr	r3, [r4, #8]
 8005da4:	6922      	ldr	r2, [r4, #16]
 8005da6:	bf0c      	ite	eq
 8005da8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005dac:	2500      	movne	r5, #0
 8005dae:	4293      	cmp	r3, r2
 8005db0:	bfc4      	itt	gt
 8005db2:	1a9b      	subgt	r3, r3, r2
 8005db4:	18ed      	addgt	r5, r5, r3
 8005db6:	2600      	movs	r6, #0
 8005db8:	341a      	adds	r4, #26
 8005dba:	42b5      	cmp	r5, r6
 8005dbc:	d11a      	bne.n	8005df4 <_printf_common+0xc8>
 8005dbe:	2000      	movs	r0, #0
 8005dc0:	e008      	b.n	8005dd4 <_printf_common+0xa8>
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	4652      	mov	r2, sl
 8005dc6:	4649      	mov	r1, r9
 8005dc8:	4638      	mov	r0, r7
 8005dca:	47c0      	blx	r8
 8005dcc:	3001      	adds	r0, #1
 8005dce:	d103      	bne.n	8005dd8 <_printf_common+0xac>
 8005dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8005dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dd8:	3501      	adds	r5, #1
 8005dda:	e7c6      	b.n	8005d6a <_printf_common+0x3e>
 8005ddc:	18e1      	adds	r1, r4, r3
 8005dde:	1c5a      	adds	r2, r3, #1
 8005de0:	2030      	movs	r0, #48	; 0x30
 8005de2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005de6:	4422      	add	r2, r4
 8005de8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005dec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005df0:	3302      	adds	r3, #2
 8005df2:	e7c7      	b.n	8005d84 <_printf_common+0x58>
 8005df4:	2301      	movs	r3, #1
 8005df6:	4622      	mov	r2, r4
 8005df8:	4649      	mov	r1, r9
 8005dfa:	4638      	mov	r0, r7
 8005dfc:	47c0      	blx	r8
 8005dfe:	3001      	adds	r0, #1
 8005e00:	d0e6      	beq.n	8005dd0 <_printf_common+0xa4>
 8005e02:	3601      	adds	r6, #1
 8005e04:	e7d9      	b.n	8005dba <_printf_common+0x8e>
	...

08005e08 <_printf_i>:
 8005e08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e0c:	460c      	mov	r4, r1
 8005e0e:	4691      	mov	r9, r2
 8005e10:	7e27      	ldrb	r7, [r4, #24]
 8005e12:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005e14:	2f78      	cmp	r7, #120	; 0x78
 8005e16:	4680      	mov	r8, r0
 8005e18:	469a      	mov	sl, r3
 8005e1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e1e:	d807      	bhi.n	8005e30 <_printf_i+0x28>
 8005e20:	2f62      	cmp	r7, #98	; 0x62
 8005e22:	d80a      	bhi.n	8005e3a <_printf_i+0x32>
 8005e24:	2f00      	cmp	r7, #0
 8005e26:	f000 80d8 	beq.w	8005fda <_printf_i+0x1d2>
 8005e2a:	2f58      	cmp	r7, #88	; 0x58
 8005e2c:	f000 80a3 	beq.w	8005f76 <_printf_i+0x16e>
 8005e30:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005e34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e38:	e03a      	b.n	8005eb0 <_printf_i+0xa8>
 8005e3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e3e:	2b15      	cmp	r3, #21
 8005e40:	d8f6      	bhi.n	8005e30 <_printf_i+0x28>
 8005e42:	a001      	add	r0, pc, #4	; (adr r0, 8005e48 <_printf_i+0x40>)
 8005e44:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005e48:	08005ea1 	.word	0x08005ea1
 8005e4c:	08005eb5 	.word	0x08005eb5
 8005e50:	08005e31 	.word	0x08005e31
 8005e54:	08005e31 	.word	0x08005e31
 8005e58:	08005e31 	.word	0x08005e31
 8005e5c:	08005e31 	.word	0x08005e31
 8005e60:	08005eb5 	.word	0x08005eb5
 8005e64:	08005e31 	.word	0x08005e31
 8005e68:	08005e31 	.word	0x08005e31
 8005e6c:	08005e31 	.word	0x08005e31
 8005e70:	08005e31 	.word	0x08005e31
 8005e74:	08005fc1 	.word	0x08005fc1
 8005e78:	08005ee5 	.word	0x08005ee5
 8005e7c:	08005fa3 	.word	0x08005fa3
 8005e80:	08005e31 	.word	0x08005e31
 8005e84:	08005e31 	.word	0x08005e31
 8005e88:	08005fe3 	.word	0x08005fe3
 8005e8c:	08005e31 	.word	0x08005e31
 8005e90:	08005ee5 	.word	0x08005ee5
 8005e94:	08005e31 	.word	0x08005e31
 8005e98:	08005e31 	.word	0x08005e31
 8005e9c:	08005fab 	.word	0x08005fab
 8005ea0:	680b      	ldr	r3, [r1, #0]
 8005ea2:	1d1a      	adds	r2, r3, #4
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	600a      	str	r2, [r1, #0]
 8005ea8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005eac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e0a3      	b.n	8005ffc <_printf_i+0x1f4>
 8005eb4:	6825      	ldr	r5, [r4, #0]
 8005eb6:	6808      	ldr	r0, [r1, #0]
 8005eb8:	062e      	lsls	r6, r5, #24
 8005eba:	f100 0304 	add.w	r3, r0, #4
 8005ebe:	d50a      	bpl.n	8005ed6 <_printf_i+0xce>
 8005ec0:	6805      	ldr	r5, [r0, #0]
 8005ec2:	600b      	str	r3, [r1, #0]
 8005ec4:	2d00      	cmp	r5, #0
 8005ec6:	da03      	bge.n	8005ed0 <_printf_i+0xc8>
 8005ec8:	232d      	movs	r3, #45	; 0x2d
 8005eca:	426d      	negs	r5, r5
 8005ecc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ed0:	485e      	ldr	r0, [pc, #376]	; (800604c <_printf_i+0x244>)
 8005ed2:	230a      	movs	r3, #10
 8005ed4:	e019      	b.n	8005f0a <_printf_i+0x102>
 8005ed6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005eda:	6805      	ldr	r5, [r0, #0]
 8005edc:	600b      	str	r3, [r1, #0]
 8005ede:	bf18      	it	ne
 8005ee0:	b22d      	sxthne	r5, r5
 8005ee2:	e7ef      	b.n	8005ec4 <_printf_i+0xbc>
 8005ee4:	680b      	ldr	r3, [r1, #0]
 8005ee6:	6825      	ldr	r5, [r4, #0]
 8005ee8:	1d18      	adds	r0, r3, #4
 8005eea:	6008      	str	r0, [r1, #0]
 8005eec:	0628      	lsls	r0, r5, #24
 8005eee:	d501      	bpl.n	8005ef4 <_printf_i+0xec>
 8005ef0:	681d      	ldr	r5, [r3, #0]
 8005ef2:	e002      	b.n	8005efa <_printf_i+0xf2>
 8005ef4:	0669      	lsls	r1, r5, #25
 8005ef6:	d5fb      	bpl.n	8005ef0 <_printf_i+0xe8>
 8005ef8:	881d      	ldrh	r5, [r3, #0]
 8005efa:	4854      	ldr	r0, [pc, #336]	; (800604c <_printf_i+0x244>)
 8005efc:	2f6f      	cmp	r7, #111	; 0x6f
 8005efe:	bf0c      	ite	eq
 8005f00:	2308      	moveq	r3, #8
 8005f02:	230a      	movne	r3, #10
 8005f04:	2100      	movs	r1, #0
 8005f06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f0a:	6866      	ldr	r6, [r4, #4]
 8005f0c:	60a6      	str	r6, [r4, #8]
 8005f0e:	2e00      	cmp	r6, #0
 8005f10:	bfa2      	ittt	ge
 8005f12:	6821      	ldrge	r1, [r4, #0]
 8005f14:	f021 0104 	bicge.w	r1, r1, #4
 8005f18:	6021      	strge	r1, [r4, #0]
 8005f1a:	b90d      	cbnz	r5, 8005f20 <_printf_i+0x118>
 8005f1c:	2e00      	cmp	r6, #0
 8005f1e:	d04d      	beq.n	8005fbc <_printf_i+0x1b4>
 8005f20:	4616      	mov	r6, r2
 8005f22:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f26:	fb03 5711 	mls	r7, r3, r1, r5
 8005f2a:	5dc7      	ldrb	r7, [r0, r7]
 8005f2c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f30:	462f      	mov	r7, r5
 8005f32:	42bb      	cmp	r3, r7
 8005f34:	460d      	mov	r5, r1
 8005f36:	d9f4      	bls.n	8005f22 <_printf_i+0x11a>
 8005f38:	2b08      	cmp	r3, #8
 8005f3a:	d10b      	bne.n	8005f54 <_printf_i+0x14c>
 8005f3c:	6823      	ldr	r3, [r4, #0]
 8005f3e:	07df      	lsls	r7, r3, #31
 8005f40:	d508      	bpl.n	8005f54 <_printf_i+0x14c>
 8005f42:	6923      	ldr	r3, [r4, #16]
 8005f44:	6861      	ldr	r1, [r4, #4]
 8005f46:	4299      	cmp	r1, r3
 8005f48:	bfde      	ittt	le
 8005f4a:	2330      	movle	r3, #48	; 0x30
 8005f4c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f50:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f54:	1b92      	subs	r2, r2, r6
 8005f56:	6122      	str	r2, [r4, #16]
 8005f58:	f8cd a000 	str.w	sl, [sp]
 8005f5c:	464b      	mov	r3, r9
 8005f5e:	aa03      	add	r2, sp, #12
 8005f60:	4621      	mov	r1, r4
 8005f62:	4640      	mov	r0, r8
 8005f64:	f7ff fee2 	bl	8005d2c <_printf_common>
 8005f68:	3001      	adds	r0, #1
 8005f6a:	d14c      	bne.n	8006006 <_printf_i+0x1fe>
 8005f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f70:	b004      	add	sp, #16
 8005f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f76:	4835      	ldr	r0, [pc, #212]	; (800604c <_printf_i+0x244>)
 8005f78:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005f7c:	6823      	ldr	r3, [r4, #0]
 8005f7e:	680e      	ldr	r6, [r1, #0]
 8005f80:	061f      	lsls	r7, r3, #24
 8005f82:	f856 5b04 	ldr.w	r5, [r6], #4
 8005f86:	600e      	str	r6, [r1, #0]
 8005f88:	d514      	bpl.n	8005fb4 <_printf_i+0x1ac>
 8005f8a:	07d9      	lsls	r1, r3, #31
 8005f8c:	bf44      	itt	mi
 8005f8e:	f043 0320 	orrmi.w	r3, r3, #32
 8005f92:	6023      	strmi	r3, [r4, #0]
 8005f94:	b91d      	cbnz	r5, 8005f9e <_printf_i+0x196>
 8005f96:	6823      	ldr	r3, [r4, #0]
 8005f98:	f023 0320 	bic.w	r3, r3, #32
 8005f9c:	6023      	str	r3, [r4, #0]
 8005f9e:	2310      	movs	r3, #16
 8005fa0:	e7b0      	b.n	8005f04 <_printf_i+0xfc>
 8005fa2:	6823      	ldr	r3, [r4, #0]
 8005fa4:	f043 0320 	orr.w	r3, r3, #32
 8005fa8:	6023      	str	r3, [r4, #0]
 8005faa:	2378      	movs	r3, #120	; 0x78
 8005fac:	4828      	ldr	r0, [pc, #160]	; (8006050 <_printf_i+0x248>)
 8005fae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005fb2:	e7e3      	b.n	8005f7c <_printf_i+0x174>
 8005fb4:	065e      	lsls	r6, r3, #25
 8005fb6:	bf48      	it	mi
 8005fb8:	b2ad      	uxthmi	r5, r5
 8005fba:	e7e6      	b.n	8005f8a <_printf_i+0x182>
 8005fbc:	4616      	mov	r6, r2
 8005fbe:	e7bb      	b.n	8005f38 <_printf_i+0x130>
 8005fc0:	680b      	ldr	r3, [r1, #0]
 8005fc2:	6826      	ldr	r6, [r4, #0]
 8005fc4:	6960      	ldr	r0, [r4, #20]
 8005fc6:	1d1d      	adds	r5, r3, #4
 8005fc8:	600d      	str	r5, [r1, #0]
 8005fca:	0635      	lsls	r5, r6, #24
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	d501      	bpl.n	8005fd4 <_printf_i+0x1cc>
 8005fd0:	6018      	str	r0, [r3, #0]
 8005fd2:	e002      	b.n	8005fda <_printf_i+0x1d2>
 8005fd4:	0671      	lsls	r1, r6, #25
 8005fd6:	d5fb      	bpl.n	8005fd0 <_printf_i+0x1c8>
 8005fd8:	8018      	strh	r0, [r3, #0]
 8005fda:	2300      	movs	r3, #0
 8005fdc:	6123      	str	r3, [r4, #16]
 8005fde:	4616      	mov	r6, r2
 8005fe0:	e7ba      	b.n	8005f58 <_printf_i+0x150>
 8005fe2:	680b      	ldr	r3, [r1, #0]
 8005fe4:	1d1a      	adds	r2, r3, #4
 8005fe6:	600a      	str	r2, [r1, #0]
 8005fe8:	681e      	ldr	r6, [r3, #0]
 8005fea:	6862      	ldr	r2, [r4, #4]
 8005fec:	2100      	movs	r1, #0
 8005fee:	4630      	mov	r0, r6
 8005ff0:	f7fa f8f6 	bl	80001e0 <memchr>
 8005ff4:	b108      	cbz	r0, 8005ffa <_printf_i+0x1f2>
 8005ff6:	1b80      	subs	r0, r0, r6
 8005ff8:	6060      	str	r0, [r4, #4]
 8005ffa:	6863      	ldr	r3, [r4, #4]
 8005ffc:	6123      	str	r3, [r4, #16]
 8005ffe:	2300      	movs	r3, #0
 8006000:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006004:	e7a8      	b.n	8005f58 <_printf_i+0x150>
 8006006:	6923      	ldr	r3, [r4, #16]
 8006008:	4632      	mov	r2, r6
 800600a:	4649      	mov	r1, r9
 800600c:	4640      	mov	r0, r8
 800600e:	47d0      	blx	sl
 8006010:	3001      	adds	r0, #1
 8006012:	d0ab      	beq.n	8005f6c <_printf_i+0x164>
 8006014:	6823      	ldr	r3, [r4, #0]
 8006016:	079b      	lsls	r3, r3, #30
 8006018:	d413      	bmi.n	8006042 <_printf_i+0x23a>
 800601a:	68e0      	ldr	r0, [r4, #12]
 800601c:	9b03      	ldr	r3, [sp, #12]
 800601e:	4298      	cmp	r0, r3
 8006020:	bfb8      	it	lt
 8006022:	4618      	movlt	r0, r3
 8006024:	e7a4      	b.n	8005f70 <_printf_i+0x168>
 8006026:	2301      	movs	r3, #1
 8006028:	4632      	mov	r2, r6
 800602a:	4649      	mov	r1, r9
 800602c:	4640      	mov	r0, r8
 800602e:	47d0      	blx	sl
 8006030:	3001      	adds	r0, #1
 8006032:	d09b      	beq.n	8005f6c <_printf_i+0x164>
 8006034:	3501      	adds	r5, #1
 8006036:	68e3      	ldr	r3, [r4, #12]
 8006038:	9903      	ldr	r1, [sp, #12]
 800603a:	1a5b      	subs	r3, r3, r1
 800603c:	42ab      	cmp	r3, r5
 800603e:	dcf2      	bgt.n	8006026 <_printf_i+0x21e>
 8006040:	e7eb      	b.n	800601a <_printf_i+0x212>
 8006042:	2500      	movs	r5, #0
 8006044:	f104 0619 	add.w	r6, r4, #25
 8006048:	e7f5      	b.n	8006036 <_printf_i+0x22e>
 800604a:	bf00      	nop
 800604c:	0800679d 	.word	0x0800679d
 8006050:	080067ae 	.word	0x080067ae

08006054 <_sbrk_r>:
 8006054:	b538      	push	{r3, r4, r5, lr}
 8006056:	4d06      	ldr	r5, [pc, #24]	; (8006070 <_sbrk_r+0x1c>)
 8006058:	2300      	movs	r3, #0
 800605a:	4604      	mov	r4, r0
 800605c:	4608      	mov	r0, r1
 800605e:	602b      	str	r3, [r5, #0]
 8006060:	f7fb fdf4 	bl	8001c4c <_sbrk>
 8006064:	1c43      	adds	r3, r0, #1
 8006066:	d102      	bne.n	800606e <_sbrk_r+0x1a>
 8006068:	682b      	ldr	r3, [r5, #0]
 800606a:	b103      	cbz	r3, 800606e <_sbrk_r+0x1a>
 800606c:	6023      	str	r3, [r4, #0]
 800606e:	bd38      	pop	{r3, r4, r5, pc}
 8006070:	20000374 	.word	0x20000374

08006074 <__sread>:
 8006074:	b510      	push	{r4, lr}
 8006076:	460c      	mov	r4, r1
 8006078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800607c:	f000 fab4 	bl	80065e8 <_read_r>
 8006080:	2800      	cmp	r0, #0
 8006082:	bfab      	itete	ge
 8006084:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006086:	89a3      	ldrhlt	r3, [r4, #12]
 8006088:	181b      	addge	r3, r3, r0
 800608a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800608e:	bfac      	ite	ge
 8006090:	6563      	strge	r3, [r4, #84]	; 0x54
 8006092:	81a3      	strhlt	r3, [r4, #12]
 8006094:	bd10      	pop	{r4, pc}

08006096 <__swrite>:
 8006096:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800609a:	461f      	mov	r7, r3
 800609c:	898b      	ldrh	r3, [r1, #12]
 800609e:	05db      	lsls	r3, r3, #23
 80060a0:	4605      	mov	r5, r0
 80060a2:	460c      	mov	r4, r1
 80060a4:	4616      	mov	r6, r2
 80060a6:	d505      	bpl.n	80060b4 <__swrite+0x1e>
 80060a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060ac:	2302      	movs	r3, #2
 80060ae:	2200      	movs	r2, #0
 80060b0:	f000 f9c8 	bl	8006444 <_lseek_r>
 80060b4:	89a3      	ldrh	r3, [r4, #12]
 80060b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060be:	81a3      	strh	r3, [r4, #12]
 80060c0:	4632      	mov	r2, r6
 80060c2:	463b      	mov	r3, r7
 80060c4:	4628      	mov	r0, r5
 80060c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060ca:	f000 b869 	b.w	80061a0 <_write_r>

080060ce <__sseek>:
 80060ce:	b510      	push	{r4, lr}
 80060d0:	460c      	mov	r4, r1
 80060d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060d6:	f000 f9b5 	bl	8006444 <_lseek_r>
 80060da:	1c43      	adds	r3, r0, #1
 80060dc:	89a3      	ldrh	r3, [r4, #12]
 80060de:	bf15      	itete	ne
 80060e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80060e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80060e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80060ea:	81a3      	strheq	r3, [r4, #12]
 80060ec:	bf18      	it	ne
 80060ee:	81a3      	strhne	r3, [r4, #12]
 80060f0:	bd10      	pop	{r4, pc}

080060f2 <__sclose>:
 80060f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060f6:	f000 b8d3 	b.w	80062a0 <_close_r>
	...

080060fc <__swbuf_r>:
 80060fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060fe:	460e      	mov	r6, r1
 8006100:	4614      	mov	r4, r2
 8006102:	4605      	mov	r5, r0
 8006104:	b118      	cbz	r0, 800610e <__swbuf_r+0x12>
 8006106:	6983      	ldr	r3, [r0, #24]
 8006108:	b90b      	cbnz	r3, 800610e <__swbuf_r+0x12>
 800610a:	f7ff fbbb 	bl	8005884 <__sinit>
 800610e:	4b21      	ldr	r3, [pc, #132]	; (8006194 <__swbuf_r+0x98>)
 8006110:	429c      	cmp	r4, r3
 8006112:	d12b      	bne.n	800616c <__swbuf_r+0x70>
 8006114:	686c      	ldr	r4, [r5, #4]
 8006116:	69a3      	ldr	r3, [r4, #24]
 8006118:	60a3      	str	r3, [r4, #8]
 800611a:	89a3      	ldrh	r3, [r4, #12]
 800611c:	071a      	lsls	r2, r3, #28
 800611e:	d52f      	bpl.n	8006180 <__swbuf_r+0x84>
 8006120:	6923      	ldr	r3, [r4, #16]
 8006122:	b36b      	cbz	r3, 8006180 <__swbuf_r+0x84>
 8006124:	6923      	ldr	r3, [r4, #16]
 8006126:	6820      	ldr	r0, [r4, #0]
 8006128:	1ac0      	subs	r0, r0, r3
 800612a:	6963      	ldr	r3, [r4, #20]
 800612c:	b2f6      	uxtb	r6, r6
 800612e:	4283      	cmp	r3, r0
 8006130:	4637      	mov	r7, r6
 8006132:	dc04      	bgt.n	800613e <__swbuf_r+0x42>
 8006134:	4621      	mov	r1, r4
 8006136:	4628      	mov	r0, r5
 8006138:	f000 f948 	bl	80063cc <_fflush_r>
 800613c:	bb30      	cbnz	r0, 800618c <__swbuf_r+0x90>
 800613e:	68a3      	ldr	r3, [r4, #8]
 8006140:	3b01      	subs	r3, #1
 8006142:	60a3      	str	r3, [r4, #8]
 8006144:	6823      	ldr	r3, [r4, #0]
 8006146:	1c5a      	adds	r2, r3, #1
 8006148:	6022      	str	r2, [r4, #0]
 800614a:	701e      	strb	r6, [r3, #0]
 800614c:	6963      	ldr	r3, [r4, #20]
 800614e:	3001      	adds	r0, #1
 8006150:	4283      	cmp	r3, r0
 8006152:	d004      	beq.n	800615e <__swbuf_r+0x62>
 8006154:	89a3      	ldrh	r3, [r4, #12]
 8006156:	07db      	lsls	r3, r3, #31
 8006158:	d506      	bpl.n	8006168 <__swbuf_r+0x6c>
 800615a:	2e0a      	cmp	r6, #10
 800615c:	d104      	bne.n	8006168 <__swbuf_r+0x6c>
 800615e:	4621      	mov	r1, r4
 8006160:	4628      	mov	r0, r5
 8006162:	f000 f933 	bl	80063cc <_fflush_r>
 8006166:	b988      	cbnz	r0, 800618c <__swbuf_r+0x90>
 8006168:	4638      	mov	r0, r7
 800616a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800616c:	4b0a      	ldr	r3, [pc, #40]	; (8006198 <__swbuf_r+0x9c>)
 800616e:	429c      	cmp	r4, r3
 8006170:	d101      	bne.n	8006176 <__swbuf_r+0x7a>
 8006172:	68ac      	ldr	r4, [r5, #8]
 8006174:	e7cf      	b.n	8006116 <__swbuf_r+0x1a>
 8006176:	4b09      	ldr	r3, [pc, #36]	; (800619c <__swbuf_r+0xa0>)
 8006178:	429c      	cmp	r4, r3
 800617a:	bf08      	it	eq
 800617c:	68ec      	ldreq	r4, [r5, #12]
 800617e:	e7ca      	b.n	8006116 <__swbuf_r+0x1a>
 8006180:	4621      	mov	r1, r4
 8006182:	4628      	mov	r0, r5
 8006184:	f000 f81e 	bl	80061c4 <__swsetup_r>
 8006188:	2800      	cmp	r0, #0
 800618a:	d0cb      	beq.n	8006124 <__swbuf_r+0x28>
 800618c:	f04f 37ff 	mov.w	r7, #4294967295
 8006190:	e7ea      	b.n	8006168 <__swbuf_r+0x6c>
 8006192:	bf00      	nop
 8006194:	0800674c 	.word	0x0800674c
 8006198:	0800676c 	.word	0x0800676c
 800619c:	0800672c 	.word	0x0800672c

080061a0 <_write_r>:
 80061a0:	b538      	push	{r3, r4, r5, lr}
 80061a2:	4d07      	ldr	r5, [pc, #28]	; (80061c0 <_write_r+0x20>)
 80061a4:	4604      	mov	r4, r0
 80061a6:	4608      	mov	r0, r1
 80061a8:	4611      	mov	r1, r2
 80061aa:	2200      	movs	r2, #0
 80061ac:	602a      	str	r2, [r5, #0]
 80061ae:	461a      	mov	r2, r3
 80061b0:	f7fb fcfb 	bl	8001baa <_write>
 80061b4:	1c43      	adds	r3, r0, #1
 80061b6:	d102      	bne.n	80061be <_write_r+0x1e>
 80061b8:	682b      	ldr	r3, [r5, #0]
 80061ba:	b103      	cbz	r3, 80061be <_write_r+0x1e>
 80061bc:	6023      	str	r3, [r4, #0]
 80061be:	bd38      	pop	{r3, r4, r5, pc}
 80061c0:	20000374 	.word	0x20000374

080061c4 <__swsetup_r>:
 80061c4:	4b32      	ldr	r3, [pc, #200]	; (8006290 <__swsetup_r+0xcc>)
 80061c6:	b570      	push	{r4, r5, r6, lr}
 80061c8:	681d      	ldr	r5, [r3, #0]
 80061ca:	4606      	mov	r6, r0
 80061cc:	460c      	mov	r4, r1
 80061ce:	b125      	cbz	r5, 80061da <__swsetup_r+0x16>
 80061d0:	69ab      	ldr	r3, [r5, #24]
 80061d2:	b913      	cbnz	r3, 80061da <__swsetup_r+0x16>
 80061d4:	4628      	mov	r0, r5
 80061d6:	f7ff fb55 	bl	8005884 <__sinit>
 80061da:	4b2e      	ldr	r3, [pc, #184]	; (8006294 <__swsetup_r+0xd0>)
 80061dc:	429c      	cmp	r4, r3
 80061de:	d10f      	bne.n	8006200 <__swsetup_r+0x3c>
 80061e0:	686c      	ldr	r4, [r5, #4]
 80061e2:	89a3      	ldrh	r3, [r4, #12]
 80061e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80061e8:	0719      	lsls	r1, r3, #28
 80061ea:	d42c      	bmi.n	8006246 <__swsetup_r+0x82>
 80061ec:	06dd      	lsls	r5, r3, #27
 80061ee:	d411      	bmi.n	8006214 <__swsetup_r+0x50>
 80061f0:	2309      	movs	r3, #9
 80061f2:	6033      	str	r3, [r6, #0]
 80061f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80061f8:	81a3      	strh	r3, [r4, #12]
 80061fa:	f04f 30ff 	mov.w	r0, #4294967295
 80061fe:	e03e      	b.n	800627e <__swsetup_r+0xba>
 8006200:	4b25      	ldr	r3, [pc, #148]	; (8006298 <__swsetup_r+0xd4>)
 8006202:	429c      	cmp	r4, r3
 8006204:	d101      	bne.n	800620a <__swsetup_r+0x46>
 8006206:	68ac      	ldr	r4, [r5, #8]
 8006208:	e7eb      	b.n	80061e2 <__swsetup_r+0x1e>
 800620a:	4b24      	ldr	r3, [pc, #144]	; (800629c <__swsetup_r+0xd8>)
 800620c:	429c      	cmp	r4, r3
 800620e:	bf08      	it	eq
 8006210:	68ec      	ldreq	r4, [r5, #12]
 8006212:	e7e6      	b.n	80061e2 <__swsetup_r+0x1e>
 8006214:	0758      	lsls	r0, r3, #29
 8006216:	d512      	bpl.n	800623e <__swsetup_r+0x7a>
 8006218:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800621a:	b141      	cbz	r1, 800622e <__swsetup_r+0x6a>
 800621c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006220:	4299      	cmp	r1, r3
 8006222:	d002      	beq.n	800622a <__swsetup_r+0x66>
 8006224:	4630      	mov	r0, r6
 8006226:	f000 f98f 	bl	8006548 <_free_r>
 800622a:	2300      	movs	r3, #0
 800622c:	6363      	str	r3, [r4, #52]	; 0x34
 800622e:	89a3      	ldrh	r3, [r4, #12]
 8006230:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006234:	81a3      	strh	r3, [r4, #12]
 8006236:	2300      	movs	r3, #0
 8006238:	6063      	str	r3, [r4, #4]
 800623a:	6923      	ldr	r3, [r4, #16]
 800623c:	6023      	str	r3, [r4, #0]
 800623e:	89a3      	ldrh	r3, [r4, #12]
 8006240:	f043 0308 	orr.w	r3, r3, #8
 8006244:	81a3      	strh	r3, [r4, #12]
 8006246:	6923      	ldr	r3, [r4, #16]
 8006248:	b94b      	cbnz	r3, 800625e <__swsetup_r+0x9a>
 800624a:	89a3      	ldrh	r3, [r4, #12]
 800624c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006250:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006254:	d003      	beq.n	800625e <__swsetup_r+0x9a>
 8006256:	4621      	mov	r1, r4
 8006258:	4630      	mov	r0, r6
 800625a:	f000 f929 	bl	80064b0 <__smakebuf_r>
 800625e:	89a0      	ldrh	r0, [r4, #12]
 8006260:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006264:	f010 0301 	ands.w	r3, r0, #1
 8006268:	d00a      	beq.n	8006280 <__swsetup_r+0xbc>
 800626a:	2300      	movs	r3, #0
 800626c:	60a3      	str	r3, [r4, #8]
 800626e:	6963      	ldr	r3, [r4, #20]
 8006270:	425b      	negs	r3, r3
 8006272:	61a3      	str	r3, [r4, #24]
 8006274:	6923      	ldr	r3, [r4, #16]
 8006276:	b943      	cbnz	r3, 800628a <__swsetup_r+0xc6>
 8006278:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800627c:	d1ba      	bne.n	80061f4 <__swsetup_r+0x30>
 800627e:	bd70      	pop	{r4, r5, r6, pc}
 8006280:	0781      	lsls	r1, r0, #30
 8006282:	bf58      	it	pl
 8006284:	6963      	ldrpl	r3, [r4, #20]
 8006286:	60a3      	str	r3, [r4, #8]
 8006288:	e7f4      	b.n	8006274 <__swsetup_r+0xb0>
 800628a:	2000      	movs	r0, #0
 800628c:	e7f7      	b.n	800627e <__swsetup_r+0xba>
 800628e:	bf00      	nop
 8006290:	20000010 	.word	0x20000010
 8006294:	0800674c 	.word	0x0800674c
 8006298:	0800676c 	.word	0x0800676c
 800629c:	0800672c 	.word	0x0800672c

080062a0 <_close_r>:
 80062a0:	b538      	push	{r3, r4, r5, lr}
 80062a2:	4d06      	ldr	r5, [pc, #24]	; (80062bc <_close_r+0x1c>)
 80062a4:	2300      	movs	r3, #0
 80062a6:	4604      	mov	r4, r0
 80062a8:	4608      	mov	r0, r1
 80062aa:	602b      	str	r3, [r5, #0]
 80062ac:	f7fb fc99 	bl	8001be2 <_close>
 80062b0:	1c43      	adds	r3, r0, #1
 80062b2:	d102      	bne.n	80062ba <_close_r+0x1a>
 80062b4:	682b      	ldr	r3, [r5, #0]
 80062b6:	b103      	cbz	r3, 80062ba <_close_r+0x1a>
 80062b8:	6023      	str	r3, [r4, #0]
 80062ba:	bd38      	pop	{r3, r4, r5, pc}
 80062bc:	20000374 	.word	0x20000374

080062c0 <__sflush_r>:
 80062c0:	898a      	ldrh	r2, [r1, #12]
 80062c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062c6:	4605      	mov	r5, r0
 80062c8:	0710      	lsls	r0, r2, #28
 80062ca:	460c      	mov	r4, r1
 80062cc:	d458      	bmi.n	8006380 <__sflush_r+0xc0>
 80062ce:	684b      	ldr	r3, [r1, #4]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	dc05      	bgt.n	80062e0 <__sflush_r+0x20>
 80062d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	dc02      	bgt.n	80062e0 <__sflush_r+0x20>
 80062da:	2000      	movs	r0, #0
 80062dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80062e2:	2e00      	cmp	r6, #0
 80062e4:	d0f9      	beq.n	80062da <__sflush_r+0x1a>
 80062e6:	2300      	movs	r3, #0
 80062e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80062ec:	682f      	ldr	r7, [r5, #0]
 80062ee:	602b      	str	r3, [r5, #0]
 80062f0:	d032      	beq.n	8006358 <__sflush_r+0x98>
 80062f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80062f4:	89a3      	ldrh	r3, [r4, #12]
 80062f6:	075a      	lsls	r2, r3, #29
 80062f8:	d505      	bpl.n	8006306 <__sflush_r+0x46>
 80062fa:	6863      	ldr	r3, [r4, #4]
 80062fc:	1ac0      	subs	r0, r0, r3
 80062fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006300:	b10b      	cbz	r3, 8006306 <__sflush_r+0x46>
 8006302:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006304:	1ac0      	subs	r0, r0, r3
 8006306:	2300      	movs	r3, #0
 8006308:	4602      	mov	r2, r0
 800630a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800630c:	6a21      	ldr	r1, [r4, #32]
 800630e:	4628      	mov	r0, r5
 8006310:	47b0      	blx	r6
 8006312:	1c43      	adds	r3, r0, #1
 8006314:	89a3      	ldrh	r3, [r4, #12]
 8006316:	d106      	bne.n	8006326 <__sflush_r+0x66>
 8006318:	6829      	ldr	r1, [r5, #0]
 800631a:	291d      	cmp	r1, #29
 800631c:	d82c      	bhi.n	8006378 <__sflush_r+0xb8>
 800631e:	4a2a      	ldr	r2, [pc, #168]	; (80063c8 <__sflush_r+0x108>)
 8006320:	40ca      	lsrs	r2, r1
 8006322:	07d6      	lsls	r6, r2, #31
 8006324:	d528      	bpl.n	8006378 <__sflush_r+0xb8>
 8006326:	2200      	movs	r2, #0
 8006328:	6062      	str	r2, [r4, #4]
 800632a:	04d9      	lsls	r1, r3, #19
 800632c:	6922      	ldr	r2, [r4, #16]
 800632e:	6022      	str	r2, [r4, #0]
 8006330:	d504      	bpl.n	800633c <__sflush_r+0x7c>
 8006332:	1c42      	adds	r2, r0, #1
 8006334:	d101      	bne.n	800633a <__sflush_r+0x7a>
 8006336:	682b      	ldr	r3, [r5, #0]
 8006338:	b903      	cbnz	r3, 800633c <__sflush_r+0x7c>
 800633a:	6560      	str	r0, [r4, #84]	; 0x54
 800633c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800633e:	602f      	str	r7, [r5, #0]
 8006340:	2900      	cmp	r1, #0
 8006342:	d0ca      	beq.n	80062da <__sflush_r+0x1a>
 8006344:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006348:	4299      	cmp	r1, r3
 800634a:	d002      	beq.n	8006352 <__sflush_r+0x92>
 800634c:	4628      	mov	r0, r5
 800634e:	f000 f8fb 	bl	8006548 <_free_r>
 8006352:	2000      	movs	r0, #0
 8006354:	6360      	str	r0, [r4, #52]	; 0x34
 8006356:	e7c1      	b.n	80062dc <__sflush_r+0x1c>
 8006358:	6a21      	ldr	r1, [r4, #32]
 800635a:	2301      	movs	r3, #1
 800635c:	4628      	mov	r0, r5
 800635e:	47b0      	blx	r6
 8006360:	1c41      	adds	r1, r0, #1
 8006362:	d1c7      	bne.n	80062f4 <__sflush_r+0x34>
 8006364:	682b      	ldr	r3, [r5, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d0c4      	beq.n	80062f4 <__sflush_r+0x34>
 800636a:	2b1d      	cmp	r3, #29
 800636c:	d001      	beq.n	8006372 <__sflush_r+0xb2>
 800636e:	2b16      	cmp	r3, #22
 8006370:	d101      	bne.n	8006376 <__sflush_r+0xb6>
 8006372:	602f      	str	r7, [r5, #0]
 8006374:	e7b1      	b.n	80062da <__sflush_r+0x1a>
 8006376:	89a3      	ldrh	r3, [r4, #12]
 8006378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800637c:	81a3      	strh	r3, [r4, #12]
 800637e:	e7ad      	b.n	80062dc <__sflush_r+0x1c>
 8006380:	690f      	ldr	r7, [r1, #16]
 8006382:	2f00      	cmp	r7, #0
 8006384:	d0a9      	beq.n	80062da <__sflush_r+0x1a>
 8006386:	0793      	lsls	r3, r2, #30
 8006388:	680e      	ldr	r6, [r1, #0]
 800638a:	bf08      	it	eq
 800638c:	694b      	ldreq	r3, [r1, #20]
 800638e:	600f      	str	r7, [r1, #0]
 8006390:	bf18      	it	ne
 8006392:	2300      	movne	r3, #0
 8006394:	eba6 0807 	sub.w	r8, r6, r7
 8006398:	608b      	str	r3, [r1, #8]
 800639a:	f1b8 0f00 	cmp.w	r8, #0
 800639e:	dd9c      	ble.n	80062da <__sflush_r+0x1a>
 80063a0:	6a21      	ldr	r1, [r4, #32]
 80063a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80063a4:	4643      	mov	r3, r8
 80063a6:	463a      	mov	r2, r7
 80063a8:	4628      	mov	r0, r5
 80063aa:	47b0      	blx	r6
 80063ac:	2800      	cmp	r0, #0
 80063ae:	dc06      	bgt.n	80063be <__sflush_r+0xfe>
 80063b0:	89a3      	ldrh	r3, [r4, #12]
 80063b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063b6:	81a3      	strh	r3, [r4, #12]
 80063b8:	f04f 30ff 	mov.w	r0, #4294967295
 80063bc:	e78e      	b.n	80062dc <__sflush_r+0x1c>
 80063be:	4407      	add	r7, r0
 80063c0:	eba8 0800 	sub.w	r8, r8, r0
 80063c4:	e7e9      	b.n	800639a <__sflush_r+0xda>
 80063c6:	bf00      	nop
 80063c8:	20400001 	.word	0x20400001

080063cc <_fflush_r>:
 80063cc:	b538      	push	{r3, r4, r5, lr}
 80063ce:	690b      	ldr	r3, [r1, #16]
 80063d0:	4605      	mov	r5, r0
 80063d2:	460c      	mov	r4, r1
 80063d4:	b913      	cbnz	r3, 80063dc <_fflush_r+0x10>
 80063d6:	2500      	movs	r5, #0
 80063d8:	4628      	mov	r0, r5
 80063da:	bd38      	pop	{r3, r4, r5, pc}
 80063dc:	b118      	cbz	r0, 80063e6 <_fflush_r+0x1a>
 80063de:	6983      	ldr	r3, [r0, #24]
 80063e0:	b90b      	cbnz	r3, 80063e6 <_fflush_r+0x1a>
 80063e2:	f7ff fa4f 	bl	8005884 <__sinit>
 80063e6:	4b14      	ldr	r3, [pc, #80]	; (8006438 <_fflush_r+0x6c>)
 80063e8:	429c      	cmp	r4, r3
 80063ea:	d11b      	bne.n	8006424 <_fflush_r+0x58>
 80063ec:	686c      	ldr	r4, [r5, #4]
 80063ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d0ef      	beq.n	80063d6 <_fflush_r+0xa>
 80063f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80063f8:	07d0      	lsls	r0, r2, #31
 80063fa:	d404      	bmi.n	8006406 <_fflush_r+0x3a>
 80063fc:	0599      	lsls	r1, r3, #22
 80063fe:	d402      	bmi.n	8006406 <_fflush_r+0x3a>
 8006400:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006402:	f7ff fadd 	bl	80059c0 <__retarget_lock_acquire_recursive>
 8006406:	4628      	mov	r0, r5
 8006408:	4621      	mov	r1, r4
 800640a:	f7ff ff59 	bl	80062c0 <__sflush_r>
 800640e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006410:	07da      	lsls	r2, r3, #31
 8006412:	4605      	mov	r5, r0
 8006414:	d4e0      	bmi.n	80063d8 <_fflush_r+0xc>
 8006416:	89a3      	ldrh	r3, [r4, #12]
 8006418:	059b      	lsls	r3, r3, #22
 800641a:	d4dd      	bmi.n	80063d8 <_fflush_r+0xc>
 800641c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800641e:	f7ff fad0 	bl	80059c2 <__retarget_lock_release_recursive>
 8006422:	e7d9      	b.n	80063d8 <_fflush_r+0xc>
 8006424:	4b05      	ldr	r3, [pc, #20]	; (800643c <_fflush_r+0x70>)
 8006426:	429c      	cmp	r4, r3
 8006428:	d101      	bne.n	800642e <_fflush_r+0x62>
 800642a:	68ac      	ldr	r4, [r5, #8]
 800642c:	e7df      	b.n	80063ee <_fflush_r+0x22>
 800642e:	4b04      	ldr	r3, [pc, #16]	; (8006440 <_fflush_r+0x74>)
 8006430:	429c      	cmp	r4, r3
 8006432:	bf08      	it	eq
 8006434:	68ec      	ldreq	r4, [r5, #12]
 8006436:	e7da      	b.n	80063ee <_fflush_r+0x22>
 8006438:	0800674c 	.word	0x0800674c
 800643c:	0800676c 	.word	0x0800676c
 8006440:	0800672c 	.word	0x0800672c

08006444 <_lseek_r>:
 8006444:	b538      	push	{r3, r4, r5, lr}
 8006446:	4d07      	ldr	r5, [pc, #28]	; (8006464 <_lseek_r+0x20>)
 8006448:	4604      	mov	r4, r0
 800644a:	4608      	mov	r0, r1
 800644c:	4611      	mov	r1, r2
 800644e:	2200      	movs	r2, #0
 8006450:	602a      	str	r2, [r5, #0]
 8006452:	461a      	mov	r2, r3
 8006454:	f7fb fbec 	bl	8001c30 <_lseek>
 8006458:	1c43      	adds	r3, r0, #1
 800645a:	d102      	bne.n	8006462 <_lseek_r+0x1e>
 800645c:	682b      	ldr	r3, [r5, #0]
 800645e:	b103      	cbz	r3, 8006462 <_lseek_r+0x1e>
 8006460:	6023      	str	r3, [r4, #0]
 8006462:	bd38      	pop	{r3, r4, r5, pc}
 8006464:	20000374 	.word	0x20000374

08006468 <__swhatbuf_r>:
 8006468:	b570      	push	{r4, r5, r6, lr}
 800646a:	460e      	mov	r6, r1
 800646c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006470:	2900      	cmp	r1, #0
 8006472:	b096      	sub	sp, #88	; 0x58
 8006474:	4614      	mov	r4, r2
 8006476:	461d      	mov	r5, r3
 8006478:	da07      	bge.n	800648a <__swhatbuf_r+0x22>
 800647a:	2300      	movs	r3, #0
 800647c:	602b      	str	r3, [r5, #0]
 800647e:	89b3      	ldrh	r3, [r6, #12]
 8006480:	061a      	lsls	r2, r3, #24
 8006482:	d410      	bmi.n	80064a6 <__swhatbuf_r+0x3e>
 8006484:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006488:	e00e      	b.n	80064a8 <__swhatbuf_r+0x40>
 800648a:	466a      	mov	r2, sp
 800648c:	f000 f8be 	bl	800660c <_fstat_r>
 8006490:	2800      	cmp	r0, #0
 8006492:	dbf2      	blt.n	800647a <__swhatbuf_r+0x12>
 8006494:	9a01      	ldr	r2, [sp, #4]
 8006496:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800649a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800649e:	425a      	negs	r2, r3
 80064a0:	415a      	adcs	r2, r3
 80064a2:	602a      	str	r2, [r5, #0]
 80064a4:	e7ee      	b.n	8006484 <__swhatbuf_r+0x1c>
 80064a6:	2340      	movs	r3, #64	; 0x40
 80064a8:	2000      	movs	r0, #0
 80064aa:	6023      	str	r3, [r4, #0]
 80064ac:	b016      	add	sp, #88	; 0x58
 80064ae:	bd70      	pop	{r4, r5, r6, pc}

080064b0 <__smakebuf_r>:
 80064b0:	898b      	ldrh	r3, [r1, #12]
 80064b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80064b4:	079d      	lsls	r5, r3, #30
 80064b6:	4606      	mov	r6, r0
 80064b8:	460c      	mov	r4, r1
 80064ba:	d507      	bpl.n	80064cc <__smakebuf_r+0x1c>
 80064bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80064c0:	6023      	str	r3, [r4, #0]
 80064c2:	6123      	str	r3, [r4, #16]
 80064c4:	2301      	movs	r3, #1
 80064c6:	6163      	str	r3, [r4, #20]
 80064c8:	b002      	add	sp, #8
 80064ca:	bd70      	pop	{r4, r5, r6, pc}
 80064cc:	ab01      	add	r3, sp, #4
 80064ce:	466a      	mov	r2, sp
 80064d0:	f7ff ffca 	bl	8006468 <__swhatbuf_r>
 80064d4:	9900      	ldr	r1, [sp, #0]
 80064d6:	4605      	mov	r5, r0
 80064d8:	4630      	mov	r0, r6
 80064da:	f7ff fa73 	bl	80059c4 <_malloc_r>
 80064de:	b948      	cbnz	r0, 80064f4 <__smakebuf_r+0x44>
 80064e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064e4:	059a      	lsls	r2, r3, #22
 80064e6:	d4ef      	bmi.n	80064c8 <__smakebuf_r+0x18>
 80064e8:	f023 0303 	bic.w	r3, r3, #3
 80064ec:	f043 0302 	orr.w	r3, r3, #2
 80064f0:	81a3      	strh	r3, [r4, #12]
 80064f2:	e7e3      	b.n	80064bc <__smakebuf_r+0xc>
 80064f4:	4b0d      	ldr	r3, [pc, #52]	; (800652c <__smakebuf_r+0x7c>)
 80064f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80064f8:	89a3      	ldrh	r3, [r4, #12]
 80064fa:	6020      	str	r0, [r4, #0]
 80064fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006500:	81a3      	strh	r3, [r4, #12]
 8006502:	9b00      	ldr	r3, [sp, #0]
 8006504:	6163      	str	r3, [r4, #20]
 8006506:	9b01      	ldr	r3, [sp, #4]
 8006508:	6120      	str	r0, [r4, #16]
 800650a:	b15b      	cbz	r3, 8006524 <__smakebuf_r+0x74>
 800650c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006510:	4630      	mov	r0, r6
 8006512:	f000 f88d 	bl	8006630 <_isatty_r>
 8006516:	b128      	cbz	r0, 8006524 <__smakebuf_r+0x74>
 8006518:	89a3      	ldrh	r3, [r4, #12]
 800651a:	f023 0303 	bic.w	r3, r3, #3
 800651e:	f043 0301 	orr.w	r3, r3, #1
 8006522:	81a3      	strh	r3, [r4, #12]
 8006524:	89a0      	ldrh	r0, [r4, #12]
 8006526:	4305      	orrs	r5, r0
 8006528:	81a5      	strh	r5, [r4, #12]
 800652a:	e7cd      	b.n	80064c8 <__smakebuf_r+0x18>
 800652c:	0800581d 	.word	0x0800581d

08006530 <__malloc_lock>:
 8006530:	4801      	ldr	r0, [pc, #4]	; (8006538 <__malloc_lock+0x8>)
 8006532:	f7ff ba45 	b.w	80059c0 <__retarget_lock_acquire_recursive>
 8006536:	bf00      	nop
 8006538:	2000036c 	.word	0x2000036c

0800653c <__malloc_unlock>:
 800653c:	4801      	ldr	r0, [pc, #4]	; (8006544 <__malloc_unlock+0x8>)
 800653e:	f7ff ba40 	b.w	80059c2 <__retarget_lock_release_recursive>
 8006542:	bf00      	nop
 8006544:	2000036c 	.word	0x2000036c

08006548 <_free_r>:
 8006548:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800654a:	2900      	cmp	r1, #0
 800654c:	d048      	beq.n	80065e0 <_free_r+0x98>
 800654e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006552:	9001      	str	r0, [sp, #4]
 8006554:	2b00      	cmp	r3, #0
 8006556:	f1a1 0404 	sub.w	r4, r1, #4
 800655a:	bfb8      	it	lt
 800655c:	18e4      	addlt	r4, r4, r3
 800655e:	f7ff ffe7 	bl	8006530 <__malloc_lock>
 8006562:	4a20      	ldr	r2, [pc, #128]	; (80065e4 <_free_r+0x9c>)
 8006564:	9801      	ldr	r0, [sp, #4]
 8006566:	6813      	ldr	r3, [r2, #0]
 8006568:	4615      	mov	r5, r2
 800656a:	b933      	cbnz	r3, 800657a <_free_r+0x32>
 800656c:	6063      	str	r3, [r4, #4]
 800656e:	6014      	str	r4, [r2, #0]
 8006570:	b003      	add	sp, #12
 8006572:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006576:	f7ff bfe1 	b.w	800653c <__malloc_unlock>
 800657a:	42a3      	cmp	r3, r4
 800657c:	d90b      	bls.n	8006596 <_free_r+0x4e>
 800657e:	6821      	ldr	r1, [r4, #0]
 8006580:	1862      	adds	r2, r4, r1
 8006582:	4293      	cmp	r3, r2
 8006584:	bf04      	itt	eq
 8006586:	681a      	ldreq	r2, [r3, #0]
 8006588:	685b      	ldreq	r3, [r3, #4]
 800658a:	6063      	str	r3, [r4, #4]
 800658c:	bf04      	itt	eq
 800658e:	1852      	addeq	r2, r2, r1
 8006590:	6022      	streq	r2, [r4, #0]
 8006592:	602c      	str	r4, [r5, #0]
 8006594:	e7ec      	b.n	8006570 <_free_r+0x28>
 8006596:	461a      	mov	r2, r3
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	b10b      	cbz	r3, 80065a0 <_free_r+0x58>
 800659c:	42a3      	cmp	r3, r4
 800659e:	d9fa      	bls.n	8006596 <_free_r+0x4e>
 80065a0:	6811      	ldr	r1, [r2, #0]
 80065a2:	1855      	adds	r5, r2, r1
 80065a4:	42a5      	cmp	r5, r4
 80065a6:	d10b      	bne.n	80065c0 <_free_r+0x78>
 80065a8:	6824      	ldr	r4, [r4, #0]
 80065aa:	4421      	add	r1, r4
 80065ac:	1854      	adds	r4, r2, r1
 80065ae:	42a3      	cmp	r3, r4
 80065b0:	6011      	str	r1, [r2, #0]
 80065b2:	d1dd      	bne.n	8006570 <_free_r+0x28>
 80065b4:	681c      	ldr	r4, [r3, #0]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	6053      	str	r3, [r2, #4]
 80065ba:	4421      	add	r1, r4
 80065bc:	6011      	str	r1, [r2, #0]
 80065be:	e7d7      	b.n	8006570 <_free_r+0x28>
 80065c0:	d902      	bls.n	80065c8 <_free_r+0x80>
 80065c2:	230c      	movs	r3, #12
 80065c4:	6003      	str	r3, [r0, #0]
 80065c6:	e7d3      	b.n	8006570 <_free_r+0x28>
 80065c8:	6825      	ldr	r5, [r4, #0]
 80065ca:	1961      	adds	r1, r4, r5
 80065cc:	428b      	cmp	r3, r1
 80065ce:	bf04      	itt	eq
 80065d0:	6819      	ldreq	r1, [r3, #0]
 80065d2:	685b      	ldreq	r3, [r3, #4]
 80065d4:	6063      	str	r3, [r4, #4]
 80065d6:	bf04      	itt	eq
 80065d8:	1949      	addeq	r1, r1, r5
 80065da:	6021      	streq	r1, [r4, #0]
 80065dc:	6054      	str	r4, [r2, #4]
 80065de:	e7c7      	b.n	8006570 <_free_r+0x28>
 80065e0:	b003      	add	sp, #12
 80065e2:	bd30      	pop	{r4, r5, pc}
 80065e4:	200000a0 	.word	0x200000a0

080065e8 <_read_r>:
 80065e8:	b538      	push	{r3, r4, r5, lr}
 80065ea:	4d07      	ldr	r5, [pc, #28]	; (8006608 <_read_r+0x20>)
 80065ec:	4604      	mov	r4, r0
 80065ee:	4608      	mov	r0, r1
 80065f0:	4611      	mov	r1, r2
 80065f2:	2200      	movs	r2, #0
 80065f4:	602a      	str	r2, [r5, #0]
 80065f6:	461a      	mov	r2, r3
 80065f8:	f7fb faba 	bl	8001b70 <_read>
 80065fc:	1c43      	adds	r3, r0, #1
 80065fe:	d102      	bne.n	8006606 <_read_r+0x1e>
 8006600:	682b      	ldr	r3, [r5, #0]
 8006602:	b103      	cbz	r3, 8006606 <_read_r+0x1e>
 8006604:	6023      	str	r3, [r4, #0]
 8006606:	bd38      	pop	{r3, r4, r5, pc}
 8006608:	20000374 	.word	0x20000374

0800660c <_fstat_r>:
 800660c:	b538      	push	{r3, r4, r5, lr}
 800660e:	4d07      	ldr	r5, [pc, #28]	; (800662c <_fstat_r+0x20>)
 8006610:	2300      	movs	r3, #0
 8006612:	4604      	mov	r4, r0
 8006614:	4608      	mov	r0, r1
 8006616:	4611      	mov	r1, r2
 8006618:	602b      	str	r3, [r5, #0]
 800661a:	f7fb faee 	bl	8001bfa <_fstat>
 800661e:	1c43      	adds	r3, r0, #1
 8006620:	d102      	bne.n	8006628 <_fstat_r+0x1c>
 8006622:	682b      	ldr	r3, [r5, #0]
 8006624:	b103      	cbz	r3, 8006628 <_fstat_r+0x1c>
 8006626:	6023      	str	r3, [r4, #0]
 8006628:	bd38      	pop	{r3, r4, r5, pc}
 800662a:	bf00      	nop
 800662c:	20000374 	.word	0x20000374

08006630 <_isatty_r>:
 8006630:	b538      	push	{r3, r4, r5, lr}
 8006632:	4d06      	ldr	r5, [pc, #24]	; (800664c <_isatty_r+0x1c>)
 8006634:	2300      	movs	r3, #0
 8006636:	4604      	mov	r4, r0
 8006638:	4608      	mov	r0, r1
 800663a:	602b      	str	r3, [r5, #0]
 800663c:	f7fb faed 	bl	8001c1a <_isatty>
 8006640:	1c43      	adds	r3, r0, #1
 8006642:	d102      	bne.n	800664a <_isatty_r+0x1a>
 8006644:	682b      	ldr	r3, [r5, #0]
 8006646:	b103      	cbz	r3, 800664a <_isatty_r+0x1a>
 8006648:	6023      	str	r3, [r4, #0]
 800664a:	bd38      	pop	{r3, r4, r5, pc}
 800664c:	20000374 	.word	0x20000374

08006650 <_init>:
 8006650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006652:	bf00      	nop
 8006654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006656:	bc08      	pop	{r3}
 8006658:	469e      	mov	lr, r3
 800665a:	4770      	bx	lr

0800665c <_fini>:
 800665c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800665e:	bf00      	nop
 8006660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006662:	bc08      	pop	{r3}
 8006664:	469e      	mov	lr, r3
 8006666:	4770      	bx	lr
