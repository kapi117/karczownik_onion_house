
onion_house.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000778c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  0800792c  0800792c  0001792c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a84  08007a84  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007a84  08007a84  00017a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a8c  08007a8c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a8c  08007a8c  00017a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a90  08007a90  00017a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007a94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  20000070  08007b04  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000374  08007b04  00020374  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015f9f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b64  00000000  00000000  0003603f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f8  00000000  00000000  00038ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001108  00000000  00000000  00039da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019a57  00000000  00000000  0003aea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015c5c  00000000  00000000  000548ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009eaa1  00000000  00000000  0006a55b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00108ffc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054d8  00000000  00000000  00109050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007914 	.word	0x08007914

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08007914 	.word	0x08007914

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b96e 	b.w	8000db0 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	468c      	mov	ip, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f040 8083 	bne.w	8000c02 <__udivmoddi4+0x116>
 8000afc:	428a      	cmp	r2, r1
 8000afe:	4617      	mov	r7, r2
 8000b00:	d947      	bls.n	8000b92 <__udivmoddi4+0xa6>
 8000b02:	fab2 f282 	clz	r2, r2
 8000b06:	b142      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b08:	f1c2 0020 	rsb	r0, r2, #32
 8000b0c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b10:	4091      	lsls	r1, r2
 8000b12:	4097      	lsls	r7, r2
 8000b14:	ea40 0c01 	orr.w	ip, r0, r1
 8000b18:	4094      	lsls	r4, r2
 8000b1a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b1e:	0c23      	lsrs	r3, r4, #16
 8000b20:	fbbc f6f8 	udiv	r6, ip, r8
 8000b24:	fa1f fe87 	uxth.w	lr, r7
 8000b28:	fb08 c116 	mls	r1, r8, r6, ip
 8000b2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b30:	fb06 f10e 	mul.w	r1, r6, lr
 8000b34:	4299      	cmp	r1, r3
 8000b36:	d909      	bls.n	8000b4c <__udivmoddi4+0x60>
 8000b38:	18fb      	adds	r3, r7, r3
 8000b3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b3e:	f080 8119 	bcs.w	8000d74 <__udivmoddi4+0x288>
 8000b42:	4299      	cmp	r1, r3
 8000b44:	f240 8116 	bls.w	8000d74 <__udivmoddi4+0x288>
 8000b48:	3e02      	subs	r6, #2
 8000b4a:	443b      	add	r3, r7
 8000b4c:	1a5b      	subs	r3, r3, r1
 8000b4e:	b2a4      	uxth	r4, r4
 8000b50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b54:	fb08 3310 	mls	r3, r8, r0, r3
 8000b58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b60:	45a6      	cmp	lr, r4
 8000b62:	d909      	bls.n	8000b78 <__udivmoddi4+0x8c>
 8000b64:	193c      	adds	r4, r7, r4
 8000b66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b6a:	f080 8105 	bcs.w	8000d78 <__udivmoddi4+0x28c>
 8000b6e:	45a6      	cmp	lr, r4
 8000b70:	f240 8102 	bls.w	8000d78 <__udivmoddi4+0x28c>
 8000b74:	3802      	subs	r0, #2
 8000b76:	443c      	add	r4, r7
 8000b78:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b7c:	eba4 040e 	sub.w	r4, r4, lr
 8000b80:	2600      	movs	r6, #0
 8000b82:	b11d      	cbz	r5, 8000b8c <__udivmoddi4+0xa0>
 8000b84:	40d4      	lsrs	r4, r2
 8000b86:	2300      	movs	r3, #0
 8000b88:	e9c5 4300 	strd	r4, r3, [r5]
 8000b8c:	4631      	mov	r1, r6
 8000b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b92:	b902      	cbnz	r2, 8000b96 <__udivmoddi4+0xaa>
 8000b94:	deff      	udf	#255	; 0xff
 8000b96:	fab2 f282 	clz	r2, r2
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	d150      	bne.n	8000c40 <__udivmoddi4+0x154>
 8000b9e:	1bcb      	subs	r3, r1, r7
 8000ba0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba4:	fa1f f887 	uxth.w	r8, r7
 8000ba8:	2601      	movs	r6, #1
 8000baa:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bae:	0c21      	lsrs	r1, r4, #16
 8000bb0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bb8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bbc:	428b      	cmp	r3, r1
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0xe4>
 8000bc0:	1879      	adds	r1, r7, r1
 8000bc2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0xe2>
 8000bc8:	428b      	cmp	r3, r1
 8000bca:	f200 80e9 	bhi.w	8000da0 <__udivmoddi4+0x2b4>
 8000bce:	4684      	mov	ip, r0
 8000bd0:	1ac9      	subs	r1, r1, r3
 8000bd2:	b2a3      	uxth	r3, r4
 8000bd4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bd8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bdc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000be0:	fb08 f800 	mul.w	r8, r8, r0
 8000be4:	45a0      	cmp	r8, r4
 8000be6:	d907      	bls.n	8000bf8 <__udivmoddi4+0x10c>
 8000be8:	193c      	adds	r4, r7, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x10a>
 8000bf0:	45a0      	cmp	r8, r4
 8000bf2:	f200 80d9 	bhi.w	8000da8 <__udivmoddi4+0x2bc>
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	eba4 0408 	sub.w	r4, r4, r8
 8000bfc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c00:	e7bf      	b.n	8000b82 <__udivmoddi4+0x96>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d909      	bls.n	8000c1a <__udivmoddi4+0x12e>
 8000c06:	2d00      	cmp	r5, #0
 8000c08:	f000 80b1 	beq.w	8000d6e <__udivmoddi4+0x282>
 8000c0c:	2600      	movs	r6, #0
 8000c0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c12:	4630      	mov	r0, r6
 8000c14:	4631      	mov	r1, r6
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	fab3 f683 	clz	r6, r3
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	d14a      	bne.n	8000cb8 <__udivmoddi4+0x1cc>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d302      	bcc.n	8000c2c <__udivmoddi4+0x140>
 8000c26:	4282      	cmp	r2, r0
 8000c28:	f200 80b8 	bhi.w	8000d9c <__udivmoddi4+0x2b0>
 8000c2c:	1a84      	subs	r4, r0, r2
 8000c2e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c32:	2001      	movs	r0, #1
 8000c34:	468c      	mov	ip, r1
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	d0a8      	beq.n	8000b8c <__udivmoddi4+0xa0>
 8000c3a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c3e:	e7a5      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000c40:	f1c2 0320 	rsb	r3, r2, #32
 8000c44:	fa20 f603 	lsr.w	r6, r0, r3
 8000c48:	4097      	lsls	r7, r2
 8000c4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c4e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c52:	40d9      	lsrs	r1, r3
 8000c54:	4330      	orrs	r0, r6
 8000c56:	0c03      	lsrs	r3, r0, #16
 8000c58:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c5c:	fa1f f887 	uxth.w	r8, r7
 8000c60:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c68:	fb06 f108 	mul.w	r1, r6, r8
 8000c6c:	4299      	cmp	r1, r3
 8000c6e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x19c>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c7a:	f080 808d 	bcs.w	8000d98 <__udivmoddi4+0x2ac>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 808a 	bls.w	8000d98 <__udivmoddi4+0x2ac>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b281      	uxth	r1, r0
 8000c8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c90:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c98:	fb00 f308 	mul.w	r3, r0, r8
 8000c9c:	428b      	cmp	r3, r1
 8000c9e:	d907      	bls.n	8000cb0 <__udivmoddi4+0x1c4>
 8000ca0:	1879      	adds	r1, r7, r1
 8000ca2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ca6:	d273      	bcs.n	8000d90 <__udivmoddi4+0x2a4>
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d971      	bls.n	8000d90 <__udivmoddi4+0x2a4>
 8000cac:	3802      	subs	r0, #2
 8000cae:	4439      	add	r1, r7
 8000cb0:	1acb      	subs	r3, r1, r3
 8000cb2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cb6:	e778      	b.n	8000baa <__udivmoddi4+0xbe>
 8000cb8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cbc:	fa03 f406 	lsl.w	r4, r3, r6
 8000cc0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cc4:	431c      	orrs	r4, r3
 8000cc6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cca:	fa01 f306 	lsl.w	r3, r1, r6
 8000cce:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cd2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cd6:	431f      	orrs	r7, r3
 8000cd8:	0c3b      	lsrs	r3, r7, #16
 8000cda:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cde:	fa1f f884 	uxth.w	r8, r4
 8000ce2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ce6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cea:	fb09 fa08 	mul.w	sl, r9, r8
 8000cee:	458a      	cmp	sl, r1
 8000cf0:	fa02 f206 	lsl.w	r2, r2, r6
 8000cf4:	fa00 f306 	lsl.w	r3, r0, r6
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x220>
 8000cfa:	1861      	adds	r1, r4, r1
 8000cfc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d00:	d248      	bcs.n	8000d94 <__udivmoddi4+0x2a8>
 8000d02:	458a      	cmp	sl, r1
 8000d04:	d946      	bls.n	8000d94 <__udivmoddi4+0x2a8>
 8000d06:	f1a9 0902 	sub.w	r9, r9, #2
 8000d0a:	4421      	add	r1, r4
 8000d0c:	eba1 010a 	sub.w	r1, r1, sl
 8000d10:	b2bf      	uxth	r7, r7
 8000d12:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d16:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d1a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d1e:	fb00 f808 	mul.w	r8, r0, r8
 8000d22:	45b8      	cmp	r8, r7
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x24a>
 8000d26:	19e7      	adds	r7, r4, r7
 8000d28:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d2c:	d22e      	bcs.n	8000d8c <__udivmoddi4+0x2a0>
 8000d2e:	45b8      	cmp	r8, r7
 8000d30:	d92c      	bls.n	8000d8c <__udivmoddi4+0x2a0>
 8000d32:	3802      	subs	r0, #2
 8000d34:	4427      	add	r7, r4
 8000d36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d3a:	eba7 0708 	sub.w	r7, r7, r8
 8000d3e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d42:	454f      	cmp	r7, r9
 8000d44:	46c6      	mov	lr, r8
 8000d46:	4649      	mov	r1, r9
 8000d48:	d31a      	bcc.n	8000d80 <__udivmoddi4+0x294>
 8000d4a:	d017      	beq.n	8000d7c <__udivmoddi4+0x290>
 8000d4c:	b15d      	cbz	r5, 8000d66 <__udivmoddi4+0x27a>
 8000d4e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d52:	eb67 0701 	sbc.w	r7, r7, r1
 8000d56:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d5a:	40f2      	lsrs	r2, r6
 8000d5c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d60:	40f7      	lsrs	r7, r6
 8000d62:	e9c5 2700 	strd	r2, r7, [r5]
 8000d66:	2600      	movs	r6, #0
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	462e      	mov	r6, r5
 8000d70:	4628      	mov	r0, r5
 8000d72:	e70b      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000d74:	4606      	mov	r6, r0
 8000d76:	e6e9      	b.n	8000b4c <__udivmoddi4+0x60>
 8000d78:	4618      	mov	r0, r3
 8000d7a:	e6fd      	b.n	8000b78 <__udivmoddi4+0x8c>
 8000d7c:	4543      	cmp	r3, r8
 8000d7e:	d2e5      	bcs.n	8000d4c <__udivmoddi4+0x260>
 8000d80:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d84:	eb69 0104 	sbc.w	r1, r9, r4
 8000d88:	3801      	subs	r0, #1
 8000d8a:	e7df      	b.n	8000d4c <__udivmoddi4+0x260>
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	e7d2      	b.n	8000d36 <__udivmoddi4+0x24a>
 8000d90:	4660      	mov	r0, ip
 8000d92:	e78d      	b.n	8000cb0 <__udivmoddi4+0x1c4>
 8000d94:	4681      	mov	r9, r0
 8000d96:	e7b9      	b.n	8000d0c <__udivmoddi4+0x220>
 8000d98:	4666      	mov	r6, ip
 8000d9a:	e775      	b.n	8000c88 <__udivmoddi4+0x19c>
 8000d9c:	4630      	mov	r0, r6
 8000d9e:	e74a      	b.n	8000c36 <__udivmoddi4+0x14a>
 8000da0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000da4:	4439      	add	r1, r7
 8000da6:	e713      	b.n	8000bd0 <__udivmoddi4+0xe4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	443c      	add	r4, r7
 8000dac:	e724      	b.n	8000bf8 <__udivmoddi4+0x10c>
 8000dae:	bf00      	nop

08000db0 <__aeabi_idiv0>:
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop

08000db4 <TCS34725_init>:
 */

#include "TCS34725.h"


void TCS34725_init(ColorSensor *color_sensor, I2C_HandleTypeDef *hi2c){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
	color_sensor->_hi2c = hi2c;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	683a      	ldr	r2, [r7, #0]
 8000dc2:	601a      	str	r2, [r3, #0]
	while(HAL_I2C_IsDeviceReady(hi2c, 0x29 << 1, 10, HAL_MAX_DELAY)){
 8000dc4:	e002      	b.n	8000dcc <TCS34725_init+0x18>
		  HAL_Delay(5);
 8000dc6:	2005      	movs	r0, #5
 8000dc8:	f001 fe22 	bl	8002a10 <HAL_Delay>
	while(HAL_I2C_IsDeviceReady(hi2c, 0x29 << 1, 10, HAL_MAX_DELAY)){
 8000dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd0:	220a      	movs	r2, #10
 8000dd2:	2152      	movs	r1, #82	; 0x52
 8000dd4:	6838      	ldr	r0, [r7, #0]
 8000dd6:	f003 fcd3 	bl	8004780 <HAL_I2C_IsDeviceReady>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d1f2      	bne.n	8000dc6 <TCS34725_init+0x12>
	}
	// SET INTEGRETION TIME
	uint8_t data = TCS34725_INTEGRATIONTIME_50MS;
 8000de0:	23eb      	movs	r3, #235	; 0xeb
 8000de2:	73fb      	strb	r3, [r7, #15]
	writeReg(color_sensor, TCS34725_ATIME, data);
 8000de4:	7bfb      	ldrb	r3, [r7, #15]
 8000de6:	461a      	mov	r2, r3
 8000de8:	2101      	movs	r1, #1
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f000 f85d 	bl	8000eaa <writeReg>

	// GAIN
	data = TCS34725_GAIN_4X;
 8000df0:	2301      	movs	r3, #1
 8000df2:	73fb      	strb	r3, [r7, #15]
	writeReg(color_sensor, TCS34725_CONTROL, data);
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
 8000df6:	461a      	mov	r2, r3
 8000df8:	210f      	movs	r1, #15
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f000 f855 	bl	8000eaa <writeReg>

	// ENABLE
	data = TCS34725_ENABLE_PON;
 8000e00:	2301      	movs	r3, #1
 8000e02:	73fb      	strb	r3, [r7, #15]
	writeReg(color_sensor, TCS34725_ENABLE, data);
 8000e04:	7bfb      	ldrb	r3, [r7, #15]
 8000e06:	461a      	mov	r2, r3
 8000e08:	2100      	movs	r1, #0
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f000 f84d 	bl	8000eaa <writeReg>
	data = TCS34725_ENABLE_PON | TCS34725_ENABLE_AEN;
 8000e10:	2303      	movs	r3, #3
 8000e12:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(5);
 8000e14:	2005      	movs	r0, #5
 8000e16:	f001 fdfb 	bl	8002a10 <HAL_Delay>
	writeReg(color_sensor, TCS34725_ENABLE, data);
 8000e1a:	7bfb      	ldrb	r3, [r7, #15]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	2100      	movs	r1, #0
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f000 f842 	bl	8000eaa <writeReg>
}
 8000e26:	bf00      	nop
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <readReg>:

HAL_StatusTypeDef readReg(ColorSensor *color_sensor, uint8_t reg, uint8_t* value){
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b08a      	sub	sp, #40	; 0x28
 8000e32:	af04      	add	r7, sp, #16
 8000e34:	60f8      	str	r0, [r7, #12]
 8000e36:	460b      	mov	r3, r1
 8000e38:	607a      	str	r2, [r7, #4]
 8000e3a:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(color_sensor->_hi2c, (TCS34725_ADDRESS << 1)|0x01, reg | 0x80, 1, value, sizeof(*value), 100);
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	6818      	ldr	r0, [r3, #0]
 8000e40:	7afb      	ldrb	r3, [r7, #11]
 8000e42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	b29a      	uxth	r2, r3
 8000e4a:	2364      	movs	r3, #100	; 0x64
 8000e4c:	9302      	str	r3, [sp, #8]
 8000e4e:	2301      	movs	r3, #1
 8000e50:	9301      	str	r3, [sp, #4]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	9300      	str	r3, [sp, #0]
 8000e56:	2301      	movs	r3, #1
 8000e58:	2153      	movs	r1, #83	; 0x53
 8000e5a:	f003 fa6b 	bl	8004334 <HAL_I2C_Mem_Read>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	75fb      	strb	r3, [r7, #23]
	return status;
 8000e62:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3718      	adds	r7, #24
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <readRegword>:

HAL_StatusTypeDef readRegword(ColorSensor *color_sensor, uint8_t reg, uint16_t* value){
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08a      	sub	sp, #40	; 0x28
 8000e70:	af04      	add	r7, sp, #16
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	460b      	mov	r3, r1
 8000e76:	607a      	str	r2, [r7, #4]
 8000e78:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(color_sensor->_hi2c, (TCS34725_ADDRESS << 1)|0x01, reg | 0x80, 1, (uint8_t*) value, sizeof(*value), 100);
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	6818      	ldr	r0, [r3, #0]
 8000e7e:	7afb      	ldrb	r3, [r7, #11]
 8000e80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	b29a      	uxth	r2, r3
 8000e88:	2364      	movs	r3, #100	; 0x64
 8000e8a:	9302      	str	r3, [sp, #8]
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	9301      	str	r3, [sp, #4]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	9300      	str	r3, [sp, #0]
 8000e94:	2301      	movs	r3, #1
 8000e96:	2153      	movs	r1, #83	; 0x53
 8000e98:	f003 fa4c 	bl	8004334 <HAL_I2C_Mem_Read>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	75fb      	strb	r3, [r7, #23]
	return status;
 8000ea0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3718      	adds	r7, #24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <writeReg>:

HAL_StatusTypeDef writeReg(ColorSensor *color_sensor, uint8_t reg, uint8_t value){
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b088      	sub	sp, #32
 8000eae:	af04      	add	r7, sp, #16
 8000eb0:	6078      	str	r0, [r7, #4]
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	70fb      	strb	r3, [r7, #3]
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Write(color_sensor->_hi2c, (TCS34725_ADDRESS << 1), reg | 0x80, 1, (uint8_t*)&value, sizeof(value), 100);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6818      	ldr	r0, [r3, #0]
 8000ebe:	78fb      	ldrb	r3, [r7, #3]
 8000ec0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	b29a      	uxth	r2, r3
 8000ec8:	2364      	movs	r3, #100	; 0x64
 8000eca:	9302      	str	r3, [sp, #8]
 8000ecc:	2301      	movs	r3, #1
 8000ece:	9301      	str	r3, [sp, #4]
 8000ed0:	1cbb      	adds	r3, r7, #2
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	2152      	movs	r1, #82	; 0x52
 8000ed8:	f003 f932 	bl	8004140 <HAL_I2C_Mem_Write>
 8000edc:	4603      	mov	r3, r0
 8000ede:	73fb      	strb	r3, [r7, #15]
	return status;
 8000ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <get_red>:

HAL_StatusTypeDef get_red(ColorSensor *color_sensor, uint16_t* value){
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b084      	sub	sp, #16
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
 8000ef2:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status = readRegword(color_sensor, TCS34725_RDATAL, value);
 8000ef4:	683a      	ldr	r2, [r7, #0]
 8000ef6:	2116      	movs	r1, #22
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f7ff ffb7 	bl	8000e6c <readRegword>
 8000efe:	4603      	mov	r3, r0
 8000f00:	73fb      	strb	r3, [r7, #15]
	return status;
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <get_green>:

HAL_StatusTypeDef get_green(ColorSensor *color_sensor, uint16_t* value){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status = readRegword(color_sensor, TCS34725_GDATAL, value);
 8000f16:	683a      	ldr	r2, [r7, #0]
 8000f18:	2118      	movs	r1, #24
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff ffa6 	bl	8000e6c <readRegword>
 8000f20:	4603      	mov	r3, r0
 8000f22:	73fb      	strb	r3, [r7, #15]
	return status;
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <get_blue>:

HAL_StatusTypeDef get_blue(ColorSensor *color_sensor, uint16_t* value){
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b084      	sub	sp, #16
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
 8000f36:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status = readRegword(color_sensor, TCS34725_BDATAL, value);
 8000f38:	683a      	ldr	r2, [r7, #0]
 8000f3a:	211a      	movs	r1, #26
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f7ff ff95 	bl	8000e6c <readRegword>
 8000f42:	4603      	mov	r3, r0
 8000f44:	73fb      	strb	r3, [r7, #15]
	return status;
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3710      	adds	r7, #16
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <get_light>:

HAL_StatusTypeDef get_light(ColorSensor *color_sensor, uint16_t* value){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status = readRegword(color_sensor, TCS34725_CDATAL, value);
 8000f5a:	683a      	ldr	r2, [r7, #0]
 8000f5c:	2114      	movs	r1, #20
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f7ff ff84 	bl	8000e6c <readRegword>
 8000f64:	4603      	mov	r3, r0
 8000f66:	73fb      	strb	r3, [r7, #15]
	return status;
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <lock>:

HAL_StatusTypeDef lock(ColorSensor *color_sensor){
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b084      	sub	sp, #16
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
	uint8_t r;
	HAL_StatusTypeDef status = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	73fb      	strb	r3, [r7, #15]
	status |= readReg(color_sensor, TCS34725_ENABLE, &r);
 8000f7e:	f107 030e 	add.w	r3, r7, #14
 8000f82:	461a      	mov	r2, r3
 8000f84:	2100      	movs	r1, #0
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f7ff ff51 	bl	8000e2e <readReg>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	461a      	mov	r2, r3
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	73fb      	strb	r3, [r7, #15]
	r |= TCS34725_ENABLE_AIEN;
 8000f96:	7bbb      	ldrb	r3, [r7, #14]
 8000f98:	f043 0310 	orr.w	r3, r3, #16
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	73bb      	strb	r3, [r7, #14]
	status |= writeReg(color_sensor, TCS34725_ENABLE, r);
 8000fa0:	7bbb      	ldrb	r3, [r7, #14]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff ff7f 	bl	8000eaa <writeReg>
 8000fac:	4603      	mov	r3, r0
 8000fae:	461a      	mov	r2, r3
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	73fb      	strb	r3, [r7, #15]
	return status;
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <unlock>:

HAL_StatusTypeDef unlock(ColorSensor *color_sensor){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
	uint8_t r;
	HAL_StatusTypeDef status = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	73fb      	strb	r3, [r7, #15]
	status |= readReg(color_sensor, TCS34725_ENABLE, &r);
 8000fcc:	f107 030e 	add.w	r3, r7, #14
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f7ff ff2a 	bl	8000e2e <readReg>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	461a      	mov	r2, r3
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	73fb      	strb	r3, [r7, #15]
	r &= ~TCS34725_ENABLE_AIEN;
 8000fe4:	7bbb      	ldrb	r3, [r7, #14]
 8000fe6:	f023 0310 	bic.w	r3, r3, #16
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	73bb      	strb	r3, [r7, #14]
	status |= writeReg(color_sensor, TCS34725_ENABLE, r);
 8000fee:	7bbb      	ldrb	r3, [r7, #14]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff ff58 	bl	8000eaa <writeReg>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	4313      	orrs	r3, r2
 8001002:	73fb      	strb	r3, [r7, #15]
	return status;
 8001004:	7bfb      	ldrb	r3, [r7, #15]
}
 8001006:	4618      	mov	r0, r3
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <HAL_ADC_ConvCpltCallback>:
volatile uint8_t conversion_complete = 0;
ADC_HandleTypeDef* _hadc1;
volatile uint16_t* _ktir_results;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
	conversion_complete = 1;
 8001018:	4b04      	ldr	r3, [pc, #16]	; (800102c <HAL_ADC_ConvCpltCallback+0x1c>)
 800101a:	2201      	movs	r2, #1
 800101c:	701a      	strb	r2, [r3, #0]
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	2000008c 	.word	0x2000008c

08001030 <KTIR_Init>:

void KTIR_Init(ADC_HandleTypeDef* hadc1, volatile uint16_t* ktir_results){
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
	_hadc1 = hadc1;
 800103a:	4a06      	ldr	r2, [pc, #24]	; (8001054 <KTIR_Init+0x24>)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6013      	str	r3, [r2, #0]
	_ktir_results = ktir_results;
 8001040:	4a05      	ldr	r2, [pc, #20]	; (8001058 <KTIR_Init+0x28>)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	6013      	str	r3, [r2, #0]
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	200000a8 	.word	0x200000a8
 8001058:	200000a4 	.word	0x200000a4

0800105c <KTIR_read>:

void KTIR_read(){
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(_hadc1, (uint32_t*) _ktir_results, NUMBER_OF_SENSORS);
 8001060:	4b04      	ldr	r3, [pc, #16]	; (8001074 <KTIR_read+0x18>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a04      	ldr	r2, [pc, #16]	; (8001078 <KTIR_read+0x1c>)
 8001066:	6811      	ldr	r1, [r2, #0]
 8001068:	2204      	movs	r2, #4
 800106a:	4618      	mov	r0, r3
 800106c:	f001 fd38 	bl	8002ae0 <HAL_ADC_Start_DMA>
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}
 8001074:	200000a8 	.word	0x200000a8
 8001078:	200000a4 	.word	0x200000a4

0800107c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b0a      	cmp	r3, #10
 8001088:	d102      	bne.n	8001090 <__io_putchar+0x14>
    __io_putchar('\r');
 800108a:	200d      	movs	r0, #13
 800108c:	f7ff fff6 	bl	800107c <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001090:	1d39      	adds	r1, r7, #4
 8001092:	f04f 33ff 	mov.w	r3, #4294967295
 8001096:	2201      	movs	r2, #1
 8001098:	4803      	ldr	r0, [pc, #12]	; (80010a8 <__io_putchar+0x2c>)
 800109a:	f005 f9ea 	bl	8006472 <HAL_UART_Transmit>

  return 1;
 800109e:	2301      	movs	r3, #1
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000308 	.word	0x20000308

080010ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b2:	f001 fc3b 	bl	800292c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b6:	f000 f8e1 	bl	800127c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ba:	f000 fbcb 	bl	8001854 <MX_GPIO_Init>
  MX_DMA_Init();
 80010be:	f000 fba9 	bl	8001814 <MX_DMA_Init>
  MX_ADC1_Init();
 80010c2:	f000 f943 	bl	800134c <MX_ADC1_Init>
  MX_I2C1_Init();
 80010c6:	f000 f9bd 	bl	8001444 <MX_I2C1_Init>
  MX_I2C2_Init();
 80010ca:	f000 f9e9 	bl	80014a0 <MX_I2C2_Init>
  MX_TIM1_Init();
 80010ce:	f000 fa15 	bl	80014fc <MX_TIM1_Init>
  MX_TIM3_Init();
 80010d2:	f000 fabb 	bl	800164c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80010d6:	f000 fb73 	bl	80017c0 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80010da:	f000 fb1d 	bl	8001718 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  servo_init(&right_servo, &SERVO_RIGHT_TIMER, SERVO_RIGHT_CHANNEL);
 80010de:	2208      	movs	r2, #8
 80010e0:	4959      	ldr	r1, [pc, #356]	; (8001248 <main+0x19c>)
 80010e2:	485a      	ldr	r0, [pc, #360]	; (800124c <main+0x1a0>)
 80010e4:	f001 f83c 	bl	8002160 <servo_init>
  servo_init(&left_servo, &SERVO_LEFT_TIMER, SERVO_LEFT_CHANNEL);
 80010e8:	220c      	movs	r2, #12
 80010ea:	4957      	ldr	r1, [pc, #348]	; (8001248 <main+0x19c>)
 80010ec:	4858      	ldr	r0, [pc, #352]	; (8001250 <main+0x1a4>)
 80010ee:	f001 f837 	bl	8002160 <servo_init>

  motor_init(&right_motor, &MOTOR_RIGHT_TIMER, MOTOR_RIGHT_CHANNEL_A, MOTOR_RIGHT_CHANNEL_B);
 80010f2:	230c      	movs	r3, #12
 80010f4:	2208      	movs	r2, #8
 80010f6:	4957      	ldr	r1, [pc, #348]	; (8001254 <main+0x1a8>)
 80010f8:	4857      	ldr	r0, [pc, #348]	; (8001258 <main+0x1ac>)
 80010fa:	f000 fef8 	bl	8001eee <motor_init>
  motor_init(&left_motor, &MOTOR_LEFT_TIMER, MOTOR_LEFT_CHANNEL_A, MOTOR_LEFT_CHANNEL_B);
 80010fe:	2300      	movs	r3, #0
 8001100:	2204      	movs	r2, #4
 8001102:	4954      	ldr	r1, [pc, #336]	; (8001254 <main+0x1a8>)
 8001104:	4855      	ldr	r0, [pc, #340]	; (800125c <main+0x1b0>)
 8001106:	f000 fef2 	bl	8001eee <motor_init>

  //ENCODER_init(&left_encoder, &htim3);

  //ENCODER_init(&right_encoder, &htim4);

  TCS34725_init(&left_color, &COLOR_LEFT_I2C);
 800110a:	4955      	ldr	r1, [pc, #340]	; (8001260 <main+0x1b4>)
 800110c:	4855      	ldr	r0, [pc, #340]	; (8001264 <main+0x1b8>)
 800110e:	f7ff fe51 	bl	8000db4 <TCS34725_init>
  TCS34725_init(&right_color, &COLOR_RIGHT_I2C);
 8001112:	4955      	ldr	r1, [pc, #340]	; (8001268 <main+0x1bc>)
 8001114:	4855      	ldr	r0, [pc, #340]	; (800126c <main+0x1c0>)
 8001116:	f7ff fe4d 	bl	8000db4 <TCS34725_init>

  KTIR_Init(&KTIR_ADC, ktir_results);
 800111a:	4955      	ldr	r1, [pc, #340]	; (8001270 <main+0x1c4>)
 800111c:	4855      	ldr	r0, [pc, #340]	; (8001274 <main+0x1c8>)
 800111e:	f7ff ff87 	bl	8001030 <KTIR_Init>
  //uint8_t position = 180;
  //int8_t count = 1;

  uint8_t rotating = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	73fb      	strb	r3, [r7, #15]
  uint32_t tick_start_rotating;
  uint8_t STOP = 1;
 8001126:	2301      	movs	r3, #1
 8001128:	71fb      	strb	r3, [r7, #7]
  //ENCODER_get_value(&left_encoder);
  //ENCODER_get_value(&right_encoder);

  servo_set_angle(&right_servo, 70);
 800112a:	2146      	movs	r1, #70	; 0x46
 800112c:	4847      	ldr	r0, [pc, #284]	; (800124c <main+0x1a0>)
 800112e:	f001 f856 	bl	80021de <servo_set_angle>

  servo_set_angle(&left_servo, 110);
 8001132:	216e      	movs	r1, #110	; 0x6e
 8001134:	4846      	ldr	r0, [pc, #280]	; (8001250 <main+0x1a4>)
 8001136:	f001 f852 	bl	80021de <servo_set_angle>
	   * 	- i potem ruch do następnego skrzyżowania i znowu 90 stopni
	   * - sprawdzać kolor i w zależności od tego odpowiednio poruszać bramkami (open_close_gates)
	   * - liczyć czas - jeżeli już mało to długa do bazy
	   * -
	   */
	if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 0){
 800113a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800113e:	484e      	ldr	r0, [pc, #312]	; (8001278 <main+0x1cc>)
 8001140:	f002 fe88 	bl	8003e54 <HAL_GPIO_ReadPin>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d112      	bne.n	8001170 <main+0xc4>
		STOP = STOP == 0 ? 1:0;
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	2b00      	cmp	r3, #0
 800114e:	bf0c      	ite	eq
 8001150:	2301      	moveq	r3, #1
 8001152:	2300      	movne	r3, #0
 8001154:	b2db      	uxtb	r3, r3
 8001156:	71fb      	strb	r3, [r7, #7]
		while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 0){
 8001158:	e002      	b.n	8001160 <main+0xb4>
			HAL_Delay(10);
 800115a:	200a      	movs	r0, #10
 800115c:	f001 fc58 	bl	8002a10 <HAL_Delay>
		while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 0){
 8001160:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001164:	4844      	ldr	r0, [pc, #272]	; (8001278 <main+0x1cc>)
 8001166:	f002 fe75 	bl	8003e54 <HAL_GPIO_ReadPin>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d0f4      	beq.n	800115a <main+0xae>
		}
	}
	KTIR_read();
 8001170:	f7ff ff74 	bl	800105c <KTIR_read>
	//printf("-----\nPrawy\n");
	//show_color_for_calibration(&right_color);
	//printf("Lewy\n");
	//show_color_for_calibration(&left_color);

	show_for_calibration();
 8001174:	f000 fd1a 	bl	8001bac <show_for_calibration>


	if(!STOP){
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d15c      	bne.n	8001238 <main+0x18c>

		//servo_set_angle(&right_servo, 180);

		//servo_set_angle(&left_servo, 0);

		if(!rotating){
 800117e:	7bfb      	ldrb	r3, [r7, #15]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d101      	bne.n	8001188 <main+0xdc>
			follow_the_line();
 8001184:	f000 fe14 	bl	8001db0 <follow_the_line>
		}
		// Jeśli wykryje skryżowanie to sprawdź czas
		if(is_crossing()){
 8001188:	f000 fe72 	bl	8001e70 <is_crossing>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d004      	beq.n	800119c <main+0xf0>
			rotating = 1;
 8001192:	2301      	movs	r3, #1
 8001194:	73fb      	strb	r3, [r7, #15]
			tick_start_rotating = HAL_GetTick();
 8001196:	f001 fc2f 	bl	80029f8 <HAL_GetTick>
 800119a:	60b8      	str	r0, [r7, #8]
		}
		//Po upływie pewnego czasu zacznij skręcać
		if(rotating && HAL_GetTick() - tick_start_rotating > 200){
 800119c:	7bfb      	ldrb	r3, [r7, #15]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d00f      	beq.n	80011c2 <main+0x116>
 80011a2:	f001 fc29 	bl	80029f8 <HAL_GetTick>
 80011a6:	4602      	mov	r2, r0
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	2bc8      	cmp	r3, #200	; 0xc8
 80011ae:	d908      	bls.n	80011c2 <main+0x116>
			motor_run(&right_motor, MOTOR_BASE_SPEED-20);
 80011b0:	2119      	movs	r1, #25
 80011b2:	4829      	ldr	r0, [pc, #164]	; (8001258 <main+0x1ac>)
 80011b4:	f000 feba 	bl	8001f2c <motor_run>
			motor_run(&left_motor, -MOTOR_BASE_SPEED-35);
 80011b8:	f06f 014f 	mvn.w	r1, #79	; 0x4f
 80011bc:	4827      	ldr	r0, [pc, #156]	; (800125c <main+0x1b0>)
 80011be:	f000 feb5 	bl	8001f2c <motor_run>
		}
		//Jeśli wrócisz na linie to zakończ skręcanie
		if(!is_black(ktir_results[0], KTIR_CRITICAL_VALUES[0]) && is_black(ktir_results[1], KTIR_CRITICAL_VALUES[1])
 80011c2:	4b2b      	ldr	r3, [pc, #172]	; (8001270 <main+0x1c4>)
 80011c4:	881b      	ldrh	r3, [r3, #0]
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80011cc:	4611      	mov	r1, r2
 80011ce:	4618      	mov	r0, r3
 80011d0:	f000 fcd7 	bl	8001b82 <is_black>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d128      	bne.n	800122c <main+0x180>
 80011da:	4b25      	ldr	r3, [pc, #148]	; (8001270 <main+0x1c4>)
 80011dc:	885b      	ldrh	r3, [r3, #2]
 80011de:	b29b      	uxth	r3, r3
 80011e0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80011e4:	4611      	mov	r1, r2
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 fccb 	bl	8001b82 <is_black>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d01c      	beq.n	800122c <main+0x180>
				&& is_black(ktir_results[2], KTIR_CRITICAL_VALUES[2]) && !is_black(ktir_results[3], KTIR_CRITICAL_VALUES[3]) && rotating){
 80011f2:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <main+0x1c4>)
 80011f4:	889b      	ldrh	r3, [r3, #4]
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80011fc:	4611      	mov	r1, r2
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 fcbf 	bl	8001b82 <is_black>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d010      	beq.n	800122c <main+0x180>
 800120a:	4b19      	ldr	r3, [pc, #100]	; (8001270 <main+0x1c4>)
 800120c:	88db      	ldrh	r3, [r3, #6]
 800120e:	b29b      	uxth	r3, r3
 8001210:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001214:	4611      	mov	r1, r2
 8001216:	4618      	mov	r0, r3
 8001218:	f000 fcb3 	bl	8001b82 <is_black>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d104      	bne.n	800122c <main+0x180>
 8001222:	7bfb      	ldrb	r3, [r7, #15]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <main+0x180>
			//turn(&left_motor, &right_motor, 5);
			rotating = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	73fb      	strb	r3, [r7, #15]
			//motor_brake(&right_motor);
			//motor_brake(&left_motor);
		}

		open_close_gates();
 800122c:	f000 fd48 	bl	8001cc0 <open_close_gates>
			turn(&right_motor, &left_motor, 5);
		}


		*/
		HAL_Delay(5);
 8001230:	2005      	movs	r0, #5
 8001232:	f001 fbed 	bl	8002a10 <HAL_Delay>
 8001236:	e780      	b.n	800113a <main+0x8e>
	}
	else {
		motor_brake(&right_motor);
 8001238:	4807      	ldr	r0, [pc, #28]	; (8001258 <main+0x1ac>)
 800123a:	f000 ff41 	bl	80020c0 <motor_brake>
		motor_brake(&left_motor);
 800123e:	4807      	ldr	r0, [pc, #28]	; (800125c <main+0x1b0>)
 8001240:	f000 ff3e 	bl	80020c0 <motor_brake>
	if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 0){
 8001244:	e779      	b.n	800113a <main+0x8e>
 8001246:	bf00      	nop
 8001248:	200001b4 	.word	0x200001b4
 800124c:	20000354 	.word	0x20000354
 8001250:	200001ac 	.word	0x200001ac
 8001254:	200002c0 	.word	0x200002c0
 8001258:	200000ac 	.word	0x200000ac
 800125c:	2000024c 	.word	0x2000024c
 8001260:	20000100 	.word	0x20000100
 8001264:	2000035c 	.word	0x2000035c
 8001268:	20000154 	.word	0x20000154
 800126c:	200001a8 	.word	0x200001a8
 8001270:	20000244 	.word	0x20000244
 8001274:	200001fc 	.word	0x200001fc
 8001278:	40020800 	.word	0x40020800

0800127c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b094      	sub	sp, #80	; 0x50
 8001280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001282:	f107 0320 	add.w	r3, r7, #32
 8001286:	2230      	movs	r2, #48	; 0x30
 8001288:	2100      	movs	r1, #0
 800128a:	4618      	mov	r0, r3
 800128c:	f005 fbe4 	bl	8006a58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001290:	f107 030c 	add.w	r3, r7, #12
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a0:	2300      	movs	r3, #0
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	4b27      	ldr	r3, [pc, #156]	; (8001344 <SystemClock_Config+0xc8>)
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	4a26      	ldr	r2, [pc, #152]	; (8001344 <SystemClock_Config+0xc8>)
 80012aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ae:	6413      	str	r3, [r2, #64]	; 0x40
 80012b0:	4b24      	ldr	r3, [pc, #144]	; (8001344 <SystemClock_Config+0xc8>)
 80012b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012bc:	2300      	movs	r3, #0
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	4b21      	ldr	r3, [pc, #132]	; (8001348 <SystemClock_Config+0xcc>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a20      	ldr	r2, [pc, #128]	; (8001348 <SystemClock_Config+0xcc>)
 80012c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012ca:	6013      	str	r3, [r2, #0]
 80012cc:	4b1e      	ldr	r3, [pc, #120]	; (8001348 <SystemClock_Config+0xcc>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012d4:	607b      	str	r3, [r7, #4]
 80012d6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012d8:	2302      	movs	r3, #2
 80012da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012dc:	2301      	movs	r3, #1
 80012de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012e0:	2310      	movs	r3, #16
 80012e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e4:	2302      	movs	r3, #2
 80012e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012e8:	2300      	movs	r3, #0
 80012ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012ec:	2308      	movs	r3, #8
 80012ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80012f0:	2364      	movs	r3, #100	; 0x64
 80012f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012f4:	2302      	movs	r3, #2
 80012f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012f8:	2304      	movs	r3, #4
 80012fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012fc:	f107 0320 	add.w	r3, r7, #32
 8001300:	4618      	mov	r0, r3
 8001302:	f003 fec7 	bl	8005094 <HAL_RCC_OscConfig>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800130c:	f000 fdea 	bl	8001ee4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001310:	230f      	movs	r3, #15
 8001312:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001314:	2302      	movs	r3, #2
 8001316:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800131c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001320:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001322:	2300      	movs	r3, #0
 8001324:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001326:	f107 030c 	add.w	r3, r7, #12
 800132a:	2103      	movs	r1, #3
 800132c:	4618      	mov	r0, r3
 800132e:	f004 f929 	bl	8005584 <HAL_RCC_ClockConfig>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001338:	f000 fdd4 	bl	8001ee4 <Error_Handler>
  }
}
 800133c:	bf00      	nop
 800133e:	3750      	adds	r7, #80	; 0x50
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40023800 	.word	0x40023800
 8001348:	40007000 	.word	0x40007000

0800134c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001352:	463b      	mov	r3, r7
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800135e:	4b36      	ldr	r3, [pc, #216]	; (8001438 <MX_ADC1_Init+0xec>)
 8001360:	4a36      	ldr	r2, [pc, #216]	; (800143c <MX_ADC1_Init+0xf0>)
 8001362:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001364:	4b34      	ldr	r3, [pc, #208]	; (8001438 <MX_ADC1_Init+0xec>)
 8001366:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800136a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800136c:	4b32      	ldr	r3, [pc, #200]	; (8001438 <MX_ADC1_Init+0xec>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001372:	4b31      	ldr	r3, [pc, #196]	; (8001438 <MX_ADC1_Init+0xec>)
 8001374:	2201      	movs	r2, #1
 8001376:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001378:	4b2f      	ldr	r3, [pc, #188]	; (8001438 <MX_ADC1_Init+0xec>)
 800137a:	2200      	movs	r2, #0
 800137c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800137e:	4b2e      	ldr	r3, [pc, #184]	; (8001438 <MX_ADC1_Init+0xec>)
 8001380:	2200      	movs	r2, #0
 8001382:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001386:	4b2c      	ldr	r3, [pc, #176]	; (8001438 <MX_ADC1_Init+0xec>)
 8001388:	2200      	movs	r2, #0
 800138a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800138c:	4b2a      	ldr	r3, [pc, #168]	; (8001438 <MX_ADC1_Init+0xec>)
 800138e:	4a2c      	ldr	r2, [pc, #176]	; (8001440 <MX_ADC1_Init+0xf4>)
 8001390:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001392:	4b29      	ldr	r3, [pc, #164]	; (8001438 <MX_ADC1_Init+0xec>)
 8001394:	2200      	movs	r2, #0
 8001396:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001398:	4b27      	ldr	r3, [pc, #156]	; (8001438 <MX_ADC1_Init+0xec>)
 800139a:	2204      	movs	r2, #4
 800139c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800139e:	4b26      	ldr	r3, [pc, #152]	; (8001438 <MX_ADC1_Init+0xec>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013a6:	4b24      	ldr	r3, [pc, #144]	; (8001438 <MX_ADC1_Init+0xec>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013ac:	4822      	ldr	r0, [pc, #136]	; (8001438 <MX_ADC1_Init+0xec>)
 80013ae:	f001 fb53 	bl	8002a58 <HAL_ADC_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80013b8:	f000 fd94 	bl	8001ee4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80013bc:	2300      	movs	r3, #0
 80013be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013c0:	2301      	movs	r3, #1
 80013c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013c8:	463b      	mov	r3, r7
 80013ca:	4619      	mov	r1, r3
 80013cc:	481a      	ldr	r0, [pc, #104]	; (8001438 <MX_ADC1_Init+0xec>)
 80013ce:	f001 fc8b 	bl	8002ce8 <HAL_ADC_ConfigChannel>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80013d8:	f000 fd84 	bl	8001ee4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013dc:	2301      	movs	r3, #1
 80013de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80013e0:	2302      	movs	r3, #2
 80013e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013e4:	463b      	mov	r3, r7
 80013e6:	4619      	mov	r1, r3
 80013e8:	4813      	ldr	r0, [pc, #76]	; (8001438 <MX_ADC1_Init+0xec>)
 80013ea:	f001 fc7d 	bl	8002ce8 <HAL_ADC_ConfigChannel>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80013f4:	f000 fd76 	bl	8001ee4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80013f8:	2306      	movs	r3, #6
 80013fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80013fc:	2303      	movs	r3, #3
 80013fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001400:	463b      	mov	r3, r7
 8001402:	4619      	mov	r1, r3
 8001404:	480c      	ldr	r0, [pc, #48]	; (8001438 <MX_ADC1_Init+0xec>)
 8001406:	f001 fc6f 	bl	8002ce8 <HAL_ADC_ConfigChannel>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001410:	f000 fd68 	bl	8001ee4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001414:	2307      	movs	r3, #7
 8001416:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001418:	2304      	movs	r3, #4
 800141a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800141c:	463b      	mov	r3, r7
 800141e:	4619      	mov	r1, r3
 8001420:	4805      	ldr	r0, [pc, #20]	; (8001438 <MX_ADC1_Init+0xec>)
 8001422:	f001 fc61 	bl	8002ce8 <HAL_ADC_ConfigChannel>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800142c:	f000 fd5a 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001430:	bf00      	nop
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	200001fc 	.word	0x200001fc
 800143c:	40012000 	.word	0x40012000
 8001440:	0f000001 	.word	0x0f000001

08001444 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001448:	4b12      	ldr	r3, [pc, #72]	; (8001494 <MX_I2C1_Init+0x50>)
 800144a:	4a13      	ldr	r2, [pc, #76]	; (8001498 <MX_I2C1_Init+0x54>)
 800144c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800144e:	4b11      	ldr	r3, [pc, #68]	; (8001494 <MX_I2C1_Init+0x50>)
 8001450:	4a12      	ldr	r2, [pc, #72]	; (800149c <MX_I2C1_Init+0x58>)
 8001452:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001454:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <MX_I2C1_Init+0x50>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800145a:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <MX_I2C1_Init+0x50>)
 800145c:	2200      	movs	r2, #0
 800145e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <MX_I2C1_Init+0x50>)
 8001462:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001466:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001468:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <MX_I2C1_Init+0x50>)
 800146a:	2200      	movs	r2, #0
 800146c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800146e:	4b09      	ldr	r3, [pc, #36]	; (8001494 <MX_I2C1_Init+0x50>)
 8001470:	2200      	movs	r2, #0
 8001472:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001474:	4b07      	ldr	r3, [pc, #28]	; (8001494 <MX_I2C1_Init+0x50>)
 8001476:	2200      	movs	r2, #0
 8001478:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800147a:	4b06      	ldr	r3, [pc, #24]	; (8001494 <MX_I2C1_Init+0x50>)
 800147c:	2200      	movs	r2, #0
 800147e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001480:	4804      	ldr	r0, [pc, #16]	; (8001494 <MX_I2C1_Init+0x50>)
 8001482:	f002 fd19 	bl	8003eb8 <HAL_I2C_Init>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800148c:	f000 fd2a 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20000100 	.word	0x20000100
 8001498:	40005400 	.word	0x40005400
 800149c:	000186a0 	.word	0x000186a0

080014a0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80014a4:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <MX_I2C2_Init+0x50>)
 80014a6:	4a13      	ldr	r2, [pc, #76]	; (80014f4 <MX_I2C2_Init+0x54>)
 80014a8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80014aa:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <MX_I2C2_Init+0x50>)
 80014ac:	4a12      	ldr	r2, [pc, #72]	; (80014f8 <MX_I2C2_Init+0x58>)
 80014ae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014b0:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <MX_I2C2_Init+0x50>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80014b6:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <MX_I2C2_Init+0x50>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <MX_I2C2_Init+0x50>)
 80014be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014c2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014c4:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <MX_I2C2_Init+0x50>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80014ca:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <MX_I2C2_Init+0x50>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014d0:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <MX_I2C2_Init+0x50>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014d6:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <MX_I2C2_Init+0x50>)
 80014d8:	2200      	movs	r2, #0
 80014da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80014dc:	4804      	ldr	r0, [pc, #16]	; (80014f0 <MX_I2C2_Init+0x50>)
 80014de:	f002 fceb 	bl	8003eb8 <HAL_I2C_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80014e8:	f000 fcfc 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000154 	.word	0x20000154
 80014f4:	40005800 	.word	0x40005800
 80014f8:	000186a0 	.word	0x000186a0

080014fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b092      	sub	sp, #72	; 0x48
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001502:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800150c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
 800151c:	615a      	str	r2, [r3, #20]
 800151e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001520:	1d3b      	adds	r3, r7, #4
 8001522:	2220      	movs	r2, #32
 8001524:	2100      	movs	r1, #0
 8001526:	4618      	mov	r0, r3
 8001528:	f005 fa96 	bl	8006a58 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800152c:	4b45      	ldr	r3, [pc, #276]	; (8001644 <MX_TIM1_Init+0x148>)
 800152e:	4a46      	ldr	r2, [pc, #280]	; (8001648 <MX_TIM1_Init+0x14c>)
 8001530:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10-1;
 8001532:	4b44      	ldr	r3, [pc, #272]	; (8001644 <MX_TIM1_Init+0x148>)
 8001534:	2209      	movs	r2, #9
 8001536:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001538:	4b42      	ldr	r3, [pc, #264]	; (8001644 <MX_TIM1_Init+0x148>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800153e:	4b41      	ldr	r3, [pc, #260]	; (8001644 <MX_TIM1_Init+0x148>)
 8001540:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001544:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001546:	4b3f      	ldr	r3, [pc, #252]	; (8001644 <MX_TIM1_Init+0x148>)
 8001548:	2200      	movs	r2, #0
 800154a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800154c:	4b3d      	ldr	r3, [pc, #244]	; (8001644 <MX_TIM1_Init+0x148>)
 800154e:	2200      	movs	r2, #0
 8001550:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001552:	4b3c      	ldr	r3, [pc, #240]	; (8001644 <MX_TIM1_Init+0x148>)
 8001554:	2200      	movs	r2, #0
 8001556:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001558:	483a      	ldr	r0, [pc, #232]	; (8001644 <MX_TIM1_Init+0x148>)
 800155a:	f004 f9e3 	bl	8005924 <HAL_TIM_PWM_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001564:	f000 fcbe 	bl	8001ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001568:	2300      	movs	r3, #0
 800156a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001570:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001574:	4619      	mov	r1, r3
 8001576:	4833      	ldr	r0, [pc, #204]	; (8001644 <MX_TIM1_Init+0x148>)
 8001578:	f004 fe6e 	bl	8006258 <HAL_TIMEx_MasterConfigSynchronization>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001582:	f000 fcaf 	bl	8001ee4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001586:	2360      	movs	r3, #96	; 0x60
 8001588:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800158e:	2300      	movs	r3, #0
 8001590:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001592:	2300      	movs	r3, #0
 8001594:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001596:	2300      	movs	r3, #0
 8001598:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800159a:	2300      	movs	r3, #0
 800159c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800159e:	2300      	movs	r3, #0
 80015a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a6:	2200      	movs	r2, #0
 80015a8:	4619      	mov	r1, r3
 80015aa:	4826      	ldr	r0, [pc, #152]	; (8001644 <MX_TIM1_Init+0x148>)
 80015ac:	f004 fb60 	bl	8005c70 <HAL_TIM_PWM_ConfigChannel>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80015b6:	f000 fc95 	bl	8001ee4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015be:	2204      	movs	r2, #4
 80015c0:	4619      	mov	r1, r3
 80015c2:	4820      	ldr	r0, [pc, #128]	; (8001644 <MX_TIM1_Init+0x148>)
 80015c4:	f004 fb54 	bl	8005c70 <HAL_TIM_PWM_ConfigChannel>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80015ce:	f000 fc89 	bl	8001ee4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d6:	2208      	movs	r2, #8
 80015d8:	4619      	mov	r1, r3
 80015da:	481a      	ldr	r0, [pc, #104]	; (8001644 <MX_TIM1_Init+0x148>)
 80015dc:	f004 fb48 	bl	8005c70 <HAL_TIM_PWM_ConfigChannel>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80015e6:	f000 fc7d 	bl	8001ee4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ee:	220c      	movs	r2, #12
 80015f0:	4619      	mov	r1, r3
 80015f2:	4814      	ldr	r0, [pc, #80]	; (8001644 <MX_TIM1_Init+0x148>)
 80015f4:	f004 fb3c 	bl	8005c70 <HAL_TIM_PWM_ConfigChannel>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80015fe:	f000 fc71 	bl	8001ee4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001602:	2300      	movs	r3, #0
 8001604:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001606:	2300      	movs	r3, #0
 8001608:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001616:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800161a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800161c:	2300      	movs	r3, #0
 800161e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001620:	1d3b      	adds	r3, r7, #4
 8001622:	4619      	mov	r1, r3
 8001624:	4807      	ldr	r0, [pc, #28]	; (8001644 <MX_TIM1_Init+0x148>)
 8001626:	f004 fe85 	bl	8006334 <HAL_TIMEx_ConfigBreakDeadTime>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001630:	f000 fc58 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001634:	4803      	ldr	r0, [pc, #12]	; (8001644 <MX_TIM1_Init+0x148>)
 8001636:	f000 ffbb 	bl	80025b0 <HAL_TIM_MspPostInit>

}
 800163a:	bf00      	nop
 800163c:	3748      	adds	r7, #72	; 0x48
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	200002c0 	.word	0x200002c0
 8001648:	40010000 	.word	0x40010000

0800164c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08a      	sub	sp, #40	; 0x28
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001652:	f107 0320 	add.w	r3, r7, #32
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800165c:	1d3b      	adds	r3, r7, #4
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	609a      	str	r2, [r3, #8]
 8001666:	60da      	str	r2, [r3, #12]
 8001668:	611a      	str	r2, [r3, #16]
 800166a:	615a      	str	r2, [r3, #20]
 800166c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800166e:	4b28      	ldr	r3, [pc, #160]	; (8001710 <MX_TIM3_Init+0xc4>)
 8001670:	4a28      	ldr	r2, [pc, #160]	; (8001714 <MX_TIM3_Init+0xc8>)
 8001672:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8001674:	4b26      	ldr	r3, [pc, #152]	; (8001710 <MX_TIM3_Init+0xc4>)
 8001676:	2263      	movs	r2, #99	; 0x63
 8001678:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800167a:	4b25      	ldr	r3, [pc, #148]	; (8001710 <MX_TIM3_Init+0xc4>)
 800167c:	2200      	movs	r2, #0
 800167e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8001680:	4b23      	ldr	r3, [pc, #140]	; (8001710 <MX_TIM3_Init+0xc4>)
 8001682:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001686:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001688:	4b21      	ldr	r3, [pc, #132]	; (8001710 <MX_TIM3_Init+0xc4>)
 800168a:	2200      	movs	r2, #0
 800168c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800168e:	4b20      	ldr	r3, [pc, #128]	; (8001710 <MX_TIM3_Init+0xc4>)
 8001690:	2200      	movs	r2, #0
 8001692:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001694:	481e      	ldr	r0, [pc, #120]	; (8001710 <MX_TIM3_Init+0xc4>)
 8001696:	f004 f945 	bl	8005924 <HAL_TIM_PWM_Init>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80016a0:	f000 fc20 	bl	8001ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a4:	2300      	movs	r3, #0
 80016a6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a8:	2300      	movs	r3, #0
 80016aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016ac:	f107 0320 	add.w	r3, r7, #32
 80016b0:	4619      	mov	r1, r3
 80016b2:	4817      	ldr	r0, [pc, #92]	; (8001710 <MX_TIM3_Init+0xc4>)
 80016b4:	f004 fdd0 	bl	8006258 <HAL_TIMEx_MasterConfigSynchronization>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80016be:	f000 fc11 	bl	8001ee4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016c2:	2360      	movs	r3, #96	; 0x60
 80016c4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 80016c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	2208      	movs	r2, #8
 80016d8:	4619      	mov	r1, r3
 80016da:	480d      	ldr	r0, [pc, #52]	; (8001710 <MX_TIM3_Init+0xc4>)
 80016dc:	f004 fac8 	bl	8005c70 <HAL_TIM_PWM_ConfigChannel>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80016e6:	f000 fbfd 	bl	8001ee4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016ea:	1d3b      	adds	r3, r7, #4
 80016ec:	220c      	movs	r2, #12
 80016ee:	4619      	mov	r1, r3
 80016f0:	4807      	ldr	r0, [pc, #28]	; (8001710 <MX_TIM3_Init+0xc4>)
 80016f2:	f004 fabd 	bl	8005c70 <HAL_TIM_PWM_ConfigChannel>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80016fc:	f000 fbf2 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001700:	4803      	ldr	r0, [pc, #12]	; (8001710 <MX_TIM3_Init+0xc4>)
 8001702:	f000 ff55 	bl	80025b0 <HAL_TIM_MspPostInit>

}
 8001706:	bf00      	nop
 8001708:	3728      	adds	r7, #40	; 0x28
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	200001b4 	.word	0x200001b4
 8001714:	40000400 	.word	0x40000400

08001718 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08c      	sub	sp, #48	; 0x30
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800171e:	f107 030c 	add.w	r3, r7, #12
 8001722:	2224      	movs	r2, #36	; 0x24
 8001724:	2100      	movs	r1, #0
 8001726:	4618      	mov	r0, r3
 8001728:	f005 f996 	bl	8006a58 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800172c:	1d3b      	adds	r3, r7, #4
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001734:	4b20      	ldr	r3, [pc, #128]	; (80017b8 <MX_TIM4_Init+0xa0>)
 8001736:	4a21      	ldr	r2, [pc, #132]	; (80017bc <MX_TIM4_Init+0xa4>)
 8001738:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800173a:	4b1f      	ldr	r3, [pc, #124]	; (80017b8 <MX_TIM4_Init+0xa0>)
 800173c:	2200      	movs	r2, #0
 800173e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001740:	4b1d      	ldr	r3, [pc, #116]	; (80017b8 <MX_TIM4_Init+0xa0>)
 8001742:	2200      	movs	r2, #0
 8001744:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001746:	4b1c      	ldr	r3, [pc, #112]	; (80017b8 <MX_TIM4_Init+0xa0>)
 8001748:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800174c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800174e:	4b1a      	ldr	r3, [pc, #104]	; (80017b8 <MX_TIM4_Init+0xa0>)
 8001750:	2200      	movs	r2, #0
 8001752:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001754:	4b18      	ldr	r3, [pc, #96]	; (80017b8 <MX_TIM4_Init+0xa0>)
 8001756:	2200      	movs	r2, #0
 8001758:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800175a:	2303      	movs	r3, #3
 800175c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800175e:	2300      	movs	r3, #0
 8001760:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001762:	2301      	movs	r3, #1
 8001764:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001766:	2300      	movs	r3, #0
 8001768:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800176a:	230f      	movs	r3, #15
 800176c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800176e:	2300      	movs	r3, #0
 8001770:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001772:	2301      	movs	r3, #1
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001776:	2300      	movs	r3, #0
 8001778:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 800177a:	230f      	movs	r3, #15
 800177c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800177e:	f107 030c 	add.w	r3, r7, #12
 8001782:	4619      	mov	r1, r3
 8001784:	480c      	ldr	r0, [pc, #48]	; (80017b8 <MX_TIM4_Init+0xa0>)
 8001786:	f004 f9cd 	bl	8005b24 <HAL_TIM_Encoder_Init>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001790:	f000 fba8 	bl	8001ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001794:	2300      	movs	r3, #0
 8001796:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001798:	2300      	movs	r3, #0
 800179a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800179c:	1d3b      	adds	r3, r7, #4
 800179e:	4619      	mov	r1, r3
 80017a0:	4805      	ldr	r0, [pc, #20]	; (80017b8 <MX_TIM4_Init+0xa0>)
 80017a2:	f004 fd59 	bl	8006258 <HAL_TIMEx_MasterConfigSynchronization>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80017ac:	f000 fb9a 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80017b0:	bf00      	nop
 80017b2:	3730      	adds	r7, #48	; 0x30
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	200000b8 	.word	0x200000b8
 80017bc:	40000800 	.word	0x40000800

080017c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017c4:	4b11      	ldr	r3, [pc, #68]	; (800180c <MX_USART2_UART_Init+0x4c>)
 80017c6:	4a12      	ldr	r2, [pc, #72]	; (8001810 <MX_USART2_UART_Init+0x50>)
 80017c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017ca:	4b10      	ldr	r3, [pc, #64]	; (800180c <MX_USART2_UART_Init+0x4c>)
 80017cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017d2:	4b0e      	ldr	r3, [pc, #56]	; (800180c <MX_USART2_UART_Init+0x4c>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <MX_USART2_UART_Init+0x4c>)
 80017da:	2200      	movs	r2, #0
 80017dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017de:	4b0b      	ldr	r3, [pc, #44]	; (800180c <MX_USART2_UART_Init+0x4c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017e4:	4b09      	ldr	r3, [pc, #36]	; (800180c <MX_USART2_UART_Init+0x4c>)
 80017e6:	220c      	movs	r2, #12
 80017e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ea:	4b08      	ldr	r3, [pc, #32]	; (800180c <MX_USART2_UART_Init+0x4c>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <MX_USART2_UART_Init+0x4c>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017f6:	4805      	ldr	r0, [pc, #20]	; (800180c <MX_USART2_UART_Init+0x4c>)
 80017f8:	f004 fdee 	bl	80063d8 <HAL_UART_Init>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001802:	f000 fb6f 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000308 	.word	0x20000308
 8001810:	40004400 	.word	0x40004400

08001814 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <MX_DMA_Init+0x3c>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	4a0b      	ldr	r2, [pc, #44]	; (8001850 <MX_DMA_Init+0x3c>)
 8001824:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001828:	6313      	str	r3, [r2, #48]	; 0x30
 800182a:	4b09      	ldr	r3, [pc, #36]	; (8001850 <MX_DMA_Init+0x3c>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001836:	2200      	movs	r2, #0
 8001838:	2100      	movs	r1, #0
 800183a:	2038      	movs	r0, #56	; 0x38
 800183c:	f001 fddf 	bl	80033fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001840:	2038      	movs	r0, #56	; 0x38
 8001842:	f001 fdf8 	bl	8003436 <HAL_NVIC_EnableIRQ>

}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40023800 	.word	0x40023800

08001854 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08a      	sub	sp, #40	; 0x28
 8001858:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185a:	f107 0314 	add.w	r3, r7, #20
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	605a      	str	r2, [r3, #4]
 8001864:	609a      	str	r2, [r3, #8]
 8001866:	60da      	str	r2, [r3, #12]
 8001868:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	613b      	str	r3, [r7, #16]
 800186e:	4b2d      	ldr	r3, [pc, #180]	; (8001924 <MX_GPIO_Init+0xd0>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	4a2c      	ldr	r2, [pc, #176]	; (8001924 <MX_GPIO_Init+0xd0>)
 8001874:	f043 0304 	orr.w	r3, r3, #4
 8001878:	6313      	str	r3, [r2, #48]	; 0x30
 800187a:	4b2a      	ldr	r3, [pc, #168]	; (8001924 <MX_GPIO_Init+0xd0>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	f003 0304 	and.w	r3, r3, #4
 8001882:	613b      	str	r3, [r7, #16]
 8001884:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	4b26      	ldr	r3, [pc, #152]	; (8001924 <MX_GPIO_Init+0xd0>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	4a25      	ldr	r2, [pc, #148]	; (8001924 <MX_GPIO_Init+0xd0>)
 8001890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001894:	6313      	str	r3, [r2, #48]	; 0x30
 8001896:	4b23      	ldr	r3, [pc, #140]	; (8001924 <MX_GPIO_Init+0xd0>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	60bb      	str	r3, [r7, #8]
 80018a6:	4b1f      	ldr	r3, [pc, #124]	; (8001924 <MX_GPIO_Init+0xd0>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	4a1e      	ldr	r2, [pc, #120]	; (8001924 <MX_GPIO_Init+0xd0>)
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	6313      	str	r3, [r2, #48]	; 0x30
 80018b2:	4b1c      	ldr	r3, [pc, #112]	; (8001924 <MX_GPIO_Init+0xd0>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	607b      	str	r3, [r7, #4]
 80018c2:	4b18      	ldr	r3, [pc, #96]	; (8001924 <MX_GPIO_Init+0xd0>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	4a17      	ldr	r2, [pc, #92]	; (8001924 <MX_GPIO_Init+0xd0>)
 80018c8:	f043 0302 	orr.w	r3, r3, #2
 80018cc:	6313      	str	r3, [r2, #48]	; 0x30
 80018ce:	4b15      	ldr	r3, [pc, #84]	; (8001924 <MX_GPIO_Init+0xd0>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	607b      	str	r3, [r7, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80018da:	2200      	movs	r2, #0
 80018dc:	2120      	movs	r1, #32
 80018de:	4812      	ldr	r0, [pc, #72]	; (8001928 <MX_GPIO_Init+0xd4>)
 80018e0:	f002 fad0 	bl	8003e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018f2:	f107 0314 	add.w	r3, r7, #20
 80018f6:	4619      	mov	r1, r3
 80018f8:	480c      	ldr	r0, [pc, #48]	; (800192c <MX_GPIO_Init+0xd8>)
 80018fa:	f002 f927 	bl	8003b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 80018fe:	2320      	movs	r3, #32
 8001900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001902:	2301      	movs	r3, #1
 8001904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190a:	2300      	movs	r3, #0
 800190c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 800190e:	f107 0314 	add.w	r3, r7, #20
 8001912:	4619      	mov	r1, r3
 8001914:	4804      	ldr	r0, [pc, #16]	; (8001928 <MX_GPIO_Init+0xd4>)
 8001916:	f002 f919 	bl	8003b4c <HAL_GPIO_Init>

}
 800191a:	bf00      	nop
 800191c:	3728      	adds	r7, #40	; 0x28
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40023800 	.word	0x40023800
 8001928:	40020000 	.word	0x40020000
 800192c:	40020800 	.word	0x40020800

08001930 <get_H_from_RGB>:
 * @param red: Red value (0, 255)
 * @param green: Green value (0, 255)
 * @param blue: Blue value (0, 255)
 */

uint16_t get_H_from_RGB(uint32_t red, uint32_t green, uint32_t blue){
 8001930:	b580      	push	{r7, lr}
 8001932:	b08a      	sub	sp, #40	; 0x28
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
	uint16_t c_max = red > green ? (red > blue ? red : blue) : (green > blue ? green : blue);
 800193c:	68fa      	ldr	r2, [r7, #12]
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	429a      	cmp	r2, r3
 8001942:	d906      	bls.n	8001952 <get_H_from_RGB+0x22>
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	4293      	cmp	r3, r2
 800194a:	bf38      	it	cc
 800194c:	4613      	movcc	r3, r2
 800194e:	b29b      	uxth	r3, r3
 8001950:	e005      	b.n	800195e <get_H_from_RGB+0x2e>
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	4293      	cmp	r3, r2
 8001958:	bf38      	it	cc
 800195a:	4613      	movcc	r3, r2
 800195c:	b29b      	uxth	r3, r3
 800195e:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t c_min = red < green ? (red < blue ? red : blue) : (green < blue ? green : blue);
 8001960:	68fa      	ldr	r2, [r7, #12]
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	429a      	cmp	r2, r3
 8001966:	d206      	bcs.n	8001976 <get_H_from_RGB+0x46>
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	4293      	cmp	r3, r2
 800196e:	bf28      	it	cs
 8001970:	4613      	movcs	r3, r2
 8001972:	b29b      	uxth	r3, r3
 8001974:	e005      	b.n	8001982 <get_H_from_RGB+0x52>
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	4293      	cmp	r3, r2
 800197c:	bf28      	it	cs
 800197e:	4613      	movcs	r3, r2
 8001980:	b29b      	uxth	r3, r3
 8001982:	847b      	strh	r3, [r7, #34]	; 0x22

	float d = (float)(c_max - c_min);
 8001984:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001986:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	ee07 3a90 	vmov	s15, r3
 800198e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001992:	edc7 7a07 	vstr	s15, [r7, #28]
	d /= 255.0;
 8001996:	ed97 7a07 	vldr	s14, [r7, #28]
 800199a:	eddf 6a53 	vldr	s13, [pc, #332]	; 8001ae8 <get_H_from_RGB+0x1b8>
 800199e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019a2:	edc7 7a07 	vstr	s15, [r7, #28]
	uint16_t h = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	84fb      	strh	r3, [r7, #38]	; 0x26
	float r = red/255.0;
 80019aa:	68f8      	ldr	r0, [r7, #12]
 80019ac:	f7fe fdaa 	bl	8000504 <__aeabi_ui2d>
 80019b0:	a34b      	add	r3, pc, #300	; (adr r3, 8001ae0 <get_H_from_RGB+0x1b0>)
 80019b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b6:	f7fe ff49 	bl	800084c <__aeabi_ddiv>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	4610      	mov	r0, r2
 80019c0:	4619      	mov	r1, r3
 80019c2:	f7ff f82b 	bl	8000a1c <__aeabi_d2f>
 80019c6:	4603      	mov	r3, r0
 80019c8:	61bb      	str	r3, [r7, #24]
	float g = green/255.0;
 80019ca:	68b8      	ldr	r0, [r7, #8]
 80019cc:	f7fe fd9a 	bl	8000504 <__aeabi_ui2d>
 80019d0:	a343      	add	r3, pc, #268	; (adr r3, 8001ae0 <get_H_from_RGB+0x1b0>)
 80019d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d6:	f7fe ff39 	bl	800084c <__aeabi_ddiv>
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	4610      	mov	r0, r2
 80019e0:	4619      	mov	r1, r3
 80019e2:	f7ff f81b 	bl	8000a1c <__aeabi_d2f>
 80019e6:	4603      	mov	r3, r0
 80019e8:	617b      	str	r3, [r7, #20]
	float b = blue/255.0;
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7fe fd8a 	bl	8000504 <__aeabi_ui2d>
 80019f0:	a33b      	add	r3, pc, #236	; (adr r3, 8001ae0 <get_H_from_RGB+0x1b0>)
 80019f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f6:	f7fe ff29 	bl	800084c <__aeabi_ddiv>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	4610      	mov	r0, r2
 8001a00:	4619      	mov	r1, r3
 8001a02:	f7ff f80b 	bl	8000a1c <__aeabi_d2f>
 8001a06:	4603      	mov	r3, r0
 8001a08:	613b      	str	r3, [r7, #16]
	if (d == 0){
 8001a0a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a0e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a16:	d102      	bne.n	8001a1e <get_H_from_RGB+0xee>
	  h = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001a1c:	e05b      	b.n	8001ad6 <get_H_from_RGB+0x1a6>
	}
	else if(c_max == red){
 8001a1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d124      	bne.n	8001a70 <get_H_from_RGB+0x140>
	  h = (int)(60*(g - b)/d + 360)%360;
 8001a26:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a2a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a32:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001aec <get_H_from_RGB+0x1bc>
 8001a36:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001a3a:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a42:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001af0 <get_H_from_RGB+0x1c0>
 8001a46:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a4e:	ee17 3a90 	vmov	r3, s15
 8001a52:	4a28      	ldr	r2, [pc, #160]	; (8001af4 <get_H_from_RGB+0x1c4>)
 8001a54:	fb82 1203 	smull	r1, r2, r2, r3
 8001a58:	441a      	add	r2, r3
 8001a5a:	1211      	asrs	r1, r2, #8
 8001a5c:	17da      	asrs	r2, r3, #31
 8001a5e:	1a8a      	subs	r2, r1, r2
 8001a60:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001a64:	fb01 f202 	mul.w	r2, r1, r2
 8001a68:	1a9a      	subs	r2, r3, r2
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001a6e:	e032      	b.n	8001ad6 <get_H_from_RGB+0x1a6>
	}
	else if(c_max == green){
 8001a70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a72:	68ba      	ldr	r2, [r7, #8]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d117      	bne.n	8001aa8 <get_H_from_RGB+0x178>
	  h = (60*(b - r)/d) + 120;
 8001a78:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a7c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a84:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001aec <get_H_from_RGB+0x1bc>
 8001a88:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001a8c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a94:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001af8 <get_H_from_RGB+0x1c8>
 8001a98:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001aa0:	ee17 3a90 	vmov	r3, s15
 8001aa4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001aa6:	e016      	b.n	8001ad6 <get_H_from_RGB+0x1a6>
	}
	else {
	  h = (60*(r - g)/d) + 240;
 8001aa8:	ed97 7a06 	vldr	s14, [r7, #24]
 8001aac:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ab0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ab4:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001aec <get_H_from_RGB+0x1bc>
 8001ab8:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001abc:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ac0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ac4:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001afc <get_H_from_RGB+0x1cc>
 8001ac8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001acc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ad0:	ee17 3a90 	vmov	r3, s15
 8001ad4:	84fb      	strh	r3, [r7, #38]	; 0x26
	}
	return h;
 8001ad6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3728      	adds	r7, #40	; 0x28
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	00000000 	.word	0x00000000
 8001ae4:	406fe000 	.word	0x406fe000
 8001ae8:	437f0000 	.word	0x437f0000
 8001aec:	42700000 	.word	0x42700000
 8001af0:	43b40000 	.word	0x43b40000
 8001af4:	b60b60b7 	.word	0xb60b60b7
 8001af8:	42f00000 	.word	0x42f00000
 8001afc:	43700000 	.word	0x43700000

08001b00 <is_red_onion>:

uint8_t is_red_onion(ColorSensor *sensor){
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
	uint16_t red = 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	82bb      	strh	r3, [r7, #20]
	unlock(sensor);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff fa57 	bl	8000fc0 <unlock>
	get_red(sensor, &red);
 8001b12:	f107 0314 	add.w	r3, r7, #20
 8001b16:	4619      	mov	r1, r3
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7ff f9e6 	bl	8000eea <get_red>
	uint16_t color = 0;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	827b      	strh	r3, [r7, #18]
	get_light(sensor, &color);
 8001b22:	f107 0312 	add.w	r3, r7, #18
 8001b26:	4619      	mov	r1, r3
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f7ff fa11 	bl	8000f50 <get_light>
	uint16_t green = 0;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	823b      	strh	r3, [r7, #16]
	get_green(sensor, &green);
 8001b32:	f107 0310 	add.w	r3, r7, #16
 8001b36:	4619      	mov	r1, r3
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f7ff f9e7 	bl	8000f0c <get_green>
	uint16_t blue = 0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	81fb      	strh	r3, [r7, #14]
	get_blue(sensor, &blue);
 8001b42:	f107 030e 	add.w	r3, r7, #14
 8001b46:	4619      	mov	r1, r3
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7ff f9f0 	bl	8000f2e <get_blue>
	lock(sensor);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7ff fa0f 	bl	8000f72 <lock>

	uint16_t h = get_H_from_RGB(red, green, blue);
 8001b54:	8abb      	ldrh	r3, [r7, #20]
 8001b56:	4618      	mov	r0, r3
 8001b58:	8a3b      	ldrh	r3, [r7, #16]
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	89fb      	ldrh	r3, [r7, #14]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	f7ff fee6 	bl	8001930 <get_H_from_RGB>
 8001b64:	4603      	mov	r3, r0
 8001b66:	82fb      	strh	r3, [r7, #22]

	if(h > 230 || h < 12) {
 8001b68:	8afb      	ldrh	r3, [r7, #22]
 8001b6a:	2be6      	cmp	r3, #230	; 0xe6
 8001b6c:	d802      	bhi.n	8001b74 <is_red_onion+0x74>
 8001b6e:	8afb      	ldrh	r3, [r7, #22]
 8001b70:	2b0b      	cmp	r3, #11
 8001b72:	d801      	bhi.n	8001b78 <is_red_onion+0x78>
		return 1;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e000      	b.n	8001b7a <is_red_onion+0x7a>
	}
	else {
		return 0;
 8001b78:	2300      	movs	r3, #0
	}
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3718      	adds	r7, #24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <is_black>:

uint8_t is_black(uint16_t value, uint16_t critical_value){
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	4603      	mov	r3, r0
 8001b8a:	460a      	mov	r2, r1
 8001b8c:	80fb      	strh	r3, [r7, #6]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	80bb      	strh	r3, [r7, #4]
	return value > critical_value ? 1:0;
 8001b92:	88fa      	ldrh	r2, [r7, #6]
 8001b94:	88bb      	ldrh	r3, [r7, #4]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	bf8c      	ite	hi
 8001b9a:	2301      	movhi	r3, #1
 8001b9c:	2300      	movls	r3, #0
 8001b9e:	b2db      	uxtb	r3, r3
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <show_for_calibration>:

void show_for_calibration(){
 8001bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af02      	add	r7, sp, #8
	/**
   * Poniżej fragment do kalibracji krytycznych wartości
   */
	printf("Sensor[0]: %d\tSensor[1]: %d\tSensor[2]: %d\tSensor[3]: %d\n", ktir_results[0], ktir_results[1], ktir_results[2], ktir_results[3]);
 8001bb2:	4b25      	ldr	r3, [pc, #148]	; (8001c48 <show_for_calibration+0x9c>)
 8001bb4:	881b      	ldrh	r3, [r3, #0]
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4b23      	ldr	r3, [pc, #140]	; (8001c48 <show_for_calibration+0x9c>)
 8001bbc:	885b      	ldrh	r3, [r3, #2]
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4b21      	ldr	r3, [pc, #132]	; (8001c48 <show_for_calibration+0x9c>)
 8001bc4:	889b      	ldrh	r3, [r3, #4]
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	4618      	mov	r0, r3
 8001bca:	4b1f      	ldr	r3, [pc, #124]	; (8001c48 <show_for_calibration+0x9c>)
 8001bcc:	88db      	ldrh	r3, [r3, #6]
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	9300      	str	r3, [sp, #0]
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	481d      	ldr	r0, [pc, #116]	; (8001c4c <show_for_calibration+0xa0>)
 8001bd6:	f004 ff47 	bl	8006a68 <iprintf>

  	printf("------\nCzarne[0]: %d\tCzarne[1]: %d\tCzarne[2]: %d\tCzarne[3]: %d\n",
	is_black(ktir_results[0], KTIR_CRITICAL_VALUES[0]), is_black(ktir_results[1], KTIR_CRITICAL_VALUES[1]),
 8001bda:	4b1b      	ldr	r3, [pc, #108]	; (8001c48 <show_for_calibration+0x9c>)
 8001bdc:	881b      	ldrh	r3, [r3, #0]
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001be4:	4611      	mov	r1, r2
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff ffcb 	bl	8001b82 <is_black>
 8001bec:	4603      	mov	r3, r0
  	printf("------\nCzarne[0]: %d\tCzarne[1]: %d\tCzarne[2]: %d\tCzarne[3]: %d\n",
 8001bee:	461c      	mov	r4, r3
	is_black(ktir_results[0], KTIR_CRITICAL_VALUES[0]), is_black(ktir_results[1], KTIR_CRITICAL_VALUES[1]),
 8001bf0:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <show_for_calibration+0x9c>)
 8001bf2:	885b      	ldrh	r3, [r3, #2]
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001bfa:	4611      	mov	r1, r2
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff ffc0 	bl	8001b82 <is_black>
 8001c02:	4603      	mov	r3, r0
  	printf("------\nCzarne[0]: %d\tCzarne[1]: %d\tCzarne[2]: %d\tCzarne[3]: %d\n",
 8001c04:	461d      	mov	r5, r3
	is_black(ktir_results[2], KTIR_CRITICAL_VALUES[2]), is_black(ktir_results[3], KTIR_CRITICAL_VALUES[0]));
 8001c06:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <show_for_calibration+0x9c>)
 8001c08:	889b      	ldrh	r3, [r3, #4]
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001c10:	4611      	mov	r1, r2
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff ffb5 	bl	8001b82 <is_black>
 8001c18:	4603      	mov	r3, r0
  	printf("------\nCzarne[0]: %d\tCzarne[1]: %d\tCzarne[2]: %d\tCzarne[3]: %d\n",
 8001c1a:	461e      	mov	r6, r3
	is_black(ktir_results[2], KTIR_CRITICAL_VALUES[2]), is_black(ktir_results[3], KTIR_CRITICAL_VALUES[0]));
 8001c1c:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <show_for_calibration+0x9c>)
 8001c1e:	88db      	ldrh	r3, [r3, #6]
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001c26:	4611      	mov	r1, r2
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff ffaa 	bl	8001b82 <is_black>
 8001c2e:	4603      	mov	r3, r0
  	printf("------\nCzarne[0]: %d\tCzarne[1]: %d\tCzarne[2]: %d\tCzarne[3]: %d\n",
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	4633      	mov	r3, r6
 8001c34:	462a      	mov	r2, r5
 8001c36:	4621      	mov	r1, r4
 8001c38:	4805      	ldr	r0, [pc, #20]	; (8001c50 <show_for_calibration+0xa4>)
 8001c3a:	f004 ff15 	bl	8006a68 <iprintf>
}
 8001c3e:	bf00      	nop
 8001c40:	3704      	adds	r7, #4
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20000244 	.word	0x20000244
 8001c4c:	0800792c 	.word	0x0800792c
 8001c50:	08007968 	.word	0x08007968

08001c54 <go_straight>:
void turn_slight(Motor* slower, Motor* faster, uint8_t value){
	motor_run(slower, MOTOR_BASE_SPEED - value);
	motor_run(faster, MOTOR_BASE_SPEED);
}

void go_straight(int8_t speed){
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	71fb      	strb	r3, [r7, #7]
	motor_run(&left_motor, speed);
 8001c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c62:	4619      	mov	r1, r3
 8001c64:	4806      	ldr	r0, [pc, #24]	; (8001c80 <go_straight+0x2c>)
 8001c66:	f000 f961 	bl	8001f2c <motor_run>
	motor_run(&right_motor, speed);
 8001c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4804      	ldr	r0, [pc, #16]	; (8001c84 <go_straight+0x30>)
 8001c72:	f000 f95b 	bl	8001f2c <motor_run>

}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	2000024c 	.word	0x2000024c
 8001c84:	200000ac 	.word	0x200000ac

08001c88 <turn>:

void turn(Motor* slower, Motor* faster, uint8_t value){
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	4613      	mov	r3, r2
 8001c94:	71fb      	strb	r3, [r7, #7]
	motor_run(slower, MOTOR_BASE_SPEED - value);
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	f1c3 032d 	rsb	r3, r3, #45	; 0x2d
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	b25b      	sxtb	r3, r3
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	68f8      	ldr	r0, [r7, #12]
 8001ca4:	f000 f942 	bl	8001f2c <motor_run>
	motor_run(faster, MOTOR_BASE_SPEED + value);
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
 8001caa:	332d      	adds	r3, #45	; 0x2d
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	b25b      	sxtb	r3, r3
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	68b8      	ldr	r0, [r7, #8]
 8001cb4:	f000 f93a 	bl	8001f2c <motor_run>
}
 8001cb8:	bf00      	nop
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <open_close_gates>:
		uint16_t h = get_H_from_RGB(red, green, blue);
		printf("R: %d\tG: %d\tB: %d\tC: %d \t H = %d\n", red, green, blue, color, h);

}

void open_close_gates(){
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
	if ((is_red_onion(&left_color) || is_red_onion(&right_color)) && opened_gates == 0){
 8001cc6:	4834      	ldr	r0, [pc, #208]	; (8001d98 <open_close_gates+0xd8>)
 8001cc8:	f7ff ff1a 	bl	8001b00 <is_red_onion>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d105      	bne.n	8001cde <open_close_gates+0x1e>
 8001cd2:	4832      	ldr	r0, [pc, #200]	; (8001d9c <open_close_gates+0xdc>)
 8001cd4:	f7ff ff14 	bl	8001b00 <is_red_onion>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d014      	beq.n	8001d08 <open_close_gates+0x48>
 8001cde:	4b30      	ldr	r3, [pc, #192]	; (8001da0 <open_close_gates+0xe0>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d110      	bne.n	8001d08 <open_close_gates+0x48>
			servo_set_angle(&right_servo, 0);
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	482e      	ldr	r0, [pc, #184]	; (8001da4 <open_close_gates+0xe4>)
 8001cea:	f000 fa78 	bl	80021de <servo_set_angle>
			servo_set_angle(&left_servo, 180);
 8001cee:	21b4      	movs	r1, #180	; 0xb4
 8001cf0:	482d      	ldr	r0, [pc, #180]	; (8001da8 <open_close_gates+0xe8>)
 8001cf2:	f000 fa74 	bl	80021de <servo_set_angle>
			opened_gates = 1;
 8001cf6:	4b2a      	ldr	r3, [pc, #168]	; (8001da0 <open_close_gates+0xe0>)
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	701a      	strb	r2, [r3, #0]
			tick_open_gates = HAL_GetTick();
 8001cfc:	f000 fe7c 	bl	80029f8 <HAL_GetTick>
 8001d00:	4603      	mov	r3, r0
 8001d02:	4a2a      	ldr	r2, [pc, #168]	; (8001dac <open_close_gates+0xec>)
 8001d04:	6013      	str	r3, [r2, #0]
 8001d06:	e043      	b.n	8001d90 <open_close_gates+0xd0>
		} else {
			uint16_t right = 0, left = 0;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	80fb      	strh	r3, [r7, #6]
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	80bb      	strh	r3, [r7, #4]
			get_light(&right_color, &right);
 8001d10:	1dbb      	adds	r3, r7, #6
 8001d12:	4619      	mov	r1, r3
 8001d14:	4821      	ldr	r0, [pc, #132]	; (8001d9c <open_close_gates+0xdc>)
 8001d16:	f7ff f91b 	bl	8000f50 <get_light>
			get_light(&left_color, &left);
 8001d1a:	1d3b      	adds	r3, r7, #4
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	481e      	ldr	r0, [pc, #120]	; (8001d98 <open_close_gates+0xd8>)
 8001d20:	f7ff f916 	bl	8000f50 <get_light>
			if((right > COLOR_EMPTY_CRITICAL || left > COLOR_EMPTY_CRITICAL) && opened_gates == 0){
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001d2a:	d803      	bhi.n	8001d34 <open_close_gates+0x74>
 8001d2c:	88bb      	ldrh	r3, [r7, #4]
 8001d2e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001d32:	d914      	bls.n	8001d5e <open_close_gates+0x9e>
 8001d34:	4b1a      	ldr	r3, [pc, #104]	; (8001da0 <open_close_gates+0xe0>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d110      	bne.n	8001d5e <open_close_gates+0x9e>
				servo_set_angle(&right_servo, 170);
 8001d3c:	21aa      	movs	r1, #170	; 0xaa
 8001d3e:	4819      	ldr	r0, [pc, #100]	; (8001da4 <open_close_gates+0xe4>)
 8001d40:	f000 fa4d 	bl	80021de <servo_set_angle>
				servo_set_angle(&left_servo, 10);
 8001d44:	210a      	movs	r1, #10
 8001d46:	4818      	ldr	r0, [pc, #96]	; (8001da8 <open_close_gates+0xe8>)
 8001d48:	f000 fa49 	bl	80021de <servo_set_angle>
				opened_gates = 2;
 8001d4c:	4b14      	ldr	r3, [pc, #80]	; (8001da0 <open_close_gates+0xe0>)
 8001d4e:	2202      	movs	r2, #2
 8001d50:	701a      	strb	r2, [r3, #0]
				tick_open_gates = HAL_GetTick();
 8001d52:	f000 fe51 	bl	80029f8 <HAL_GetTick>
 8001d56:	4603      	mov	r3, r0
 8001d58:	4a14      	ldr	r2, [pc, #80]	; (8001dac <open_close_gates+0xec>)
 8001d5a:	6013      	str	r3, [r2, #0]
 8001d5c:	e018      	b.n	8001d90 <open_close_gates+0xd0>
			} else if (opened_gates && HAL_GetTick() - tick_open_gates > 2000){
 8001d5e:	4b10      	ldr	r3, [pc, #64]	; (8001da0 <open_close_gates+0xe0>)
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d014      	beq.n	8001d90 <open_close_gates+0xd0>
 8001d66:	f000 fe47 	bl	80029f8 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <open_close_gates+0xec>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001d76:	d90b      	bls.n	8001d90 <open_close_gates+0xd0>

				  servo_set_angle(&right_servo, 70);
 8001d78:	2146      	movs	r1, #70	; 0x46
 8001d7a:	480a      	ldr	r0, [pc, #40]	; (8001da4 <open_close_gates+0xe4>)
 8001d7c:	f000 fa2f 	bl	80021de <servo_set_angle>

				  servo_set_angle(&left_servo, 110);
 8001d80:	216e      	movs	r1, #110	; 0x6e
 8001d82:	4809      	ldr	r0, [pc, #36]	; (8001da8 <open_close_gates+0xe8>)
 8001d84:	f000 fa2b 	bl	80021de <servo_set_angle>
				  opened_gates = 0;
 8001d88:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <open_close_gates+0xe0>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	701a      	strb	r2, [r3, #0]
			}
		}
}
 8001d8e:	e7ff      	b.n	8001d90 <open_close_gates+0xd0>
 8001d90:	bf00      	nop
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	2000035c 	.word	0x2000035c
 8001d9c:	200001a8 	.word	0x200001a8
 8001da0:	20000094 	.word	0x20000094
 8001da4:	20000354 	.word	0x20000354
 8001da8:	200001ac 	.word	0x200001ac
 8001dac:	20000090 	.word	0x20000090

08001db0 <follow_the_line>:

void follow_the_line(){
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
	if(is_black(ktir_results[1], KTIR_CRITICAL_VALUES[1]) && is_black(ktir_results[2], KTIR_CRITICAL_VALUES[2])){
 8001db4:	4b2b      	ldr	r3, [pc, #172]	; (8001e64 <follow_the_line+0xb4>)
 8001db6:	885b      	ldrh	r3, [r3, #2]
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001dbe:	4611      	mov	r1, r2
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff fede 	bl	8001b82 <is_black>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d00e      	beq.n	8001dea <follow_the_line+0x3a>
 8001dcc:	4b25      	ldr	r3, [pc, #148]	; (8001e64 <follow_the_line+0xb4>)
 8001dce:	889b      	ldrh	r3, [r3, #4]
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001dd6:	4611      	mov	r1, r2
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff fed2 	bl	8001b82 <is_black>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d002      	beq.n	8001dea <follow_the_line+0x3a>
		go_straight(MOTOR_BASE_SPEED);
 8001de4:	202d      	movs	r0, #45	; 0x2d
 8001de6:	f7ff ff35 	bl	8001c54 <go_straight>
	}
	if(!is_black(ktir_results[1], KTIR_CRITICAL_VALUES[1]) && is_black(ktir_results[2], KTIR_CRITICAL_VALUES[2])){
 8001dea:	4b1e      	ldr	r3, [pc, #120]	; (8001e64 <follow_the_line+0xb4>)
 8001dec:	885b      	ldrh	r3, [r3, #2]
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001df4:	4611      	mov	r1, r2
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff fec3 	bl	8001b82 <is_black>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d110      	bne.n	8001e24 <follow_the_line+0x74>
 8001e02:	4b18      	ldr	r3, [pc, #96]	; (8001e64 <follow_the_line+0xb4>)
 8001e04:	889b      	ldrh	r3, [r3, #4]
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001e0c:	4611      	mov	r1, r2
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff feb7 	bl	8001b82 <is_black>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d004      	beq.n	8001e24 <follow_the_line+0x74>
		turn(&left_motor, &right_motor, 7);
 8001e1a:	2207      	movs	r2, #7
 8001e1c:	4912      	ldr	r1, [pc, #72]	; (8001e68 <follow_the_line+0xb8>)
 8001e1e:	4813      	ldr	r0, [pc, #76]	; (8001e6c <follow_the_line+0xbc>)
 8001e20:	f7ff ff32 	bl	8001c88 <turn>
	}
	if(is_black(ktir_results[1], KTIR_CRITICAL_VALUES[1]) && !is_black(ktir_results[2], KTIR_CRITICAL_VALUES[2])){
 8001e24:	4b0f      	ldr	r3, [pc, #60]	; (8001e64 <follow_the_line+0xb4>)
 8001e26:	885b      	ldrh	r3, [r3, #2]
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001e2e:	4611      	mov	r1, r2
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff fea6 	bl	8001b82 <is_black>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d010      	beq.n	8001e5e <follow_the_line+0xae>
 8001e3c:	4b09      	ldr	r3, [pc, #36]	; (8001e64 <follow_the_line+0xb4>)
 8001e3e:	889b      	ldrh	r3, [r3, #4]
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001e46:	4611      	mov	r1, r2
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff fe9a 	bl	8001b82 <is_black>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d104      	bne.n	8001e5e <follow_the_line+0xae>
		turn(&right_motor, &left_motor, 7);
 8001e54:	2207      	movs	r2, #7
 8001e56:	4905      	ldr	r1, [pc, #20]	; (8001e6c <follow_the_line+0xbc>)
 8001e58:	4803      	ldr	r0, [pc, #12]	; (8001e68 <follow_the_line+0xb8>)
 8001e5a:	f7ff ff15 	bl	8001c88 <turn>
	}
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20000244 	.word	0x20000244
 8001e68:	200000ac 	.word	0x200000ac
 8001e6c:	2000024c 	.word	0x2000024c

08001e70 <is_crossing>:

uint8_t is_crossing(){
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
	return is_black(ktir_results[0], KTIR_CRITICAL_VALUES[0]) && is_black(ktir_results[1], KTIR_CRITICAL_VALUES[1])
 8001e74:	4b1a      	ldr	r3, [pc, #104]	; (8001ee0 <is_crossing+0x70>)
 8001e76:	881b      	ldrh	r3, [r3, #0]
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001e7e:	4611      	mov	r1, r2
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff fe7e 	bl	8001b82 <is_black>
 8001e86:	4603      	mov	r3, r0
			&& is_black(ktir_results[2], KTIR_CRITICAL_VALUES[2]) && is_black(ktir_results[3], KTIR_CRITICAL_VALUES[3]);
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d025      	beq.n	8001ed8 <is_crossing+0x68>
	return is_black(ktir_results[0], KTIR_CRITICAL_VALUES[0]) && is_black(ktir_results[1], KTIR_CRITICAL_VALUES[1])
 8001e8c:	4b14      	ldr	r3, [pc, #80]	; (8001ee0 <is_crossing+0x70>)
 8001e8e:	885b      	ldrh	r3, [r3, #2]
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001e96:	4611      	mov	r1, r2
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff fe72 	bl	8001b82 <is_black>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d019      	beq.n	8001ed8 <is_crossing+0x68>
			&& is_black(ktir_results[2], KTIR_CRITICAL_VALUES[2]) && is_black(ktir_results[3], KTIR_CRITICAL_VALUES[3]);
 8001ea4:	4b0e      	ldr	r3, [pc, #56]	; (8001ee0 <is_crossing+0x70>)
 8001ea6:	889b      	ldrh	r3, [r3, #4]
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001eae:	4611      	mov	r1, r2
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff fe66 	bl	8001b82 <is_black>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d00d      	beq.n	8001ed8 <is_crossing+0x68>
 8001ebc:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <is_crossing+0x70>)
 8001ebe:	88db      	ldrh	r3, [r3, #6]
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001ec6:	4611      	mov	r1, r2
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff fe5a 	bl	8001b82 <is_black>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <is_crossing+0x68>
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e000      	b.n	8001eda <is_crossing+0x6a>
 8001ed8:	2300      	movs	r3, #0
 8001eda:	b2db      	uxtb	r3, r3
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	20000244 	.word	0x20000244

08001ee4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ee8:	b672      	cpsid	i
}
 8001eea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001eec:	e7fe      	b.n	8001eec <Error_Handler+0x8>

08001eee <motor_init>:
 *      Author: Hyperbook
 */

#include "motor.h"

HAL_StatusTypeDef motor_init(Motor* motor, TIM_HandleTypeDef* pwm_tim, uint32_t channel_A, uint32_t channel_B){
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b086      	sub	sp, #24
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	60f8      	str	r0, [r7, #12]
 8001ef6:	60b9      	str	r1, [r7, #8]
 8001ef8:	607a      	str	r2, [r7, #4]
 8001efa:	603b      	str	r3, [r7, #0]
	motor->channel_A = channel_A;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	601a      	str	r2, [r3, #0]
	motor->channel_B = channel_B;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	605a      	str	r2, [r3, #4]
	motor->pwm_tim = pwm_tim;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	68ba      	ldr	r2, [r7, #8]
 8001f0c:	609a      	str	r2, [r3, #8]
	HAL_StatusTypeDef status = HAL_TIM_PWM_Start(pwm_tim, channel_A);
 8001f0e:	6879      	ldr	r1, [r7, #4]
 8001f10:	68b8      	ldr	r0, [r7, #8]
 8001f12:	f003 fd57 	bl	80059c4 <HAL_TIM_PWM_Start>
 8001f16:	4603      	mov	r3, r0
 8001f18:	75fb      	strb	r3, [r7, #23]
	HAL_TIM_PWM_Start(pwm_tim, channel_B);
 8001f1a:	6839      	ldr	r1, [r7, #0]
 8001f1c:	68b8      	ldr	r0, [r7, #8]
 8001f1e:	f003 fd51 	bl	80059c4 <HAL_TIM_PWM_Start>
	return status;
 8001f22:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3718      	adds	r7, #24
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <motor_run>:

uint32_t motor_run(Motor* motor, int8_t speed){
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	460b      	mov	r3, r1
 8001f36:	70fb      	strb	r3, [r7, #3]
	// speed <-100; 100>
	uint32_t duty;
	speed = speed > 100 ? 100 : (speed < -100 ? -100 : speed);
 8001f38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f3c:	2b64      	cmp	r3, #100	; 0x64
 8001f3e:	dc08      	bgt.n	8001f52 <motor_run+0x26>
 8001f40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f44:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	bfb8      	it	lt
 8001f4c:	4613      	movlt	r3, r2
 8001f4e:	b25b      	sxtb	r3, r3
 8001f50:	e000      	b.n	8001f54 <motor_run+0x28>
 8001f52:	2364      	movs	r3, #100	; 0x64
 8001f54:	70fb      	strb	r3, [r7, #3]
	if (speed >= 0){
 8001f56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	db53      	blt.n	8002006 <motor_run+0xda>
		duty = speed * CLOCK_COUNTER_PERIOD / 100;
 8001f5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f62:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f66:	fb02 f303 	mul.w	r3, r2, r3
 8001f6a:	4a53      	ldr	r2, [pc, #332]	; (80020b8 <motor_run+0x18c>)
 8001f6c:	fb82 1203 	smull	r1, r2, r2, r3
 8001f70:	1152      	asrs	r2, r2, #5
 8001f72:	17db      	asrs	r3, r3, #31
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	60fb      	str	r3, [r7, #12]
		__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->channel_B, 0);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d105      	bne.n	8001f8c <motor_run+0x60>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2200      	movs	r2, #0
 8001f88:	635a      	str	r2, [r3, #52]	; 0x34
 8001f8a:	e018      	b.n	8001fbe <motor_run+0x92>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	2b04      	cmp	r3, #4
 8001f92:	d105      	bne.n	8001fa0 <motor_run+0x74>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	6393      	str	r3, [r2, #56]	; 0x38
 8001f9e:	e00e      	b.n	8001fbe <motor_run+0x92>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	2b08      	cmp	r3, #8
 8001fa6:	d105      	bne.n	8001fb4 <motor_run+0x88>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	2300      	movs	r3, #0
 8001fb0:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001fb2:	e004      	b.n	8001fbe <motor_run+0x92>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	2300      	movs	r3, #0
 8001fbc:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->channel_A, duty);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d105      	bne.n	8001fd2 <motor_run+0xa6>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	635a      	str	r2, [r3, #52]	; 0x34
 8001fd0:	e06b      	b.n	80020aa <motor_run+0x17e>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	d105      	bne.n	8001fe6 <motor_run+0xba>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6393      	str	r3, [r2, #56]	; 0x38
 8001fe4:	e061      	b.n	80020aa <motor_run+0x17e>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2b08      	cmp	r3, #8
 8001fec:	d105      	bne.n	8001ffa <motor_run+0xce>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001ff8:	e057      	b.n	80020aa <motor_run+0x17e>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6413      	str	r3, [r2, #64]	; 0x40
 8002004:	e051      	b.n	80020aa <motor_run+0x17e>
	} else {
		duty = (-speed) * CLOCK_COUNTER_PERIOD / 100;
 8002006:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800200a:	4a2c      	ldr	r2, [pc, #176]	; (80020bc <motor_run+0x190>)
 800200c:	fb02 f303 	mul.w	r3, r2, r3
 8002010:	4a29      	ldr	r2, [pc, #164]	; (80020b8 <motor_run+0x18c>)
 8002012:	fb82 1203 	smull	r1, r2, r2, r3
 8002016:	1152      	asrs	r2, r2, #5
 8002018:	17db      	asrs	r3, r3, #31
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	60fb      	str	r3, [r7, #12]
		__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->channel_A, 0);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d105      	bne.n	8002032 <motor_run+0x106>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2200      	movs	r2, #0
 800202e:	635a      	str	r2, [r3, #52]	; 0x34
 8002030:	e018      	b.n	8002064 <motor_run+0x138>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2b04      	cmp	r3, #4
 8002038:	d105      	bne.n	8002046 <motor_run+0x11a>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	2300      	movs	r3, #0
 8002042:	6393      	str	r3, [r2, #56]	; 0x38
 8002044:	e00e      	b.n	8002064 <motor_run+0x138>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2b08      	cmp	r3, #8
 800204c:	d105      	bne.n	800205a <motor_run+0x12e>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	2300      	movs	r3, #0
 8002056:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002058:	e004      	b.n	8002064 <motor_run+0x138>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	2300      	movs	r3, #0
 8002062:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->channel_B, duty);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d105      	bne.n	8002078 <motor_run+0x14c>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	635a      	str	r2, [r3, #52]	; 0x34
 8002076:	e018      	b.n	80020aa <motor_run+0x17e>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2b04      	cmp	r3, #4
 800207e:	d105      	bne.n	800208c <motor_run+0x160>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6393      	str	r3, [r2, #56]	; 0x38
 800208a:	e00e      	b.n	80020aa <motor_run+0x17e>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2b08      	cmp	r3, #8
 8002092:	d105      	bne.n	80020a0 <motor_run+0x174>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800209e:	e004      	b.n	80020aa <motor_run+0x17e>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6413      	str	r3, [r2, #64]	; 0x40
	}
	return duty;
 80020aa:	68fb      	ldr	r3, [r7, #12]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	51eb851f 	.word	0x51eb851f
 80020bc:	fffffc19 	.word	0xfffffc19

080020c0 <motor_brake>:

void motor_brake(Motor* motor){
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->channel_A, 0);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d105      	bne.n	80020dc <motor_brake+0x1c>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2200      	movs	r2, #0
 80020d8:	635a      	str	r2, [r3, #52]	; 0x34
 80020da:	e018      	b.n	800210e <motor_brake+0x4e>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2b04      	cmp	r3, #4
 80020e2:	d105      	bne.n	80020f0 <motor_brake+0x30>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	2300      	movs	r3, #0
 80020ec:	6393      	str	r3, [r2, #56]	; 0x38
 80020ee:	e00e      	b.n	800210e <motor_brake+0x4e>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2b08      	cmp	r3, #8
 80020f6:	d105      	bne.n	8002104 <motor_brake+0x44>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	2300      	movs	r3, #0
 8002100:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002102:	e004      	b.n	800210e <motor_brake+0x4e>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	2300      	movs	r3, #0
 800210c:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->channel_B, 0);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d105      	bne.n	8002122 <motor_brake+0x62>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2200      	movs	r2, #0
 800211e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002120:	e018      	b.n	8002154 <motor_brake+0x94>
	__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->channel_B, 0);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b04      	cmp	r3, #4
 8002128:	d105      	bne.n	8002136 <motor_brake+0x76>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	2300      	movs	r3, #0
 8002132:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002134:	e00e      	b.n	8002154 <motor_brake+0x94>
	__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->channel_B, 0);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b08      	cmp	r3, #8
 800213c:	d105      	bne.n	800214a <motor_brake+0x8a>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	2300      	movs	r3, #0
 8002146:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8002148:	e004      	b.n	8002154 <motor_brake+0x94>
	__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->channel_B, 0);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	2300      	movs	r3, #0
 8002152:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <servo_init>:

#include "servo.h"


void servo_init(Servo* servo, TIM_HandleTypeDef *tim, uint32_t channel)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
	servo->_pwm_tim = tim;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	68ba      	ldr	r2, [r7, #8]
 8002170:	601a      	str	r2, [r3, #0]
	servo->_pwm_channel = channel;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	605a      	str	r2, [r3, #4]

	__HAL_TIM_SET_COMPARE(servo->_pwm_tim, servo->_pwm_channel, SERVO_MAX_US);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d106      	bne.n	800218e <servo_init+0x2e>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800218a:	635a      	str	r2, [r3, #52]	; 0x34
 800218c:	e01b      	b.n	80021c6 <servo_init+0x66>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b04      	cmp	r3, #4
 8002194:	d106      	bne.n	80021a4 <servo_init+0x44>
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80021a0:	6393      	str	r3, [r2, #56]	; 0x38
 80021a2:	e010      	b.n	80021c6 <servo_init+0x66>
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	2b08      	cmp	r3, #8
 80021aa:	d106      	bne.n	80021ba <servo_init+0x5a>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80021b6:	63d3      	str	r3, [r2, #60]	; 0x3c
 80021b8:	e005      	b.n	80021c6 <servo_init+0x66>
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80021c4:	6413      	str	r3, [r2, #64]	; 0x40
	HAL_TIM_PWM_Start(servo->_pwm_tim, servo->_pwm_channel);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	4619      	mov	r1, r3
 80021d0:	4610      	mov	r0, r2
 80021d2:	f003 fbf7 	bl	80059c4 <HAL_TIM_PWM_Start>
}
 80021d6:	bf00      	nop
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <servo_set_angle>:

uint32_t servo_set_angle(Servo* servo, uint8_t angle)
{
 80021de:	b480      	push	{r7}
 80021e0:	b085      	sub	sp, #20
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
 80021e6:	460b      	mov	r3, r1
 80021e8:	70fb      	strb	r3, [r7, #3]
	if(angle < SERVO_MIN_ANGLE)
		angle = SERVO_MIN_ANGLE;
	else if(angle > SERVO_MAX_ANGLE)
 80021ea:	78fb      	ldrb	r3, [r7, #3]
 80021ec:	2bb4      	cmp	r3, #180	; 0xb4
 80021ee:	d901      	bls.n	80021f4 <servo_set_angle+0x16>
		angle = SERVO_MAX_ANGLE;
 80021f0:	23b4      	movs	r3, #180	; 0xb4
 80021f2:	70fb      	strb	r3, [r7, #3]

	uint32_t pwm_duty_us;

	pwm_duty_us = SERVO_MIN_US + (angle * (SERVO_MAX_US - SERVO_MIN_US))/SERVO_MAX_ANGLE;
 80021f4:	78fa      	ldrb	r2, [r7, #3]
 80021f6:	4613      	mov	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8002202:	60fb      	str	r3, [r7, #12]

	__HAL_TIM_SET_COMPARE(servo->_pwm_tim, servo->_pwm_channel, pwm_duty_us);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d105      	bne.n	8002218 <servo_set_angle+0x3a>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	635a      	str	r2, [r3, #52]	; 0x34
 8002216:	e018      	b.n	800224a <servo_set_angle+0x6c>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	2b04      	cmp	r3, #4
 800221e:	d105      	bne.n	800222c <servo_set_angle+0x4e>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6393      	str	r3, [r2, #56]	; 0x38
 800222a:	e00e      	b.n	800224a <servo_set_angle+0x6c>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	2b08      	cmp	r3, #8
 8002232:	d105      	bne.n	8002240 <servo_set_angle+0x62>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800223e:	e004      	b.n	800224a <servo_set_angle+0x6c>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6413      	str	r3, [r2, #64]	; 0x40

	return pwm_duty_us;
 800224a:	68fb      	ldr	r3, [r7, #12]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800225e:	2300      	movs	r3, #0
 8002260:	607b      	str	r3, [r7, #4]
 8002262:	4b10      	ldr	r3, [pc, #64]	; (80022a4 <HAL_MspInit+0x4c>)
 8002264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002266:	4a0f      	ldr	r2, [pc, #60]	; (80022a4 <HAL_MspInit+0x4c>)
 8002268:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800226c:	6453      	str	r3, [r2, #68]	; 0x44
 800226e:	4b0d      	ldr	r3, [pc, #52]	; (80022a4 <HAL_MspInit+0x4c>)
 8002270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002272:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002276:	607b      	str	r3, [r7, #4]
 8002278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	603b      	str	r3, [r7, #0]
 800227e:	4b09      	ldr	r3, [pc, #36]	; (80022a4 <HAL_MspInit+0x4c>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	4a08      	ldr	r2, [pc, #32]	; (80022a4 <HAL_MspInit+0x4c>)
 8002284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002288:	6413      	str	r3, [r2, #64]	; 0x40
 800228a:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <HAL_MspInit+0x4c>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002292:	603b      	str	r3, [r7, #0]
 8002294:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	40023800 	.word	0x40023800

080022a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b08a      	sub	sp, #40	; 0x28
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b0:	f107 0314 	add.w	r3, r7, #20
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	605a      	str	r2, [r3, #4]
 80022ba:	609a      	str	r2, [r3, #8]
 80022bc:	60da      	str	r2, [r3, #12]
 80022be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a2e      	ldr	r2, [pc, #184]	; (8002380 <HAL_ADC_MspInit+0xd8>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d156      	bne.n	8002378 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022ca:	2300      	movs	r3, #0
 80022cc:	613b      	str	r3, [r7, #16]
 80022ce:	4b2d      	ldr	r3, [pc, #180]	; (8002384 <HAL_ADC_MspInit+0xdc>)
 80022d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d2:	4a2c      	ldr	r2, [pc, #176]	; (8002384 <HAL_ADC_MspInit+0xdc>)
 80022d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d8:	6453      	str	r3, [r2, #68]	; 0x44
 80022da:	4b2a      	ldr	r3, [pc, #168]	; (8002384 <HAL_ADC_MspInit+0xdc>)
 80022dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e2:	613b      	str	r3, [r7, #16]
 80022e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	4b26      	ldr	r3, [pc, #152]	; (8002384 <HAL_ADC_MspInit+0xdc>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	4a25      	ldr	r2, [pc, #148]	; (8002384 <HAL_ADC_MspInit+0xdc>)
 80022f0:	f043 0301 	orr.w	r3, r3, #1
 80022f4:	6313      	str	r3, [r2, #48]	; 0x30
 80022f6:	4b23      	ldr	r3, [pc, #140]	; (8002384 <HAL_ADC_MspInit+0xdc>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = KTIR_1_Pin|KTIR_2_Pin|KTIR_3_Pin|KTIR_4_Pin;
 8002302:	23c3      	movs	r3, #195	; 0xc3
 8002304:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002306:	2303      	movs	r3, #3
 8002308:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230a:	2300      	movs	r3, #0
 800230c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800230e:	f107 0314 	add.w	r3, r7, #20
 8002312:	4619      	mov	r1, r3
 8002314:	481c      	ldr	r0, [pc, #112]	; (8002388 <HAL_ADC_MspInit+0xe0>)
 8002316:	f001 fc19 	bl	8003b4c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800231a:	4b1c      	ldr	r3, [pc, #112]	; (800238c <HAL_ADC_MspInit+0xe4>)
 800231c:	4a1c      	ldr	r2, [pc, #112]	; (8002390 <HAL_ADC_MspInit+0xe8>)
 800231e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002320:	4b1a      	ldr	r3, [pc, #104]	; (800238c <HAL_ADC_MspInit+0xe4>)
 8002322:	2200      	movs	r2, #0
 8002324:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002326:	4b19      	ldr	r3, [pc, #100]	; (800238c <HAL_ADC_MspInit+0xe4>)
 8002328:	2200      	movs	r2, #0
 800232a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800232c:	4b17      	ldr	r3, [pc, #92]	; (800238c <HAL_ADC_MspInit+0xe4>)
 800232e:	2200      	movs	r2, #0
 8002330:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002332:	4b16      	ldr	r3, [pc, #88]	; (800238c <HAL_ADC_MspInit+0xe4>)
 8002334:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002338:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800233a:	4b14      	ldr	r3, [pc, #80]	; (800238c <HAL_ADC_MspInit+0xe4>)
 800233c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002340:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002342:	4b12      	ldr	r3, [pc, #72]	; (800238c <HAL_ADC_MspInit+0xe4>)
 8002344:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002348:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800234a:	4b10      	ldr	r3, [pc, #64]	; (800238c <HAL_ADC_MspInit+0xe4>)
 800234c:	2200      	movs	r2, #0
 800234e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002350:	4b0e      	ldr	r3, [pc, #56]	; (800238c <HAL_ADC_MspInit+0xe4>)
 8002352:	2200      	movs	r2, #0
 8002354:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002356:	4b0d      	ldr	r3, [pc, #52]	; (800238c <HAL_ADC_MspInit+0xe4>)
 8002358:	2200      	movs	r2, #0
 800235a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800235c:	480b      	ldr	r0, [pc, #44]	; (800238c <HAL_ADC_MspInit+0xe4>)
 800235e:	f001 f885 	bl	800346c <HAL_DMA_Init>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8002368:	f7ff fdbc 	bl	8001ee4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a07      	ldr	r2, [pc, #28]	; (800238c <HAL_ADC_MspInit+0xe4>)
 8002370:	639a      	str	r2, [r3, #56]	; 0x38
 8002372:	4a06      	ldr	r2, [pc, #24]	; (800238c <HAL_ADC_MspInit+0xe4>)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002378:	bf00      	nop
 800237a:	3728      	adds	r7, #40	; 0x28
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40012000 	.word	0x40012000
 8002384:	40023800 	.word	0x40023800
 8002388:	40020000 	.word	0x40020000
 800238c:	20000260 	.word	0x20000260
 8002390:	40026410 	.word	0x40026410

08002394 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b08c      	sub	sp, #48	; 0x30
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800239c:	f107 031c 	add.w	r3, r7, #28
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	609a      	str	r2, [r3, #8]
 80023a8:	60da      	str	r2, [r3, #12]
 80023aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a3b      	ldr	r2, [pc, #236]	; (80024a0 <HAL_I2C_MspInit+0x10c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d12d      	bne.n	8002412 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	61bb      	str	r3, [r7, #24]
 80023ba:	4b3a      	ldr	r3, [pc, #232]	; (80024a4 <HAL_I2C_MspInit+0x110>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	4a39      	ldr	r2, [pc, #228]	; (80024a4 <HAL_I2C_MspInit+0x110>)
 80023c0:	f043 0302 	orr.w	r3, r3, #2
 80023c4:	6313      	str	r3, [r2, #48]	; 0x30
 80023c6:	4b37      	ldr	r3, [pc, #220]	; (80024a4 <HAL_I2C_MspInit+0x110>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	61bb      	str	r3, [r7, #24]
 80023d0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = COLOR_LEFT_SCL_Pin|COLOR_LEFT_SDA_Pin;
 80023d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023d8:	2312      	movs	r3, #18
 80023da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023dc:	2301      	movs	r3, #1
 80023de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023e0:	2303      	movs	r3, #3
 80023e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023e4:	2304      	movs	r3, #4
 80023e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023e8:	f107 031c 	add.w	r3, r7, #28
 80023ec:	4619      	mov	r1, r3
 80023ee:	482e      	ldr	r0, [pc, #184]	; (80024a8 <HAL_I2C_MspInit+0x114>)
 80023f0:	f001 fbac 	bl	8003b4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]
 80023f8:	4b2a      	ldr	r3, [pc, #168]	; (80024a4 <HAL_I2C_MspInit+0x110>)
 80023fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fc:	4a29      	ldr	r2, [pc, #164]	; (80024a4 <HAL_I2C_MspInit+0x110>)
 80023fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002402:	6413      	str	r3, [r2, #64]	; 0x40
 8002404:	4b27      	ldr	r3, [pc, #156]	; (80024a4 <HAL_I2C_MspInit+0x110>)
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800240c:	617b      	str	r3, [r7, #20]
 800240e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002410:	e041      	b.n	8002496 <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a25      	ldr	r2, [pc, #148]	; (80024ac <HAL_I2C_MspInit+0x118>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d13c      	bne.n	8002496 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800241c:	2300      	movs	r3, #0
 800241e:	613b      	str	r3, [r7, #16]
 8002420:	4b20      	ldr	r3, [pc, #128]	; (80024a4 <HAL_I2C_MspInit+0x110>)
 8002422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002424:	4a1f      	ldr	r2, [pc, #124]	; (80024a4 <HAL_I2C_MspInit+0x110>)
 8002426:	f043 0302 	orr.w	r3, r3, #2
 800242a:	6313      	str	r3, [r2, #48]	; 0x30
 800242c:	4b1d      	ldr	r3, [pc, #116]	; (80024a4 <HAL_I2C_MspInit+0x110>)
 800242e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	613b      	str	r3, [r7, #16]
 8002436:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = COLOR_RIGHT_SCL_Pin;
 8002438:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800243c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800243e:	2312      	movs	r3, #18
 8002440:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002442:	2301      	movs	r3, #1
 8002444:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002446:	2303      	movs	r3, #3
 8002448:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800244a:	2304      	movs	r3, #4
 800244c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(COLOR_RIGHT_SCL_GPIO_Port, &GPIO_InitStruct);
 800244e:	f107 031c 	add.w	r3, r7, #28
 8002452:	4619      	mov	r1, r3
 8002454:	4814      	ldr	r0, [pc, #80]	; (80024a8 <HAL_I2C_MspInit+0x114>)
 8002456:	f001 fb79 	bl	8003b4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = COLOR_RIGHT_SDA_Pin;
 800245a:	2308      	movs	r3, #8
 800245c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800245e:	2312      	movs	r3, #18
 8002460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002462:	2301      	movs	r3, #1
 8002464:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002466:	2303      	movs	r3, #3
 8002468:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800246a:	2309      	movs	r3, #9
 800246c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(COLOR_RIGHT_SDA_GPIO_Port, &GPIO_InitStruct);
 800246e:	f107 031c 	add.w	r3, r7, #28
 8002472:	4619      	mov	r1, r3
 8002474:	480c      	ldr	r0, [pc, #48]	; (80024a8 <HAL_I2C_MspInit+0x114>)
 8002476:	f001 fb69 	bl	8003b4c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800247a:	2300      	movs	r3, #0
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <HAL_I2C_MspInit+0x110>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	4a08      	ldr	r2, [pc, #32]	; (80024a4 <HAL_I2C_MspInit+0x110>)
 8002484:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002488:	6413      	str	r3, [r2, #64]	; 0x40
 800248a:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <HAL_I2C_MspInit+0x110>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	68fb      	ldr	r3, [r7, #12]
}
 8002496:	bf00      	nop
 8002498:	3730      	adds	r7, #48	; 0x30
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40005400 	.word	0x40005400
 80024a4:	40023800 	.word	0x40023800
 80024a8:	40020400 	.word	0x40020400
 80024ac:	40005800 	.word	0x40005800

080024b0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a15      	ldr	r2, [pc, #84]	; (8002514 <HAL_TIM_PWM_MspInit+0x64>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d10e      	bne.n	80024e0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024c2:	2300      	movs	r3, #0
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	4b14      	ldr	r3, [pc, #80]	; (8002518 <HAL_TIM_PWM_MspInit+0x68>)
 80024c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ca:	4a13      	ldr	r2, [pc, #76]	; (8002518 <HAL_TIM_PWM_MspInit+0x68>)
 80024cc:	f043 0301 	orr.w	r3, r3, #1
 80024d0:	6453      	str	r3, [r2, #68]	; 0x44
 80024d2:	4b11      	ldr	r3, [pc, #68]	; (8002518 <HAL_TIM_PWM_MspInit+0x68>)
 80024d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80024de:	e012      	b.n	8002506 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a0d      	ldr	r2, [pc, #52]	; (800251c <HAL_TIM_PWM_MspInit+0x6c>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d10d      	bne.n	8002506 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	60bb      	str	r3, [r7, #8]
 80024ee:	4b0a      	ldr	r3, [pc, #40]	; (8002518 <HAL_TIM_PWM_MspInit+0x68>)
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	4a09      	ldr	r2, [pc, #36]	; (8002518 <HAL_TIM_PWM_MspInit+0x68>)
 80024f4:	f043 0302 	orr.w	r3, r3, #2
 80024f8:	6413      	str	r3, [r2, #64]	; 0x40
 80024fa:	4b07      	ldr	r3, [pc, #28]	; (8002518 <HAL_TIM_PWM_MspInit+0x68>)
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	60bb      	str	r3, [r7, #8]
 8002504:	68bb      	ldr	r3, [r7, #8]
}
 8002506:	bf00      	nop
 8002508:	3714      	adds	r7, #20
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	40010000 	.word	0x40010000
 8002518:	40023800 	.word	0x40023800
 800251c:	40000400 	.word	0x40000400

08002520 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08a      	sub	sp, #40	; 0x28
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002528:	f107 0314 	add.w	r3, r7, #20
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	605a      	str	r2, [r3, #4]
 8002532:	609a      	str	r2, [r3, #8]
 8002534:	60da      	str	r2, [r3, #12]
 8002536:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a19      	ldr	r2, [pc, #100]	; (80025a4 <HAL_TIM_Encoder_MspInit+0x84>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d12b      	bne.n	800259a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	613b      	str	r3, [r7, #16]
 8002546:	4b18      	ldr	r3, [pc, #96]	; (80025a8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	4a17      	ldr	r2, [pc, #92]	; (80025a8 <HAL_TIM_Encoder_MspInit+0x88>)
 800254c:	f043 0304 	orr.w	r3, r3, #4
 8002550:	6413      	str	r3, [r2, #64]	; 0x40
 8002552:	4b15      	ldr	r3, [pc, #84]	; (80025a8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	f003 0304 	and.w	r3, r3, #4
 800255a:	613b      	str	r3, [r7, #16]
 800255c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	4b11      	ldr	r3, [pc, #68]	; (80025a8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	4a10      	ldr	r2, [pc, #64]	; (80025a8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002568:	f043 0302 	orr.w	r3, r3, #2
 800256c:	6313      	str	r3, [r2, #48]	; 0x30
 800256e:	4b0e      	ldr	r3, [pc, #56]	; (80025a8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_RIGHT_1_Pin|ENCODER_RIGHT_2_Pin;
 800257a:	23c0      	movs	r3, #192	; 0xc0
 800257c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257e:	2302      	movs	r3, #2
 8002580:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002582:	2300      	movs	r3, #0
 8002584:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002586:	2300      	movs	r3, #0
 8002588:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800258a:	2302      	movs	r3, #2
 800258c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800258e:	f107 0314 	add.w	r3, r7, #20
 8002592:	4619      	mov	r1, r3
 8002594:	4805      	ldr	r0, [pc, #20]	; (80025ac <HAL_TIM_Encoder_MspInit+0x8c>)
 8002596:	f001 fad9 	bl	8003b4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800259a:	bf00      	nop
 800259c:	3728      	adds	r7, #40	; 0x28
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40000800 	.word	0x40000800
 80025a8:	40023800 	.word	0x40023800
 80025ac:	40020400 	.word	0x40020400

080025b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08a      	sub	sp, #40	; 0x28
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b8:	f107 0314 	add.w	r3, r7, #20
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	605a      	str	r2, [r3, #4]
 80025c2:	609a      	str	r2, [r3, #8]
 80025c4:	60da      	str	r2, [r3, #12]
 80025c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a24      	ldr	r2, [pc, #144]	; (8002660 <HAL_TIM_MspPostInit+0xb0>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d11f      	bne.n	8002612 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d2:	2300      	movs	r3, #0
 80025d4:	613b      	str	r3, [r7, #16]
 80025d6:	4b23      	ldr	r3, [pc, #140]	; (8002664 <HAL_TIM_MspPostInit+0xb4>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	4a22      	ldr	r2, [pc, #136]	; (8002664 <HAL_TIM_MspPostInit+0xb4>)
 80025dc:	f043 0301 	orr.w	r3, r3, #1
 80025e0:	6313      	str	r3, [r2, #48]	; 0x30
 80025e2:	4b20      	ldr	r3, [pc, #128]	; (8002664 <HAL_TIM_MspPostInit+0xb4>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	613b      	str	r3, [r7, #16]
 80025ec:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_LEFT_A_Pin|MOTOR_LEFT_B_Pin|MOTOR_RIGHT_A_Pin|MOTOR_RIGHT_B_Pin;
 80025ee:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80025f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f4:	2302      	movs	r3, #2
 80025f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f8:	2300      	movs	r3, #0
 80025fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fc:	2300      	movs	r3, #0
 80025fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002600:	2301      	movs	r3, #1
 8002602:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002604:	f107 0314 	add.w	r3, r7, #20
 8002608:	4619      	mov	r1, r3
 800260a:	4817      	ldr	r0, [pc, #92]	; (8002668 <HAL_TIM_MspPostInit+0xb8>)
 800260c:	f001 fa9e 	bl	8003b4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002610:	e022      	b.n	8002658 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a15      	ldr	r2, [pc, #84]	; (800266c <HAL_TIM_MspPostInit+0xbc>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d11d      	bne.n	8002658 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800261c:	2300      	movs	r3, #0
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	4b10      	ldr	r3, [pc, #64]	; (8002664 <HAL_TIM_MspPostInit+0xb4>)
 8002622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002624:	4a0f      	ldr	r2, [pc, #60]	; (8002664 <HAL_TIM_MspPostInit+0xb4>)
 8002626:	f043 0302 	orr.w	r3, r3, #2
 800262a:	6313      	str	r3, [r2, #48]	; 0x30
 800262c:	4b0d      	ldr	r3, [pc, #52]	; (8002664 <HAL_TIM_MspPostInit+0xb4>)
 800262e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_RIGHT_Pin|SERVO_LEFT_Pin;
 8002638:	2303      	movs	r3, #3
 800263a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263c:	2302      	movs	r3, #2
 800263e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002640:	2300      	movs	r3, #0
 8002642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002644:	2300      	movs	r3, #0
 8002646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002648:	2302      	movs	r3, #2
 800264a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800264c:	f107 0314 	add.w	r3, r7, #20
 8002650:	4619      	mov	r1, r3
 8002652:	4807      	ldr	r0, [pc, #28]	; (8002670 <HAL_TIM_MspPostInit+0xc0>)
 8002654:	f001 fa7a 	bl	8003b4c <HAL_GPIO_Init>
}
 8002658:	bf00      	nop
 800265a:	3728      	adds	r7, #40	; 0x28
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40010000 	.word	0x40010000
 8002664:	40023800 	.word	0x40023800
 8002668:	40020000 	.word	0x40020000
 800266c:	40000400 	.word	0x40000400
 8002670:	40020400 	.word	0x40020400

08002674 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b08a      	sub	sp, #40	; 0x28
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800267c:	f107 0314 	add.w	r3, r7, #20
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	605a      	str	r2, [r3, #4]
 8002686:	609a      	str	r2, [r3, #8]
 8002688:	60da      	str	r2, [r3, #12]
 800268a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a19      	ldr	r2, [pc, #100]	; (80026f8 <HAL_UART_MspInit+0x84>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d12b      	bne.n	80026ee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	613b      	str	r3, [r7, #16]
 800269a:	4b18      	ldr	r3, [pc, #96]	; (80026fc <HAL_UART_MspInit+0x88>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	4a17      	ldr	r2, [pc, #92]	; (80026fc <HAL_UART_MspInit+0x88>)
 80026a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026a4:	6413      	str	r3, [r2, #64]	; 0x40
 80026a6:	4b15      	ldr	r3, [pc, #84]	; (80026fc <HAL_UART_MspInit+0x88>)
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ae:	613b      	str	r3, [r7, #16]
 80026b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b2:	2300      	movs	r3, #0
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	4b11      	ldr	r3, [pc, #68]	; (80026fc <HAL_UART_MspInit+0x88>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	4a10      	ldr	r2, [pc, #64]	; (80026fc <HAL_UART_MspInit+0x88>)
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	6313      	str	r3, [r2, #48]	; 0x30
 80026c2:	4b0e      	ldr	r3, [pc, #56]	; (80026fc <HAL_UART_MspInit+0x88>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	60fb      	str	r3, [r7, #12]
 80026cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026ce:	230c      	movs	r3, #12
 80026d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d2:	2302      	movs	r3, #2
 80026d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026da:	2303      	movs	r3, #3
 80026dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026de:	2307      	movs	r3, #7
 80026e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e2:	f107 0314 	add.w	r3, r7, #20
 80026e6:	4619      	mov	r1, r3
 80026e8:	4805      	ldr	r0, [pc, #20]	; (8002700 <HAL_UART_MspInit+0x8c>)
 80026ea:	f001 fa2f 	bl	8003b4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026ee:	bf00      	nop
 80026f0:	3728      	adds	r7, #40	; 0x28
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	40004400 	.word	0x40004400
 80026fc:	40023800 	.word	0x40023800
 8002700:	40020000 	.word	0x40020000

08002704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002708:	e7fe      	b.n	8002708 <NMI_Handler+0x4>

0800270a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800270a:	b480      	push	{r7}
 800270c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800270e:	e7fe      	b.n	800270e <HardFault_Handler+0x4>

08002710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002714:	e7fe      	b.n	8002714 <MemManage_Handler+0x4>

08002716 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002716:	b480      	push	{r7}
 8002718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800271a:	e7fe      	b.n	800271a <BusFault_Handler+0x4>

0800271c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002720:	e7fe      	b.n	8002720 <UsageFault_Handler+0x4>

08002722 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002722:	b480      	push	{r7}
 8002724:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002726:	bf00      	nop
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002734:	bf00      	nop
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800273e:	b480      	push	{r7}
 8002740:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002742:	bf00      	nop
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002750:	f000 f93e 	bl	80029d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002754:	bf00      	nop
 8002756:	bd80      	pop	{r7, pc}

08002758 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800275c:	4802      	ldr	r0, [pc, #8]	; (8002768 <DMA2_Stream0_IRQHandler+0x10>)
 800275e:	f000 ff8b 	bl	8003678 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002762:	bf00      	nop
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	20000260 	.word	0x20000260

0800276c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	e00a      	b.n	8002794 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800277e:	f3af 8000 	nop.w
 8002782:	4601      	mov	r1, r0
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	1c5a      	adds	r2, r3, #1
 8002788:	60ba      	str	r2, [r7, #8]
 800278a:	b2ca      	uxtb	r2, r1
 800278c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	3301      	adds	r3, #1
 8002792:	617b      	str	r3, [r7, #20]
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	429a      	cmp	r2, r3
 800279a:	dbf0      	blt.n	800277e <_read+0x12>
	}

return len;
 800279c:	687b      	ldr	r3, [r7, #4]
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3718      	adds	r7, #24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b086      	sub	sp, #24
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	60f8      	str	r0, [r7, #12]
 80027ae:	60b9      	str	r1, [r7, #8]
 80027b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027b2:	2300      	movs	r3, #0
 80027b4:	617b      	str	r3, [r7, #20]
 80027b6:	e009      	b.n	80027cc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	1c5a      	adds	r2, r3, #1
 80027bc:	60ba      	str	r2, [r7, #8]
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7fe fc5b 	bl	800107c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	3301      	adds	r3, #1
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	dbf1      	blt.n	80027b8 <_write+0x12>
	}
	return len;
 80027d4:	687b      	ldr	r3, [r7, #4]
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3718      	adds	r7, #24
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <_close>:

int _close(int file)
{
 80027de:	b480      	push	{r7}
 80027e0:	b083      	sub	sp, #12
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
	return -1;
 80027e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr

080027f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b083      	sub	sp, #12
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
 80027fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002806:	605a      	str	r2, [r3, #4]
	return 0;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <_isatty>:

int _isatty(int file)
{
 8002816:	b480      	push	{r7}
 8002818:	b083      	sub	sp, #12
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
	return 1;
 800281e:	2301      	movs	r3, #1
}
 8002820:	4618      	mov	r0, r3
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
	return 0;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
	...

08002848 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002850:	4a14      	ldr	r2, [pc, #80]	; (80028a4 <_sbrk+0x5c>)
 8002852:	4b15      	ldr	r3, [pc, #84]	; (80028a8 <_sbrk+0x60>)
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800285c:	4b13      	ldr	r3, [pc, #76]	; (80028ac <_sbrk+0x64>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d102      	bne.n	800286a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002864:	4b11      	ldr	r3, [pc, #68]	; (80028ac <_sbrk+0x64>)
 8002866:	4a12      	ldr	r2, [pc, #72]	; (80028b0 <_sbrk+0x68>)
 8002868:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800286a:	4b10      	ldr	r3, [pc, #64]	; (80028ac <_sbrk+0x64>)
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4413      	add	r3, r2
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	429a      	cmp	r2, r3
 8002876:	d207      	bcs.n	8002888 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002878:	f004 f8c4 	bl	8006a04 <__errno>
 800287c:	4603      	mov	r3, r0
 800287e:	220c      	movs	r2, #12
 8002880:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002882:	f04f 33ff 	mov.w	r3, #4294967295
 8002886:	e009      	b.n	800289c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002888:	4b08      	ldr	r3, [pc, #32]	; (80028ac <_sbrk+0x64>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800288e:	4b07      	ldr	r3, [pc, #28]	; (80028ac <_sbrk+0x64>)
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4413      	add	r3, r2
 8002896:	4a05      	ldr	r2, [pc, #20]	; (80028ac <_sbrk+0x64>)
 8002898:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800289a:	68fb      	ldr	r3, [r7, #12]
}
 800289c:	4618      	mov	r0, r3
 800289e:	3718      	adds	r7, #24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	20020000 	.word	0x20020000
 80028a8:	00000400 	.word	0x00000400
 80028ac:	20000098 	.word	0x20000098
 80028b0:	20000378 	.word	0x20000378

080028b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028b8:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <SystemInit+0x20>)
 80028ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028be:	4a05      	ldr	r2, [pc, #20]	; (80028d4 <SystemInit+0x20>)
 80028c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028c8:	bf00      	nop
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	e000ed00 	.word	0xe000ed00

080028d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80028d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002910 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028dc:	480d      	ldr	r0, [pc, #52]	; (8002914 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80028de:	490e      	ldr	r1, [pc, #56]	; (8002918 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80028e0:	4a0e      	ldr	r2, [pc, #56]	; (800291c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028e4:	e002      	b.n	80028ec <LoopCopyDataInit>

080028e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028ea:	3304      	adds	r3, #4

080028ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028f0:	d3f9      	bcc.n	80028e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028f2:	4a0b      	ldr	r2, [pc, #44]	; (8002920 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80028f4:	4c0b      	ldr	r4, [pc, #44]	; (8002924 <LoopFillZerobss+0x26>)
  movs r3, #0
 80028f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028f8:	e001      	b.n	80028fe <LoopFillZerobss>

080028fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028fc:	3204      	adds	r2, #4

080028fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002900:	d3fb      	bcc.n	80028fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002902:	f7ff ffd7 	bl	80028b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002906:	f004 f883 	bl	8006a10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800290a:	f7fe fbcf 	bl	80010ac <main>
  bx  lr    
 800290e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002910:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002918:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800291c:	08007a94 	.word	0x08007a94
  ldr r2, =_sbss
 8002920:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002924:	20000374 	.word	0x20000374

08002928 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002928:	e7fe      	b.n	8002928 <ADC_IRQHandler>
	...

0800292c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002930:	4b0e      	ldr	r3, [pc, #56]	; (800296c <HAL_Init+0x40>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a0d      	ldr	r2, [pc, #52]	; (800296c <HAL_Init+0x40>)
 8002936:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800293a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800293c:	4b0b      	ldr	r3, [pc, #44]	; (800296c <HAL_Init+0x40>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a0a      	ldr	r2, [pc, #40]	; (800296c <HAL_Init+0x40>)
 8002942:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002946:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002948:	4b08      	ldr	r3, [pc, #32]	; (800296c <HAL_Init+0x40>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a07      	ldr	r2, [pc, #28]	; (800296c <HAL_Init+0x40>)
 800294e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002952:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002954:	2003      	movs	r0, #3
 8002956:	f000 fd47 	bl	80033e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800295a:	200f      	movs	r0, #15
 800295c:	f000 f808 	bl	8002970 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002960:	f7ff fc7a 	bl	8002258 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40023c00 	.word	0x40023c00

08002970 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002978:	4b12      	ldr	r3, [pc, #72]	; (80029c4 <HAL_InitTick+0x54>)
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	4b12      	ldr	r3, [pc, #72]	; (80029c8 <HAL_InitTick+0x58>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	4619      	mov	r1, r3
 8002982:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002986:	fbb3 f3f1 	udiv	r3, r3, r1
 800298a:	fbb2 f3f3 	udiv	r3, r2, r3
 800298e:	4618      	mov	r0, r3
 8002990:	f000 fd5f 	bl	8003452 <HAL_SYSTICK_Config>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e00e      	b.n	80029bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b0f      	cmp	r3, #15
 80029a2:	d80a      	bhi.n	80029ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029a4:	2200      	movs	r2, #0
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	f04f 30ff 	mov.w	r0, #4294967295
 80029ac:	f000 fd27 	bl	80033fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029b0:	4a06      	ldr	r2, [pc, #24]	; (80029cc <HAL_InitTick+0x5c>)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
 80029b8:	e000      	b.n	80029bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3708      	adds	r7, #8
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	20000000 	.word	0x20000000
 80029c8:	20000008 	.word	0x20000008
 80029cc:	20000004 	.word	0x20000004

080029d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029d4:	4b06      	ldr	r3, [pc, #24]	; (80029f0 <HAL_IncTick+0x20>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	461a      	mov	r2, r3
 80029da:	4b06      	ldr	r3, [pc, #24]	; (80029f4 <HAL_IncTick+0x24>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4413      	add	r3, r2
 80029e0:	4a04      	ldr	r2, [pc, #16]	; (80029f4 <HAL_IncTick+0x24>)
 80029e2:	6013      	str	r3, [r2, #0]
}
 80029e4:	bf00      	nop
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	20000008 	.word	0x20000008
 80029f4:	20000360 	.word	0x20000360

080029f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  return uwTick;
 80029fc:	4b03      	ldr	r3, [pc, #12]	; (8002a0c <HAL_GetTick+0x14>)
 80029fe:	681b      	ldr	r3, [r3, #0]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	20000360 	.word	0x20000360

08002a10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a18:	f7ff ffee 	bl	80029f8 <HAL_GetTick>
 8002a1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a28:	d005      	beq.n	8002a36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a2a:	4b0a      	ldr	r3, [pc, #40]	; (8002a54 <HAL_Delay+0x44>)
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	461a      	mov	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	4413      	add	r3, r2
 8002a34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a36:	bf00      	nop
 8002a38:	f7ff ffde 	bl	80029f8 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d8f7      	bhi.n	8002a38 <HAL_Delay+0x28>
  {
  }
}
 8002a48:	bf00      	nop
 8002a4a:	bf00      	nop
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	20000008 	.word	0x20000008

08002a58 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a60:	2300      	movs	r3, #0
 8002a62:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e033      	b.n	8002ad6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d109      	bne.n	8002a8a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f7ff fc16 	bl	80022a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	f003 0310 	and.w	r3, r3, #16
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d118      	bne.n	8002ac8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a9e:	f023 0302 	bic.w	r3, r3, #2
 8002aa2:	f043 0202 	orr.w	r2, r3, #2
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 fa4e 	bl	8002f4c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	f023 0303 	bic.w	r3, r3, #3
 8002abe:	f043 0201 	orr.w	r2, r3, #1
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	641a      	str	r2, [r3, #64]	; 0x40
 8002ac6:	e001      	b.n	8002acc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
	...

08002ae0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d101      	bne.n	8002afe <HAL_ADC_Start_DMA+0x1e>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e0ce      	b.n	8002c9c <HAL_ADC_Start_DMA+0x1bc>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d018      	beq.n	8002b46 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689a      	ldr	r2, [r3, #8]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0201 	orr.w	r2, r2, #1
 8002b22:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b24:	4b5f      	ldr	r3, [pc, #380]	; (8002ca4 <HAL_ADC_Start_DMA+0x1c4>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a5f      	ldr	r2, [pc, #380]	; (8002ca8 <HAL_ADC_Start_DMA+0x1c8>)
 8002b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2e:	0c9a      	lsrs	r2, r3, #18
 8002b30:	4613      	mov	r3, r2
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	4413      	add	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002b38:	e002      	b.n	8002b40 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1f9      	bne.n	8002b3a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b54:	d107      	bne.n	8002b66 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b64:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	f040 8086 	bne.w	8002c82 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b7e:	f023 0301 	bic.w	r3, r3, #1
 8002b82:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d007      	beq.n	8002ba8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ba0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bb4:	d106      	bne.n	8002bc4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bba:	f023 0206 	bic.w	r2, r3, #6
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	645a      	str	r2, [r3, #68]	; 0x44
 8002bc2:	e002      	b.n	8002bca <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bd2:	4b36      	ldr	r3, [pc, #216]	; (8002cac <HAL_ADC_Start_DMA+0x1cc>)
 8002bd4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bda:	4a35      	ldr	r2, [pc, #212]	; (8002cb0 <HAL_ADC_Start_DMA+0x1d0>)
 8002bdc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be2:	4a34      	ldr	r2, [pc, #208]	; (8002cb4 <HAL_ADC_Start_DMA+0x1d4>)
 8002be4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bea:	4a33      	ldr	r2, [pc, #204]	; (8002cb8 <HAL_ADC_Start_DMA+0x1d8>)
 8002bec:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002bf6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	685a      	ldr	r2, [r3, #4]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002c06:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689a      	ldr	r2, [r3, #8]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c16:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	334c      	adds	r3, #76	; 0x4c
 8002c22:	4619      	mov	r1, r3
 8002c24:	68ba      	ldr	r2, [r7, #8]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f000 fcce 	bl	80035c8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f003 031f 	and.w	r3, r3, #31
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d10f      	bne.n	8002c58 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d129      	bne.n	8002c9a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c54:	609a      	str	r2, [r3, #8]
 8002c56:	e020      	b.n	8002c9a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a17      	ldr	r2, [pc, #92]	; (8002cbc <HAL_ADC_Start_DMA+0x1dc>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d11b      	bne.n	8002c9a <HAL_ADC_Start_DMA+0x1ba>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d114      	bne.n	8002c9a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c7e:	609a      	str	r2, [r3, #8]
 8002c80:	e00b      	b.n	8002c9a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	f043 0210 	orr.w	r2, r3, #16
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c92:	f043 0201 	orr.w	r2, r3, #1
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	20000000 	.word	0x20000000
 8002ca8:	431bde83 	.word	0x431bde83
 8002cac:	40012300 	.word	0x40012300
 8002cb0:	08003145 	.word	0x08003145
 8002cb4:	080031ff 	.word	0x080031ff
 8002cb8:	0800321b 	.word	0x0800321b
 8002cbc:	40012000 	.word	0x40012000

08002cc0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d101      	bne.n	8002d04 <HAL_ADC_ConfigChannel+0x1c>
 8002d00:	2302      	movs	r3, #2
 8002d02:	e113      	b.n	8002f2c <HAL_ADC_ConfigChannel+0x244>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2b09      	cmp	r3, #9
 8002d12:	d925      	bls.n	8002d60 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68d9      	ldr	r1, [r3, #12]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	461a      	mov	r2, r3
 8002d22:	4613      	mov	r3, r2
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	4413      	add	r3, r2
 8002d28:	3b1e      	subs	r3, #30
 8002d2a:	2207      	movs	r2, #7
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	43da      	mvns	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	400a      	ands	r2, r1
 8002d38:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68d9      	ldr	r1, [r3, #12]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	4403      	add	r3, r0
 8002d52:	3b1e      	subs	r3, #30
 8002d54:	409a      	lsls	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	60da      	str	r2, [r3, #12]
 8002d5e:	e022      	b.n	8002da6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6919      	ldr	r1, [r3, #16]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	4613      	mov	r3, r2
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	4413      	add	r3, r2
 8002d74:	2207      	movs	r2, #7
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	43da      	mvns	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	400a      	ands	r2, r1
 8002d82:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6919      	ldr	r1, [r3, #16]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	4618      	mov	r0, r3
 8002d96:	4603      	mov	r3, r0
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	4403      	add	r3, r0
 8002d9c:	409a      	lsls	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2b06      	cmp	r3, #6
 8002dac:	d824      	bhi.n	8002df8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	4613      	mov	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	3b05      	subs	r3, #5
 8002dc0:	221f      	movs	r2, #31
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	43da      	mvns	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	400a      	ands	r2, r1
 8002dce:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	4618      	mov	r0, r3
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	4613      	mov	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4413      	add	r3, r2
 8002de8:	3b05      	subs	r3, #5
 8002dea:	fa00 f203 	lsl.w	r2, r0, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	635a      	str	r2, [r3, #52]	; 0x34
 8002df6:	e04c      	b.n	8002e92 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	2b0c      	cmp	r3, #12
 8002dfe:	d824      	bhi.n	8002e4a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	4413      	add	r3, r2
 8002e10:	3b23      	subs	r3, #35	; 0x23
 8002e12:	221f      	movs	r2, #31
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	43da      	mvns	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	400a      	ands	r2, r1
 8002e20:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	4618      	mov	r0, r3
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	4613      	mov	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	3b23      	subs	r3, #35	; 0x23
 8002e3c:	fa00 f203 	lsl.w	r2, r0, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	430a      	orrs	r2, r1
 8002e46:	631a      	str	r2, [r3, #48]	; 0x30
 8002e48:	e023      	b.n	8002e92 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	4613      	mov	r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4413      	add	r3, r2
 8002e5a:	3b41      	subs	r3, #65	; 0x41
 8002e5c:	221f      	movs	r2, #31
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	43da      	mvns	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	400a      	ands	r2, r1
 8002e6a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	4618      	mov	r0, r3
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	4413      	add	r3, r2
 8002e84:	3b41      	subs	r3, #65	; 0x41
 8002e86:	fa00 f203 	lsl.w	r2, r0, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e92:	4b29      	ldr	r3, [pc, #164]	; (8002f38 <HAL_ADC_ConfigChannel+0x250>)
 8002e94:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a28      	ldr	r2, [pc, #160]	; (8002f3c <HAL_ADC_ConfigChannel+0x254>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d10f      	bne.n	8002ec0 <HAL_ADC_ConfigChannel+0x1d8>
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2b12      	cmp	r3, #18
 8002ea6:	d10b      	bne.n	8002ec0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a1d      	ldr	r2, [pc, #116]	; (8002f3c <HAL_ADC_ConfigChannel+0x254>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d12b      	bne.n	8002f22 <HAL_ADC_ConfigChannel+0x23a>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a1c      	ldr	r2, [pc, #112]	; (8002f40 <HAL_ADC_ConfigChannel+0x258>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d003      	beq.n	8002edc <HAL_ADC_ConfigChannel+0x1f4>
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2b11      	cmp	r3, #17
 8002eda:	d122      	bne.n	8002f22 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a11      	ldr	r2, [pc, #68]	; (8002f40 <HAL_ADC_ConfigChannel+0x258>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d111      	bne.n	8002f22 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002efe:	4b11      	ldr	r3, [pc, #68]	; (8002f44 <HAL_ADC_ConfigChannel+0x25c>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a11      	ldr	r2, [pc, #68]	; (8002f48 <HAL_ADC_ConfigChannel+0x260>)
 8002f04:	fba2 2303 	umull	r2, r3, r2, r3
 8002f08:	0c9a      	lsrs	r2, r3, #18
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f14:	e002      	b.n	8002f1c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f9      	bne.n	8002f16 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3714      	adds	r7, #20
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	40012300 	.word	0x40012300
 8002f3c:	40012000 	.word	0x40012000
 8002f40:	10000012 	.word	0x10000012
 8002f44:	20000000 	.word	0x20000000
 8002f48:	431bde83 	.word	0x431bde83

08002f4c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f54:	4b79      	ldr	r3, [pc, #484]	; (800313c <ADC_Init+0x1f0>)
 8002f56:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6859      	ldr	r1, [r3, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	021a      	lsls	r2, r3, #8
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002fa4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6859      	ldr	r1, [r3, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689a      	ldr	r2, [r3, #8]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6899      	ldr	r1, [r3, #8]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68da      	ldr	r2, [r3, #12]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fde:	4a58      	ldr	r2, [pc, #352]	; (8003140 <ADC_Init+0x1f4>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d022      	beq.n	800302a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689a      	ldr	r2, [r3, #8]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ff2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6899      	ldr	r1, [r3, #8]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	430a      	orrs	r2, r1
 8003004:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	689a      	ldr	r2, [r3, #8]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003014:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	6899      	ldr	r1, [r3, #8]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	609a      	str	r2, [r3, #8]
 8003028:	e00f      	b.n	800304a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003038:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	689a      	ldr	r2, [r3, #8]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003048:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 0202 	bic.w	r2, r2, #2
 8003058:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	6899      	ldr	r1, [r3, #8]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	7e1b      	ldrb	r3, [r3, #24]
 8003064:	005a      	lsls	r2, r3, #1
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d01b      	beq.n	80030b0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003086:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003096:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6859      	ldr	r1, [r3, #4]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a2:	3b01      	subs	r3, #1
 80030a4:	035a      	lsls	r2, r3, #13
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	605a      	str	r2, [r3, #4]
 80030ae:	e007      	b.n	80030c0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	685a      	ldr	r2, [r3, #4]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80030ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	3b01      	subs	r3, #1
 80030dc:	051a      	lsls	r2, r3, #20
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	430a      	orrs	r2, r1
 80030e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80030f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	6899      	ldr	r1, [r3, #8]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003102:	025a      	lsls	r2, r3, #9
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689a      	ldr	r2, [r3, #8]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800311a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6899      	ldr	r1, [r3, #8]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	029a      	lsls	r2, r3, #10
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	430a      	orrs	r2, r1
 800312e:	609a      	str	r2, [r3, #8]
}
 8003130:	bf00      	nop
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr
 800313c:	40012300 	.word	0x40012300
 8003140:	0f000001 	.word	0x0f000001

08003144 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003150:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800315a:	2b00      	cmp	r3, #0
 800315c:	d13c      	bne.n	80031d8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d12b      	bne.n	80031d0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800317c:	2b00      	cmp	r3, #0
 800317e:	d127      	bne.n	80031d0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003186:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800318a:	2b00      	cmp	r3, #0
 800318c:	d006      	beq.n	800319c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003198:	2b00      	cmp	r3, #0
 800319a:	d119      	bne.n	80031d0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	685a      	ldr	r2, [r3, #4]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f022 0220 	bic.w	r2, r2, #32
 80031aa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d105      	bne.n	80031d0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c8:	f043 0201 	orr.w	r2, r3, #1
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f7fd ff1d 	bl	8001010 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80031d6:	e00e      	b.n	80031f6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031dc:	f003 0310 	and.w	r3, r3, #16
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d003      	beq.n	80031ec <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f7ff fd75 	bl	8002cd4 <HAL_ADC_ErrorCallback>
}
 80031ea:	e004      	b.n	80031f6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	4798      	blx	r3
}
 80031f6:	bf00      	nop
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b084      	sub	sp, #16
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f7ff fd57 	bl	8002cc0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003212:	bf00      	nop
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b084      	sub	sp, #16
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003226:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2240      	movs	r2, #64	; 0x40
 800322c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003232:	f043 0204 	orr.w	r2, r3, #4
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f7ff fd4a 	bl	8002cd4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003240:	bf00      	nop
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f003 0307 	and.w	r3, r3, #7
 8003256:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003258:	4b0c      	ldr	r3, [pc, #48]	; (800328c <__NVIC_SetPriorityGrouping+0x44>)
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800325e:	68ba      	ldr	r2, [r7, #8]
 8003260:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003264:	4013      	ands	r3, r2
 8003266:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003270:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003278:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800327a:	4a04      	ldr	r2, [pc, #16]	; (800328c <__NVIC_SetPriorityGrouping+0x44>)
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	60d3      	str	r3, [r2, #12]
}
 8003280:	bf00      	nop
 8003282:	3714      	adds	r7, #20
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	e000ed00 	.word	0xe000ed00

08003290 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003294:	4b04      	ldr	r3, [pc, #16]	; (80032a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	0a1b      	lsrs	r3, r3, #8
 800329a:	f003 0307 	and.w	r3, r3, #7
}
 800329e:	4618      	mov	r0, r3
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr
 80032a8:	e000ed00 	.word	0xe000ed00

080032ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	4603      	mov	r3, r0
 80032b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	db0b      	blt.n	80032d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032be:	79fb      	ldrb	r3, [r7, #7]
 80032c0:	f003 021f 	and.w	r2, r3, #31
 80032c4:	4907      	ldr	r1, [pc, #28]	; (80032e4 <__NVIC_EnableIRQ+0x38>)
 80032c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ca:	095b      	lsrs	r3, r3, #5
 80032cc:	2001      	movs	r0, #1
 80032ce:	fa00 f202 	lsl.w	r2, r0, r2
 80032d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032d6:	bf00      	nop
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	e000e100 	.word	0xe000e100

080032e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	4603      	mov	r3, r0
 80032f0:	6039      	str	r1, [r7, #0]
 80032f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	db0a      	blt.n	8003312 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	b2da      	uxtb	r2, r3
 8003300:	490c      	ldr	r1, [pc, #48]	; (8003334 <__NVIC_SetPriority+0x4c>)
 8003302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003306:	0112      	lsls	r2, r2, #4
 8003308:	b2d2      	uxtb	r2, r2
 800330a:	440b      	add	r3, r1
 800330c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003310:	e00a      	b.n	8003328 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	b2da      	uxtb	r2, r3
 8003316:	4908      	ldr	r1, [pc, #32]	; (8003338 <__NVIC_SetPriority+0x50>)
 8003318:	79fb      	ldrb	r3, [r7, #7]
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	3b04      	subs	r3, #4
 8003320:	0112      	lsls	r2, r2, #4
 8003322:	b2d2      	uxtb	r2, r2
 8003324:	440b      	add	r3, r1
 8003326:	761a      	strb	r2, [r3, #24]
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr
 8003334:	e000e100 	.word	0xe000e100
 8003338:	e000ed00 	.word	0xe000ed00

0800333c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800333c:	b480      	push	{r7}
 800333e:	b089      	sub	sp, #36	; 0x24
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f003 0307 	and.w	r3, r3, #7
 800334e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	f1c3 0307 	rsb	r3, r3, #7
 8003356:	2b04      	cmp	r3, #4
 8003358:	bf28      	it	cs
 800335a:	2304      	movcs	r3, #4
 800335c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	3304      	adds	r3, #4
 8003362:	2b06      	cmp	r3, #6
 8003364:	d902      	bls.n	800336c <NVIC_EncodePriority+0x30>
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	3b03      	subs	r3, #3
 800336a:	e000      	b.n	800336e <NVIC_EncodePriority+0x32>
 800336c:	2300      	movs	r3, #0
 800336e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003370:	f04f 32ff 	mov.w	r2, #4294967295
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	43da      	mvns	r2, r3
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	401a      	ands	r2, r3
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003384:	f04f 31ff 	mov.w	r1, #4294967295
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	fa01 f303 	lsl.w	r3, r1, r3
 800338e:	43d9      	mvns	r1, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003394:	4313      	orrs	r3, r2
         );
}
 8003396:	4618      	mov	r0, r3
 8003398:	3724      	adds	r7, #36	; 0x24
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
	...

080033a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	3b01      	subs	r3, #1
 80033b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033b4:	d301      	bcc.n	80033ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033b6:	2301      	movs	r3, #1
 80033b8:	e00f      	b.n	80033da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033ba:	4a0a      	ldr	r2, [pc, #40]	; (80033e4 <SysTick_Config+0x40>)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3b01      	subs	r3, #1
 80033c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033c2:	210f      	movs	r1, #15
 80033c4:	f04f 30ff 	mov.w	r0, #4294967295
 80033c8:	f7ff ff8e 	bl	80032e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033cc:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <SysTick_Config+0x40>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033d2:	4b04      	ldr	r3, [pc, #16]	; (80033e4 <SysTick_Config+0x40>)
 80033d4:	2207      	movs	r2, #7
 80033d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	e000e010 	.word	0xe000e010

080033e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f7ff ff29 	bl	8003248 <__NVIC_SetPriorityGrouping>
}
 80033f6:	bf00      	nop
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033fe:	b580      	push	{r7, lr}
 8003400:	b086      	sub	sp, #24
 8003402:	af00      	add	r7, sp, #0
 8003404:	4603      	mov	r3, r0
 8003406:	60b9      	str	r1, [r7, #8]
 8003408:	607a      	str	r2, [r7, #4]
 800340a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800340c:	2300      	movs	r3, #0
 800340e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003410:	f7ff ff3e 	bl	8003290 <__NVIC_GetPriorityGrouping>
 8003414:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	68b9      	ldr	r1, [r7, #8]
 800341a:	6978      	ldr	r0, [r7, #20]
 800341c:	f7ff ff8e 	bl	800333c <NVIC_EncodePriority>
 8003420:	4602      	mov	r2, r0
 8003422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003426:	4611      	mov	r1, r2
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff ff5d 	bl	80032e8 <__NVIC_SetPriority>
}
 800342e:	bf00      	nop
 8003430:	3718      	adds	r7, #24
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b082      	sub	sp, #8
 800343a:	af00      	add	r7, sp, #0
 800343c:	4603      	mov	r3, r0
 800343e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003444:	4618      	mov	r0, r3
 8003446:	f7ff ff31 	bl	80032ac <__NVIC_EnableIRQ>
}
 800344a:	bf00      	nop
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b082      	sub	sp, #8
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f7ff ffa2 	bl	80033a4 <SysTick_Config>
 8003460:	4603      	mov	r3, r0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
	...

0800346c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003474:	2300      	movs	r3, #0
 8003476:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003478:	f7ff fabe 	bl	80029f8 <HAL_GetTick>
 800347c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e099      	b.n	80035bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2202      	movs	r2, #2
 800348c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0201 	bic.w	r2, r2, #1
 80034a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034a8:	e00f      	b.n	80034ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034aa:	f7ff faa5 	bl	80029f8 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b05      	cmp	r3, #5
 80034b6:	d908      	bls.n	80034ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2220      	movs	r2, #32
 80034bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2203      	movs	r2, #3
 80034c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e078      	b.n	80035bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1e8      	bne.n	80034aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80034e0:	697a      	ldr	r2, [r7, #20]
 80034e2:	4b38      	ldr	r3, [pc, #224]	; (80035c4 <HAL_DMA_Init+0x158>)
 80034e4:	4013      	ands	r3, r2
 80034e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003502:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800350e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	4313      	orrs	r3, r2
 800351a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003520:	2b04      	cmp	r3, #4
 8003522:	d107      	bne.n	8003534 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352c:	4313      	orrs	r3, r2
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	4313      	orrs	r3, r2
 8003532:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	f023 0307 	bic.w	r3, r3, #7
 800354a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	4313      	orrs	r3, r2
 8003554:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355a:	2b04      	cmp	r3, #4
 800355c:	d117      	bne.n	800358e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003562:	697a      	ldr	r2, [r7, #20]
 8003564:	4313      	orrs	r3, r2
 8003566:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00e      	beq.n	800358e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 fa6f 	bl	8003a54 <DMA_CheckFifoParam>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d008      	beq.n	800358e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2240      	movs	r2, #64	; 0x40
 8003580:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800358a:	2301      	movs	r3, #1
 800358c:	e016      	b.n	80035bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 fa26 	bl	80039e8 <DMA_CalcBaseAndBitshift>
 800359c:	4603      	mov	r3, r0
 800359e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a4:	223f      	movs	r2, #63	; 0x3f
 80035a6:	409a      	lsls	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3718      	adds	r7, #24
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	f010803f 	.word	0xf010803f

080035c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
 80035d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035d6:	2300      	movs	r3, #0
 80035d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d101      	bne.n	80035ee <HAL_DMA_Start_IT+0x26>
 80035ea:	2302      	movs	r3, #2
 80035ec:	e040      	b.n	8003670 <HAL_DMA_Start_IT+0xa8>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d12f      	bne.n	8003662 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2202      	movs	r2, #2
 8003606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	68b9      	ldr	r1, [r7, #8]
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f000 f9b8 	bl	800398c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003620:	223f      	movs	r2, #63	; 0x3f
 8003622:	409a      	lsls	r2, r3
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f042 0216 	orr.w	r2, r2, #22
 8003636:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363c:	2b00      	cmp	r3, #0
 800363e:	d007      	beq.n	8003650 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0208 	orr.w	r2, r2, #8
 800364e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f042 0201 	orr.w	r2, r2, #1
 800365e:	601a      	str	r2, [r3, #0]
 8003660:	e005      	b.n	800366e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800366a:	2302      	movs	r3, #2
 800366c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800366e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003670:	4618      	mov	r0, r3
 8003672:	3718      	adds	r7, #24
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003680:	2300      	movs	r3, #0
 8003682:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003684:	4b92      	ldr	r3, [pc, #584]	; (80038d0 <HAL_DMA_IRQHandler+0x258>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a92      	ldr	r2, [pc, #584]	; (80038d4 <HAL_DMA_IRQHandler+0x25c>)
 800368a:	fba2 2303 	umull	r2, r3, r2, r3
 800368e:	0a9b      	lsrs	r3, r3, #10
 8003690:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003696:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a2:	2208      	movs	r2, #8
 80036a4:	409a      	lsls	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	4013      	ands	r3, r2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d01a      	beq.n	80036e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0304 	and.w	r3, r3, #4
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d013      	beq.n	80036e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 0204 	bic.w	r2, r2, #4
 80036ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d0:	2208      	movs	r2, #8
 80036d2:	409a      	lsls	r2, r3
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036dc:	f043 0201 	orr.w	r2, r3, #1
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e8:	2201      	movs	r2, #1
 80036ea:	409a      	lsls	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	4013      	ands	r3, r2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d012      	beq.n	800371a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00b      	beq.n	800371a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003706:	2201      	movs	r2, #1
 8003708:	409a      	lsls	r2, r3
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003712:	f043 0202 	orr.w	r2, r3, #2
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800371e:	2204      	movs	r2, #4
 8003720:	409a      	lsls	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	4013      	ands	r3, r2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d012      	beq.n	8003750 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00b      	beq.n	8003750 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800373c:	2204      	movs	r2, #4
 800373e:	409a      	lsls	r2, r3
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003748:	f043 0204 	orr.w	r2, r3, #4
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003754:	2210      	movs	r2, #16
 8003756:	409a      	lsls	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4013      	ands	r3, r2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d043      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0308 	and.w	r3, r3, #8
 800376a:	2b00      	cmp	r3, #0
 800376c:	d03c      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003772:	2210      	movs	r2, #16
 8003774:	409a      	lsls	r2, r3
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d018      	beq.n	80037ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d108      	bne.n	80037a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	2b00      	cmp	r3, #0
 800379c:	d024      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	4798      	blx	r3
 80037a6:	e01f      	b.n	80037e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d01b      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	4798      	blx	r3
 80037b8:	e016      	b.n	80037e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d107      	bne.n	80037d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0208 	bic.w	r2, r2, #8
 80037d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d003      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ec:	2220      	movs	r2, #32
 80037ee:	409a      	lsls	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4013      	ands	r3, r2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 808e 	beq.w	8003916 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0310 	and.w	r3, r3, #16
 8003804:	2b00      	cmp	r3, #0
 8003806:	f000 8086 	beq.w	8003916 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800380e:	2220      	movs	r2, #32
 8003810:	409a      	lsls	r2, r3
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b05      	cmp	r3, #5
 8003820:	d136      	bne.n	8003890 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 0216 	bic.w	r2, r2, #22
 8003830:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	695a      	ldr	r2, [r3, #20]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003840:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	2b00      	cmp	r3, #0
 8003848:	d103      	bne.n	8003852 <HAL_DMA_IRQHandler+0x1da>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800384e:	2b00      	cmp	r3, #0
 8003850:	d007      	beq.n	8003862 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 0208 	bic.w	r2, r2, #8
 8003860:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003866:	223f      	movs	r2, #63	; 0x3f
 8003868:	409a      	lsls	r2, r3
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003882:	2b00      	cmp	r3, #0
 8003884:	d07d      	beq.n	8003982 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	4798      	blx	r3
        }
        return;
 800388e:	e078      	b.n	8003982 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d01c      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d108      	bne.n	80038be <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d030      	beq.n	8003916 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	4798      	blx	r3
 80038bc:	e02b      	b.n	8003916 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d027      	beq.n	8003916 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	4798      	blx	r3
 80038ce:	e022      	b.n	8003916 <HAL_DMA_IRQHandler+0x29e>
 80038d0:	20000000 	.word	0x20000000
 80038d4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10f      	bne.n	8003906 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 0210 	bic.w	r2, r2, #16
 80038f4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391a:	2b00      	cmp	r3, #0
 800391c:	d032      	beq.n	8003984 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b00      	cmp	r3, #0
 8003928:	d022      	beq.n	8003970 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2205      	movs	r2, #5
 800392e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 0201 	bic.w	r2, r2, #1
 8003940:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	3301      	adds	r3, #1
 8003946:	60bb      	str	r3, [r7, #8]
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	429a      	cmp	r2, r3
 800394c:	d307      	bcc.n	800395e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1f2      	bne.n	8003942 <HAL_DMA_IRQHandler+0x2ca>
 800395c:	e000      	b.n	8003960 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800395e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003974:	2b00      	cmp	r3, #0
 8003976:	d005      	beq.n	8003984 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	4798      	blx	r3
 8003980:	e000      	b.n	8003984 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003982:	bf00      	nop
    }
  }
}
 8003984:	3718      	adds	r7, #24
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop

0800398c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
 8003998:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80039a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	2b40      	cmp	r3, #64	; 0x40
 80039b8:	d108      	bne.n	80039cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80039ca:	e007      	b.n	80039dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	60da      	str	r2, [r3, #12]
}
 80039dc:	bf00      	nop
 80039de:	3714      	adds	r7, #20
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	3b10      	subs	r3, #16
 80039f8:	4a14      	ldr	r2, [pc, #80]	; (8003a4c <DMA_CalcBaseAndBitshift+0x64>)
 80039fa:	fba2 2303 	umull	r2, r3, r2, r3
 80039fe:	091b      	lsrs	r3, r3, #4
 8003a00:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a02:	4a13      	ldr	r2, [pc, #76]	; (8003a50 <DMA_CalcBaseAndBitshift+0x68>)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	4413      	add	r3, r2
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2b03      	cmp	r3, #3
 8003a14:	d909      	bls.n	8003a2a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a1e:	f023 0303 	bic.w	r3, r3, #3
 8003a22:	1d1a      	adds	r2, r3, #4
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	659a      	str	r2, [r3, #88]	; 0x58
 8003a28:	e007      	b.n	8003a3a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a32:	f023 0303 	bic.w	r3, r3, #3
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3714      	adds	r7, #20
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	aaaaaaab 	.word	0xaaaaaaab
 8003a50:	080079e4 	.word	0x080079e4

08003a54 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a64:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d11f      	bne.n	8003aae <DMA_CheckFifoParam+0x5a>
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	2b03      	cmp	r3, #3
 8003a72:	d856      	bhi.n	8003b22 <DMA_CheckFifoParam+0xce>
 8003a74:	a201      	add	r2, pc, #4	; (adr r2, 8003a7c <DMA_CheckFifoParam+0x28>)
 8003a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7a:	bf00      	nop
 8003a7c:	08003a8d 	.word	0x08003a8d
 8003a80:	08003a9f 	.word	0x08003a9f
 8003a84:	08003a8d 	.word	0x08003a8d
 8003a88:	08003b23 	.word	0x08003b23
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d046      	beq.n	8003b26 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a9c:	e043      	b.n	8003b26 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003aa6:	d140      	bne.n	8003b2a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aac:	e03d      	b.n	8003b2a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ab6:	d121      	bne.n	8003afc <DMA_CheckFifoParam+0xa8>
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	2b03      	cmp	r3, #3
 8003abc:	d837      	bhi.n	8003b2e <DMA_CheckFifoParam+0xda>
 8003abe:	a201      	add	r2, pc, #4	; (adr r2, 8003ac4 <DMA_CheckFifoParam+0x70>)
 8003ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac4:	08003ad5 	.word	0x08003ad5
 8003ac8:	08003adb 	.word	0x08003adb
 8003acc:	08003ad5 	.word	0x08003ad5
 8003ad0:	08003aed 	.word	0x08003aed
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ad8:	e030      	b.n	8003b3c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ade:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d025      	beq.n	8003b32 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aea:	e022      	b.n	8003b32 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003af4:	d11f      	bne.n	8003b36 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003afa:	e01c      	b.n	8003b36 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d903      	bls.n	8003b0a <DMA_CheckFifoParam+0xb6>
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	2b03      	cmp	r3, #3
 8003b06:	d003      	beq.n	8003b10 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b08:	e018      	b.n	8003b3c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	73fb      	strb	r3, [r7, #15]
      break;
 8003b0e:	e015      	b.n	8003b3c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00e      	beq.n	8003b3a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b20:	e00b      	b.n	8003b3a <DMA_CheckFifoParam+0xe6>
      break;
 8003b22:	bf00      	nop
 8003b24:	e00a      	b.n	8003b3c <DMA_CheckFifoParam+0xe8>
      break;
 8003b26:	bf00      	nop
 8003b28:	e008      	b.n	8003b3c <DMA_CheckFifoParam+0xe8>
      break;
 8003b2a:	bf00      	nop
 8003b2c:	e006      	b.n	8003b3c <DMA_CheckFifoParam+0xe8>
      break;
 8003b2e:	bf00      	nop
 8003b30:	e004      	b.n	8003b3c <DMA_CheckFifoParam+0xe8>
      break;
 8003b32:	bf00      	nop
 8003b34:	e002      	b.n	8003b3c <DMA_CheckFifoParam+0xe8>
      break;   
 8003b36:	bf00      	nop
 8003b38:	e000      	b.n	8003b3c <DMA_CheckFifoParam+0xe8>
      break;
 8003b3a:	bf00      	nop
    }
  } 
  
  return status; 
 8003b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3714      	adds	r7, #20
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop

08003b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b089      	sub	sp, #36	; 0x24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b56:	2300      	movs	r3, #0
 8003b58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b62:	2300      	movs	r3, #0
 8003b64:	61fb      	str	r3, [r7, #28]
 8003b66:	e159      	b.n	8003e1c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b68:	2201      	movs	r2, #1
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	f040 8148 	bne.w	8003e16 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f003 0303 	and.w	r3, r3, #3
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d005      	beq.n	8003b9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d130      	bne.n	8003c00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	2203      	movs	r2, #3
 8003baa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bae:	43db      	mvns	r3, r3
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	68da      	ldr	r2, [r3, #12]
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	005b      	lsls	r3, r3, #1
 8003bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	43db      	mvns	r3, r3
 8003bde:	69ba      	ldr	r2, [r7, #24]
 8003be0:	4013      	ands	r3, r2
 8003be2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	091b      	lsrs	r3, r3, #4
 8003bea:	f003 0201 	and.w	r2, r3, #1
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f003 0303 	and.w	r3, r3, #3
 8003c08:	2b03      	cmp	r3, #3
 8003c0a:	d017      	beq.n	8003c3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	2203      	movs	r2, #3
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	43db      	mvns	r3, r3
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	4013      	ands	r3, r2
 8003c22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f003 0303 	and.w	r3, r3, #3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d123      	bne.n	8003c90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	08da      	lsrs	r2, r3, #3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3208      	adds	r2, #8
 8003c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	f003 0307 	and.w	r3, r3, #7
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	220f      	movs	r2, #15
 8003c60:	fa02 f303 	lsl.w	r3, r2, r3
 8003c64:	43db      	mvns	r3, r3
 8003c66:	69ba      	ldr	r2, [r7, #24]
 8003c68:	4013      	ands	r3, r2
 8003c6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	691a      	ldr	r2, [r3, #16]
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	f003 0307 	and.w	r3, r3, #7
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	08da      	lsrs	r2, r3, #3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	3208      	adds	r2, #8
 8003c8a:	69b9      	ldr	r1, [r7, #24]
 8003c8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	2203      	movs	r2, #3
 8003c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca0:	43db      	mvns	r3, r3
 8003ca2:	69ba      	ldr	r2, [r7, #24]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f003 0203 	and.w	r2, r3, #3
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f000 80a2 	beq.w	8003e16 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60fb      	str	r3, [r7, #12]
 8003cd6:	4b57      	ldr	r3, [pc, #348]	; (8003e34 <HAL_GPIO_Init+0x2e8>)
 8003cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cda:	4a56      	ldr	r2, [pc, #344]	; (8003e34 <HAL_GPIO_Init+0x2e8>)
 8003cdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ce2:	4b54      	ldr	r3, [pc, #336]	; (8003e34 <HAL_GPIO_Init+0x2e8>)
 8003ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cee:	4a52      	ldr	r2, [pc, #328]	; (8003e38 <HAL_GPIO_Init+0x2ec>)
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	089b      	lsrs	r3, r3, #2
 8003cf4:	3302      	adds	r3, #2
 8003cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	f003 0303 	and.w	r3, r3, #3
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	220f      	movs	r2, #15
 8003d06:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0a:	43db      	mvns	r3, r3
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a49      	ldr	r2, [pc, #292]	; (8003e3c <HAL_GPIO_Init+0x2f0>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d019      	beq.n	8003d4e <HAL_GPIO_Init+0x202>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a48      	ldr	r2, [pc, #288]	; (8003e40 <HAL_GPIO_Init+0x2f4>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d013      	beq.n	8003d4a <HAL_GPIO_Init+0x1fe>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a47      	ldr	r2, [pc, #284]	; (8003e44 <HAL_GPIO_Init+0x2f8>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d00d      	beq.n	8003d46 <HAL_GPIO_Init+0x1fa>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a46      	ldr	r2, [pc, #280]	; (8003e48 <HAL_GPIO_Init+0x2fc>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d007      	beq.n	8003d42 <HAL_GPIO_Init+0x1f6>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a45      	ldr	r2, [pc, #276]	; (8003e4c <HAL_GPIO_Init+0x300>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d101      	bne.n	8003d3e <HAL_GPIO_Init+0x1f2>
 8003d3a:	2304      	movs	r3, #4
 8003d3c:	e008      	b.n	8003d50 <HAL_GPIO_Init+0x204>
 8003d3e:	2307      	movs	r3, #7
 8003d40:	e006      	b.n	8003d50 <HAL_GPIO_Init+0x204>
 8003d42:	2303      	movs	r3, #3
 8003d44:	e004      	b.n	8003d50 <HAL_GPIO_Init+0x204>
 8003d46:	2302      	movs	r3, #2
 8003d48:	e002      	b.n	8003d50 <HAL_GPIO_Init+0x204>
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e000      	b.n	8003d50 <HAL_GPIO_Init+0x204>
 8003d4e:	2300      	movs	r3, #0
 8003d50:	69fa      	ldr	r2, [r7, #28]
 8003d52:	f002 0203 	and.w	r2, r2, #3
 8003d56:	0092      	lsls	r2, r2, #2
 8003d58:	4093      	lsls	r3, r2
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d60:	4935      	ldr	r1, [pc, #212]	; (8003e38 <HAL_GPIO_Init+0x2ec>)
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	089b      	lsrs	r3, r3, #2
 8003d66:	3302      	adds	r3, #2
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d6e:	4b38      	ldr	r3, [pc, #224]	; (8003e50 <HAL_GPIO_Init+0x304>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	43db      	mvns	r3, r3
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003d8a:	69ba      	ldr	r2, [r7, #24]
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d92:	4a2f      	ldr	r2, [pc, #188]	; (8003e50 <HAL_GPIO_Init+0x304>)
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003d98:	4b2d      	ldr	r3, [pc, #180]	; (8003e50 <HAL_GPIO_Init+0x304>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	43db      	mvns	r3, r3
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	4013      	ands	r3, r2
 8003da6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d003      	beq.n	8003dbc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003dbc:	4a24      	ldr	r2, [pc, #144]	; (8003e50 <HAL_GPIO_Init+0x304>)
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dc2:	4b23      	ldr	r3, [pc, #140]	; (8003e50 <HAL_GPIO_Init+0x304>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	43db      	mvns	r3, r3
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	4013      	ands	r3, r2
 8003dd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003dde:	69ba      	ldr	r2, [r7, #24]
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003de6:	4a1a      	ldr	r2, [pc, #104]	; (8003e50 <HAL_GPIO_Init+0x304>)
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003dec:	4b18      	ldr	r3, [pc, #96]	; (8003e50 <HAL_GPIO_Init+0x304>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	43db      	mvns	r3, r3
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d003      	beq.n	8003e10 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e10:	4a0f      	ldr	r2, [pc, #60]	; (8003e50 <HAL_GPIO_Init+0x304>)
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	3301      	adds	r3, #1
 8003e1a:	61fb      	str	r3, [r7, #28]
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	2b0f      	cmp	r3, #15
 8003e20:	f67f aea2 	bls.w	8003b68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e24:	bf00      	nop
 8003e26:	bf00      	nop
 8003e28:	3724      	adds	r7, #36	; 0x24
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	40023800 	.word	0x40023800
 8003e38:	40013800 	.word	0x40013800
 8003e3c:	40020000 	.word	0x40020000
 8003e40:	40020400 	.word	0x40020400
 8003e44:	40020800 	.word	0x40020800
 8003e48:	40020c00 	.word	0x40020c00
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	40013c00 	.word	0x40013c00

08003e54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	691a      	ldr	r2, [r3, #16]
 8003e64:	887b      	ldrh	r3, [r7, #2]
 8003e66:	4013      	ands	r3, r2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d002      	beq.n	8003e72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	73fb      	strb	r3, [r7, #15]
 8003e70:	e001      	b.n	8003e76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e72:	2300      	movs	r3, #0
 8003e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3714      	adds	r7, #20
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	807b      	strh	r3, [r7, #2]
 8003e90:	4613      	mov	r3, r2
 8003e92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e94:	787b      	ldrb	r3, [r7, #1]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d003      	beq.n	8003ea2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e9a:	887a      	ldrh	r2, [r7, #2]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ea0:	e003      	b.n	8003eaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ea2:	887b      	ldrh	r3, [r7, #2]
 8003ea4:	041a      	lsls	r2, r3, #16
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	619a      	str	r2, [r3, #24]
}
 8003eaa:	bf00      	nop
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
	...

08003eb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e12b      	b.n	8004122 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d106      	bne.n	8003ee4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7fe fa58 	bl	8002394 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2224      	movs	r2, #36	; 0x24
 8003ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 0201 	bic.w	r2, r2, #1
 8003efa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f1c:	f001 fcda 	bl	80058d4 <HAL_RCC_GetPCLK1Freq>
 8003f20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	4a81      	ldr	r2, [pc, #516]	; (800412c <HAL_I2C_Init+0x274>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d807      	bhi.n	8003f3c <HAL_I2C_Init+0x84>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4a80      	ldr	r2, [pc, #512]	; (8004130 <HAL_I2C_Init+0x278>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	bf94      	ite	ls
 8003f34:	2301      	movls	r3, #1
 8003f36:	2300      	movhi	r3, #0
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	e006      	b.n	8003f4a <HAL_I2C_Init+0x92>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4a7d      	ldr	r2, [pc, #500]	; (8004134 <HAL_I2C_Init+0x27c>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	bf94      	ite	ls
 8003f44:	2301      	movls	r3, #1
 8003f46:	2300      	movhi	r3, #0
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d001      	beq.n	8003f52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e0e7      	b.n	8004122 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	4a78      	ldr	r2, [pc, #480]	; (8004138 <HAL_I2C_Init+0x280>)
 8003f56:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5a:	0c9b      	lsrs	r3, r3, #18
 8003f5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6a1b      	ldr	r3, [r3, #32]
 8003f78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	4a6a      	ldr	r2, [pc, #424]	; (800412c <HAL_I2C_Init+0x274>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d802      	bhi.n	8003f8c <HAL_I2C_Init+0xd4>
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	3301      	adds	r3, #1
 8003f8a:	e009      	b.n	8003fa0 <HAL_I2C_Init+0xe8>
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f92:	fb02 f303 	mul.w	r3, r2, r3
 8003f96:	4a69      	ldr	r2, [pc, #420]	; (800413c <HAL_I2C_Init+0x284>)
 8003f98:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9c:	099b      	lsrs	r3, r3, #6
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	6812      	ldr	r2, [r2, #0]
 8003fa4:	430b      	orrs	r3, r1
 8003fa6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003fb2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	495c      	ldr	r1, [pc, #368]	; (800412c <HAL_I2C_Init+0x274>)
 8003fbc:	428b      	cmp	r3, r1
 8003fbe:	d819      	bhi.n	8003ff4 <HAL_I2C_Init+0x13c>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	1e59      	subs	r1, r3, #1
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	005b      	lsls	r3, r3, #1
 8003fca:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fce:	1c59      	adds	r1, r3, #1
 8003fd0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003fd4:	400b      	ands	r3, r1
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00a      	beq.n	8003ff0 <HAL_I2C_Init+0x138>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	1e59      	subs	r1, r3, #1
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	005b      	lsls	r3, r3, #1
 8003fe4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fe8:	3301      	adds	r3, #1
 8003fea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fee:	e051      	b.n	8004094 <HAL_I2C_Init+0x1dc>
 8003ff0:	2304      	movs	r3, #4
 8003ff2:	e04f      	b.n	8004094 <HAL_I2C_Init+0x1dc>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d111      	bne.n	8004020 <HAL_I2C_Init+0x168>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	1e58      	subs	r0, r3, #1
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6859      	ldr	r1, [r3, #4]
 8004004:	460b      	mov	r3, r1
 8004006:	005b      	lsls	r3, r3, #1
 8004008:	440b      	add	r3, r1
 800400a:	fbb0 f3f3 	udiv	r3, r0, r3
 800400e:	3301      	adds	r3, #1
 8004010:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004014:	2b00      	cmp	r3, #0
 8004016:	bf0c      	ite	eq
 8004018:	2301      	moveq	r3, #1
 800401a:	2300      	movne	r3, #0
 800401c:	b2db      	uxtb	r3, r3
 800401e:	e012      	b.n	8004046 <HAL_I2C_Init+0x18e>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	1e58      	subs	r0, r3, #1
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6859      	ldr	r1, [r3, #4]
 8004028:	460b      	mov	r3, r1
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	440b      	add	r3, r1
 800402e:	0099      	lsls	r1, r3, #2
 8004030:	440b      	add	r3, r1
 8004032:	fbb0 f3f3 	udiv	r3, r0, r3
 8004036:	3301      	adds	r3, #1
 8004038:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800403c:	2b00      	cmp	r3, #0
 800403e:	bf0c      	ite	eq
 8004040:	2301      	moveq	r3, #1
 8004042:	2300      	movne	r3, #0
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <HAL_I2C_Init+0x196>
 800404a:	2301      	movs	r3, #1
 800404c:	e022      	b.n	8004094 <HAL_I2C_Init+0x1dc>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10e      	bne.n	8004074 <HAL_I2C_Init+0x1bc>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	1e58      	subs	r0, r3, #1
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6859      	ldr	r1, [r3, #4]
 800405e:	460b      	mov	r3, r1
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	440b      	add	r3, r1
 8004064:	fbb0 f3f3 	udiv	r3, r0, r3
 8004068:	3301      	adds	r3, #1
 800406a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800406e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004072:	e00f      	b.n	8004094 <HAL_I2C_Init+0x1dc>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	1e58      	subs	r0, r3, #1
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6859      	ldr	r1, [r3, #4]
 800407c:	460b      	mov	r3, r1
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	440b      	add	r3, r1
 8004082:	0099      	lsls	r1, r3, #2
 8004084:	440b      	add	r3, r1
 8004086:	fbb0 f3f3 	udiv	r3, r0, r3
 800408a:	3301      	adds	r3, #1
 800408c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004090:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004094:	6879      	ldr	r1, [r7, #4]
 8004096:	6809      	ldr	r1, [r1, #0]
 8004098:	4313      	orrs	r3, r2
 800409a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	69da      	ldr	r2, [r3, #28]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	431a      	orrs	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	430a      	orrs	r2, r1
 80040b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80040c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	6911      	ldr	r1, [r2, #16]
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	68d2      	ldr	r2, [r2, #12]
 80040ce:	4311      	orrs	r1, r2
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	6812      	ldr	r2, [r2, #0]
 80040d4:	430b      	orrs	r3, r1
 80040d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	695a      	ldr	r2, [r3, #20]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	431a      	orrs	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	430a      	orrs	r2, r1
 80040f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f042 0201 	orr.w	r2, r2, #1
 8004102:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2220      	movs	r2, #32
 800410e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	000186a0 	.word	0x000186a0
 8004130:	001e847f 	.word	0x001e847f
 8004134:	003d08ff 	.word	0x003d08ff
 8004138:	431bde83 	.word	0x431bde83
 800413c:	10624dd3 	.word	0x10624dd3

08004140 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b088      	sub	sp, #32
 8004144:	af02      	add	r7, sp, #8
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	4608      	mov	r0, r1
 800414a:	4611      	mov	r1, r2
 800414c:	461a      	mov	r2, r3
 800414e:	4603      	mov	r3, r0
 8004150:	817b      	strh	r3, [r7, #10]
 8004152:	460b      	mov	r3, r1
 8004154:	813b      	strh	r3, [r7, #8]
 8004156:	4613      	mov	r3, r2
 8004158:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800415a:	f7fe fc4d 	bl	80029f8 <HAL_GetTick>
 800415e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b20      	cmp	r3, #32
 800416a:	f040 80d9 	bne.w	8004320 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	2319      	movs	r3, #25
 8004174:	2201      	movs	r2, #1
 8004176:	496d      	ldr	r1, [pc, #436]	; (800432c <HAL_I2C_Mem_Write+0x1ec>)
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 fdad 	bl	8004cd8 <I2C_WaitOnFlagUntilTimeout>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d001      	beq.n	8004188 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004184:	2302      	movs	r3, #2
 8004186:	e0cc      	b.n	8004322 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800418e:	2b01      	cmp	r3, #1
 8004190:	d101      	bne.n	8004196 <HAL_I2C_Mem_Write+0x56>
 8004192:	2302      	movs	r3, #2
 8004194:	e0c5      	b.n	8004322 <HAL_I2C_Mem_Write+0x1e2>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0301 	and.w	r3, r3, #1
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d007      	beq.n	80041bc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f042 0201 	orr.w	r2, r2, #1
 80041ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2221      	movs	r2, #33	; 0x21
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2240      	movs	r2, #64	; 0x40
 80041d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6a3a      	ldr	r2, [r7, #32]
 80041e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80041ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	4a4d      	ldr	r2, [pc, #308]	; (8004330 <HAL_I2C_Mem_Write+0x1f0>)
 80041fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041fe:	88f8      	ldrh	r0, [r7, #6]
 8004200:	893a      	ldrh	r2, [r7, #8]
 8004202:	8979      	ldrh	r1, [r7, #10]
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	9301      	str	r3, [sp, #4]
 8004208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800420a:	9300      	str	r3, [sp, #0]
 800420c:	4603      	mov	r3, r0
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f000 fbe4 	bl	80049dc <I2C_RequestMemoryWrite>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d052      	beq.n	80042c0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e081      	b.n	8004322 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f000 fe2e 	bl	8004e84 <I2C_WaitOnTXEFlagUntilTimeout>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00d      	beq.n	800424a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004232:	2b04      	cmp	r3, #4
 8004234:	d107      	bne.n	8004246 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004244:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e06b      	b.n	8004322 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424e:	781a      	ldrb	r2, [r3, #0]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425a:	1c5a      	adds	r2, r3, #1
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004264:	3b01      	subs	r3, #1
 8004266:	b29a      	uxth	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004270:	b29b      	uxth	r3, r3
 8004272:	3b01      	subs	r3, #1
 8004274:	b29a      	uxth	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	f003 0304 	and.w	r3, r3, #4
 8004284:	2b04      	cmp	r3, #4
 8004286:	d11b      	bne.n	80042c0 <HAL_I2C_Mem_Write+0x180>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800428c:	2b00      	cmp	r3, #0
 800428e:	d017      	beq.n	80042c0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	781a      	ldrb	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a0:	1c5a      	adds	r2, r3, #1
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042aa:	3b01      	subs	r3, #1
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	3b01      	subs	r3, #1
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1aa      	bne.n	800421e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042cc:	68f8      	ldr	r0, [r7, #12]
 80042ce:	f000 fe1a 	bl	8004f06 <I2C_WaitOnBTFFlagUntilTimeout>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00d      	beq.n	80042f4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042dc:	2b04      	cmp	r3, #4
 80042de:	d107      	bne.n	80042f0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e016      	b.n	8004322 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004302:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2220      	movs	r2, #32
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800431c:	2300      	movs	r3, #0
 800431e:	e000      	b.n	8004322 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004320:	2302      	movs	r3, #2
  }
}
 8004322:	4618      	mov	r0, r3
 8004324:	3718      	adds	r7, #24
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	00100002 	.word	0x00100002
 8004330:	ffff0000 	.word	0xffff0000

08004334 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b08c      	sub	sp, #48	; 0x30
 8004338:	af02      	add	r7, sp, #8
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	4608      	mov	r0, r1
 800433e:	4611      	mov	r1, r2
 8004340:	461a      	mov	r2, r3
 8004342:	4603      	mov	r3, r0
 8004344:	817b      	strh	r3, [r7, #10]
 8004346:	460b      	mov	r3, r1
 8004348:	813b      	strh	r3, [r7, #8]
 800434a:	4613      	mov	r3, r2
 800434c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800434e:	f7fe fb53 	bl	80029f8 <HAL_GetTick>
 8004352:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b20      	cmp	r3, #32
 800435e:	f040 8208 	bne.w	8004772 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	2319      	movs	r3, #25
 8004368:	2201      	movs	r2, #1
 800436a:	497b      	ldr	r1, [pc, #492]	; (8004558 <HAL_I2C_Mem_Read+0x224>)
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f000 fcb3 	bl	8004cd8 <I2C_WaitOnFlagUntilTimeout>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d001      	beq.n	800437c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004378:	2302      	movs	r3, #2
 800437a:	e1fb      	b.n	8004774 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004382:	2b01      	cmp	r3, #1
 8004384:	d101      	bne.n	800438a <HAL_I2C_Mem_Read+0x56>
 8004386:	2302      	movs	r3, #2
 8004388:	e1f4      	b.n	8004774 <HAL_I2C_Mem_Read+0x440>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0301 	and.w	r3, r3, #1
 800439c:	2b01      	cmp	r3, #1
 800439e:	d007      	beq.n	80043b0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f042 0201 	orr.w	r2, r2, #1
 80043ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2222      	movs	r2, #34	; 0x22
 80043c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2240      	movs	r2, #64	; 0x40
 80043cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80043e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	4a5b      	ldr	r2, [pc, #364]	; (800455c <HAL_I2C_Mem_Read+0x228>)
 80043f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043f2:	88f8      	ldrh	r0, [r7, #6]
 80043f4:	893a      	ldrh	r2, [r7, #8]
 80043f6:	8979      	ldrh	r1, [r7, #10]
 80043f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fa:	9301      	str	r3, [sp, #4]
 80043fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043fe:	9300      	str	r3, [sp, #0]
 8004400:	4603      	mov	r3, r0
 8004402:	68f8      	ldr	r0, [r7, #12]
 8004404:	f000 fb80 	bl	8004b08 <I2C_RequestMemoryRead>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d001      	beq.n	8004412 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e1b0      	b.n	8004774 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004416:	2b00      	cmp	r3, #0
 8004418:	d113      	bne.n	8004442 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800441a:	2300      	movs	r3, #0
 800441c:	623b      	str	r3, [r7, #32]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	695b      	ldr	r3, [r3, #20]
 8004424:	623b      	str	r3, [r7, #32]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	623b      	str	r3, [r7, #32]
 800442e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800443e:	601a      	str	r2, [r3, #0]
 8004440:	e184      	b.n	800474c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004446:	2b01      	cmp	r3, #1
 8004448:	d11b      	bne.n	8004482 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004458:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800445a:	2300      	movs	r3, #0
 800445c:	61fb      	str	r3, [r7, #28]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	61fb      	str	r3, [r7, #28]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	61fb      	str	r3, [r7, #28]
 800446e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800447e:	601a      	str	r2, [r3, #0]
 8004480:	e164      	b.n	800474c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004486:	2b02      	cmp	r3, #2
 8004488:	d11b      	bne.n	80044c2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004498:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044aa:	2300      	movs	r3, #0
 80044ac:	61bb      	str	r3, [r7, #24]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	695b      	ldr	r3, [r3, #20]
 80044b4:	61bb      	str	r3, [r7, #24]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	61bb      	str	r3, [r7, #24]
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	e144      	b.n	800474c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044c2:	2300      	movs	r3, #0
 80044c4:	617b      	str	r3, [r7, #20]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	617b      	str	r3, [r7, #20]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	617b      	str	r3, [r7, #20]
 80044d6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80044d8:	e138      	b.n	800474c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044de:	2b03      	cmp	r3, #3
 80044e0:	f200 80f1 	bhi.w	80046c6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d123      	bne.n	8004534 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f000 fd49 	bl	8004f88 <I2C_WaitOnRXNEFlagUntilTimeout>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d001      	beq.n	8004500 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e139      	b.n	8004774 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	691a      	ldr	r2, [r3, #16]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450a:	b2d2      	uxtb	r2, r2
 800450c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004512:	1c5a      	adds	r2, r3, #1
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800451c:	3b01      	subs	r3, #1
 800451e:	b29a      	uxth	r2, r3
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004528:	b29b      	uxth	r3, r3
 800452a:	3b01      	subs	r3, #1
 800452c:	b29a      	uxth	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004532:	e10b      	b.n	800474c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004538:	2b02      	cmp	r3, #2
 800453a:	d14e      	bne.n	80045da <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800453c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453e:	9300      	str	r3, [sp, #0]
 8004540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004542:	2200      	movs	r2, #0
 8004544:	4906      	ldr	r1, [pc, #24]	; (8004560 <HAL_I2C_Mem_Read+0x22c>)
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f000 fbc6 	bl	8004cd8 <I2C_WaitOnFlagUntilTimeout>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d008      	beq.n	8004564 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e10e      	b.n	8004774 <HAL_I2C_Mem_Read+0x440>
 8004556:	bf00      	nop
 8004558:	00100002 	.word	0x00100002
 800455c:	ffff0000 	.word	0xffff0000
 8004560:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004572:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	691a      	ldr	r2, [r3, #16]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457e:	b2d2      	uxtb	r2, r2
 8004580:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004586:	1c5a      	adds	r2, r3, #1
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004590:	3b01      	subs	r3, #1
 8004592:	b29a      	uxth	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800459c:	b29b      	uxth	r3, r3
 800459e:	3b01      	subs	r3, #1
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	691a      	ldr	r2, [r3, #16]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b0:	b2d2      	uxtb	r2, r2
 80045b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b8:	1c5a      	adds	r2, r3, #1
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045c2:	3b01      	subs	r3, #1
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	3b01      	subs	r3, #1
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045d8:	e0b8      	b.n	800474c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045dc:	9300      	str	r3, [sp, #0]
 80045de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e0:	2200      	movs	r2, #0
 80045e2:	4966      	ldr	r1, [pc, #408]	; (800477c <HAL_I2C_Mem_Read+0x448>)
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f000 fb77 	bl	8004cd8 <I2C_WaitOnFlagUntilTimeout>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d001      	beq.n	80045f4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e0bf      	b.n	8004774 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004602:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	691a      	ldr	r2, [r3, #16]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460e:	b2d2      	uxtb	r2, r2
 8004610:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004616:	1c5a      	adds	r2, r3, #1
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004620:	3b01      	subs	r3, #1
 8004622:	b29a      	uxth	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800462c:	b29b      	uxth	r3, r3
 800462e:	3b01      	subs	r3, #1
 8004630:	b29a      	uxth	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800463c:	2200      	movs	r2, #0
 800463e:	494f      	ldr	r1, [pc, #316]	; (800477c <HAL_I2C_Mem_Read+0x448>)
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f000 fb49 	bl	8004cd8 <I2C_WaitOnFlagUntilTimeout>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d001      	beq.n	8004650 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e091      	b.n	8004774 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800465e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	691a      	ldr	r2, [r3, #16]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466a:	b2d2      	uxtb	r2, r2
 800466c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004672:	1c5a      	adds	r2, r3, #1
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800467c:	3b01      	subs	r3, #1
 800467e:	b29a      	uxth	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004688:	b29b      	uxth	r3, r3
 800468a:	3b01      	subs	r3, #1
 800468c:	b29a      	uxth	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	691a      	ldr	r2, [r3, #16]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	b2d2      	uxtb	r2, r2
 800469e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a4:	1c5a      	adds	r2, r3, #1
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ae:	3b01      	subs	r3, #1
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	3b01      	subs	r3, #1
 80046be:	b29a      	uxth	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046c4:	e042      	b.n	800474c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f000 fc5c 	bl	8004f88 <I2C_WaitOnRXNEFlagUntilTimeout>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e04c      	b.n	8004774 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	691a      	ldr	r2, [r3, #16]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e4:	b2d2      	uxtb	r2, r2
 80046e6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ec:	1c5a      	adds	r2, r3, #1
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046f6:	3b01      	subs	r3, #1
 80046f8:	b29a      	uxth	r2, r3
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004702:	b29b      	uxth	r3, r3
 8004704:	3b01      	subs	r3, #1
 8004706:	b29a      	uxth	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	f003 0304 	and.w	r3, r3, #4
 8004716:	2b04      	cmp	r3, #4
 8004718:	d118      	bne.n	800474c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	691a      	ldr	r2, [r3, #16]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004724:	b2d2      	uxtb	r2, r2
 8004726:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472c:	1c5a      	adds	r2, r3, #1
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004736:	3b01      	subs	r3, #1
 8004738:	b29a      	uxth	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004742:	b29b      	uxth	r3, r3
 8004744:	3b01      	subs	r3, #1
 8004746:	b29a      	uxth	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004750:	2b00      	cmp	r3, #0
 8004752:	f47f aec2 	bne.w	80044da <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2220      	movs	r2, #32
 800475a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800476e:	2300      	movs	r3, #0
 8004770:	e000      	b.n	8004774 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004772:	2302      	movs	r3, #2
  }
}
 8004774:	4618      	mov	r0, r3
 8004776:	3728      	adds	r7, #40	; 0x28
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	00010004 	.word	0x00010004

08004780 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b08a      	sub	sp, #40	; 0x28
 8004784:	af02      	add	r7, sp, #8
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	607a      	str	r2, [r7, #4]
 800478a:	603b      	str	r3, [r7, #0]
 800478c:	460b      	mov	r3, r1
 800478e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004790:	f7fe f932 	bl	80029f8 <HAL_GetTick>
 8004794:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8004796:	2301      	movs	r3, #1
 8004798:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b20      	cmp	r3, #32
 80047a4:	f040 8111 	bne.w	80049ca <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	9300      	str	r3, [sp, #0]
 80047ac:	2319      	movs	r3, #25
 80047ae:	2201      	movs	r2, #1
 80047b0:	4988      	ldr	r1, [pc, #544]	; (80049d4 <HAL_I2C_IsDeviceReady+0x254>)
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f000 fa90 	bl	8004cd8 <I2C_WaitOnFlagUntilTimeout>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80047be:	2302      	movs	r3, #2
 80047c0:	e104      	b.n	80049cc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d101      	bne.n	80047d0 <HAL_I2C_IsDeviceReady+0x50>
 80047cc:	2302      	movs	r3, #2
 80047ce:	e0fd      	b.n	80049cc <HAL_I2C_IsDeviceReady+0x24c>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d007      	beq.n	80047f6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f042 0201 	orr.w	r2, r2, #1
 80047f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004804:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2224      	movs	r2, #36	; 0x24
 800480a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	4a70      	ldr	r2, [pc, #448]	; (80049d8 <HAL_I2C_IsDeviceReady+0x258>)
 8004818:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004828:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	9300      	str	r3, [sp, #0]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	2200      	movs	r2, #0
 8004832:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f000 fa4e 	bl	8004cd8 <I2C_WaitOnFlagUntilTimeout>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00d      	beq.n	800485e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800484c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004850:	d103      	bne.n	800485a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004858:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e0b6      	b.n	80049cc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800485e:	897b      	ldrh	r3, [r7, #10]
 8004860:	b2db      	uxtb	r3, r3
 8004862:	461a      	mov	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800486c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800486e:	f7fe f8c3 	bl	80029f8 <HAL_GetTick>
 8004872:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b02      	cmp	r3, #2
 8004880:	bf0c      	ite	eq
 8004882:	2301      	moveq	r3, #1
 8004884:	2300      	movne	r3, #0
 8004886:	b2db      	uxtb	r3, r3
 8004888:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004894:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004898:	bf0c      	ite	eq
 800489a:	2301      	moveq	r3, #1
 800489c:	2300      	movne	r3, #0
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80048a2:	e025      	b.n	80048f0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80048a4:	f7fe f8a8 	bl	80029f8 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	683a      	ldr	r2, [r7, #0]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d302      	bcc.n	80048ba <HAL_I2C_IsDeviceReady+0x13a>
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d103      	bne.n	80048c2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	22a0      	movs	r2, #160	; 0xa0
 80048be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	695b      	ldr	r3, [r3, #20]
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	bf0c      	ite	eq
 80048d0:	2301      	moveq	r3, #1
 80048d2:	2300      	movne	r3, #0
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048e6:	bf0c      	ite	eq
 80048e8:	2301      	moveq	r3, #1
 80048ea:	2300      	movne	r3, #0
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2ba0      	cmp	r3, #160	; 0xa0
 80048fa:	d005      	beq.n	8004908 <HAL_I2C_IsDeviceReady+0x188>
 80048fc:	7dfb      	ldrb	r3, [r7, #23]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d102      	bne.n	8004908 <HAL_I2C_IsDeviceReady+0x188>
 8004902:	7dbb      	ldrb	r3, [r7, #22]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d0cd      	beq.n	80048a4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2220      	movs	r2, #32
 800490c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b02      	cmp	r3, #2
 800491c:	d129      	bne.n	8004972 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800492c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800492e:	2300      	movs	r3, #0
 8004930:	613b      	str	r3, [r7, #16]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	695b      	ldr	r3, [r3, #20]
 8004938:	613b      	str	r3, [r7, #16]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	613b      	str	r3, [r7, #16]
 8004942:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	2319      	movs	r3, #25
 800494a:	2201      	movs	r2, #1
 800494c:	4921      	ldr	r1, [pc, #132]	; (80049d4 <HAL_I2C_IsDeviceReady+0x254>)
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f000 f9c2 	bl	8004cd8 <I2C_WaitOnFlagUntilTimeout>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e036      	b.n	80049cc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2220      	movs	r2, #32
 8004962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800496e:	2300      	movs	r3, #0
 8004970:	e02c      	b.n	80049cc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004980:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800498a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	2319      	movs	r3, #25
 8004992:	2201      	movs	r2, #1
 8004994:	490f      	ldr	r1, [pc, #60]	; (80049d4 <HAL_I2C_IsDeviceReady+0x254>)
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	f000 f99e 	bl	8004cd8 <I2C_WaitOnFlagUntilTimeout>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e012      	b.n	80049cc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	3301      	adds	r3, #1
 80049aa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80049ac:	69ba      	ldr	r2, [r7, #24]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	f4ff af32 	bcc.w	800481a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2220      	movs	r2, #32
 80049ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e000      	b.n	80049cc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80049ca:	2302      	movs	r3, #2
  }
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3720      	adds	r7, #32
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	00100002 	.word	0x00100002
 80049d8:	ffff0000 	.word	0xffff0000

080049dc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b088      	sub	sp, #32
 80049e0:	af02      	add	r7, sp, #8
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	4608      	mov	r0, r1
 80049e6:	4611      	mov	r1, r2
 80049e8:	461a      	mov	r2, r3
 80049ea:	4603      	mov	r3, r0
 80049ec:	817b      	strh	r3, [r7, #10]
 80049ee:	460b      	mov	r3, r1
 80049f0:	813b      	strh	r3, [r7, #8]
 80049f2:	4613      	mov	r3, r2
 80049f4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a04:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a08:	9300      	str	r3, [sp, #0]
 8004a0a:	6a3b      	ldr	r3, [r7, #32]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a12:	68f8      	ldr	r0, [r7, #12]
 8004a14:	f000 f960 	bl	8004cd8 <I2C_WaitOnFlagUntilTimeout>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00d      	beq.n	8004a3a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a2c:	d103      	bne.n	8004a36 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a34:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e05f      	b.n	8004afa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a3a:	897b      	ldrh	r3, [r7, #10]
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	461a      	mov	r2, r3
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a48:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4c:	6a3a      	ldr	r2, [r7, #32]
 8004a4e:	492d      	ldr	r1, [pc, #180]	; (8004b04 <I2C_RequestMemoryWrite+0x128>)
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f000 f998 	bl	8004d86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d001      	beq.n	8004a60 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e04c      	b.n	8004afa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a60:	2300      	movs	r3, #0
 8004a62:	617b      	str	r3, [r7, #20]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	617b      	str	r3, [r7, #20]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	617b      	str	r3, [r7, #20]
 8004a74:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a78:	6a39      	ldr	r1, [r7, #32]
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 fa02 	bl	8004e84 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00d      	beq.n	8004aa2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8a:	2b04      	cmp	r3, #4
 8004a8c:	d107      	bne.n	8004a9e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a9c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e02b      	b.n	8004afa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004aa2:	88fb      	ldrh	r3, [r7, #6]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d105      	bne.n	8004ab4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004aa8:	893b      	ldrh	r3, [r7, #8]
 8004aaa:	b2da      	uxtb	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	611a      	str	r2, [r3, #16]
 8004ab2:	e021      	b.n	8004af8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004ab4:	893b      	ldrh	r3, [r7, #8]
 8004ab6:	0a1b      	lsrs	r3, r3, #8
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	b2da      	uxtb	r2, r3
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ac4:	6a39      	ldr	r1, [r7, #32]
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	f000 f9dc 	bl	8004e84 <I2C_WaitOnTXEFlagUntilTimeout>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00d      	beq.n	8004aee <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad6:	2b04      	cmp	r3, #4
 8004ad8:	d107      	bne.n	8004aea <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ae8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e005      	b.n	8004afa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004aee:	893b      	ldrh	r3, [r7, #8]
 8004af0:	b2da      	uxtb	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3718      	adds	r7, #24
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	00010002 	.word	0x00010002

08004b08 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b088      	sub	sp, #32
 8004b0c:	af02      	add	r7, sp, #8
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	4608      	mov	r0, r1
 8004b12:	4611      	mov	r1, r2
 8004b14:	461a      	mov	r2, r3
 8004b16:	4603      	mov	r3, r0
 8004b18:	817b      	strh	r3, [r7, #10]
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	813b      	strh	r3, [r7, #8]
 8004b1e:	4613      	mov	r3, r2
 8004b20:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b30:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b40:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	6a3b      	ldr	r3, [r7, #32]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b4e:	68f8      	ldr	r0, [r7, #12]
 8004b50:	f000 f8c2 	bl	8004cd8 <I2C_WaitOnFlagUntilTimeout>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00d      	beq.n	8004b76 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b68:	d103      	bne.n	8004b72 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b70:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e0aa      	b.n	8004ccc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b76:	897b      	ldrh	r3, [r7, #10]
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b84:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b88:	6a3a      	ldr	r2, [r7, #32]
 8004b8a:	4952      	ldr	r1, [pc, #328]	; (8004cd4 <I2C_RequestMemoryRead+0x1cc>)
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f000 f8fa 	bl	8004d86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d001      	beq.n	8004b9c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e097      	b.n	8004ccc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	617b      	str	r3, [r7, #20]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	617b      	str	r3, [r7, #20]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	617b      	str	r3, [r7, #20]
 8004bb0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bb4:	6a39      	ldr	r1, [r7, #32]
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	f000 f964 	bl	8004e84 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00d      	beq.n	8004bde <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc6:	2b04      	cmp	r3, #4
 8004bc8:	d107      	bne.n	8004bda <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bd8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e076      	b.n	8004ccc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004bde:	88fb      	ldrh	r3, [r7, #6]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d105      	bne.n	8004bf0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004be4:	893b      	ldrh	r3, [r7, #8]
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	611a      	str	r2, [r3, #16]
 8004bee:	e021      	b.n	8004c34 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004bf0:	893b      	ldrh	r3, [r7, #8]
 8004bf2:	0a1b      	lsrs	r3, r3, #8
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	b2da      	uxtb	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c00:	6a39      	ldr	r1, [r7, #32]
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	f000 f93e 	bl	8004e84 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00d      	beq.n	8004c2a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c12:	2b04      	cmp	r3, #4
 8004c14:	d107      	bne.n	8004c26 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c24:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e050      	b.n	8004ccc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c2a:	893b      	ldrh	r3, [r7, #8]
 8004c2c:	b2da      	uxtb	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c36:	6a39      	ldr	r1, [r7, #32]
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f000 f923 	bl	8004e84 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00d      	beq.n	8004c60 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c48:	2b04      	cmp	r3, #4
 8004c4a:	d107      	bne.n	8004c5c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c5a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e035      	b.n	8004ccc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c6e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c72:	9300      	str	r3, [sp, #0]
 8004c74:	6a3b      	ldr	r3, [r7, #32]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f000 f82b 	bl	8004cd8 <I2C_WaitOnFlagUntilTimeout>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00d      	beq.n	8004ca4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c96:	d103      	bne.n	8004ca0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e013      	b.n	8004ccc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004ca4:	897b      	ldrh	r3, [r7, #10]
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	f043 0301 	orr.w	r3, r3, #1
 8004cac:	b2da      	uxtb	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb6:	6a3a      	ldr	r2, [r7, #32]
 8004cb8:	4906      	ldr	r1, [pc, #24]	; (8004cd4 <I2C_RequestMemoryRead+0x1cc>)
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f000 f863 	bl	8004d86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d001      	beq.n	8004cca <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e000      	b.n	8004ccc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3718      	adds	r7, #24
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	00010002 	.word	0x00010002

08004cd8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	603b      	str	r3, [r7, #0]
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ce8:	e025      	b.n	8004d36 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf0:	d021      	beq.n	8004d36 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cf2:	f7fd fe81 	bl	80029f8 <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	683a      	ldr	r2, [r7, #0]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d302      	bcc.n	8004d08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d116      	bne.n	8004d36 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2220      	movs	r2, #32
 8004d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d22:	f043 0220 	orr.w	r2, r3, #32
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e023      	b.n	8004d7e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	0c1b      	lsrs	r3, r3, #16
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d10d      	bne.n	8004d5c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	43da      	mvns	r2, r3
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	bf0c      	ite	eq
 8004d52:	2301      	moveq	r3, #1
 8004d54:	2300      	movne	r3, #0
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	461a      	mov	r2, r3
 8004d5a:	e00c      	b.n	8004d76 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	43da      	mvns	r2, r3
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	4013      	ands	r3, r2
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	bf0c      	ite	eq
 8004d6e:	2301      	moveq	r3, #1
 8004d70:	2300      	movne	r3, #0
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	461a      	mov	r2, r3
 8004d76:	79fb      	ldrb	r3, [r7, #7]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d0b6      	beq.n	8004cea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b084      	sub	sp, #16
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	60f8      	str	r0, [r7, #12]
 8004d8e:	60b9      	str	r1, [r7, #8]
 8004d90:	607a      	str	r2, [r7, #4]
 8004d92:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d94:	e051      	b.n	8004e3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	695b      	ldr	r3, [r3, #20]
 8004d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004da0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004da4:	d123      	bne.n	8004dee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004db4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004dbe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2220      	movs	r2, #32
 8004dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dda:	f043 0204 	orr.w	r2, r3, #4
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e046      	b.n	8004e7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df4:	d021      	beq.n	8004e3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004df6:	f7fd fdff 	bl	80029f8 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d302      	bcc.n	8004e0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d116      	bne.n	8004e3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2220      	movs	r2, #32
 8004e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e26:	f043 0220 	orr.w	r2, r3, #32
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e020      	b.n	8004e7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	0c1b      	lsrs	r3, r3, #16
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d10c      	bne.n	8004e5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	43da      	mvns	r2, r3
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	4013      	ands	r3, r2
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	bf14      	ite	ne
 8004e56:	2301      	movne	r3, #1
 8004e58:	2300      	moveq	r3, #0
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	e00b      	b.n	8004e76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	43da      	mvns	r2, r3
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	bf14      	ite	ne
 8004e70:	2301      	movne	r3, #1
 8004e72:	2300      	moveq	r3, #0
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d18d      	bne.n	8004d96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e90:	e02d      	b.n	8004eee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f000 f8ce 	bl	8005034 <I2C_IsAcknowledgeFailed>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d001      	beq.n	8004ea2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e02d      	b.n	8004efe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea8:	d021      	beq.n	8004eee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eaa:	f7fd fda5 	bl	80029f8 <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	68ba      	ldr	r2, [r7, #8]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d302      	bcc.n	8004ec0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d116      	bne.n	8004eee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2220      	movs	r2, #32
 8004eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eda:	f043 0220 	orr.w	r2, r3, #32
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e007      	b.n	8004efe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	695b      	ldr	r3, [r3, #20]
 8004ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef8:	2b80      	cmp	r3, #128	; 0x80
 8004efa:	d1ca      	bne.n	8004e92 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b084      	sub	sp, #16
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	60f8      	str	r0, [r7, #12]
 8004f0e:	60b9      	str	r1, [r7, #8]
 8004f10:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f12:	e02d      	b.n	8004f70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f14:	68f8      	ldr	r0, [r7, #12]
 8004f16:	f000 f88d 	bl	8005034 <I2C_IsAcknowledgeFailed>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d001      	beq.n	8004f24 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e02d      	b.n	8004f80 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f2a:	d021      	beq.n	8004f70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f2c:	f7fd fd64 	bl	80029f8 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	68ba      	ldr	r2, [r7, #8]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d302      	bcc.n	8004f42 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d116      	bne.n	8004f70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2220      	movs	r2, #32
 8004f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5c:	f043 0220 	orr.w	r2, r3, #32
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e007      	b.n	8004f80 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	f003 0304 	and.w	r3, r3, #4
 8004f7a:	2b04      	cmp	r3, #4
 8004f7c:	d1ca      	bne.n	8004f14 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f94:	e042      	b.n	800501c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	695b      	ldr	r3, [r3, #20]
 8004f9c:	f003 0310 	and.w	r3, r3, #16
 8004fa0:	2b10      	cmp	r3, #16
 8004fa2:	d119      	bne.n	8004fd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f06f 0210 	mvn.w	r2, #16
 8004fac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2220      	movs	r2, #32
 8004fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e029      	b.n	800502c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fd8:	f7fd fd0e 	bl	80029f8 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	68ba      	ldr	r2, [r7, #8]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d302      	bcc.n	8004fee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d116      	bne.n	800501c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2220      	movs	r2, #32
 8004ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005008:	f043 0220 	orr.w	r2, r3, #32
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e007      	b.n	800502c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005026:	2b40      	cmp	r3, #64	; 0x40
 8005028:	d1b5      	bne.n	8004f96 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005046:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800504a:	d11b      	bne.n	8005084 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005054:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2220      	movs	r2, #32
 8005060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005070:	f043 0204 	orr.w	r2, r3, #4
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e000      	b.n	8005086 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	370c      	adds	r7, #12
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
	...

08005094 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b086      	sub	sp, #24
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d101      	bne.n	80050a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e264      	b.n	8005570 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d075      	beq.n	800519e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050b2:	4ba3      	ldr	r3, [pc, #652]	; (8005340 <HAL_RCC_OscConfig+0x2ac>)
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f003 030c 	and.w	r3, r3, #12
 80050ba:	2b04      	cmp	r3, #4
 80050bc:	d00c      	beq.n	80050d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050be:	4ba0      	ldr	r3, [pc, #640]	; (8005340 <HAL_RCC_OscConfig+0x2ac>)
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050c6:	2b08      	cmp	r3, #8
 80050c8:	d112      	bne.n	80050f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050ca:	4b9d      	ldr	r3, [pc, #628]	; (8005340 <HAL_RCC_OscConfig+0x2ac>)
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050d6:	d10b      	bne.n	80050f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050d8:	4b99      	ldr	r3, [pc, #612]	; (8005340 <HAL_RCC_OscConfig+0x2ac>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d05b      	beq.n	800519c <HAL_RCC_OscConfig+0x108>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d157      	bne.n	800519c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e23f      	b.n	8005570 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050f8:	d106      	bne.n	8005108 <HAL_RCC_OscConfig+0x74>
 80050fa:	4b91      	ldr	r3, [pc, #580]	; (8005340 <HAL_RCC_OscConfig+0x2ac>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a90      	ldr	r2, [pc, #576]	; (8005340 <HAL_RCC_OscConfig+0x2ac>)
 8005100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005104:	6013      	str	r3, [r2, #0]
 8005106:	e01d      	b.n	8005144 <HAL_RCC_OscConfig+0xb0>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005110:	d10c      	bne.n	800512c <HAL_RCC_OscConfig+0x98>
 8005112:	4b8b      	ldr	r3, [pc, #556]	; (8005340 <HAL_RCC_OscConfig+0x2ac>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a8a      	ldr	r2, [pc, #552]	; (8005340 <HAL_RCC_OscConfig+0x2ac>)
 8005118:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800511c:	6013      	str	r3, [r2, #0]
 800511e:	4b88      	ldr	r3, [pc, #544]	; (8005340 <HAL_RCC_OscConfig+0x2ac>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a87      	ldr	r2, [pc, #540]	; (8005340 <HAL_RCC_OscConfig+0x2ac>)
 8005124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005128:	6013      	str	r3, [r2, #0]
 800512a:	e00b      	b.n	8005144 <HAL_RCC_OscConfig+0xb0>
 800512c:	4b84      	ldr	r3, [pc, #528]	; (8005340 <HAL_RCC_OscConfig+0x2ac>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a83      	ldr	r2, [pc, #524]	; (8005340 <HAL_RCC_OscConfig+0x2ac>)
 8005132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005136:	6013      	str	r3, [r2, #0]
 8005138:	4b81      	ldr	r3, [pc, #516]	; (8005340 <HAL_RCC_OscConfig+0x2ac>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a80      	ldr	r2, [pc, #512]	; (8005340 <HAL_RCC_OscConfig+0x2ac>)
 800513e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005142:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d013      	beq.n	8005174 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800514c:	f7fd fc54 	bl	80029f8 <HAL_GetTick>
 8005150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005152:	e008      	b.n	8005166 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005154:	f7fd fc50 	bl	80029f8 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b64      	cmp	r3, #100	; 0x64
 8005160:	d901      	bls.n	8005166 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e204      	b.n	8005570 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005166:	4b76      	ldr	r3, [pc, #472]	; (8005340 <HAL_RCC_OscConfig+0x2ac>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d0f0      	beq.n	8005154 <HAL_RCC_OscConfig+0xc0>
 8005172:	e014      	b.n	800519e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005174:	f7fd fc40 	bl	80029f8 <HAL_GetTick>
 8005178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800517a:	e008      	b.n	800518e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800517c:	f7fd fc3c 	bl	80029f8 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	2b64      	cmp	r3, #100	; 0x64
 8005188:	d901      	bls.n	800518e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e1f0      	b.n	8005570 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800518e:	4b6c      	ldr	r3, [pc, #432]	; (8005340 <HAL_RCC_OscConfig+0x2ac>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1f0      	bne.n	800517c <HAL_RCC_OscConfig+0xe8>
 800519a:	e000      	b.n	800519e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800519c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d063      	beq.n	8005272 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051aa:	4b65      	ldr	r3, [pc, #404]	; (8005340 <HAL_RCC_OscConfig+0x2ac>)
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f003 030c 	and.w	r3, r3, #12
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00b      	beq.n	80051ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051b6:	4b62      	ldr	r3, [pc, #392]	; (8005340 <HAL_RCC_OscConfig+0x2ac>)
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051be:	2b08      	cmp	r3, #8
 80051c0:	d11c      	bne.n	80051fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051c2:	4b5f      	ldr	r3, [pc, #380]	; (8005340 <HAL_RCC_OscConfig+0x2ac>)
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d116      	bne.n	80051fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051ce:	4b5c      	ldr	r3, [pc, #368]	; (8005340 <HAL_RCC_OscConfig+0x2ac>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0302 	and.w	r3, r3, #2
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d005      	beq.n	80051e6 <HAL_RCC_OscConfig+0x152>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d001      	beq.n	80051e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e1c4      	b.n	8005570 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051e6:	4b56      	ldr	r3, [pc, #344]	; (8005340 <HAL_RCC_OscConfig+0x2ac>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	00db      	lsls	r3, r3, #3
 80051f4:	4952      	ldr	r1, [pc, #328]	; (8005340 <HAL_RCC_OscConfig+0x2ac>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051fa:	e03a      	b.n	8005272 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d020      	beq.n	8005246 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005204:	4b4f      	ldr	r3, [pc, #316]	; (8005344 <HAL_RCC_OscConfig+0x2b0>)
 8005206:	2201      	movs	r2, #1
 8005208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800520a:	f7fd fbf5 	bl	80029f8 <HAL_GetTick>
 800520e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005210:	e008      	b.n	8005224 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005212:	f7fd fbf1 	bl	80029f8 <HAL_GetTick>
 8005216:	4602      	mov	r2, r0
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	2b02      	cmp	r3, #2
 800521e:	d901      	bls.n	8005224 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e1a5      	b.n	8005570 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005224:	4b46      	ldr	r3, [pc, #280]	; (8005340 <HAL_RCC_OscConfig+0x2ac>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0302 	and.w	r3, r3, #2
 800522c:	2b00      	cmp	r3, #0
 800522e:	d0f0      	beq.n	8005212 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005230:	4b43      	ldr	r3, [pc, #268]	; (8005340 <HAL_RCC_OscConfig+0x2ac>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	00db      	lsls	r3, r3, #3
 800523e:	4940      	ldr	r1, [pc, #256]	; (8005340 <HAL_RCC_OscConfig+0x2ac>)
 8005240:	4313      	orrs	r3, r2
 8005242:	600b      	str	r3, [r1, #0]
 8005244:	e015      	b.n	8005272 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005246:	4b3f      	ldr	r3, [pc, #252]	; (8005344 <HAL_RCC_OscConfig+0x2b0>)
 8005248:	2200      	movs	r2, #0
 800524a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800524c:	f7fd fbd4 	bl	80029f8 <HAL_GetTick>
 8005250:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005252:	e008      	b.n	8005266 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005254:	f7fd fbd0 	bl	80029f8 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	2b02      	cmp	r3, #2
 8005260:	d901      	bls.n	8005266 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e184      	b.n	8005570 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005266:	4b36      	ldr	r3, [pc, #216]	; (8005340 <HAL_RCC_OscConfig+0x2ac>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1f0      	bne.n	8005254 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0308 	and.w	r3, r3, #8
 800527a:	2b00      	cmp	r3, #0
 800527c:	d030      	beq.n	80052e0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d016      	beq.n	80052b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005286:	4b30      	ldr	r3, [pc, #192]	; (8005348 <HAL_RCC_OscConfig+0x2b4>)
 8005288:	2201      	movs	r2, #1
 800528a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800528c:	f7fd fbb4 	bl	80029f8 <HAL_GetTick>
 8005290:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005292:	e008      	b.n	80052a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005294:	f7fd fbb0 	bl	80029f8 <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d901      	bls.n	80052a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e164      	b.n	8005570 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052a6:	4b26      	ldr	r3, [pc, #152]	; (8005340 <HAL_RCC_OscConfig+0x2ac>)
 80052a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052aa:	f003 0302 	and.w	r3, r3, #2
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d0f0      	beq.n	8005294 <HAL_RCC_OscConfig+0x200>
 80052b2:	e015      	b.n	80052e0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052b4:	4b24      	ldr	r3, [pc, #144]	; (8005348 <HAL_RCC_OscConfig+0x2b4>)
 80052b6:	2200      	movs	r2, #0
 80052b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052ba:	f7fd fb9d 	bl	80029f8 <HAL_GetTick>
 80052be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052c0:	e008      	b.n	80052d4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052c2:	f7fd fb99 	bl	80029f8 <HAL_GetTick>
 80052c6:	4602      	mov	r2, r0
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d901      	bls.n	80052d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e14d      	b.n	8005570 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052d4:	4b1a      	ldr	r3, [pc, #104]	; (8005340 <HAL_RCC_OscConfig+0x2ac>)
 80052d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052d8:	f003 0302 	and.w	r3, r3, #2
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d1f0      	bne.n	80052c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0304 	and.w	r3, r3, #4
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	f000 80a0 	beq.w	800542e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052ee:	2300      	movs	r3, #0
 80052f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052f2:	4b13      	ldr	r3, [pc, #76]	; (8005340 <HAL_RCC_OscConfig+0x2ac>)
 80052f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d10f      	bne.n	800531e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052fe:	2300      	movs	r3, #0
 8005300:	60bb      	str	r3, [r7, #8]
 8005302:	4b0f      	ldr	r3, [pc, #60]	; (8005340 <HAL_RCC_OscConfig+0x2ac>)
 8005304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005306:	4a0e      	ldr	r2, [pc, #56]	; (8005340 <HAL_RCC_OscConfig+0x2ac>)
 8005308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800530c:	6413      	str	r3, [r2, #64]	; 0x40
 800530e:	4b0c      	ldr	r3, [pc, #48]	; (8005340 <HAL_RCC_OscConfig+0x2ac>)
 8005310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005316:	60bb      	str	r3, [r7, #8]
 8005318:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800531a:	2301      	movs	r3, #1
 800531c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800531e:	4b0b      	ldr	r3, [pc, #44]	; (800534c <HAL_RCC_OscConfig+0x2b8>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005326:	2b00      	cmp	r3, #0
 8005328:	d121      	bne.n	800536e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800532a:	4b08      	ldr	r3, [pc, #32]	; (800534c <HAL_RCC_OscConfig+0x2b8>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a07      	ldr	r2, [pc, #28]	; (800534c <HAL_RCC_OscConfig+0x2b8>)
 8005330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005334:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005336:	f7fd fb5f 	bl	80029f8 <HAL_GetTick>
 800533a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800533c:	e011      	b.n	8005362 <HAL_RCC_OscConfig+0x2ce>
 800533e:	bf00      	nop
 8005340:	40023800 	.word	0x40023800
 8005344:	42470000 	.word	0x42470000
 8005348:	42470e80 	.word	0x42470e80
 800534c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005350:	f7fd fb52 	bl	80029f8 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b02      	cmp	r3, #2
 800535c:	d901      	bls.n	8005362 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e106      	b.n	8005570 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005362:	4b85      	ldr	r3, [pc, #532]	; (8005578 <HAL_RCC_OscConfig+0x4e4>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800536a:	2b00      	cmp	r3, #0
 800536c:	d0f0      	beq.n	8005350 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d106      	bne.n	8005384 <HAL_RCC_OscConfig+0x2f0>
 8005376:	4b81      	ldr	r3, [pc, #516]	; (800557c <HAL_RCC_OscConfig+0x4e8>)
 8005378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800537a:	4a80      	ldr	r2, [pc, #512]	; (800557c <HAL_RCC_OscConfig+0x4e8>)
 800537c:	f043 0301 	orr.w	r3, r3, #1
 8005380:	6713      	str	r3, [r2, #112]	; 0x70
 8005382:	e01c      	b.n	80053be <HAL_RCC_OscConfig+0x32a>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	2b05      	cmp	r3, #5
 800538a:	d10c      	bne.n	80053a6 <HAL_RCC_OscConfig+0x312>
 800538c:	4b7b      	ldr	r3, [pc, #492]	; (800557c <HAL_RCC_OscConfig+0x4e8>)
 800538e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005390:	4a7a      	ldr	r2, [pc, #488]	; (800557c <HAL_RCC_OscConfig+0x4e8>)
 8005392:	f043 0304 	orr.w	r3, r3, #4
 8005396:	6713      	str	r3, [r2, #112]	; 0x70
 8005398:	4b78      	ldr	r3, [pc, #480]	; (800557c <HAL_RCC_OscConfig+0x4e8>)
 800539a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800539c:	4a77      	ldr	r2, [pc, #476]	; (800557c <HAL_RCC_OscConfig+0x4e8>)
 800539e:	f043 0301 	orr.w	r3, r3, #1
 80053a2:	6713      	str	r3, [r2, #112]	; 0x70
 80053a4:	e00b      	b.n	80053be <HAL_RCC_OscConfig+0x32a>
 80053a6:	4b75      	ldr	r3, [pc, #468]	; (800557c <HAL_RCC_OscConfig+0x4e8>)
 80053a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053aa:	4a74      	ldr	r2, [pc, #464]	; (800557c <HAL_RCC_OscConfig+0x4e8>)
 80053ac:	f023 0301 	bic.w	r3, r3, #1
 80053b0:	6713      	str	r3, [r2, #112]	; 0x70
 80053b2:	4b72      	ldr	r3, [pc, #456]	; (800557c <HAL_RCC_OscConfig+0x4e8>)
 80053b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b6:	4a71      	ldr	r2, [pc, #452]	; (800557c <HAL_RCC_OscConfig+0x4e8>)
 80053b8:	f023 0304 	bic.w	r3, r3, #4
 80053bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d015      	beq.n	80053f2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053c6:	f7fd fb17 	bl	80029f8 <HAL_GetTick>
 80053ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053cc:	e00a      	b.n	80053e4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053ce:	f7fd fb13 	bl	80029f8 <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80053dc:	4293      	cmp	r3, r2
 80053de:	d901      	bls.n	80053e4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e0c5      	b.n	8005570 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053e4:	4b65      	ldr	r3, [pc, #404]	; (800557c <HAL_RCC_OscConfig+0x4e8>)
 80053e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e8:	f003 0302 	and.w	r3, r3, #2
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d0ee      	beq.n	80053ce <HAL_RCC_OscConfig+0x33a>
 80053f0:	e014      	b.n	800541c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053f2:	f7fd fb01 	bl	80029f8 <HAL_GetTick>
 80053f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053f8:	e00a      	b.n	8005410 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053fa:	f7fd fafd 	bl	80029f8 <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	f241 3288 	movw	r2, #5000	; 0x1388
 8005408:	4293      	cmp	r3, r2
 800540a:	d901      	bls.n	8005410 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e0af      	b.n	8005570 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005410:	4b5a      	ldr	r3, [pc, #360]	; (800557c <HAL_RCC_OscConfig+0x4e8>)
 8005412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005414:	f003 0302 	and.w	r3, r3, #2
 8005418:	2b00      	cmp	r3, #0
 800541a:	d1ee      	bne.n	80053fa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800541c:	7dfb      	ldrb	r3, [r7, #23]
 800541e:	2b01      	cmp	r3, #1
 8005420:	d105      	bne.n	800542e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005422:	4b56      	ldr	r3, [pc, #344]	; (800557c <HAL_RCC_OscConfig+0x4e8>)
 8005424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005426:	4a55      	ldr	r2, [pc, #340]	; (800557c <HAL_RCC_OscConfig+0x4e8>)
 8005428:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800542c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	2b00      	cmp	r3, #0
 8005434:	f000 809b 	beq.w	800556e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005438:	4b50      	ldr	r3, [pc, #320]	; (800557c <HAL_RCC_OscConfig+0x4e8>)
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f003 030c 	and.w	r3, r3, #12
 8005440:	2b08      	cmp	r3, #8
 8005442:	d05c      	beq.n	80054fe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	2b02      	cmp	r3, #2
 800544a:	d141      	bne.n	80054d0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800544c:	4b4c      	ldr	r3, [pc, #304]	; (8005580 <HAL_RCC_OscConfig+0x4ec>)
 800544e:	2200      	movs	r2, #0
 8005450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005452:	f7fd fad1 	bl	80029f8 <HAL_GetTick>
 8005456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005458:	e008      	b.n	800546c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800545a:	f7fd facd 	bl	80029f8 <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	2b02      	cmp	r3, #2
 8005466:	d901      	bls.n	800546c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e081      	b.n	8005570 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800546c:	4b43      	ldr	r3, [pc, #268]	; (800557c <HAL_RCC_OscConfig+0x4e8>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1f0      	bne.n	800545a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	69da      	ldr	r2, [r3, #28]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a1b      	ldr	r3, [r3, #32]
 8005480:	431a      	orrs	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005486:	019b      	lsls	r3, r3, #6
 8005488:	431a      	orrs	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800548e:	085b      	lsrs	r3, r3, #1
 8005490:	3b01      	subs	r3, #1
 8005492:	041b      	lsls	r3, r3, #16
 8005494:	431a      	orrs	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549a:	061b      	lsls	r3, r3, #24
 800549c:	4937      	ldr	r1, [pc, #220]	; (800557c <HAL_RCC_OscConfig+0x4e8>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054a2:	4b37      	ldr	r3, [pc, #220]	; (8005580 <HAL_RCC_OscConfig+0x4ec>)
 80054a4:	2201      	movs	r2, #1
 80054a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054a8:	f7fd faa6 	bl	80029f8 <HAL_GetTick>
 80054ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054ae:	e008      	b.n	80054c2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054b0:	f7fd faa2 	bl	80029f8 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e056      	b.n	8005570 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054c2:	4b2e      	ldr	r3, [pc, #184]	; (800557c <HAL_RCC_OscConfig+0x4e8>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d0f0      	beq.n	80054b0 <HAL_RCC_OscConfig+0x41c>
 80054ce:	e04e      	b.n	800556e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054d0:	4b2b      	ldr	r3, [pc, #172]	; (8005580 <HAL_RCC_OscConfig+0x4ec>)
 80054d2:	2200      	movs	r2, #0
 80054d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054d6:	f7fd fa8f 	bl	80029f8 <HAL_GetTick>
 80054da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054dc:	e008      	b.n	80054f0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054de:	f7fd fa8b 	bl	80029f8 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d901      	bls.n	80054f0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e03f      	b.n	8005570 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054f0:	4b22      	ldr	r3, [pc, #136]	; (800557c <HAL_RCC_OscConfig+0x4e8>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1f0      	bne.n	80054de <HAL_RCC_OscConfig+0x44a>
 80054fc:	e037      	b.n	800556e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d101      	bne.n	800550a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e032      	b.n	8005570 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800550a:	4b1c      	ldr	r3, [pc, #112]	; (800557c <HAL_RCC_OscConfig+0x4e8>)
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d028      	beq.n	800556a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005522:	429a      	cmp	r2, r3
 8005524:	d121      	bne.n	800556a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005530:	429a      	cmp	r2, r3
 8005532:	d11a      	bne.n	800556a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800553a:	4013      	ands	r3, r2
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005540:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005542:	4293      	cmp	r3, r2
 8005544:	d111      	bne.n	800556a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005550:	085b      	lsrs	r3, r3, #1
 8005552:	3b01      	subs	r3, #1
 8005554:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005556:	429a      	cmp	r2, r3
 8005558:	d107      	bne.n	800556a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005564:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005566:	429a      	cmp	r2, r3
 8005568:	d001      	beq.n	800556e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e000      	b.n	8005570 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3718      	adds	r7, #24
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	40007000 	.word	0x40007000
 800557c:	40023800 	.word	0x40023800
 8005580:	42470060 	.word	0x42470060

08005584 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d101      	bne.n	8005598 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e0cc      	b.n	8005732 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005598:	4b68      	ldr	r3, [pc, #416]	; (800573c <HAL_RCC_ClockConfig+0x1b8>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0307 	and.w	r3, r3, #7
 80055a0:	683a      	ldr	r2, [r7, #0]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d90c      	bls.n	80055c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055a6:	4b65      	ldr	r3, [pc, #404]	; (800573c <HAL_RCC_ClockConfig+0x1b8>)
 80055a8:	683a      	ldr	r2, [r7, #0]
 80055aa:	b2d2      	uxtb	r2, r2
 80055ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055ae:	4b63      	ldr	r3, [pc, #396]	; (800573c <HAL_RCC_ClockConfig+0x1b8>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0307 	and.w	r3, r3, #7
 80055b6:	683a      	ldr	r2, [r7, #0]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d001      	beq.n	80055c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e0b8      	b.n	8005732 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0302 	and.w	r3, r3, #2
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d020      	beq.n	800560e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0304 	and.w	r3, r3, #4
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d005      	beq.n	80055e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055d8:	4b59      	ldr	r3, [pc, #356]	; (8005740 <HAL_RCC_ClockConfig+0x1bc>)
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	4a58      	ldr	r2, [pc, #352]	; (8005740 <HAL_RCC_ClockConfig+0x1bc>)
 80055de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80055e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0308 	and.w	r3, r3, #8
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d005      	beq.n	80055fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055f0:	4b53      	ldr	r3, [pc, #332]	; (8005740 <HAL_RCC_ClockConfig+0x1bc>)
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	4a52      	ldr	r2, [pc, #328]	; (8005740 <HAL_RCC_ClockConfig+0x1bc>)
 80055f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80055fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055fc:	4b50      	ldr	r3, [pc, #320]	; (8005740 <HAL_RCC_ClockConfig+0x1bc>)
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	494d      	ldr	r1, [pc, #308]	; (8005740 <HAL_RCC_ClockConfig+0x1bc>)
 800560a:	4313      	orrs	r3, r2
 800560c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	2b00      	cmp	r3, #0
 8005618:	d044      	beq.n	80056a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	2b01      	cmp	r3, #1
 8005620:	d107      	bne.n	8005632 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005622:	4b47      	ldr	r3, [pc, #284]	; (8005740 <HAL_RCC_ClockConfig+0x1bc>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d119      	bne.n	8005662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e07f      	b.n	8005732 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	2b02      	cmp	r3, #2
 8005638:	d003      	beq.n	8005642 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800563e:	2b03      	cmp	r3, #3
 8005640:	d107      	bne.n	8005652 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005642:	4b3f      	ldr	r3, [pc, #252]	; (8005740 <HAL_RCC_ClockConfig+0x1bc>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d109      	bne.n	8005662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e06f      	b.n	8005732 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005652:	4b3b      	ldr	r3, [pc, #236]	; (8005740 <HAL_RCC_ClockConfig+0x1bc>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0302 	and.w	r3, r3, #2
 800565a:	2b00      	cmp	r3, #0
 800565c:	d101      	bne.n	8005662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e067      	b.n	8005732 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005662:	4b37      	ldr	r3, [pc, #220]	; (8005740 <HAL_RCC_ClockConfig+0x1bc>)
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	f023 0203 	bic.w	r2, r3, #3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	4934      	ldr	r1, [pc, #208]	; (8005740 <HAL_RCC_ClockConfig+0x1bc>)
 8005670:	4313      	orrs	r3, r2
 8005672:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005674:	f7fd f9c0 	bl	80029f8 <HAL_GetTick>
 8005678:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800567a:	e00a      	b.n	8005692 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800567c:	f7fd f9bc 	bl	80029f8 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	f241 3288 	movw	r2, #5000	; 0x1388
 800568a:	4293      	cmp	r3, r2
 800568c:	d901      	bls.n	8005692 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e04f      	b.n	8005732 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005692:	4b2b      	ldr	r3, [pc, #172]	; (8005740 <HAL_RCC_ClockConfig+0x1bc>)
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	f003 020c 	and.w	r2, r3, #12
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d1eb      	bne.n	800567c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056a4:	4b25      	ldr	r3, [pc, #148]	; (800573c <HAL_RCC_ClockConfig+0x1b8>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0307 	and.w	r3, r3, #7
 80056ac:	683a      	ldr	r2, [r7, #0]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d20c      	bcs.n	80056cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056b2:	4b22      	ldr	r3, [pc, #136]	; (800573c <HAL_RCC_ClockConfig+0x1b8>)
 80056b4:	683a      	ldr	r2, [r7, #0]
 80056b6:	b2d2      	uxtb	r2, r2
 80056b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056ba:	4b20      	ldr	r3, [pc, #128]	; (800573c <HAL_RCC_ClockConfig+0x1b8>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0307 	and.w	r3, r3, #7
 80056c2:	683a      	ldr	r2, [r7, #0]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d001      	beq.n	80056cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e032      	b.n	8005732 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0304 	and.w	r3, r3, #4
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d008      	beq.n	80056ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056d8:	4b19      	ldr	r3, [pc, #100]	; (8005740 <HAL_RCC_ClockConfig+0x1bc>)
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	4916      	ldr	r1, [pc, #88]	; (8005740 <HAL_RCC_ClockConfig+0x1bc>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0308 	and.w	r3, r3, #8
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d009      	beq.n	800570a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056f6:	4b12      	ldr	r3, [pc, #72]	; (8005740 <HAL_RCC_ClockConfig+0x1bc>)
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	00db      	lsls	r3, r3, #3
 8005704:	490e      	ldr	r1, [pc, #56]	; (8005740 <HAL_RCC_ClockConfig+0x1bc>)
 8005706:	4313      	orrs	r3, r2
 8005708:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800570a:	f000 f821 	bl	8005750 <HAL_RCC_GetSysClockFreq>
 800570e:	4602      	mov	r2, r0
 8005710:	4b0b      	ldr	r3, [pc, #44]	; (8005740 <HAL_RCC_ClockConfig+0x1bc>)
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	091b      	lsrs	r3, r3, #4
 8005716:	f003 030f 	and.w	r3, r3, #15
 800571a:	490a      	ldr	r1, [pc, #40]	; (8005744 <HAL_RCC_ClockConfig+0x1c0>)
 800571c:	5ccb      	ldrb	r3, [r1, r3]
 800571e:	fa22 f303 	lsr.w	r3, r2, r3
 8005722:	4a09      	ldr	r2, [pc, #36]	; (8005748 <HAL_RCC_ClockConfig+0x1c4>)
 8005724:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005726:	4b09      	ldr	r3, [pc, #36]	; (800574c <HAL_RCC_ClockConfig+0x1c8>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4618      	mov	r0, r3
 800572c:	f7fd f920 	bl	8002970 <HAL_InitTick>

  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	40023c00 	.word	0x40023c00
 8005740:	40023800 	.word	0x40023800
 8005744:	080079cc 	.word	0x080079cc
 8005748:	20000000 	.word	0x20000000
 800574c:	20000004 	.word	0x20000004

08005750 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005750:	b5b0      	push	{r4, r5, r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005756:	2100      	movs	r1, #0
 8005758:	6079      	str	r1, [r7, #4]
 800575a:	2100      	movs	r1, #0
 800575c:	60f9      	str	r1, [r7, #12]
 800575e:	2100      	movs	r1, #0
 8005760:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005762:	2100      	movs	r1, #0
 8005764:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005766:	4952      	ldr	r1, [pc, #328]	; (80058b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8005768:	6889      	ldr	r1, [r1, #8]
 800576a:	f001 010c 	and.w	r1, r1, #12
 800576e:	2908      	cmp	r1, #8
 8005770:	d00d      	beq.n	800578e <HAL_RCC_GetSysClockFreq+0x3e>
 8005772:	2908      	cmp	r1, #8
 8005774:	f200 8094 	bhi.w	80058a0 <HAL_RCC_GetSysClockFreq+0x150>
 8005778:	2900      	cmp	r1, #0
 800577a:	d002      	beq.n	8005782 <HAL_RCC_GetSysClockFreq+0x32>
 800577c:	2904      	cmp	r1, #4
 800577e:	d003      	beq.n	8005788 <HAL_RCC_GetSysClockFreq+0x38>
 8005780:	e08e      	b.n	80058a0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005782:	4b4c      	ldr	r3, [pc, #304]	; (80058b4 <HAL_RCC_GetSysClockFreq+0x164>)
 8005784:	60bb      	str	r3, [r7, #8]
       break;
 8005786:	e08e      	b.n	80058a6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005788:	4b4b      	ldr	r3, [pc, #300]	; (80058b8 <HAL_RCC_GetSysClockFreq+0x168>)
 800578a:	60bb      	str	r3, [r7, #8]
      break;
 800578c:	e08b      	b.n	80058a6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800578e:	4948      	ldr	r1, [pc, #288]	; (80058b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8005790:	6849      	ldr	r1, [r1, #4]
 8005792:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005796:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005798:	4945      	ldr	r1, [pc, #276]	; (80058b0 <HAL_RCC_GetSysClockFreq+0x160>)
 800579a:	6849      	ldr	r1, [r1, #4]
 800579c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80057a0:	2900      	cmp	r1, #0
 80057a2:	d024      	beq.n	80057ee <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057a4:	4942      	ldr	r1, [pc, #264]	; (80058b0 <HAL_RCC_GetSysClockFreq+0x160>)
 80057a6:	6849      	ldr	r1, [r1, #4]
 80057a8:	0989      	lsrs	r1, r1, #6
 80057aa:	4608      	mov	r0, r1
 80057ac:	f04f 0100 	mov.w	r1, #0
 80057b0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80057b4:	f04f 0500 	mov.w	r5, #0
 80057b8:	ea00 0204 	and.w	r2, r0, r4
 80057bc:	ea01 0305 	and.w	r3, r1, r5
 80057c0:	493d      	ldr	r1, [pc, #244]	; (80058b8 <HAL_RCC_GetSysClockFreq+0x168>)
 80057c2:	fb01 f003 	mul.w	r0, r1, r3
 80057c6:	2100      	movs	r1, #0
 80057c8:	fb01 f102 	mul.w	r1, r1, r2
 80057cc:	1844      	adds	r4, r0, r1
 80057ce:	493a      	ldr	r1, [pc, #232]	; (80058b8 <HAL_RCC_GetSysClockFreq+0x168>)
 80057d0:	fba2 0101 	umull	r0, r1, r2, r1
 80057d4:	1863      	adds	r3, r4, r1
 80057d6:	4619      	mov	r1, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	461a      	mov	r2, r3
 80057dc:	f04f 0300 	mov.w	r3, #0
 80057e0:	f7fb f96c 	bl	8000abc <__aeabi_uldivmod>
 80057e4:	4602      	mov	r2, r0
 80057e6:	460b      	mov	r3, r1
 80057e8:	4613      	mov	r3, r2
 80057ea:	60fb      	str	r3, [r7, #12]
 80057ec:	e04a      	b.n	8005884 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057ee:	4b30      	ldr	r3, [pc, #192]	; (80058b0 <HAL_RCC_GetSysClockFreq+0x160>)
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	099b      	lsrs	r3, r3, #6
 80057f4:	461a      	mov	r2, r3
 80057f6:	f04f 0300 	mov.w	r3, #0
 80057fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80057fe:	f04f 0100 	mov.w	r1, #0
 8005802:	ea02 0400 	and.w	r4, r2, r0
 8005806:	ea03 0501 	and.w	r5, r3, r1
 800580a:	4620      	mov	r0, r4
 800580c:	4629      	mov	r1, r5
 800580e:	f04f 0200 	mov.w	r2, #0
 8005812:	f04f 0300 	mov.w	r3, #0
 8005816:	014b      	lsls	r3, r1, #5
 8005818:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800581c:	0142      	lsls	r2, r0, #5
 800581e:	4610      	mov	r0, r2
 8005820:	4619      	mov	r1, r3
 8005822:	1b00      	subs	r0, r0, r4
 8005824:	eb61 0105 	sbc.w	r1, r1, r5
 8005828:	f04f 0200 	mov.w	r2, #0
 800582c:	f04f 0300 	mov.w	r3, #0
 8005830:	018b      	lsls	r3, r1, #6
 8005832:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005836:	0182      	lsls	r2, r0, #6
 8005838:	1a12      	subs	r2, r2, r0
 800583a:	eb63 0301 	sbc.w	r3, r3, r1
 800583e:	f04f 0000 	mov.w	r0, #0
 8005842:	f04f 0100 	mov.w	r1, #0
 8005846:	00d9      	lsls	r1, r3, #3
 8005848:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800584c:	00d0      	lsls	r0, r2, #3
 800584e:	4602      	mov	r2, r0
 8005850:	460b      	mov	r3, r1
 8005852:	1912      	adds	r2, r2, r4
 8005854:	eb45 0303 	adc.w	r3, r5, r3
 8005858:	f04f 0000 	mov.w	r0, #0
 800585c:	f04f 0100 	mov.w	r1, #0
 8005860:	0299      	lsls	r1, r3, #10
 8005862:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005866:	0290      	lsls	r0, r2, #10
 8005868:	4602      	mov	r2, r0
 800586a:	460b      	mov	r3, r1
 800586c:	4610      	mov	r0, r2
 800586e:	4619      	mov	r1, r3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	461a      	mov	r2, r3
 8005874:	f04f 0300 	mov.w	r3, #0
 8005878:	f7fb f920 	bl	8000abc <__aeabi_uldivmod>
 800587c:	4602      	mov	r2, r0
 800587e:	460b      	mov	r3, r1
 8005880:	4613      	mov	r3, r2
 8005882:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005884:	4b0a      	ldr	r3, [pc, #40]	; (80058b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	0c1b      	lsrs	r3, r3, #16
 800588a:	f003 0303 	and.w	r3, r3, #3
 800588e:	3301      	adds	r3, #1
 8005890:	005b      	lsls	r3, r3, #1
 8005892:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	fbb2 f3f3 	udiv	r3, r2, r3
 800589c:	60bb      	str	r3, [r7, #8]
      break;
 800589e:	e002      	b.n	80058a6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058a0:	4b04      	ldr	r3, [pc, #16]	; (80058b4 <HAL_RCC_GetSysClockFreq+0x164>)
 80058a2:	60bb      	str	r3, [r7, #8]
      break;
 80058a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058a6:	68bb      	ldr	r3, [r7, #8]
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3710      	adds	r7, #16
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bdb0      	pop	{r4, r5, r7, pc}
 80058b0:	40023800 	.word	0x40023800
 80058b4:	00f42400 	.word	0x00f42400
 80058b8:	017d7840 	.word	0x017d7840

080058bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058bc:	b480      	push	{r7}
 80058be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058c0:	4b03      	ldr	r3, [pc, #12]	; (80058d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80058c2:	681b      	ldr	r3, [r3, #0]
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	20000000 	.word	0x20000000

080058d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80058d8:	f7ff fff0 	bl	80058bc <HAL_RCC_GetHCLKFreq>
 80058dc:	4602      	mov	r2, r0
 80058de:	4b05      	ldr	r3, [pc, #20]	; (80058f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	0a9b      	lsrs	r3, r3, #10
 80058e4:	f003 0307 	and.w	r3, r3, #7
 80058e8:	4903      	ldr	r1, [pc, #12]	; (80058f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058ea:	5ccb      	ldrb	r3, [r1, r3]
 80058ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	40023800 	.word	0x40023800
 80058f8:	080079dc 	.word	0x080079dc

080058fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005900:	f7ff ffdc 	bl	80058bc <HAL_RCC_GetHCLKFreq>
 8005904:	4602      	mov	r2, r0
 8005906:	4b05      	ldr	r3, [pc, #20]	; (800591c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	0b5b      	lsrs	r3, r3, #13
 800590c:	f003 0307 	and.w	r3, r3, #7
 8005910:	4903      	ldr	r1, [pc, #12]	; (8005920 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005912:	5ccb      	ldrb	r3, [r1, r3]
 8005914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005918:	4618      	mov	r0, r3
 800591a:	bd80      	pop	{r7, pc}
 800591c:	40023800 	.word	0x40023800
 8005920:	080079dc 	.word	0x080079dc

08005924 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d101      	bne.n	8005936 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e041      	b.n	80059ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800593c:	b2db      	uxtb	r3, r3
 800593e:	2b00      	cmp	r3, #0
 8005940:	d106      	bne.n	8005950 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f7fc fdb0 	bl	80024b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2202      	movs	r2, #2
 8005954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	3304      	adds	r3, #4
 8005960:	4619      	mov	r1, r3
 8005962:	4610      	mov	r0, r2
 8005964:	f000 fa46 	bl	8005df4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3708      	adds	r7, #8
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
	...

080059c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d109      	bne.n	80059e8 <HAL_TIM_PWM_Start+0x24>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	2b01      	cmp	r3, #1
 80059de:	bf14      	ite	ne
 80059e0:	2301      	movne	r3, #1
 80059e2:	2300      	moveq	r3, #0
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	e022      	b.n	8005a2e <HAL_TIM_PWM_Start+0x6a>
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	2b04      	cmp	r3, #4
 80059ec:	d109      	bne.n	8005a02 <HAL_TIM_PWM_Start+0x3e>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	bf14      	ite	ne
 80059fa:	2301      	movne	r3, #1
 80059fc:	2300      	moveq	r3, #0
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	e015      	b.n	8005a2e <HAL_TIM_PWM_Start+0x6a>
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	2b08      	cmp	r3, #8
 8005a06:	d109      	bne.n	8005a1c <HAL_TIM_PWM_Start+0x58>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	bf14      	ite	ne
 8005a14:	2301      	movne	r3, #1
 8005a16:	2300      	moveq	r3, #0
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	e008      	b.n	8005a2e <HAL_TIM_PWM_Start+0x6a>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	bf14      	ite	ne
 8005a28:	2301      	movne	r3, #1
 8005a2a:	2300      	moveq	r3, #0
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d001      	beq.n	8005a36 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e068      	b.n	8005b08 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d104      	bne.n	8005a46 <HAL_TIM_PWM_Start+0x82>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2202      	movs	r2, #2
 8005a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a44:	e013      	b.n	8005a6e <HAL_TIM_PWM_Start+0xaa>
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	2b04      	cmp	r3, #4
 8005a4a:	d104      	bne.n	8005a56 <HAL_TIM_PWM_Start+0x92>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2202      	movs	r2, #2
 8005a50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a54:	e00b      	b.n	8005a6e <HAL_TIM_PWM_Start+0xaa>
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	2b08      	cmp	r3, #8
 8005a5a:	d104      	bne.n	8005a66 <HAL_TIM_PWM_Start+0xa2>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2202      	movs	r2, #2
 8005a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a64:	e003      	b.n	8005a6e <HAL_TIM_PWM_Start+0xaa>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2202      	movs	r2, #2
 8005a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2201      	movs	r2, #1
 8005a74:	6839      	ldr	r1, [r7, #0]
 8005a76:	4618      	mov	r0, r3
 8005a78:	f000 fbc8 	bl	800620c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a23      	ldr	r2, [pc, #140]	; (8005b10 <HAL_TIM_PWM_Start+0x14c>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d107      	bne.n	8005a96 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a94:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a1d      	ldr	r2, [pc, #116]	; (8005b10 <HAL_TIM_PWM_Start+0x14c>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d018      	beq.n	8005ad2 <HAL_TIM_PWM_Start+0x10e>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aa8:	d013      	beq.n	8005ad2 <HAL_TIM_PWM_Start+0x10e>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a19      	ldr	r2, [pc, #100]	; (8005b14 <HAL_TIM_PWM_Start+0x150>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d00e      	beq.n	8005ad2 <HAL_TIM_PWM_Start+0x10e>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a17      	ldr	r2, [pc, #92]	; (8005b18 <HAL_TIM_PWM_Start+0x154>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d009      	beq.n	8005ad2 <HAL_TIM_PWM_Start+0x10e>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a16      	ldr	r2, [pc, #88]	; (8005b1c <HAL_TIM_PWM_Start+0x158>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d004      	beq.n	8005ad2 <HAL_TIM_PWM_Start+0x10e>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a14      	ldr	r2, [pc, #80]	; (8005b20 <HAL_TIM_PWM_Start+0x15c>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d111      	bne.n	8005af6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	f003 0307 	and.w	r3, r3, #7
 8005adc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2b06      	cmp	r3, #6
 8005ae2:	d010      	beq.n	8005b06 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f042 0201 	orr.w	r2, r2, #1
 8005af2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005af4:	e007      	b.n	8005b06 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f042 0201 	orr.w	r2, r2, #1
 8005b04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	40010000 	.word	0x40010000
 8005b14:	40000400 	.word	0x40000400
 8005b18:	40000800 	.word	0x40000800
 8005b1c:	40000c00 	.word	0x40000c00
 8005b20:	40014000 	.word	0x40014000

08005b24 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b086      	sub	sp, #24
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d101      	bne.n	8005b38 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e097      	b.n	8005c68 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d106      	bne.n	8005b52 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f7fc fce7 	bl	8002520 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2202      	movs	r2, #2
 8005b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	6812      	ldr	r2, [r2, #0]
 8005b64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b68:	f023 0307 	bic.w	r3, r3, #7
 8005b6c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	3304      	adds	r3, #4
 8005b76:	4619      	mov	r1, r3
 8005b78:	4610      	mov	r0, r2
 8005b7a:	f000 f93b 	bl	8005df4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	699b      	ldr	r3, [r3, #24]
 8005b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	6a1b      	ldr	r3, [r3, #32]
 8005b94:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ba6:	f023 0303 	bic.w	r3, r3, #3
 8005baa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	689a      	ldr	r2, [r3, #8]
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	699b      	ldr	r3, [r3, #24]
 8005bb4:	021b      	lsls	r3, r3, #8
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005bc4:	f023 030c 	bic.w	r3, r3, #12
 8005bc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005bd0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	68da      	ldr	r2, [r3, #12]
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	69db      	ldr	r3, [r3, #28]
 8005bde:	021b      	lsls	r3, r3, #8
 8005be0:	4313      	orrs	r3, r2
 8005be2:	693a      	ldr	r2, [r7, #16]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	011a      	lsls	r2, r3, #4
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	6a1b      	ldr	r3, [r3, #32]
 8005bf2:	031b      	lsls	r3, r3, #12
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	693a      	ldr	r2, [r7, #16]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005c02:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005c0a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	685a      	ldr	r2, [r3, #4]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	695b      	ldr	r3, [r3, #20]
 8005c14:	011b      	lsls	r3, r3, #4
 8005c16:	4313      	orrs	r3, r2
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	697a      	ldr	r2, [r7, #20]
 8005c24:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	693a      	ldr	r2, [r7, #16]
 8005c2c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2201      	movs	r2, #1
 8005c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2201      	movs	r2, #1
 8005c4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2201      	movs	r2, #1
 8005c52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2201      	movs	r2, #1
 8005c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3718      	adds	r7, #24
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b086      	sub	sp, #24
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d101      	bne.n	8005c8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c8a:	2302      	movs	r3, #2
 8005c8c:	e0ae      	b.n	8005dec <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2201      	movs	r2, #1
 8005c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2b0c      	cmp	r3, #12
 8005c9a:	f200 809f 	bhi.w	8005ddc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005c9e:	a201      	add	r2, pc, #4	; (adr r2, 8005ca4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca4:	08005cd9 	.word	0x08005cd9
 8005ca8:	08005ddd 	.word	0x08005ddd
 8005cac:	08005ddd 	.word	0x08005ddd
 8005cb0:	08005ddd 	.word	0x08005ddd
 8005cb4:	08005d19 	.word	0x08005d19
 8005cb8:	08005ddd 	.word	0x08005ddd
 8005cbc:	08005ddd 	.word	0x08005ddd
 8005cc0:	08005ddd 	.word	0x08005ddd
 8005cc4:	08005d5b 	.word	0x08005d5b
 8005cc8:	08005ddd 	.word	0x08005ddd
 8005ccc:	08005ddd 	.word	0x08005ddd
 8005cd0:	08005ddd 	.word	0x08005ddd
 8005cd4:	08005d9b 	.word	0x08005d9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68b9      	ldr	r1, [r7, #8]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f000 f908 	bl	8005ef4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	699a      	ldr	r2, [r3, #24]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f042 0208 	orr.w	r2, r2, #8
 8005cf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	699a      	ldr	r2, [r3, #24]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f022 0204 	bic.w	r2, r2, #4
 8005d02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	6999      	ldr	r1, [r3, #24]
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	691a      	ldr	r2, [r3, #16]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	430a      	orrs	r2, r1
 8005d14:	619a      	str	r2, [r3, #24]
      break;
 8005d16:	e064      	b.n	8005de2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68b9      	ldr	r1, [r7, #8]
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f000 f94e 	bl	8005fc0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	699a      	ldr	r2, [r3, #24]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	699a      	ldr	r2, [r3, #24]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	6999      	ldr	r1, [r3, #24]
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	021a      	lsls	r2, r3, #8
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	430a      	orrs	r2, r1
 8005d56:	619a      	str	r2, [r3, #24]
      break;
 8005d58:	e043      	b.n	8005de2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68b9      	ldr	r1, [r7, #8]
 8005d60:	4618      	mov	r0, r3
 8005d62:	f000 f999 	bl	8006098 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	69da      	ldr	r2, [r3, #28]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f042 0208 	orr.w	r2, r2, #8
 8005d74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	69da      	ldr	r2, [r3, #28]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f022 0204 	bic.w	r2, r2, #4
 8005d84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	69d9      	ldr	r1, [r3, #28]
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	691a      	ldr	r2, [r3, #16]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	430a      	orrs	r2, r1
 8005d96:	61da      	str	r2, [r3, #28]
      break;
 8005d98:	e023      	b.n	8005de2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68b9      	ldr	r1, [r7, #8]
 8005da0:	4618      	mov	r0, r3
 8005da2:	f000 f9e3 	bl	800616c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	69da      	ldr	r2, [r3, #28]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005db4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	69da      	ldr	r2, [r3, #28]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	69d9      	ldr	r1, [r3, #28]
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	021a      	lsls	r2, r3, #8
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	430a      	orrs	r2, r1
 8005dd8:	61da      	str	r2, [r3, #28]
      break;
 8005dda:	e002      	b.n	8005de2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	75fb      	strb	r3, [r7, #23]
      break;
 8005de0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005dea:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3718      	adds	r7, #24
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a34      	ldr	r2, [pc, #208]	; (8005ed8 <TIM_Base_SetConfig+0xe4>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d00f      	beq.n	8005e2c <TIM_Base_SetConfig+0x38>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e12:	d00b      	beq.n	8005e2c <TIM_Base_SetConfig+0x38>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a31      	ldr	r2, [pc, #196]	; (8005edc <TIM_Base_SetConfig+0xe8>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d007      	beq.n	8005e2c <TIM_Base_SetConfig+0x38>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a30      	ldr	r2, [pc, #192]	; (8005ee0 <TIM_Base_SetConfig+0xec>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d003      	beq.n	8005e2c <TIM_Base_SetConfig+0x38>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a2f      	ldr	r2, [pc, #188]	; (8005ee4 <TIM_Base_SetConfig+0xf0>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d108      	bne.n	8005e3e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a25      	ldr	r2, [pc, #148]	; (8005ed8 <TIM_Base_SetConfig+0xe4>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d01b      	beq.n	8005e7e <TIM_Base_SetConfig+0x8a>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e4c:	d017      	beq.n	8005e7e <TIM_Base_SetConfig+0x8a>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a22      	ldr	r2, [pc, #136]	; (8005edc <TIM_Base_SetConfig+0xe8>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d013      	beq.n	8005e7e <TIM_Base_SetConfig+0x8a>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a21      	ldr	r2, [pc, #132]	; (8005ee0 <TIM_Base_SetConfig+0xec>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d00f      	beq.n	8005e7e <TIM_Base_SetConfig+0x8a>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a20      	ldr	r2, [pc, #128]	; (8005ee4 <TIM_Base_SetConfig+0xf0>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d00b      	beq.n	8005e7e <TIM_Base_SetConfig+0x8a>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a1f      	ldr	r2, [pc, #124]	; (8005ee8 <TIM_Base_SetConfig+0xf4>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d007      	beq.n	8005e7e <TIM_Base_SetConfig+0x8a>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a1e      	ldr	r2, [pc, #120]	; (8005eec <TIM_Base_SetConfig+0xf8>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d003      	beq.n	8005e7e <TIM_Base_SetConfig+0x8a>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a1d      	ldr	r2, [pc, #116]	; (8005ef0 <TIM_Base_SetConfig+0xfc>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d108      	bne.n	8005e90 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	689a      	ldr	r2, [r3, #8]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a08      	ldr	r2, [pc, #32]	; (8005ed8 <TIM_Base_SetConfig+0xe4>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d103      	bne.n	8005ec4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	691a      	ldr	r2, [r3, #16]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	615a      	str	r2, [r3, #20]
}
 8005eca:	bf00      	nop
 8005ecc:	3714      	adds	r7, #20
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	40010000 	.word	0x40010000
 8005edc:	40000400 	.word	0x40000400
 8005ee0:	40000800 	.word	0x40000800
 8005ee4:	40000c00 	.word	0x40000c00
 8005ee8:	40014000 	.word	0x40014000
 8005eec:	40014400 	.word	0x40014400
 8005ef0:	40014800 	.word	0x40014800

08005ef4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b087      	sub	sp, #28
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a1b      	ldr	r3, [r3, #32]
 8005f02:	f023 0201 	bic.w	r2, r3, #1
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a1b      	ldr	r3, [r3, #32]
 8005f0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	699b      	ldr	r3, [r3, #24]
 8005f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f023 0303 	bic.w	r3, r3, #3
 8005f2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68fa      	ldr	r2, [r7, #12]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	f023 0302 	bic.w	r3, r3, #2
 8005f3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	697a      	ldr	r2, [r7, #20]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a1c      	ldr	r2, [pc, #112]	; (8005fbc <TIM_OC1_SetConfig+0xc8>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d10c      	bne.n	8005f6a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	f023 0308 	bic.w	r3, r3, #8
 8005f56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	697a      	ldr	r2, [r7, #20]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	f023 0304 	bic.w	r3, r3, #4
 8005f68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a13      	ldr	r2, [pc, #76]	; (8005fbc <TIM_OC1_SetConfig+0xc8>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d111      	bne.n	8005f96 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	695b      	ldr	r3, [r3, #20]
 8005f86:	693a      	ldr	r2, [r7, #16]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	699b      	ldr	r3, [r3, #24]
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	693a      	ldr	r2, [r7, #16]
 8005f9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	685a      	ldr	r2, [r3, #4]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	621a      	str	r2, [r3, #32]
}
 8005fb0:	bf00      	nop
 8005fb2:	371c      	adds	r7, #28
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr
 8005fbc:	40010000 	.word	0x40010000

08005fc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b087      	sub	sp, #28
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	f023 0210 	bic.w	r2, r3, #16
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a1b      	ldr	r3, [r3, #32]
 8005fda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	699b      	ldr	r3, [r3, #24]
 8005fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ff6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	021b      	lsls	r3, r3, #8
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	4313      	orrs	r3, r2
 8006002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	f023 0320 	bic.w	r3, r3, #32
 800600a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	011b      	lsls	r3, r3, #4
 8006012:	697a      	ldr	r2, [r7, #20]
 8006014:	4313      	orrs	r3, r2
 8006016:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a1e      	ldr	r2, [pc, #120]	; (8006094 <TIM_OC2_SetConfig+0xd4>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d10d      	bne.n	800603c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006026:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	011b      	lsls	r3, r3, #4
 800602e:	697a      	ldr	r2, [r7, #20]
 8006030:	4313      	orrs	r3, r2
 8006032:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800603a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a15      	ldr	r2, [pc, #84]	; (8006094 <TIM_OC2_SetConfig+0xd4>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d113      	bne.n	800606c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800604a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006052:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	695b      	ldr	r3, [r3, #20]
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	693a      	ldr	r2, [r7, #16]
 800605c:	4313      	orrs	r3, r2
 800605e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	699b      	ldr	r3, [r3, #24]
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	693a      	ldr	r2, [r7, #16]
 8006068:	4313      	orrs	r3, r2
 800606a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	693a      	ldr	r2, [r7, #16]
 8006070:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	685a      	ldr	r2, [r3, #4]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	697a      	ldr	r2, [r7, #20]
 8006084:	621a      	str	r2, [r3, #32]
}
 8006086:	bf00      	nop
 8006088:	371c      	adds	r7, #28
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	40010000 	.word	0x40010000

08006098 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006098:	b480      	push	{r7}
 800609a:	b087      	sub	sp, #28
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a1b      	ldr	r3, [r3, #32]
 80060a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a1b      	ldr	r3, [r3, #32]
 80060b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	69db      	ldr	r3, [r3, #28]
 80060be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f023 0303 	bic.w	r3, r3, #3
 80060ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	021b      	lsls	r3, r3, #8
 80060e8:	697a      	ldr	r2, [r7, #20]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4a1d      	ldr	r2, [pc, #116]	; (8006168 <TIM_OC3_SetConfig+0xd0>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d10d      	bne.n	8006112 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	021b      	lsls	r3, r3, #8
 8006104:	697a      	ldr	r2, [r7, #20]
 8006106:	4313      	orrs	r3, r2
 8006108:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006110:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a14      	ldr	r2, [pc, #80]	; (8006168 <TIM_OC3_SetConfig+0xd0>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d113      	bne.n	8006142 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006120:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006128:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	695b      	ldr	r3, [r3, #20]
 800612e:	011b      	lsls	r3, r3, #4
 8006130:	693a      	ldr	r2, [r7, #16]
 8006132:	4313      	orrs	r3, r2
 8006134:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	011b      	lsls	r3, r3, #4
 800613c:	693a      	ldr	r2, [r7, #16]
 800613e:	4313      	orrs	r3, r2
 8006140:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	685a      	ldr	r2, [r3, #4]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	697a      	ldr	r2, [r7, #20]
 800615a:	621a      	str	r2, [r3, #32]
}
 800615c:	bf00      	nop
 800615e:	371c      	adds	r7, #28
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr
 8006168:	40010000 	.word	0x40010000

0800616c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800616c:	b480      	push	{r7}
 800616e:	b087      	sub	sp, #28
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a1b      	ldr	r3, [r3, #32]
 800617a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a1b      	ldr	r3, [r3, #32]
 8006186:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	69db      	ldr	r3, [r3, #28]
 8006192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800619a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	021b      	lsls	r3, r3, #8
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	031b      	lsls	r3, r3, #12
 80061be:	693a      	ldr	r2, [r7, #16]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4a10      	ldr	r2, [pc, #64]	; (8006208 <TIM_OC4_SetConfig+0x9c>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d109      	bne.n	80061e0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	695b      	ldr	r3, [r3, #20]
 80061d8:	019b      	lsls	r3, r3, #6
 80061da:	697a      	ldr	r2, [r7, #20]
 80061dc:	4313      	orrs	r3, r2
 80061de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	697a      	ldr	r2, [r7, #20]
 80061e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	621a      	str	r2, [r3, #32]
}
 80061fa:	bf00      	nop
 80061fc:	371c      	adds	r7, #28
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr
 8006206:	bf00      	nop
 8006208:	40010000 	.word	0x40010000

0800620c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800620c:	b480      	push	{r7}
 800620e:	b087      	sub	sp, #28
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	f003 031f 	and.w	r3, r3, #31
 800621e:	2201      	movs	r2, #1
 8006220:	fa02 f303 	lsl.w	r3, r2, r3
 8006224:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6a1a      	ldr	r2, [r3, #32]
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	43db      	mvns	r3, r3
 800622e:	401a      	ands	r2, r3
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6a1a      	ldr	r2, [r3, #32]
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	f003 031f 	and.w	r3, r3, #31
 800623e:	6879      	ldr	r1, [r7, #4]
 8006240:	fa01 f303 	lsl.w	r3, r1, r3
 8006244:	431a      	orrs	r2, r3
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	621a      	str	r2, [r3, #32]
}
 800624a:	bf00      	nop
 800624c:	371c      	adds	r7, #28
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr
	...

08006258 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006258:	b480      	push	{r7}
 800625a:	b085      	sub	sp, #20
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006268:	2b01      	cmp	r3, #1
 800626a:	d101      	bne.n	8006270 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800626c:	2302      	movs	r3, #2
 800626e:	e050      	b.n	8006312 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2202      	movs	r2, #2
 800627c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006296:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	4313      	orrs	r3, r2
 80062a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a1c      	ldr	r2, [pc, #112]	; (8006320 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d018      	beq.n	80062e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062bc:	d013      	beq.n	80062e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a18      	ldr	r2, [pc, #96]	; (8006324 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d00e      	beq.n	80062e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a16      	ldr	r2, [pc, #88]	; (8006328 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d009      	beq.n	80062e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a15      	ldr	r2, [pc, #84]	; (800632c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d004      	beq.n	80062e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a13      	ldr	r2, [pc, #76]	; (8006330 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d10c      	bne.n	8006300 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	68ba      	ldr	r2, [r7, #8]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68ba      	ldr	r2, [r7, #8]
 80062fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3714      	adds	r7, #20
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop
 8006320:	40010000 	.word	0x40010000
 8006324:	40000400 	.word	0x40000400
 8006328:	40000800 	.word	0x40000800
 800632c:	40000c00 	.word	0x40000c00
 8006330:	40014000 	.word	0x40014000

08006334 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006334:	b480      	push	{r7}
 8006336:	b085      	sub	sp, #20
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800633e:	2300      	movs	r3, #0
 8006340:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006348:	2b01      	cmp	r3, #1
 800634a:	d101      	bne.n	8006350 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800634c:	2302      	movs	r3, #2
 800634e:	e03d      	b.n	80063cc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	4313      	orrs	r3, r2
 8006364:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	4313      	orrs	r3, r2
 8006372:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	4313      	orrs	r3, r2
 8006380:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4313      	orrs	r3, r2
 800638e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	4313      	orrs	r3, r2
 800639c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	695b      	ldr	r3, [r3, #20]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	69db      	ldr	r3, [r3, #28]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3714      	adds	r7, #20
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d101      	bne.n	80063ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e03f      	b.n	800646a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d106      	bne.n	8006404 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f7fc f938 	bl	8002674 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2224      	movs	r2, #36	; 0x24
 8006408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	68da      	ldr	r2, [r3, #12]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800641a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 f929 	bl	8006674 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	691a      	ldr	r2, [r3, #16]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006430:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	695a      	ldr	r2, [r3, #20]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006440:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	68da      	ldr	r2, [r3, #12]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006450:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2220      	movs	r2, #32
 800645c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2220      	movs	r2, #32
 8006464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3708      	adds	r7, #8
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}

08006472 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006472:	b580      	push	{r7, lr}
 8006474:	b08a      	sub	sp, #40	; 0x28
 8006476:	af02      	add	r7, sp, #8
 8006478:	60f8      	str	r0, [r7, #12]
 800647a:	60b9      	str	r1, [r7, #8]
 800647c:	603b      	str	r3, [r7, #0]
 800647e:	4613      	mov	r3, r2
 8006480:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006482:	2300      	movs	r3, #0
 8006484:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800648c:	b2db      	uxtb	r3, r3
 800648e:	2b20      	cmp	r3, #32
 8006490:	d17c      	bne.n	800658c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d002      	beq.n	800649e <HAL_UART_Transmit+0x2c>
 8006498:	88fb      	ldrh	r3, [r7, #6]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d101      	bne.n	80064a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e075      	b.n	800658e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d101      	bne.n	80064b0 <HAL_UART_Transmit+0x3e>
 80064ac:	2302      	movs	r3, #2
 80064ae:	e06e      	b.n	800658e <HAL_UART_Transmit+0x11c>
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2200      	movs	r2, #0
 80064bc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2221      	movs	r2, #33	; 0x21
 80064c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064c6:	f7fc fa97 	bl	80029f8 <HAL_GetTick>
 80064ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	88fa      	ldrh	r2, [r7, #6]
 80064d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	88fa      	ldrh	r2, [r7, #6]
 80064d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064e0:	d108      	bne.n	80064f4 <HAL_UART_Transmit+0x82>
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d104      	bne.n	80064f4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80064ea:	2300      	movs	r3, #0
 80064ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	61bb      	str	r3, [r7, #24]
 80064f2:	e003      	b.n	80064fc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064f8:	2300      	movs	r3, #0
 80064fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2200      	movs	r2, #0
 8006500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006504:	e02a      	b.n	800655c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	9300      	str	r3, [sp, #0]
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	2200      	movs	r2, #0
 800650e:	2180      	movs	r1, #128	; 0x80
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f000 f840 	bl	8006596 <UART_WaitOnFlagUntilTimeout>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d001      	beq.n	8006520 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800651c:	2303      	movs	r3, #3
 800651e:	e036      	b.n	800658e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d10b      	bne.n	800653e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	881b      	ldrh	r3, [r3, #0]
 800652a:	461a      	mov	r2, r3
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006534:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	3302      	adds	r3, #2
 800653a:	61bb      	str	r3, [r7, #24]
 800653c:	e007      	b.n	800654e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	781a      	ldrb	r2, [r3, #0]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	3301      	adds	r3, #1
 800654c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006552:	b29b      	uxth	r3, r3
 8006554:	3b01      	subs	r3, #1
 8006556:	b29a      	uxth	r2, r3
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006560:	b29b      	uxth	r3, r3
 8006562:	2b00      	cmp	r3, #0
 8006564:	d1cf      	bne.n	8006506 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	9300      	str	r3, [sp, #0]
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	2200      	movs	r2, #0
 800656e:	2140      	movs	r1, #64	; 0x40
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f000 f810 	bl	8006596 <UART_WaitOnFlagUntilTimeout>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d001      	beq.n	8006580 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800657c:	2303      	movs	r3, #3
 800657e:	e006      	b.n	800658e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2220      	movs	r2, #32
 8006584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006588:	2300      	movs	r3, #0
 800658a:	e000      	b.n	800658e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800658c:	2302      	movs	r3, #2
  }
}
 800658e:	4618      	mov	r0, r3
 8006590:	3720      	adds	r7, #32
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006596:	b580      	push	{r7, lr}
 8006598:	b090      	sub	sp, #64	; 0x40
 800659a:	af00      	add	r7, sp, #0
 800659c:	60f8      	str	r0, [r7, #12]
 800659e:	60b9      	str	r1, [r7, #8]
 80065a0:	603b      	str	r3, [r7, #0]
 80065a2:	4613      	mov	r3, r2
 80065a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065a6:	e050      	b.n	800664a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ae:	d04c      	beq.n	800664a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80065b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d007      	beq.n	80065c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80065b6:	f7fc fa1f 	bl	80029f8 <HAL_GetTick>
 80065ba:	4602      	mov	r2, r0
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	1ad3      	subs	r3, r2, r3
 80065c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d241      	bcs.n	800664a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	330c      	adds	r3, #12
 80065cc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d0:	e853 3f00 	ldrex	r3, [r3]
 80065d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80065dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	330c      	adds	r3, #12
 80065e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80065e6:	637a      	str	r2, [r7, #52]	; 0x34
 80065e8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80065ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065ee:	e841 2300 	strex	r3, r2, [r1]
 80065f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80065f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d1e5      	bne.n	80065c6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	3314      	adds	r3, #20
 8006600:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	e853 3f00 	ldrex	r3, [r3]
 8006608:	613b      	str	r3, [r7, #16]
   return(result);
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	f023 0301 	bic.w	r3, r3, #1
 8006610:	63bb      	str	r3, [r7, #56]	; 0x38
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	3314      	adds	r3, #20
 8006618:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800661a:	623a      	str	r2, [r7, #32]
 800661c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661e:	69f9      	ldr	r1, [r7, #28]
 8006620:	6a3a      	ldr	r2, [r7, #32]
 8006622:	e841 2300 	strex	r3, r2, [r1]
 8006626:	61bb      	str	r3, [r7, #24]
   return(result);
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d1e5      	bne.n	80065fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2220      	movs	r2, #32
 8006632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2220      	movs	r2, #32
 800663a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006646:	2303      	movs	r3, #3
 8006648:	e00f      	b.n	800666a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	4013      	ands	r3, r2
 8006654:	68ba      	ldr	r2, [r7, #8]
 8006656:	429a      	cmp	r2, r3
 8006658:	bf0c      	ite	eq
 800665a:	2301      	moveq	r3, #1
 800665c:	2300      	movne	r3, #0
 800665e:	b2db      	uxtb	r3, r3
 8006660:	461a      	mov	r2, r3
 8006662:	79fb      	ldrb	r3, [r7, #7]
 8006664:	429a      	cmp	r2, r3
 8006666:	d09f      	beq.n	80065a8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	3740      	adds	r7, #64	; 0x40
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
	...

08006674 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006678:	b09f      	sub	sp, #124	; 0x7c
 800667a:	af00      	add	r7, sp, #0
 800667c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800667e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800668a:	68d9      	ldr	r1, [r3, #12]
 800668c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	ea40 0301 	orr.w	r3, r0, r1
 8006694:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006698:	689a      	ldr	r2, [r3, #8]
 800669a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	431a      	orrs	r2, r3
 80066a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066a2:	695b      	ldr	r3, [r3, #20]
 80066a4:	431a      	orrs	r2, r3
 80066a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066a8:	69db      	ldr	r3, [r3, #28]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80066ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80066b8:	f021 010c 	bic.w	r1, r1, #12
 80066bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066c2:	430b      	orrs	r3, r1
 80066c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80066c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	695b      	ldr	r3, [r3, #20]
 80066cc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80066d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066d2:	6999      	ldr	r1, [r3, #24]
 80066d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	ea40 0301 	orr.w	r3, r0, r1
 80066dc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	4bc5      	ldr	r3, [pc, #788]	; (80069f8 <UART_SetConfig+0x384>)
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d004      	beq.n	80066f2 <UART_SetConfig+0x7e>
 80066e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	4bc3      	ldr	r3, [pc, #780]	; (80069fc <UART_SetConfig+0x388>)
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d103      	bne.n	80066fa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80066f2:	f7ff f903 	bl	80058fc <HAL_RCC_GetPCLK2Freq>
 80066f6:	6778      	str	r0, [r7, #116]	; 0x74
 80066f8:	e002      	b.n	8006700 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80066fa:	f7ff f8eb 	bl	80058d4 <HAL_RCC_GetPCLK1Freq>
 80066fe:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006702:	69db      	ldr	r3, [r3, #28]
 8006704:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006708:	f040 80b6 	bne.w	8006878 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800670c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800670e:	461c      	mov	r4, r3
 8006710:	f04f 0500 	mov.w	r5, #0
 8006714:	4622      	mov	r2, r4
 8006716:	462b      	mov	r3, r5
 8006718:	1891      	adds	r1, r2, r2
 800671a:	6439      	str	r1, [r7, #64]	; 0x40
 800671c:	415b      	adcs	r3, r3
 800671e:	647b      	str	r3, [r7, #68]	; 0x44
 8006720:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006724:	1912      	adds	r2, r2, r4
 8006726:	eb45 0303 	adc.w	r3, r5, r3
 800672a:	f04f 0000 	mov.w	r0, #0
 800672e:	f04f 0100 	mov.w	r1, #0
 8006732:	00d9      	lsls	r1, r3, #3
 8006734:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006738:	00d0      	lsls	r0, r2, #3
 800673a:	4602      	mov	r2, r0
 800673c:	460b      	mov	r3, r1
 800673e:	1911      	adds	r1, r2, r4
 8006740:	6639      	str	r1, [r7, #96]	; 0x60
 8006742:	416b      	adcs	r3, r5
 8006744:	667b      	str	r3, [r7, #100]	; 0x64
 8006746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	461a      	mov	r2, r3
 800674c:	f04f 0300 	mov.w	r3, #0
 8006750:	1891      	adds	r1, r2, r2
 8006752:	63b9      	str	r1, [r7, #56]	; 0x38
 8006754:	415b      	adcs	r3, r3
 8006756:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006758:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800675c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006760:	f7fa f9ac 	bl	8000abc <__aeabi_uldivmod>
 8006764:	4602      	mov	r2, r0
 8006766:	460b      	mov	r3, r1
 8006768:	4ba5      	ldr	r3, [pc, #660]	; (8006a00 <UART_SetConfig+0x38c>)
 800676a:	fba3 2302 	umull	r2, r3, r3, r2
 800676e:	095b      	lsrs	r3, r3, #5
 8006770:	011e      	lsls	r6, r3, #4
 8006772:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006774:	461c      	mov	r4, r3
 8006776:	f04f 0500 	mov.w	r5, #0
 800677a:	4622      	mov	r2, r4
 800677c:	462b      	mov	r3, r5
 800677e:	1891      	adds	r1, r2, r2
 8006780:	6339      	str	r1, [r7, #48]	; 0x30
 8006782:	415b      	adcs	r3, r3
 8006784:	637b      	str	r3, [r7, #52]	; 0x34
 8006786:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800678a:	1912      	adds	r2, r2, r4
 800678c:	eb45 0303 	adc.w	r3, r5, r3
 8006790:	f04f 0000 	mov.w	r0, #0
 8006794:	f04f 0100 	mov.w	r1, #0
 8006798:	00d9      	lsls	r1, r3, #3
 800679a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800679e:	00d0      	lsls	r0, r2, #3
 80067a0:	4602      	mov	r2, r0
 80067a2:	460b      	mov	r3, r1
 80067a4:	1911      	adds	r1, r2, r4
 80067a6:	65b9      	str	r1, [r7, #88]	; 0x58
 80067a8:	416b      	adcs	r3, r5
 80067aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	461a      	mov	r2, r3
 80067b2:	f04f 0300 	mov.w	r3, #0
 80067b6:	1891      	adds	r1, r2, r2
 80067b8:	62b9      	str	r1, [r7, #40]	; 0x28
 80067ba:	415b      	adcs	r3, r3
 80067bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80067c2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80067c6:	f7fa f979 	bl	8000abc <__aeabi_uldivmod>
 80067ca:	4602      	mov	r2, r0
 80067cc:	460b      	mov	r3, r1
 80067ce:	4b8c      	ldr	r3, [pc, #560]	; (8006a00 <UART_SetConfig+0x38c>)
 80067d0:	fba3 1302 	umull	r1, r3, r3, r2
 80067d4:	095b      	lsrs	r3, r3, #5
 80067d6:	2164      	movs	r1, #100	; 0x64
 80067d8:	fb01 f303 	mul.w	r3, r1, r3
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	00db      	lsls	r3, r3, #3
 80067e0:	3332      	adds	r3, #50	; 0x32
 80067e2:	4a87      	ldr	r2, [pc, #540]	; (8006a00 <UART_SetConfig+0x38c>)
 80067e4:	fba2 2303 	umull	r2, r3, r2, r3
 80067e8:	095b      	lsrs	r3, r3, #5
 80067ea:	005b      	lsls	r3, r3, #1
 80067ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80067f0:	441e      	add	r6, r3
 80067f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067f4:	4618      	mov	r0, r3
 80067f6:	f04f 0100 	mov.w	r1, #0
 80067fa:	4602      	mov	r2, r0
 80067fc:	460b      	mov	r3, r1
 80067fe:	1894      	adds	r4, r2, r2
 8006800:	623c      	str	r4, [r7, #32]
 8006802:	415b      	adcs	r3, r3
 8006804:	627b      	str	r3, [r7, #36]	; 0x24
 8006806:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800680a:	1812      	adds	r2, r2, r0
 800680c:	eb41 0303 	adc.w	r3, r1, r3
 8006810:	f04f 0400 	mov.w	r4, #0
 8006814:	f04f 0500 	mov.w	r5, #0
 8006818:	00dd      	lsls	r5, r3, #3
 800681a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800681e:	00d4      	lsls	r4, r2, #3
 8006820:	4622      	mov	r2, r4
 8006822:	462b      	mov	r3, r5
 8006824:	1814      	adds	r4, r2, r0
 8006826:	653c      	str	r4, [r7, #80]	; 0x50
 8006828:	414b      	adcs	r3, r1
 800682a:	657b      	str	r3, [r7, #84]	; 0x54
 800682c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	461a      	mov	r2, r3
 8006832:	f04f 0300 	mov.w	r3, #0
 8006836:	1891      	adds	r1, r2, r2
 8006838:	61b9      	str	r1, [r7, #24]
 800683a:	415b      	adcs	r3, r3
 800683c:	61fb      	str	r3, [r7, #28]
 800683e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006842:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006846:	f7fa f939 	bl	8000abc <__aeabi_uldivmod>
 800684a:	4602      	mov	r2, r0
 800684c:	460b      	mov	r3, r1
 800684e:	4b6c      	ldr	r3, [pc, #432]	; (8006a00 <UART_SetConfig+0x38c>)
 8006850:	fba3 1302 	umull	r1, r3, r3, r2
 8006854:	095b      	lsrs	r3, r3, #5
 8006856:	2164      	movs	r1, #100	; 0x64
 8006858:	fb01 f303 	mul.w	r3, r1, r3
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	00db      	lsls	r3, r3, #3
 8006860:	3332      	adds	r3, #50	; 0x32
 8006862:	4a67      	ldr	r2, [pc, #412]	; (8006a00 <UART_SetConfig+0x38c>)
 8006864:	fba2 2303 	umull	r2, r3, r2, r3
 8006868:	095b      	lsrs	r3, r3, #5
 800686a:	f003 0207 	and.w	r2, r3, #7
 800686e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4432      	add	r2, r6
 8006874:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006876:	e0b9      	b.n	80069ec <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006878:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800687a:	461c      	mov	r4, r3
 800687c:	f04f 0500 	mov.w	r5, #0
 8006880:	4622      	mov	r2, r4
 8006882:	462b      	mov	r3, r5
 8006884:	1891      	adds	r1, r2, r2
 8006886:	6139      	str	r1, [r7, #16]
 8006888:	415b      	adcs	r3, r3
 800688a:	617b      	str	r3, [r7, #20]
 800688c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006890:	1912      	adds	r2, r2, r4
 8006892:	eb45 0303 	adc.w	r3, r5, r3
 8006896:	f04f 0000 	mov.w	r0, #0
 800689a:	f04f 0100 	mov.w	r1, #0
 800689e:	00d9      	lsls	r1, r3, #3
 80068a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80068a4:	00d0      	lsls	r0, r2, #3
 80068a6:	4602      	mov	r2, r0
 80068a8:	460b      	mov	r3, r1
 80068aa:	eb12 0804 	adds.w	r8, r2, r4
 80068ae:	eb43 0905 	adc.w	r9, r3, r5
 80068b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	4618      	mov	r0, r3
 80068b8:	f04f 0100 	mov.w	r1, #0
 80068bc:	f04f 0200 	mov.w	r2, #0
 80068c0:	f04f 0300 	mov.w	r3, #0
 80068c4:	008b      	lsls	r3, r1, #2
 80068c6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80068ca:	0082      	lsls	r2, r0, #2
 80068cc:	4640      	mov	r0, r8
 80068ce:	4649      	mov	r1, r9
 80068d0:	f7fa f8f4 	bl	8000abc <__aeabi_uldivmod>
 80068d4:	4602      	mov	r2, r0
 80068d6:	460b      	mov	r3, r1
 80068d8:	4b49      	ldr	r3, [pc, #292]	; (8006a00 <UART_SetConfig+0x38c>)
 80068da:	fba3 2302 	umull	r2, r3, r3, r2
 80068de:	095b      	lsrs	r3, r3, #5
 80068e0:	011e      	lsls	r6, r3, #4
 80068e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068e4:	4618      	mov	r0, r3
 80068e6:	f04f 0100 	mov.w	r1, #0
 80068ea:	4602      	mov	r2, r0
 80068ec:	460b      	mov	r3, r1
 80068ee:	1894      	adds	r4, r2, r2
 80068f0:	60bc      	str	r4, [r7, #8]
 80068f2:	415b      	adcs	r3, r3
 80068f4:	60fb      	str	r3, [r7, #12]
 80068f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80068fa:	1812      	adds	r2, r2, r0
 80068fc:	eb41 0303 	adc.w	r3, r1, r3
 8006900:	f04f 0400 	mov.w	r4, #0
 8006904:	f04f 0500 	mov.w	r5, #0
 8006908:	00dd      	lsls	r5, r3, #3
 800690a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800690e:	00d4      	lsls	r4, r2, #3
 8006910:	4622      	mov	r2, r4
 8006912:	462b      	mov	r3, r5
 8006914:	1814      	adds	r4, r2, r0
 8006916:	64bc      	str	r4, [r7, #72]	; 0x48
 8006918:	414b      	adcs	r3, r1
 800691a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800691c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	4618      	mov	r0, r3
 8006922:	f04f 0100 	mov.w	r1, #0
 8006926:	f04f 0200 	mov.w	r2, #0
 800692a:	f04f 0300 	mov.w	r3, #0
 800692e:	008b      	lsls	r3, r1, #2
 8006930:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006934:	0082      	lsls	r2, r0, #2
 8006936:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800693a:	f7fa f8bf 	bl	8000abc <__aeabi_uldivmod>
 800693e:	4602      	mov	r2, r0
 8006940:	460b      	mov	r3, r1
 8006942:	4b2f      	ldr	r3, [pc, #188]	; (8006a00 <UART_SetConfig+0x38c>)
 8006944:	fba3 1302 	umull	r1, r3, r3, r2
 8006948:	095b      	lsrs	r3, r3, #5
 800694a:	2164      	movs	r1, #100	; 0x64
 800694c:	fb01 f303 	mul.w	r3, r1, r3
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	011b      	lsls	r3, r3, #4
 8006954:	3332      	adds	r3, #50	; 0x32
 8006956:	4a2a      	ldr	r2, [pc, #168]	; (8006a00 <UART_SetConfig+0x38c>)
 8006958:	fba2 2303 	umull	r2, r3, r2, r3
 800695c:	095b      	lsrs	r3, r3, #5
 800695e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006962:	441e      	add	r6, r3
 8006964:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006966:	4618      	mov	r0, r3
 8006968:	f04f 0100 	mov.w	r1, #0
 800696c:	4602      	mov	r2, r0
 800696e:	460b      	mov	r3, r1
 8006970:	1894      	adds	r4, r2, r2
 8006972:	603c      	str	r4, [r7, #0]
 8006974:	415b      	adcs	r3, r3
 8006976:	607b      	str	r3, [r7, #4]
 8006978:	e9d7 2300 	ldrd	r2, r3, [r7]
 800697c:	1812      	adds	r2, r2, r0
 800697e:	eb41 0303 	adc.w	r3, r1, r3
 8006982:	f04f 0400 	mov.w	r4, #0
 8006986:	f04f 0500 	mov.w	r5, #0
 800698a:	00dd      	lsls	r5, r3, #3
 800698c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006990:	00d4      	lsls	r4, r2, #3
 8006992:	4622      	mov	r2, r4
 8006994:	462b      	mov	r3, r5
 8006996:	eb12 0a00 	adds.w	sl, r2, r0
 800699a:	eb43 0b01 	adc.w	fp, r3, r1
 800699e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	4618      	mov	r0, r3
 80069a4:	f04f 0100 	mov.w	r1, #0
 80069a8:	f04f 0200 	mov.w	r2, #0
 80069ac:	f04f 0300 	mov.w	r3, #0
 80069b0:	008b      	lsls	r3, r1, #2
 80069b2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80069b6:	0082      	lsls	r2, r0, #2
 80069b8:	4650      	mov	r0, sl
 80069ba:	4659      	mov	r1, fp
 80069bc:	f7fa f87e 	bl	8000abc <__aeabi_uldivmod>
 80069c0:	4602      	mov	r2, r0
 80069c2:	460b      	mov	r3, r1
 80069c4:	4b0e      	ldr	r3, [pc, #56]	; (8006a00 <UART_SetConfig+0x38c>)
 80069c6:	fba3 1302 	umull	r1, r3, r3, r2
 80069ca:	095b      	lsrs	r3, r3, #5
 80069cc:	2164      	movs	r1, #100	; 0x64
 80069ce:	fb01 f303 	mul.w	r3, r1, r3
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	011b      	lsls	r3, r3, #4
 80069d6:	3332      	adds	r3, #50	; 0x32
 80069d8:	4a09      	ldr	r2, [pc, #36]	; (8006a00 <UART_SetConfig+0x38c>)
 80069da:	fba2 2303 	umull	r2, r3, r2, r3
 80069de:	095b      	lsrs	r3, r3, #5
 80069e0:	f003 020f 	and.w	r2, r3, #15
 80069e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4432      	add	r2, r6
 80069ea:	609a      	str	r2, [r3, #8]
}
 80069ec:	bf00      	nop
 80069ee:	377c      	adds	r7, #124	; 0x7c
 80069f0:	46bd      	mov	sp, r7
 80069f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069f6:	bf00      	nop
 80069f8:	40011000 	.word	0x40011000
 80069fc:	40011400 	.word	0x40011400
 8006a00:	51eb851f 	.word	0x51eb851f

08006a04 <__errno>:
 8006a04:	4b01      	ldr	r3, [pc, #4]	; (8006a0c <__errno+0x8>)
 8006a06:	6818      	ldr	r0, [r3, #0]
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop
 8006a0c:	2000000c 	.word	0x2000000c

08006a10 <__libc_init_array>:
 8006a10:	b570      	push	{r4, r5, r6, lr}
 8006a12:	4d0d      	ldr	r5, [pc, #52]	; (8006a48 <__libc_init_array+0x38>)
 8006a14:	4c0d      	ldr	r4, [pc, #52]	; (8006a4c <__libc_init_array+0x3c>)
 8006a16:	1b64      	subs	r4, r4, r5
 8006a18:	10a4      	asrs	r4, r4, #2
 8006a1a:	2600      	movs	r6, #0
 8006a1c:	42a6      	cmp	r6, r4
 8006a1e:	d109      	bne.n	8006a34 <__libc_init_array+0x24>
 8006a20:	4d0b      	ldr	r5, [pc, #44]	; (8006a50 <__libc_init_array+0x40>)
 8006a22:	4c0c      	ldr	r4, [pc, #48]	; (8006a54 <__libc_init_array+0x44>)
 8006a24:	f000 ff76 	bl	8007914 <_init>
 8006a28:	1b64      	subs	r4, r4, r5
 8006a2a:	10a4      	asrs	r4, r4, #2
 8006a2c:	2600      	movs	r6, #0
 8006a2e:	42a6      	cmp	r6, r4
 8006a30:	d105      	bne.n	8006a3e <__libc_init_array+0x2e>
 8006a32:	bd70      	pop	{r4, r5, r6, pc}
 8006a34:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a38:	4798      	blx	r3
 8006a3a:	3601      	adds	r6, #1
 8006a3c:	e7ee      	b.n	8006a1c <__libc_init_array+0xc>
 8006a3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a42:	4798      	blx	r3
 8006a44:	3601      	adds	r6, #1
 8006a46:	e7f2      	b.n	8006a2e <__libc_init_array+0x1e>
 8006a48:	08007a8c 	.word	0x08007a8c
 8006a4c:	08007a8c 	.word	0x08007a8c
 8006a50:	08007a8c 	.word	0x08007a8c
 8006a54:	08007a90 	.word	0x08007a90

08006a58 <memset>:
 8006a58:	4402      	add	r2, r0
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d100      	bne.n	8006a62 <memset+0xa>
 8006a60:	4770      	bx	lr
 8006a62:	f803 1b01 	strb.w	r1, [r3], #1
 8006a66:	e7f9      	b.n	8006a5c <memset+0x4>

08006a68 <iprintf>:
 8006a68:	b40f      	push	{r0, r1, r2, r3}
 8006a6a:	4b0a      	ldr	r3, [pc, #40]	; (8006a94 <iprintf+0x2c>)
 8006a6c:	b513      	push	{r0, r1, r4, lr}
 8006a6e:	681c      	ldr	r4, [r3, #0]
 8006a70:	b124      	cbz	r4, 8006a7c <iprintf+0x14>
 8006a72:	69a3      	ldr	r3, [r4, #24]
 8006a74:	b913      	cbnz	r3, 8006a7c <iprintf+0x14>
 8006a76:	4620      	mov	r0, r4
 8006a78:	f000 f866 	bl	8006b48 <__sinit>
 8006a7c:	ab05      	add	r3, sp, #20
 8006a7e:	9a04      	ldr	r2, [sp, #16]
 8006a80:	68a1      	ldr	r1, [r4, #8]
 8006a82:	9301      	str	r3, [sp, #4]
 8006a84:	4620      	mov	r0, r4
 8006a86:	f000 f983 	bl	8006d90 <_vfiprintf_r>
 8006a8a:	b002      	add	sp, #8
 8006a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a90:	b004      	add	sp, #16
 8006a92:	4770      	bx	lr
 8006a94:	2000000c 	.word	0x2000000c

08006a98 <std>:
 8006a98:	2300      	movs	r3, #0
 8006a9a:	b510      	push	{r4, lr}
 8006a9c:	4604      	mov	r4, r0
 8006a9e:	e9c0 3300 	strd	r3, r3, [r0]
 8006aa2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006aa6:	6083      	str	r3, [r0, #8]
 8006aa8:	8181      	strh	r1, [r0, #12]
 8006aaa:	6643      	str	r3, [r0, #100]	; 0x64
 8006aac:	81c2      	strh	r2, [r0, #14]
 8006aae:	6183      	str	r3, [r0, #24]
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	2208      	movs	r2, #8
 8006ab4:	305c      	adds	r0, #92	; 0x5c
 8006ab6:	f7ff ffcf 	bl	8006a58 <memset>
 8006aba:	4b05      	ldr	r3, [pc, #20]	; (8006ad0 <std+0x38>)
 8006abc:	6263      	str	r3, [r4, #36]	; 0x24
 8006abe:	4b05      	ldr	r3, [pc, #20]	; (8006ad4 <std+0x3c>)
 8006ac0:	62a3      	str	r3, [r4, #40]	; 0x28
 8006ac2:	4b05      	ldr	r3, [pc, #20]	; (8006ad8 <std+0x40>)
 8006ac4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ac6:	4b05      	ldr	r3, [pc, #20]	; (8006adc <std+0x44>)
 8006ac8:	6224      	str	r4, [r4, #32]
 8006aca:	6323      	str	r3, [r4, #48]	; 0x30
 8006acc:	bd10      	pop	{r4, pc}
 8006ace:	bf00      	nop
 8006ad0:	08007339 	.word	0x08007339
 8006ad4:	0800735b 	.word	0x0800735b
 8006ad8:	08007393 	.word	0x08007393
 8006adc:	080073b7 	.word	0x080073b7

08006ae0 <_cleanup_r>:
 8006ae0:	4901      	ldr	r1, [pc, #4]	; (8006ae8 <_cleanup_r+0x8>)
 8006ae2:	f000 b8af 	b.w	8006c44 <_fwalk_reent>
 8006ae6:	bf00      	nop
 8006ae8:	08007691 	.word	0x08007691

08006aec <__sfmoreglue>:
 8006aec:	b570      	push	{r4, r5, r6, lr}
 8006aee:	1e4a      	subs	r2, r1, #1
 8006af0:	2568      	movs	r5, #104	; 0x68
 8006af2:	4355      	muls	r5, r2
 8006af4:	460e      	mov	r6, r1
 8006af6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006afa:	f000 f8c5 	bl	8006c88 <_malloc_r>
 8006afe:	4604      	mov	r4, r0
 8006b00:	b140      	cbz	r0, 8006b14 <__sfmoreglue+0x28>
 8006b02:	2100      	movs	r1, #0
 8006b04:	e9c0 1600 	strd	r1, r6, [r0]
 8006b08:	300c      	adds	r0, #12
 8006b0a:	60a0      	str	r0, [r4, #8]
 8006b0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006b10:	f7ff ffa2 	bl	8006a58 <memset>
 8006b14:	4620      	mov	r0, r4
 8006b16:	bd70      	pop	{r4, r5, r6, pc}

08006b18 <__sfp_lock_acquire>:
 8006b18:	4801      	ldr	r0, [pc, #4]	; (8006b20 <__sfp_lock_acquire+0x8>)
 8006b1a:	f000 b8b3 	b.w	8006c84 <__retarget_lock_acquire_recursive>
 8006b1e:	bf00      	nop
 8006b20:	2000036c 	.word	0x2000036c

08006b24 <__sfp_lock_release>:
 8006b24:	4801      	ldr	r0, [pc, #4]	; (8006b2c <__sfp_lock_release+0x8>)
 8006b26:	f000 b8ae 	b.w	8006c86 <__retarget_lock_release_recursive>
 8006b2a:	bf00      	nop
 8006b2c:	2000036c 	.word	0x2000036c

08006b30 <__sinit_lock_acquire>:
 8006b30:	4801      	ldr	r0, [pc, #4]	; (8006b38 <__sinit_lock_acquire+0x8>)
 8006b32:	f000 b8a7 	b.w	8006c84 <__retarget_lock_acquire_recursive>
 8006b36:	bf00      	nop
 8006b38:	20000367 	.word	0x20000367

08006b3c <__sinit_lock_release>:
 8006b3c:	4801      	ldr	r0, [pc, #4]	; (8006b44 <__sinit_lock_release+0x8>)
 8006b3e:	f000 b8a2 	b.w	8006c86 <__retarget_lock_release_recursive>
 8006b42:	bf00      	nop
 8006b44:	20000367 	.word	0x20000367

08006b48 <__sinit>:
 8006b48:	b510      	push	{r4, lr}
 8006b4a:	4604      	mov	r4, r0
 8006b4c:	f7ff fff0 	bl	8006b30 <__sinit_lock_acquire>
 8006b50:	69a3      	ldr	r3, [r4, #24]
 8006b52:	b11b      	cbz	r3, 8006b5c <__sinit+0x14>
 8006b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b58:	f7ff bff0 	b.w	8006b3c <__sinit_lock_release>
 8006b5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006b60:	6523      	str	r3, [r4, #80]	; 0x50
 8006b62:	4b13      	ldr	r3, [pc, #76]	; (8006bb0 <__sinit+0x68>)
 8006b64:	4a13      	ldr	r2, [pc, #76]	; (8006bb4 <__sinit+0x6c>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	62a2      	str	r2, [r4, #40]	; 0x28
 8006b6a:	42a3      	cmp	r3, r4
 8006b6c:	bf04      	itt	eq
 8006b6e:	2301      	moveq	r3, #1
 8006b70:	61a3      	streq	r3, [r4, #24]
 8006b72:	4620      	mov	r0, r4
 8006b74:	f000 f820 	bl	8006bb8 <__sfp>
 8006b78:	6060      	str	r0, [r4, #4]
 8006b7a:	4620      	mov	r0, r4
 8006b7c:	f000 f81c 	bl	8006bb8 <__sfp>
 8006b80:	60a0      	str	r0, [r4, #8]
 8006b82:	4620      	mov	r0, r4
 8006b84:	f000 f818 	bl	8006bb8 <__sfp>
 8006b88:	2200      	movs	r2, #0
 8006b8a:	60e0      	str	r0, [r4, #12]
 8006b8c:	2104      	movs	r1, #4
 8006b8e:	6860      	ldr	r0, [r4, #4]
 8006b90:	f7ff ff82 	bl	8006a98 <std>
 8006b94:	68a0      	ldr	r0, [r4, #8]
 8006b96:	2201      	movs	r2, #1
 8006b98:	2109      	movs	r1, #9
 8006b9a:	f7ff ff7d 	bl	8006a98 <std>
 8006b9e:	68e0      	ldr	r0, [r4, #12]
 8006ba0:	2202      	movs	r2, #2
 8006ba2:	2112      	movs	r1, #18
 8006ba4:	f7ff ff78 	bl	8006a98 <std>
 8006ba8:	2301      	movs	r3, #1
 8006baa:	61a3      	str	r3, [r4, #24]
 8006bac:	e7d2      	b.n	8006b54 <__sinit+0xc>
 8006bae:	bf00      	nop
 8006bb0:	080079ec 	.word	0x080079ec
 8006bb4:	08006ae1 	.word	0x08006ae1

08006bb8 <__sfp>:
 8006bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bba:	4607      	mov	r7, r0
 8006bbc:	f7ff ffac 	bl	8006b18 <__sfp_lock_acquire>
 8006bc0:	4b1e      	ldr	r3, [pc, #120]	; (8006c3c <__sfp+0x84>)
 8006bc2:	681e      	ldr	r6, [r3, #0]
 8006bc4:	69b3      	ldr	r3, [r6, #24]
 8006bc6:	b913      	cbnz	r3, 8006bce <__sfp+0x16>
 8006bc8:	4630      	mov	r0, r6
 8006bca:	f7ff ffbd 	bl	8006b48 <__sinit>
 8006bce:	3648      	adds	r6, #72	; 0x48
 8006bd0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006bd4:	3b01      	subs	r3, #1
 8006bd6:	d503      	bpl.n	8006be0 <__sfp+0x28>
 8006bd8:	6833      	ldr	r3, [r6, #0]
 8006bda:	b30b      	cbz	r3, 8006c20 <__sfp+0x68>
 8006bdc:	6836      	ldr	r6, [r6, #0]
 8006bde:	e7f7      	b.n	8006bd0 <__sfp+0x18>
 8006be0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006be4:	b9d5      	cbnz	r5, 8006c1c <__sfp+0x64>
 8006be6:	4b16      	ldr	r3, [pc, #88]	; (8006c40 <__sfp+0x88>)
 8006be8:	60e3      	str	r3, [r4, #12]
 8006bea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006bee:	6665      	str	r5, [r4, #100]	; 0x64
 8006bf0:	f000 f847 	bl	8006c82 <__retarget_lock_init_recursive>
 8006bf4:	f7ff ff96 	bl	8006b24 <__sfp_lock_release>
 8006bf8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006bfc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006c00:	6025      	str	r5, [r4, #0]
 8006c02:	61a5      	str	r5, [r4, #24]
 8006c04:	2208      	movs	r2, #8
 8006c06:	4629      	mov	r1, r5
 8006c08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006c0c:	f7ff ff24 	bl	8006a58 <memset>
 8006c10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006c14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006c18:	4620      	mov	r0, r4
 8006c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c1c:	3468      	adds	r4, #104	; 0x68
 8006c1e:	e7d9      	b.n	8006bd4 <__sfp+0x1c>
 8006c20:	2104      	movs	r1, #4
 8006c22:	4638      	mov	r0, r7
 8006c24:	f7ff ff62 	bl	8006aec <__sfmoreglue>
 8006c28:	4604      	mov	r4, r0
 8006c2a:	6030      	str	r0, [r6, #0]
 8006c2c:	2800      	cmp	r0, #0
 8006c2e:	d1d5      	bne.n	8006bdc <__sfp+0x24>
 8006c30:	f7ff ff78 	bl	8006b24 <__sfp_lock_release>
 8006c34:	230c      	movs	r3, #12
 8006c36:	603b      	str	r3, [r7, #0]
 8006c38:	e7ee      	b.n	8006c18 <__sfp+0x60>
 8006c3a:	bf00      	nop
 8006c3c:	080079ec 	.word	0x080079ec
 8006c40:	ffff0001 	.word	0xffff0001

08006c44 <_fwalk_reent>:
 8006c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c48:	4606      	mov	r6, r0
 8006c4a:	4688      	mov	r8, r1
 8006c4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006c50:	2700      	movs	r7, #0
 8006c52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c56:	f1b9 0901 	subs.w	r9, r9, #1
 8006c5a:	d505      	bpl.n	8006c68 <_fwalk_reent+0x24>
 8006c5c:	6824      	ldr	r4, [r4, #0]
 8006c5e:	2c00      	cmp	r4, #0
 8006c60:	d1f7      	bne.n	8006c52 <_fwalk_reent+0xe>
 8006c62:	4638      	mov	r0, r7
 8006c64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c68:	89ab      	ldrh	r3, [r5, #12]
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d907      	bls.n	8006c7e <_fwalk_reent+0x3a>
 8006c6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c72:	3301      	adds	r3, #1
 8006c74:	d003      	beq.n	8006c7e <_fwalk_reent+0x3a>
 8006c76:	4629      	mov	r1, r5
 8006c78:	4630      	mov	r0, r6
 8006c7a:	47c0      	blx	r8
 8006c7c:	4307      	orrs	r7, r0
 8006c7e:	3568      	adds	r5, #104	; 0x68
 8006c80:	e7e9      	b.n	8006c56 <_fwalk_reent+0x12>

08006c82 <__retarget_lock_init_recursive>:
 8006c82:	4770      	bx	lr

08006c84 <__retarget_lock_acquire_recursive>:
 8006c84:	4770      	bx	lr

08006c86 <__retarget_lock_release_recursive>:
 8006c86:	4770      	bx	lr

08006c88 <_malloc_r>:
 8006c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c8a:	1ccd      	adds	r5, r1, #3
 8006c8c:	f025 0503 	bic.w	r5, r5, #3
 8006c90:	3508      	adds	r5, #8
 8006c92:	2d0c      	cmp	r5, #12
 8006c94:	bf38      	it	cc
 8006c96:	250c      	movcc	r5, #12
 8006c98:	2d00      	cmp	r5, #0
 8006c9a:	4606      	mov	r6, r0
 8006c9c:	db01      	blt.n	8006ca2 <_malloc_r+0x1a>
 8006c9e:	42a9      	cmp	r1, r5
 8006ca0:	d903      	bls.n	8006caa <_malloc_r+0x22>
 8006ca2:	230c      	movs	r3, #12
 8006ca4:	6033      	str	r3, [r6, #0]
 8006ca6:	2000      	movs	r0, #0
 8006ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006caa:	f000 fda3 	bl	80077f4 <__malloc_lock>
 8006cae:	4921      	ldr	r1, [pc, #132]	; (8006d34 <_malloc_r+0xac>)
 8006cb0:	680a      	ldr	r2, [r1, #0]
 8006cb2:	4614      	mov	r4, r2
 8006cb4:	b99c      	cbnz	r4, 8006cde <_malloc_r+0x56>
 8006cb6:	4f20      	ldr	r7, [pc, #128]	; (8006d38 <_malloc_r+0xb0>)
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	b923      	cbnz	r3, 8006cc6 <_malloc_r+0x3e>
 8006cbc:	4621      	mov	r1, r4
 8006cbe:	4630      	mov	r0, r6
 8006cc0:	f000 fb2a 	bl	8007318 <_sbrk_r>
 8006cc4:	6038      	str	r0, [r7, #0]
 8006cc6:	4629      	mov	r1, r5
 8006cc8:	4630      	mov	r0, r6
 8006cca:	f000 fb25 	bl	8007318 <_sbrk_r>
 8006cce:	1c43      	adds	r3, r0, #1
 8006cd0:	d123      	bne.n	8006d1a <_malloc_r+0x92>
 8006cd2:	230c      	movs	r3, #12
 8006cd4:	6033      	str	r3, [r6, #0]
 8006cd6:	4630      	mov	r0, r6
 8006cd8:	f000 fd92 	bl	8007800 <__malloc_unlock>
 8006cdc:	e7e3      	b.n	8006ca6 <_malloc_r+0x1e>
 8006cde:	6823      	ldr	r3, [r4, #0]
 8006ce0:	1b5b      	subs	r3, r3, r5
 8006ce2:	d417      	bmi.n	8006d14 <_malloc_r+0x8c>
 8006ce4:	2b0b      	cmp	r3, #11
 8006ce6:	d903      	bls.n	8006cf0 <_malloc_r+0x68>
 8006ce8:	6023      	str	r3, [r4, #0]
 8006cea:	441c      	add	r4, r3
 8006cec:	6025      	str	r5, [r4, #0]
 8006cee:	e004      	b.n	8006cfa <_malloc_r+0x72>
 8006cf0:	6863      	ldr	r3, [r4, #4]
 8006cf2:	42a2      	cmp	r2, r4
 8006cf4:	bf0c      	ite	eq
 8006cf6:	600b      	streq	r3, [r1, #0]
 8006cf8:	6053      	strne	r3, [r2, #4]
 8006cfa:	4630      	mov	r0, r6
 8006cfc:	f000 fd80 	bl	8007800 <__malloc_unlock>
 8006d00:	f104 000b 	add.w	r0, r4, #11
 8006d04:	1d23      	adds	r3, r4, #4
 8006d06:	f020 0007 	bic.w	r0, r0, #7
 8006d0a:	1ac2      	subs	r2, r0, r3
 8006d0c:	d0cc      	beq.n	8006ca8 <_malloc_r+0x20>
 8006d0e:	1a1b      	subs	r3, r3, r0
 8006d10:	50a3      	str	r3, [r4, r2]
 8006d12:	e7c9      	b.n	8006ca8 <_malloc_r+0x20>
 8006d14:	4622      	mov	r2, r4
 8006d16:	6864      	ldr	r4, [r4, #4]
 8006d18:	e7cc      	b.n	8006cb4 <_malloc_r+0x2c>
 8006d1a:	1cc4      	adds	r4, r0, #3
 8006d1c:	f024 0403 	bic.w	r4, r4, #3
 8006d20:	42a0      	cmp	r0, r4
 8006d22:	d0e3      	beq.n	8006cec <_malloc_r+0x64>
 8006d24:	1a21      	subs	r1, r4, r0
 8006d26:	4630      	mov	r0, r6
 8006d28:	f000 faf6 	bl	8007318 <_sbrk_r>
 8006d2c:	3001      	adds	r0, #1
 8006d2e:	d1dd      	bne.n	8006cec <_malloc_r+0x64>
 8006d30:	e7cf      	b.n	8006cd2 <_malloc_r+0x4a>
 8006d32:	bf00      	nop
 8006d34:	2000009c 	.word	0x2000009c
 8006d38:	200000a0 	.word	0x200000a0

08006d3c <__sfputc_r>:
 8006d3c:	6893      	ldr	r3, [r2, #8]
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	b410      	push	{r4}
 8006d44:	6093      	str	r3, [r2, #8]
 8006d46:	da08      	bge.n	8006d5a <__sfputc_r+0x1e>
 8006d48:	6994      	ldr	r4, [r2, #24]
 8006d4a:	42a3      	cmp	r3, r4
 8006d4c:	db01      	blt.n	8006d52 <__sfputc_r+0x16>
 8006d4e:	290a      	cmp	r1, #10
 8006d50:	d103      	bne.n	8006d5a <__sfputc_r+0x1e>
 8006d52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d56:	f000 bb33 	b.w	80073c0 <__swbuf_r>
 8006d5a:	6813      	ldr	r3, [r2, #0]
 8006d5c:	1c58      	adds	r0, r3, #1
 8006d5e:	6010      	str	r0, [r2, #0]
 8006d60:	7019      	strb	r1, [r3, #0]
 8006d62:	4608      	mov	r0, r1
 8006d64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d68:	4770      	bx	lr

08006d6a <__sfputs_r>:
 8006d6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d6c:	4606      	mov	r6, r0
 8006d6e:	460f      	mov	r7, r1
 8006d70:	4614      	mov	r4, r2
 8006d72:	18d5      	adds	r5, r2, r3
 8006d74:	42ac      	cmp	r4, r5
 8006d76:	d101      	bne.n	8006d7c <__sfputs_r+0x12>
 8006d78:	2000      	movs	r0, #0
 8006d7a:	e007      	b.n	8006d8c <__sfputs_r+0x22>
 8006d7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d80:	463a      	mov	r2, r7
 8006d82:	4630      	mov	r0, r6
 8006d84:	f7ff ffda 	bl	8006d3c <__sfputc_r>
 8006d88:	1c43      	adds	r3, r0, #1
 8006d8a:	d1f3      	bne.n	8006d74 <__sfputs_r+0xa>
 8006d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006d90 <_vfiprintf_r>:
 8006d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d94:	460d      	mov	r5, r1
 8006d96:	b09d      	sub	sp, #116	; 0x74
 8006d98:	4614      	mov	r4, r2
 8006d9a:	4698      	mov	r8, r3
 8006d9c:	4606      	mov	r6, r0
 8006d9e:	b118      	cbz	r0, 8006da8 <_vfiprintf_r+0x18>
 8006da0:	6983      	ldr	r3, [r0, #24]
 8006da2:	b90b      	cbnz	r3, 8006da8 <_vfiprintf_r+0x18>
 8006da4:	f7ff fed0 	bl	8006b48 <__sinit>
 8006da8:	4b89      	ldr	r3, [pc, #548]	; (8006fd0 <_vfiprintf_r+0x240>)
 8006daa:	429d      	cmp	r5, r3
 8006dac:	d11b      	bne.n	8006de6 <_vfiprintf_r+0x56>
 8006dae:	6875      	ldr	r5, [r6, #4]
 8006db0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006db2:	07d9      	lsls	r1, r3, #31
 8006db4:	d405      	bmi.n	8006dc2 <_vfiprintf_r+0x32>
 8006db6:	89ab      	ldrh	r3, [r5, #12]
 8006db8:	059a      	lsls	r2, r3, #22
 8006dba:	d402      	bmi.n	8006dc2 <_vfiprintf_r+0x32>
 8006dbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006dbe:	f7ff ff61 	bl	8006c84 <__retarget_lock_acquire_recursive>
 8006dc2:	89ab      	ldrh	r3, [r5, #12]
 8006dc4:	071b      	lsls	r3, r3, #28
 8006dc6:	d501      	bpl.n	8006dcc <_vfiprintf_r+0x3c>
 8006dc8:	692b      	ldr	r3, [r5, #16]
 8006dca:	b9eb      	cbnz	r3, 8006e08 <_vfiprintf_r+0x78>
 8006dcc:	4629      	mov	r1, r5
 8006dce:	4630      	mov	r0, r6
 8006dd0:	f000 fb5a 	bl	8007488 <__swsetup_r>
 8006dd4:	b1c0      	cbz	r0, 8006e08 <_vfiprintf_r+0x78>
 8006dd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006dd8:	07dc      	lsls	r4, r3, #31
 8006dda:	d50e      	bpl.n	8006dfa <_vfiprintf_r+0x6a>
 8006ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8006de0:	b01d      	add	sp, #116	; 0x74
 8006de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006de6:	4b7b      	ldr	r3, [pc, #492]	; (8006fd4 <_vfiprintf_r+0x244>)
 8006de8:	429d      	cmp	r5, r3
 8006dea:	d101      	bne.n	8006df0 <_vfiprintf_r+0x60>
 8006dec:	68b5      	ldr	r5, [r6, #8]
 8006dee:	e7df      	b.n	8006db0 <_vfiprintf_r+0x20>
 8006df0:	4b79      	ldr	r3, [pc, #484]	; (8006fd8 <_vfiprintf_r+0x248>)
 8006df2:	429d      	cmp	r5, r3
 8006df4:	bf08      	it	eq
 8006df6:	68f5      	ldreq	r5, [r6, #12]
 8006df8:	e7da      	b.n	8006db0 <_vfiprintf_r+0x20>
 8006dfa:	89ab      	ldrh	r3, [r5, #12]
 8006dfc:	0598      	lsls	r0, r3, #22
 8006dfe:	d4ed      	bmi.n	8006ddc <_vfiprintf_r+0x4c>
 8006e00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e02:	f7ff ff40 	bl	8006c86 <__retarget_lock_release_recursive>
 8006e06:	e7e9      	b.n	8006ddc <_vfiprintf_r+0x4c>
 8006e08:	2300      	movs	r3, #0
 8006e0a:	9309      	str	r3, [sp, #36]	; 0x24
 8006e0c:	2320      	movs	r3, #32
 8006e0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e12:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e16:	2330      	movs	r3, #48	; 0x30
 8006e18:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006fdc <_vfiprintf_r+0x24c>
 8006e1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e20:	f04f 0901 	mov.w	r9, #1
 8006e24:	4623      	mov	r3, r4
 8006e26:	469a      	mov	sl, r3
 8006e28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e2c:	b10a      	cbz	r2, 8006e32 <_vfiprintf_r+0xa2>
 8006e2e:	2a25      	cmp	r2, #37	; 0x25
 8006e30:	d1f9      	bne.n	8006e26 <_vfiprintf_r+0x96>
 8006e32:	ebba 0b04 	subs.w	fp, sl, r4
 8006e36:	d00b      	beq.n	8006e50 <_vfiprintf_r+0xc0>
 8006e38:	465b      	mov	r3, fp
 8006e3a:	4622      	mov	r2, r4
 8006e3c:	4629      	mov	r1, r5
 8006e3e:	4630      	mov	r0, r6
 8006e40:	f7ff ff93 	bl	8006d6a <__sfputs_r>
 8006e44:	3001      	adds	r0, #1
 8006e46:	f000 80aa 	beq.w	8006f9e <_vfiprintf_r+0x20e>
 8006e4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e4c:	445a      	add	r2, fp
 8006e4e:	9209      	str	r2, [sp, #36]	; 0x24
 8006e50:	f89a 3000 	ldrb.w	r3, [sl]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	f000 80a2 	beq.w	8006f9e <_vfiprintf_r+0x20e>
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8006e60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e64:	f10a 0a01 	add.w	sl, sl, #1
 8006e68:	9304      	str	r3, [sp, #16]
 8006e6a:	9307      	str	r3, [sp, #28]
 8006e6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e70:	931a      	str	r3, [sp, #104]	; 0x68
 8006e72:	4654      	mov	r4, sl
 8006e74:	2205      	movs	r2, #5
 8006e76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e7a:	4858      	ldr	r0, [pc, #352]	; (8006fdc <_vfiprintf_r+0x24c>)
 8006e7c:	f7f9 f9b0 	bl	80001e0 <memchr>
 8006e80:	9a04      	ldr	r2, [sp, #16]
 8006e82:	b9d8      	cbnz	r0, 8006ebc <_vfiprintf_r+0x12c>
 8006e84:	06d1      	lsls	r1, r2, #27
 8006e86:	bf44      	itt	mi
 8006e88:	2320      	movmi	r3, #32
 8006e8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e8e:	0713      	lsls	r3, r2, #28
 8006e90:	bf44      	itt	mi
 8006e92:	232b      	movmi	r3, #43	; 0x2b
 8006e94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e98:	f89a 3000 	ldrb.w	r3, [sl]
 8006e9c:	2b2a      	cmp	r3, #42	; 0x2a
 8006e9e:	d015      	beq.n	8006ecc <_vfiprintf_r+0x13c>
 8006ea0:	9a07      	ldr	r2, [sp, #28]
 8006ea2:	4654      	mov	r4, sl
 8006ea4:	2000      	movs	r0, #0
 8006ea6:	f04f 0c0a 	mov.w	ip, #10
 8006eaa:	4621      	mov	r1, r4
 8006eac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006eb0:	3b30      	subs	r3, #48	; 0x30
 8006eb2:	2b09      	cmp	r3, #9
 8006eb4:	d94e      	bls.n	8006f54 <_vfiprintf_r+0x1c4>
 8006eb6:	b1b0      	cbz	r0, 8006ee6 <_vfiprintf_r+0x156>
 8006eb8:	9207      	str	r2, [sp, #28]
 8006eba:	e014      	b.n	8006ee6 <_vfiprintf_r+0x156>
 8006ebc:	eba0 0308 	sub.w	r3, r0, r8
 8006ec0:	fa09 f303 	lsl.w	r3, r9, r3
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	9304      	str	r3, [sp, #16]
 8006ec8:	46a2      	mov	sl, r4
 8006eca:	e7d2      	b.n	8006e72 <_vfiprintf_r+0xe2>
 8006ecc:	9b03      	ldr	r3, [sp, #12]
 8006ece:	1d19      	adds	r1, r3, #4
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	9103      	str	r1, [sp, #12]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	bfbb      	ittet	lt
 8006ed8:	425b      	neglt	r3, r3
 8006eda:	f042 0202 	orrlt.w	r2, r2, #2
 8006ede:	9307      	strge	r3, [sp, #28]
 8006ee0:	9307      	strlt	r3, [sp, #28]
 8006ee2:	bfb8      	it	lt
 8006ee4:	9204      	strlt	r2, [sp, #16]
 8006ee6:	7823      	ldrb	r3, [r4, #0]
 8006ee8:	2b2e      	cmp	r3, #46	; 0x2e
 8006eea:	d10c      	bne.n	8006f06 <_vfiprintf_r+0x176>
 8006eec:	7863      	ldrb	r3, [r4, #1]
 8006eee:	2b2a      	cmp	r3, #42	; 0x2a
 8006ef0:	d135      	bne.n	8006f5e <_vfiprintf_r+0x1ce>
 8006ef2:	9b03      	ldr	r3, [sp, #12]
 8006ef4:	1d1a      	adds	r2, r3, #4
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	9203      	str	r2, [sp, #12]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	bfb8      	it	lt
 8006efe:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f02:	3402      	adds	r4, #2
 8006f04:	9305      	str	r3, [sp, #20]
 8006f06:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006fec <_vfiprintf_r+0x25c>
 8006f0a:	7821      	ldrb	r1, [r4, #0]
 8006f0c:	2203      	movs	r2, #3
 8006f0e:	4650      	mov	r0, sl
 8006f10:	f7f9 f966 	bl	80001e0 <memchr>
 8006f14:	b140      	cbz	r0, 8006f28 <_vfiprintf_r+0x198>
 8006f16:	2340      	movs	r3, #64	; 0x40
 8006f18:	eba0 000a 	sub.w	r0, r0, sl
 8006f1c:	fa03 f000 	lsl.w	r0, r3, r0
 8006f20:	9b04      	ldr	r3, [sp, #16]
 8006f22:	4303      	orrs	r3, r0
 8006f24:	3401      	adds	r4, #1
 8006f26:	9304      	str	r3, [sp, #16]
 8006f28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f2c:	482c      	ldr	r0, [pc, #176]	; (8006fe0 <_vfiprintf_r+0x250>)
 8006f2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f32:	2206      	movs	r2, #6
 8006f34:	f7f9 f954 	bl	80001e0 <memchr>
 8006f38:	2800      	cmp	r0, #0
 8006f3a:	d03f      	beq.n	8006fbc <_vfiprintf_r+0x22c>
 8006f3c:	4b29      	ldr	r3, [pc, #164]	; (8006fe4 <_vfiprintf_r+0x254>)
 8006f3e:	bb1b      	cbnz	r3, 8006f88 <_vfiprintf_r+0x1f8>
 8006f40:	9b03      	ldr	r3, [sp, #12]
 8006f42:	3307      	adds	r3, #7
 8006f44:	f023 0307 	bic.w	r3, r3, #7
 8006f48:	3308      	adds	r3, #8
 8006f4a:	9303      	str	r3, [sp, #12]
 8006f4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f4e:	443b      	add	r3, r7
 8006f50:	9309      	str	r3, [sp, #36]	; 0x24
 8006f52:	e767      	b.n	8006e24 <_vfiprintf_r+0x94>
 8006f54:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f58:	460c      	mov	r4, r1
 8006f5a:	2001      	movs	r0, #1
 8006f5c:	e7a5      	b.n	8006eaa <_vfiprintf_r+0x11a>
 8006f5e:	2300      	movs	r3, #0
 8006f60:	3401      	adds	r4, #1
 8006f62:	9305      	str	r3, [sp, #20]
 8006f64:	4619      	mov	r1, r3
 8006f66:	f04f 0c0a 	mov.w	ip, #10
 8006f6a:	4620      	mov	r0, r4
 8006f6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f70:	3a30      	subs	r2, #48	; 0x30
 8006f72:	2a09      	cmp	r2, #9
 8006f74:	d903      	bls.n	8006f7e <_vfiprintf_r+0x1ee>
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d0c5      	beq.n	8006f06 <_vfiprintf_r+0x176>
 8006f7a:	9105      	str	r1, [sp, #20]
 8006f7c:	e7c3      	b.n	8006f06 <_vfiprintf_r+0x176>
 8006f7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f82:	4604      	mov	r4, r0
 8006f84:	2301      	movs	r3, #1
 8006f86:	e7f0      	b.n	8006f6a <_vfiprintf_r+0x1da>
 8006f88:	ab03      	add	r3, sp, #12
 8006f8a:	9300      	str	r3, [sp, #0]
 8006f8c:	462a      	mov	r2, r5
 8006f8e:	4b16      	ldr	r3, [pc, #88]	; (8006fe8 <_vfiprintf_r+0x258>)
 8006f90:	a904      	add	r1, sp, #16
 8006f92:	4630      	mov	r0, r6
 8006f94:	f3af 8000 	nop.w
 8006f98:	4607      	mov	r7, r0
 8006f9a:	1c78      	adds	r0, r7, #1
 8006f9c:	d1d6      	bne.n	8006f4c <_vfiprintf_r+0x1bc>
 8006f9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fa0:	07d9      	lsls	r1, r3, #31
 8006fa2:	d405      	bmi.n	8006fb0 <_vfiprintf_r+0x220>
 8006fa4:	89ab      	ldrh	r3, [r5, #12]
 8006fa6:	059a      	lsls	r2, r3, #22
 8006fa8:	d402      	bmi.n	8006fb0 <_vfiprintf_r+0x220>
 8006faa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fac:	f7ff fe6b 	bl	8006c86 <__retarget_lock_release_recursive>
 8006fb0:	89ab      	ldrh	r3, [r5, #12]
 8006fb2:	065b      	lsls	r3, r3, #25
 8006fb4:	f53f af12 	bmi.w	8006ddc <_vfiprintf_r+0x4c>
 8006fb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006fba:	e711      	b.n	8006de0 <_vfiprintf_r+0x50>
 8006fbc:	ab03      	add	r3, sp, #12
 8006fbe:	9300      	str	r3, [sp, #0]
 8006fc0:	462a      	mov	r2, r5
 8006fc2:	4b09      	ldr	r3, [pc, #36]	; (8006fe8 <_vfiprintf_r+0x258>)
 8006fc4:	a904      	add	r1, sp, #16
 8006fc6:	4630      	mov	r0, r6
 8006fc8:	f000 f880 	bl	80070cc <_printf_i>
 8006fcc:	e7e4      	b.n	8006f98 <_vfiprintf_r+0x208>
 8006fce:	bf00      	nop
 8006fd0:	08007a10 	.word	0x08007a10
 8006fd4:	08007a30 	.word	0x08007a30
 8006fd8:	080079f0 	.word	0x080079f0
 8006fdc:	08007a50 	.word	0x08007a50
 8006fe0:	08007a5a 	.word	0x08007a5a
 8006fe4:	00000000 	.word	0x00000000
 8006fe8:	08006d6b 	.word	0x08006d6b
 8006fec:	08007a56 	.word	0x08007a56

08006ff0 <_printf_common>:
 8006ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ff4:	4616      	mov	r6, r2
 8006ff6:	4699      	mov	r9, r3
 8006ff8:	688a      	ldr	r2, [r1, #8]
 8006ffa:	690b      	ldr	r3, [r1, #16]
 8006ffc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007000:	4293      	cmp	r3, r2
 8007002:	bfb8      	it	lt
 8007004:	4613      	movlt	r3, r2
 8007006:	6033      	str	r3, [r6, #0]
 8007008:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800700c:	4607      	mov	r7, r0
 800700e:	460c      	mov	r4, r1
 8007010:	b10a      	cbz	r2, 8007016 <_printf_common+0x26>
 8007012:	3301      	adds	r3, #1
 8007014:	6033      	str	r3, [r6, #0]
 8007016:	6823      	ldr	r3, [r4, #0]
 8007018:	0699      	lsls	r1, r3, #26
 800701a:	bf42      	ittt	mi
 800701c:	6833      	ldrmi	r3, [r6, #0]
 800701e:	3302      	addmi	r3, #2
 8007020:	6033      	strmi	r3, [r6, #0]
 8007022:	6825      	ldr	r5, [r4, #0]
 8007024:	f015 0506 	ands.w	r5, r5, #6
 8007028:	d106      	bne.n	8007038 <_printf_common+0x48>
 800702a:	f104 0a19 	add.w	sl, r4, #25
 800702e:	68e3      	ldr	r3, [r4, #12]
 8007030:	6832      	ldr	r2, [r6, #0]
 8007032:	1a9b      	subs	r3, r3, r2
 8007034:	42ab      	cmp	r3, r5
 8007036:	dc26      	bgt.n	8007086 <_printf_common+0x96>
 8007038:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800703c:	1e13      	subs	r3, r2, #0
 800703e:	6822      	ldr	r2, [r4, #0]
 8007040:	bf18      	it	ne
 8007042:	2301      	movne	r3, #1
 8007044:	0692      	lsls	r2, r2, #26
 8007046:	d42b      	bmi.n	80070a0 <_printf_common+0xb0>
 8007048:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800704c:	4649      	mov	r1, r9
 800704e:	4638      	mov	r0, r7
 8007050:	47c0      	blx	r8
 8007052:	3001      	adds	r0, #1
 8007054:	d01e      	beq.n	8007094 <_printf_common+0xa4>
 8007056:	6823      	ldr	r3, [r4, #0]
 8007058:	68e5      	ldr	r5, [r4, #12]
 800705a:	6832      	ldr	r2, [r6, #0]
 800705c:	f003 0306 	and.w	r3, r3, #6
 8007060:	2b04      	cmp	r3, #4
 8007062:	bf08      	it	eq
 8007064:	1aad      	subeq	r5, r5, r2
 8007066:	68a3      	ldr	r3, [r4, #8]
 8007068:	6922      	ldr	r2, [r4, #16]
 800706a:	bf0c      	ite	eq
 800706c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007070:	2500      	movne	r5, #0
 8007072:	4293      	cmp	r3, r2
 8007074:	bfc4      	itt	gt
 8007076:	1a9b      	subgt	r3, r3, r2
 8007078:	18ed      	addgt	r5, r5, r3
 800707a:	2600      	movs	r6, #0
 800707c:	341a      	adds	r4, #26
 800707e:	42b5      	cmp	r5, r6
 8007080:	d11a      	bne.n	80070b8 <_printf_common+0xc8>
 8007082:	2000      	movs	r0, #0
 8007084:	e008      	b.n	8007098 <_printf_common+0xa8>
 8007086:	2301      	movs	r3, #1
 8007088:	4652      	mov	r2, sl
 800708a:	4649      	mov	r1, r9
 800708c:	4638      	mov	r0, r7
 800708e:	47c0      	blx	r8
 8007090:	3001      	adds	r0, #1
 8007092:	d103      	bne.n	800709c <_printf_common+0xac>
 8007094:	f04f 30ff 	mov.w	r0, #4294967295
 8007098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800709c:	3501      	adds	r5, #1
 800709e:	e7c6      	b.n	800702e <_printf_common+0x3e>
 80070a0:	18e1      	adds	r1, r4, r3
 80070a2:	1c5a      	adds	r2, r3, #1
 80070a4:	2030      	movs	r0, #48	; 0x30
 80070a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80070aa:	4422      	add	r2, r4
 80070ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80070b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80070b4:	3302      	adds	r3, #2
 80070b6:	e7c7      	b.n	8007048 <_printf_common+0x58>
 80070b8:	2301      	movs	r3, #1
 80070ba:	4622      	mov	r2, r4
 80070bc:	4649      	mov	r1, r9
 80070be:	4638      	mov	r0, r7
 80070c0:	47c0      	blx	r8
 80070c2:	3001      	adds	r0, #1
 80070c4:	d0e6      	beq.n	8007094 <_printf_common+0xa4>
 80070c6:	3601      	adds	r6, #1
 80070c8:	e7d9      	b.n	800707e <_printf_common+0x8e>
	...

080070cc <_printf_i>:
 80070cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070d0:	460c      	mov	r4, r1
 80070d2:	4691      	mov	r9, r2
 80070d4:	7e27      	ldrb	r7, [r4, #24]
 80070d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80070d8:	2f78      	cmp	r7, #120	; 0x78
 80070da:	4680      	mov	r8, r0
 80070dc:	469a      	mov	sl, r3
 80070de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070e2:	d807      	bhi.n	80070f4 <_printf_i+0x28>
 80070e4:	2f62      	cmp	r7, #98	; 0x62
 80070e6:	d80a      	bhi.n	80070fe <_printf_i+0x32>
 80070e8:	2f00      	cmp	r7, #0
 80070ea:	f000 80d8 	beq.w	800729e <_printf_i+0x1d2>
 80070ee:	2f58      	cmp	r7, #88	; 0x58
 80070f0:	f000 80a3 	beq.w	800723a <_printf_i+0x16e>
 80070f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80070f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80070fc:	e03a      	b.n	8007174 <_printf_i+0xa8>
 80070fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007102:	2b15      	cmp	r3, #21
 8007104:	d8f6      	bhi.n	80070f4 <_printf_i+0x28>
 8007106:	a001      	add	r0, pc, #4	; (adr r0, 800710c <_printf_i+0x40>)
 8007108:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800710c:	08007165 	.word	0x08007165
 8007110:	08007179 	.word	0x08007179
 8007114:	080070f5 	.word	0x080070f5
 8007118:	080070f5 	.word	0x080070f5
 800711c:	080070f5 	.word	0x080070f5
 8007120:	080070f5 	.word	0x080070f5
 8007124:	08007179 	.word	0x08007179
 8007128:	080070f5 	.word	0x080070f5
 800712c:	080070f5 	.word	0x080070f5
 8007130:	080070f5 	.word	0x080070f5
 8007134:	080070f5 	.word	0x080070f5
 8007138:	08007285 	.word	0x08007285
 800713c:	080071a9 	.word	0x080071a9
 8007140:	08007267 	.word	0x08007267
 8007144:	080070f5 	.word	0x080070f5
 8007148:	080070f5 	.word	0x080070f5
 800714c:	080072a7 	.word	0x080072a7
 8007150:	080070f5 	.word	0x080070f5
 8007154:	080071a9 	.word	0x080071a9
 8007158:	080070f5 	.word	0x080070f5
 800715c:	080070f5 	.word	0x080070f5
 8007160:	0800726f 	.word	0x0800726f
 8007164:	680b      	ldr	r3, [r1, #0]
 8007166:	1d1a      	adds	r2, r3, #4
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	600a      	str	r2, [r1, #0]
 800716c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007170:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007174:	2301      	movs	r3, #1
 8007176:	e0a3      	b.n	80072c0 <_printf_i+0x1f4>
 8007178:	6825      	ldr	r5, [r4, #0]
 800717a:	6808      	ldr	r0, [r1, #0]
 800717c:	062e      	lsls	r6, r5, #24
 800717e:	f100 0304 	add.w	r3, r0, #4
 8007182:	d50a      	bpl.n	800719a <_printf_i+0xce>
 8007184:	6805      	ldr	r5, [r0, #0]
 8007186:	600b      	str	r3, [r1, #0]
 8007188:	2d00      	cmp	r5, #0
 800718a:	da03      	bge.n	8007194 <_printf_i+0xc8>
 800718c:	232d      	movs	r3, #45	; 0x2d
 800718e:	426d      	negs	r5, r5
 8007190:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007194:	485e      	ldr	r0, [pc, #376]	; (8007310 <_printf_i+0x244>)
 8007196:	230a      	movs	r3, #10
 8007198:	e019      	b.n	80071ce <_printf_i+0x102>
 800719a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800719e:	6805      	ldr	r5, [r0, #0]
 80071a0:	600b      	str	r3, [r1, #0]
 80071a2:	bf18      	it	ne
 80071a4:	b22d      	sxthne	r5, r5
 80071a6:	e7ef      	b.n	8007188 <_printf_i+0xbc>
 80071a8:	680b      	ldr	r3, [r1, #0]
 80071aa:	6825      	ldr	r5, [r4, #0]
 80071ac:	1d18      	adds	r0, r3, #4
 80071ae:	6008      	str	r0, [r1, #0]
 80071b0:	0628      	lsls	r0, r5, #24
 80071b2:	d501      	bpl.n	80071b8 <_printf_i+0xec>
 80071b4:	681d      	ldr	r5, [r3, #0]
 80071b6:	e002      	b.n	80071be <_printf_i+0xf2>
 80071b8:	0669      	lsls	r1, r5, #25
 80071ba:	d5fb      	bpl.n	80071b4 <_printf_i+0xe8>
 80071bc:	881d      	ldrh	r5, [r3, #0]
 80071be:	4854      	ldr	r0, [pc, #336]	; (8007310 <_printf_i+0x244>)
 80071c0:	2f6f      	cmp	r7, #111	; 0x6f
 80071c2:	bf0c      	ite	eq
 80071c4:	2308      	moveq	r3, #8
 80071c6:	230a      	movne	r3, #10
 80071c8:	2100      	movs	r1, #0
 80071ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80071ce:	6866      	ldr	r6, [r4, #4]
 80071d0:	60a6      	str	r6, [r4, #8]
 80071d2:	2e00      	cmp	r6, #0
 80071d4:	bfa2      	ittt	ge
 80071d6:	6821      	ldrge	r1, [r4, #0]
 80071d8:	f021 0104 	bicge.w	r1, r1, #4
 80071dc:	6021      	strge	r1, [r4, #0]
 80071de:	b90d      	cbnz	r5, 80071e4 <_printf_i+0x118>
 80071e0:	2e00      	cmp	r6, #0
 80071e2:	d04d      	beq.n	8007280 <_printf_i+0x1b4>
 80071e4:	4616      	mov	r6, r2
 80071e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80071ea:	fb03 5711 	mls	r7, r3, r1, r5
 80071ee:	5dc7      	ldrb	r7, [r0, r7]
 80071f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80071f4:	462f      	mov	r7, r5
 80071f6:	42bb      	cmp	r3, r7
 80071f8:	460d      	mov	r5, r1
 80071fa:	d9f4      	bls.n	80071e6 <_printf_i+0x11a>
 80071fc:	2b08      	cmp	r3, #8
 80071fe:	d10b      	bne.n	8007218 <_printf_i+0x14c>
 8007200:	6823      	ldr	r3, [r4, #0]
 8007202:	07df      	lsls	r7, r3, #31
 8007204:	d508      	bpl.n	8007218 <_printf_i+0x14c>
 8007206:	6923      	ldr	r3, [r4, #16]
 8007208:	6861      	ldr	r1, [r4, #4]
 800720a:	4299      	cmp	r1, r3
 800720c:	bfde      	ittt	le
 800720e:	2330      	movle	r3, #48	; 0x30
 8007210:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007214:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007218:	1b92      	subs	r2, r2, r6
 800721a:	6122      	str	r2, [r4, #16]
 800721c:	f8cd a000 	str.w	sl, [sp]
 8007220:	464b      	mov	r3, r9
 8007222:	aa03      	add	r2, sp, #12
 8007224:	4621      	mov	r1, r4
 8007226:	4640      	mov	r0, r8
 8007228:	f7ff fee2 	bl	8006ff0 <_printf_common>
 800722c:	3001      	adds	r0, #1
 800722e:	d14c      	bne.n	80072ca <_printf_i+0x1fe>
 8007230:	f04f 30ff 	mov.w	r0, #4294967295
 8007234:	b004      	add	sp, #16
 8007236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800723a:	4835      	ldr	r0, [pc, #212]	; (8007310 <_printf_i+0x244>)
 800723c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007240:	6823      	ldr	r3, [r4, #0]
 8007242:	680e      	ldr	r6, [r1, #0]
 8007244:	061f      	lsls	r7, r3, #24
 8007246:	f856 5b04 	ldr.w	r5, [r6], #4
 800724a:	600e      	str	r6, [r1, #0]
 800724c:	d514      	bpl.n	8007278 <_printf_i+0x1ac>
 800724e:	07d9      	lsls	r1, r3, #31
 8007250:	bf44      	itt	mi
 8007252:	f043 0320 	orrmi.w	r3, r3, #32
 8007256:	6023      	strmi	r3, [r4, #0]
 8007258:	b91d      	cbnz	r5, 8007262 <_printf_i+0x196>
 800725a:	6823      	ldr	r3, [r4, #0]
 800725c:	f023 0320 	bic.w	r3, r3, #32
 8007260:	6023      	str	r3, [r4, #0]
 8007262:	2310      	movs	r3, #16
 8007264:	e7b0      	b.n	80071c8 <_printf_i+0xfc>
 8007266:	6823      	ldr	r3, [r4, #0]
 8007268:	f043 0320 	orr.w	r3, r3, #32
 800726c:	6023      	str	r3, [r4, #0]
 800726e:	2378      	movs	r3, #120	; 0x78
 8007270:	4828      	ldr	r0, [pc, #160]	; (8007314 <_printf_i+0x248>)
 8007272:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007276:	e7e3      	b.n	8007240 <_printf_i+0x174>
 8007278:	065e      	lsls	r6, r3, #25
 800727a:	bf48      	it	mi
 800727c:	b2ad      	uxthmi	r5, r5
 800727e:	e7e6      	b.n	800724e <_printf_i+0x182>
 8007280:	4616      	mov	r6, r2
 8007282:	e7bb      	b.n	80071fc <_printf_i+0x130>
 8007284:	680b      	ldr	r3, [r1, #0]
 8007286:	6826      	ldr	r6, [r4, #0]
 8007288:	6960      	ldr	r0, [r4, #20]
 800728a:	1d1d      	adds	r5, r3, #4
 800728c:	600d      	str	r5, [r1, #0]
 800728e:	0635      	lsls	r5, r6, #24
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	d501      	bpl.n	8007298 <_printf_i+0x1cc>
 8007294:	6018      	str	r0, [r3, #0]
 8007296:	e002      	b.n	800729e <_printf_i+0x1d2>
 8007298:	0671      	lsls	r1, r6, #25
 800729a:	d5fb      	bpl.n	8007294 <_printf_i+0x1c8>
 800729c:	8018      	strh	r0, [r3, #0]
 800729e:	2300      	movs	r3, #0
 80072a0:	6123      	str	r3, [r4, #16]
 80072a2:	4616      	mov	r6, r2
 80072a4:	e7ba      	b.n	800721c <_printf_i+0x150>
 80072a6:	680b      	ldr	r3, [r1, #0]
 80072a8:	1d1a      	adds	r2, r3, #4
 80072aa:	600a      	str	r2, [r1, #0]
 80072ac:	681e      	ldr	r6, [r3, #0]
 80072ae:	6862      	ldr	r2, [r4, #4]
 80072b0:	2100      	movs	r1, #0
 80072b2:	4630      	mov	r0, r6
 80072b4:	f7f8 ff94 	bl	80001e0 <memchr>
 80072b8:	b108      	cbz	r0, 80072be <_printf_i+0x1f2>
 80072ba:	1b80      	subs	r0, r0, r6
 80072bc:	6060      	str	r0, [r4, #4]
 80072be:	6863      	ldr	r3, [r4, #4]
 80072c0:	6123      	str	r3, [r4, #16]
 80072c2:	2300      	movs	r3, #0
 80072c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072c8:	e7a8      	b.n	800721c <_printf_i+0x150>
 80072ca:	6923      	ldr	r3, [r4, #16]
 80072cc:	4632      	mov	r2, r6
 80072ce:	4649      	mov	r1, r9
 80072d0:	4640      	mov	r0, r8
 80072d2:	47d0      	blx	sl
 80072d4:	3001      	adds	r0, #1
 80072d6:	d0ab      	beq.n	8007230 <_printf_i+0x164>
 80072d8:	6823      	ldr	r3, [r4, #0]
 80072da:	079b      	lsls	r3, r3, #30
 80072dc:	d413      	bmi.n	8007306 <_printf_i+0x23a>
 80072de:	68e0      	ldr	r0, [r4, #12]
 80072e0:	9b03      	ldr	r3, [sp, #12]
 80072e2:	4298      	cmp	r0, r3
 80072e4:	bfb8      	it	lt
 80072e6:	4618      	movlt	r0, r3
 80072e8:	e7a4      	b.n	8007234 <_printf_i+0x168>
 80072ea:	2301      	movs	r3, #1
 80072ec:	4632      	mov	r2, r6
 80072ee:	4649      	mov	r1, r9
 80072f0:	4640      	mov	r0, r8
 80072f2:	47d0      	blx	sl
 80072f4:	3001      	adds	r0, #1
 80072f6:	d09b      	beq.n	8007230 <_printf_i+0x164>
 80072f8:	3501      	adds	r5, #1
 80072fa:	68e3      	ldr	r3, [r4, #12]
 80072fc:	9903      	ldr	r1, [sp, #12]
 80072fe:	1a5b      	subs	r3, r3, r1
 8007300:	42ab      	cmp	r3, r5
 8007302:	dcf2      	bgt.n	80072ea <_printf_i+0x21e>
 8007304:	e7eb      	b.n	80072de <_printf_i+0x212>
 8007306:	2500      	movs	r5, #0
 8007308:	f104 0619 	add.w	r6, r4, #25
 800730c:	e7f5      	b.n	80072fa <_printf_i+0x22e>
 800730e:	bf00      	nop
 8007310:	08007a61 	.word	0x08007a61
 8007314:	08007a72 	.word	0x08007a72

08007318 <_sbrk_r>:
 8007318:	b538      	push	{r3, r4, r5, lr}
 800731a:	4d06      	ldr	r5, [pc, #24]	; (8007334 <_sbrk_r+0x1c>)
 800731c:	2300      	movs	r3, #0
 800731e:	4604      	mov	r4, r0
 8007320:	4608      	mov	r0, r1
 8007322:	602b      	str	r3, [r5, #0]
 8007324:	f7fb fa90 	bl	8002848 <_sbrk>
 8007328:	1c43      	adds	r3, r0, #1
 800732a:	d102      	bne.n	8007332 <_sbrk_r+0x1a>
 800732c:	682b      	ldr	r3, [r5, #0]
 800732e:	b103      	cbz	r3, 8007332 <_sbrk_r+0x1a>
 8007330:	6023      	str	r3, [r4, #0]
 8007332:	bd38      	pop	{r3, r4, r5, pc}
 8007334:	20000370 	.word	0x20000370

08007338 <__sread>:
 8007338:	b510      	push	{r4, lr}
 800733a:	460c      	mov	r4, r1
 800733c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007340:	f000 fab4 	bl	80078ac <_read_r>
 8007344:	2800      	cmp	r0, #0
 8007346:	bfab      	itete	ge
 8007348:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800734a:	89a3      	ldrhlt	r3, [r4, #12]
 800734c:	181b      	addge	r3, r3, r0
 800734e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007352:	bfac      	ite	ge
 8007354:	6563      	strge	r3, [r4, #84]	; 0x54
 8007356:	81a3      	strhlt	r3, [r4, #12]
 8007358:	bd10      	pop	{r4, pc}

0800735a <__swrite>:
 800735a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800735e:	461f      	mov	r7, r3
 8007360:	898b      	ldrh	r3, [r1, #12]
 8007362:	05db      	lsls	r3, r3, #23
 8007364:	4605      	mov	r5, r0
 8007366:	460c      	mov	r4, r1
 8007368:	4616      	mov	r6, r2
 800736a:	d505      	bpl.n	8007378 <__swrite+0x1e>
 800736c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007370:	2302      	movs	r3, #2
 8007372:	2200      	movs	r2, #0
 8007374:	f000 f9c8 	bl	8007708 <_lseek_r>
 8007378:	89a3      	ldrh	r3, [r4, #12]
 800737a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800737e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007382:	81a3      	strh	r3, [r4, #12]
 8007384:	4632      	mov	r2, r6
 8007386:	463b      	mov	r3, r7
 8007388:	4628      	mov	r0, r5
 800738a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800738e:	f000 b869 	b.w	8007464 <_write_r>

08007392 <__sseek>:
 8007392:	b510      	push	{r4, lr}
 8007394:	460c      	mov	r4, r1
 8007396:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800739a:	f000 f9b5 	bl	8007708 <_lseek_r>
 800739e:	1c43      	adds	r3, r0, #1
 80073a0:	89a3      	ldrh	r3, [r4, #12]
 80073a2:	bf15      	itete	ne
 80073a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80073a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80073aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80073ae:	81a3      	strheq	r3, [r4, #12]
 80073b0:	bf18      	it	ne
 80073b2:	81a3      	strhne	r3, [r4, #12]
 80073b4:	bd10      	pop	{r4, pc}

080073b6 <__sclose>:
 80073b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073ba:	f000 b8d3 	b.w	8007564 <_close_r>
	...

080073c0 <__swbuf_r>:
 80073c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073c2:	460e      	mov	r6, r1
 80073c4:	4614      	mov	r4, r2
 80073c6:	4605      	mov	r5, r0
 80073c8:	b118      	cbz	r0, 80073d2 <__swbuf_r+0x12>
 80073ca:	6983      	ldr	r3, [r0, #24]
 80073cc:	b90b      	cbnz	r3, 80073d2 <__swbuf_r+0x12>
 80073ce:	f7ff fbbb 	bl	8006b48 <__sinit>
 80073d2:	4b21      	ldr	r3, [pc, #132]	; (8007458 <__swbuf_r+0x98>)
 80073d4:	429c      	cmp	r4, r3
 80073d6:	d12b      	bne.n	8007430 <__swbuf_r+0x70>
 80073d8:	686c      	ldr	r4, [r5, #4]
 80073da:	69a3      	ldr	r3, [r4, #24]
 80073dc:	60a3      	str	r3, [r4, #8]
 80073de:	89a3      	ldrh	r3, [r4, #12]
 80073e0:	071a      	lsls	r2, r3, #28
 80073e2:	d52f      	bpl.n	8007444 <__swbuf_r+0x84>
 80073e4:	6923      	ldr	r3, [r4, #16]
 80073e6:	b36b      	cbz	r3, 8007444 <__swbuf_r+0x84>
 80073e8:	6923      	ldr	r3, [r4, #16]
 80073ea:	6820      	ldr	r0, [r4, #0]
 80073ec:	1ac0      	subs	r0, r0, r3
 80073ee:	6963      	ldr	r3, [r4, #20]
 80073f0:	b2f6      	uxtb	r6, r6
 80073f2:	4283      	cmp	r3, r0
 80073f4:	4637      	mov	r7, r6
 80073f6:	dc04      	bgt.n	8007402 <__swbuf_r+0x42>
 80073f8:	4621      	mov	r1, r4
 80073fa:	4628      	mov	r0, r5
 80073fc:	f000 f948 	bl	8007690 <_fflush_r>
 8007400:	bb30      	cbnz	r0, 8007450 <__swbuf_r+0x90>
 8007402:	68a3      	ldr	r3, [r4, #8]
 8007404:	3b01      	subs	r3, #1
 8007406:	60a3      	str	r3, [r4, #8]
 8007408:	6823      	ldr	r3, [r4, #0]
 800740a:	1c5a      	adds	r2, r3, #1
 800740c:	6022      	str	r2, [r4, #0]
 800740e:	701e      	strb	r6, [r3, #0]
 8007410:	6963      	ldr	r3, [r4, #20]
 8007412:	3001      	adds	r0, #1
 8007414:	4283      	cmp	r3, r0
 8007416:	d004      	beq.n	8007422 <__swbuf_r+0x62>
 8007418:	89a3      	ldrh	r3, [r4, #12]
 800741a:	07db      	lsls	r3, r3, #31
 800741c:	d506      	bpl.n	800742c <__swbuf_r+0x6c>
 800741e:	2e0a      	cmp	r6, #10
 8007420:	d104      	bne.n	800742c <__swbuf_r+0x6c>
 8007422:	4621      	mov	r1, r4
 8007424:	4628      	mov	r0, r5
 8007426:	f000 f933 	bl	8007690 <_fflush_r>
 800742a:	b988      	cbnz	r0, 8007450 <__swbuf_r+0x90>
 800742c:	4638      	mov	r0, r7
 800742e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007430:	4b0a      	ldr	r3, [pc, #40]	; (800745c <__swbuf_r+0x9c>)
 8007432:	429c      	cmp	r4, r3
 8007434:	d101      	bne.n	800743a <__swbuf_r+0x7a>
 8007436:	68ac      	ldr	r4, [r5, #8]
 8007438:	e7cf      	b.n	80073da <__swbuf_r+0x1a>
 800743a:	4b09      	ldr	r3, [pc, #36]	; (8007460 <__swbuf_r+0xa0>)
 800743c:	429c      	cmp	r4, r3
 800743e:	bf08      	it	eq
 8007440:	68ec      	ldreq	r4, [r5, #12]
 8007442:	e7ca      	b.n	80073da <__swbuf_r+0x1a>
 8007444:	4621      	mov	r1, r4
 8007446:	4628      	mov	r0, r5
 8007448:	f000 f81e 	bl	8007488 <__swsetup_r>
 800744c:	2800      	cmp	r0, #0
 800744e:	d0cb      	beq.n	80073e8 <__swbuf_r+0x28>
 8007450:	f04f 37ff 	mov.w	r7, #4294967295
 8007454:	e7ea      	b.n	800742c <__swbuf_r+0x6c>
 8007456:	bf00      	nop
 8007458:	08007a10 	.word	0x08007a10
 800745c:	08007a30 	.word	0x08007a30
 8007460:	080079f0 	.word	0x080079f0

08007464 <_write_r>:
 8007464:	b538      	push	{r3, r4, r5, lr}
 8007466:	4d07      	ldr	r5, [pc, #28]	; (8007484 <_write_r+0x20>)
 8007468:	4604      	mov	r4, r0
 800746a:	4608      	mov	r0, r1
 800746c:	4611      	mov	r1, r2
 800746e:	2200      	movs	r2, #0
 8007470:	602a      	str	r2, [r5, #0]
 8007472:	461a      	mov	r2, r3
 8007474:	f7fb f997 	bl	80027a6 <_write>
 8007478:	1c43      	adds	r3, r0, #1
 800747a:	d102      	bne.n	8007482 <_write_r+0x1e>
 800747c:	682b      	ldr	r3, [r5, #0]
 800747e:	b103      	cbz	r3, 8007482 <_write_r+0x1e>
 8007480:	6023      	str	r3, [r4, #0]
 8007482:	bd38      	pop	{r3, r4, r5, pc}
 8007484:	20000370 	.word	0x20000370

08007488 <__swsetup_r>:
 8007488:	4b32      	ldr	r3, [pc, #200]	; (8007554 <__swsetup_r+0xcc>)
 800748a:	b570      	push	{r4, r5, r6, lr}
 800748c:	681d      	ldr	r5, [r3, #0]
 800748e:	4606      	mov	r6, r0
 8007490:	460c      	mov	r4, r1
 8007492:	b125      	cbz	r5, 800749e <__swsetup_r+0x16>
 8007494:	69ab      	ldr	r3, [r5, #24]
 8007496:	b913      	cbnz	r3, 800749e <__swsetup_r+0x16>
 8007498:	4628      	mov	r0, r5
 800749a:	f7ff fb55 	bl	8006b48 <__sinit>
 800749e:	4b2e      	ldr	r3, [pc, #184]	; (8007558 <__swsetup_r+0xd0>)
 80074a0:	429c      	cmp	r4, r3
 80074a2:	d10f      	bne.n	80074c4 <__swsetup_r+0x3c>
 80074a4:	686c      	ldr	r4, [r5, #4]
 80074a6:	89a3      	ldrh	r3, [r4, #12]
 80074a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074ac:	0719      	lsls	r1, r3, #28
 80074ae:	d42c      	bmi.n	800750a <__swsetup_r+0x82>
 80074b0:	06dd      	lsls	r5, r3, #27
 80074b2:	d411      	bmi.n	80074d8 <__swsetup_r+0x50>
 80074b4:	2309      	movs	r3, #9
 80074b6:	6033      	str	r3, [r6, #0]
 80074b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80074bc:	81a3      	strh	r3, [r4, #12]
 80074be:	f04f 30ff 	mov.w	r0, #4294967295
 80074c2:	e03e      	b.n	8007542 <__swsetup_r+0xba>
 80074c4:	4b25      	ldr	r3, [pc, #148]	; (800755c <__swsetup_r+0xd4>)
 80074c6:	429c      	cmp	r4, r3
 80074c8:	d101      	bne.n	80074ce <__swsetup_r+0x46>
 80074ca:	68ac      	ldr	r4, [r5, #8]
 80074cc:	e7eb      	b.n	80074a6 <__swsetup_r+0x1e>
 80074ce:	4b24      	ldr	r3, [pc, #144]	; (8007560 <__swsetup_r+0xd8>)
 80074d0:	429c      	cmp	r4, r3
 80074d2:	bf08      	it	eq
 80074d4:	68ec      	ldreq	r4, [r5, #12]
 80074d6:	e7e6      	b.n	80074a6 <__swsetup_r+0x1e>
 80074d8:	0758      	lsls	r0, r3, #29
 80074da:	d512      	bpl.n	8007502 <__swsetup_r+0x7a>
 80074dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074de:	b141      	cbz	r1, 80074f2 <__swsetup_r+0x6a>
 80074e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074e4:	4299      	cmp	r1, r3
 80074e6:	d002      	beq.n	80074ee <__swsetup_r+0x66>
 80074e8:	4630      	mov	r0, r6
 80074ea:	f000 f98f 	bl	800780c <_free_r>
 80074ee:	2300      	movs	r3, #0
 80074f0:	6363      	str	r3, [r4, #52]	; 0x34
 80074f2:	89a3      	ldrh	r3, [r4, #12]
 80074f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80074f8:	81a3      	strh	r3, [r4, #12]
 80074fa:	2300      	movs	r3, #0
 80074fc:	6063      	str	r3, [r4, #4]
 80074fe:	6923      	ldr	r3, [r4, #16]
 8007500:	6023      	str	r3, [r4, #0]
 8007502:	89a3      	ldrh	r3, [r4, #12]
 8007504:	f043 0308 	orr.w	r3, r3, #8
 8007508:	81a3      	strh	r3, [r4, #12]
 800750a:	6923      	ldr	r3, [r4, #16]
 800750c:	b94b      	cbnz	r3, 8007522 <__swsetup_r+0x9a>
 800750e:	89a3      	ldrh	r3, [r4, #12]
 8007510:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007518:	d003      	beq.n	8007522 <__swsetup_r+0x9a>
 800751a:	4621      	mov	r1, r4
 800751c:	4630      	mov	r0, r6
 800751e:	f000 f929 	bl	8007774 <__smakebuf_r>
 8007522:	89a0      	ldrh	r0, [r4, #12]
 8007524:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007528:	f010 0301 	ands.w	r3, r0, #1
 800752c:	d00a      	beq.n	8007544 <__swsetup_r+0xbc>
 800752e:	2300      	movs	r3, #0
 8007530:	60a3      	str	r3, [r4, #8]
 8007532:	6963      	ldr	r3, [r4, #20]
 8007534:	425b      	negs	r3, r3
 8007536:	61a3      	str	r3, [r4, #24]
 8007538:	6923      	ldr	r3, [r4, #16]
 800753a:	b943      	cbnz	r3, 800754e <__swsetup_r+0xc6>
 800753c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007540:	d1ba      	bne.n	80074b8 <__swsetup_r+0x30>
 8007542:	bd70      	pop	{r4, r5, r6, pc}
 8007544:	0781      	lsls	r1, r0, #30
 8007546:	bf58      	it	pl
 8007548:	6963      	ldrpl	r3, [r4, #20]
 800754a:	60a3      	str	r3, [r4, #8]
 800754c:	e7f4      	b.n	8007538 <__swsetup_r+0xb0>
 800754e:	2000      	movs	r0, #0
 8007550:	e7f7      	b.n	8007542 <__swsetup_r+0xba>
 8007552:	bf00      	nop
 8007554:	2000000c 	.word	0x2000000c
 8007558:	08007a10 	.word	0x08007a10
 800755c:	08007a30 	.word	0x08007a30
 8007560:	080079f0 	.word	0x080079f0

08007564 <_close_r>:
 8007564:	b538      	push	{r3, r4, r5, lr}
 8007566:	4d06      	ldr	r5, [pc, #24]	; (8007580 <_close_r+0x1c>)
 8007568:	2300      	movs	r3, #0
 800756a:	4604      	mov	r4, r0
 800756c:	4608      	mov	r0, r1
 800756e:	602b      	str	r3, [r5, #0]
 8007570:	f7fb f935 	bl	80027de <_close>
 8007574:	1c43      	adds	r3, r0, #1
 8007576:	d102      	bne.n	800757e <_close_r+0x1a>
 8007578:	682b      	ldr	r3, [r5, #0]
 800757a:	b103      	cbz	r3, 800757e <_close_r+0x1a>
 800757c:	6023      	str	r3, [r4, #0]
 800757e:	bd38      	pop	{r3, r4, r5, pc}
 8007580:	20000370 	.word	0x20000370

08007584 <__sflush_r>:
 8007584:	898a      	ldrh	r2, [r1, #12]
 8007586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800758a:	4605      	mov	r5, r0
 800758c:	0710      	lsls	r0, r2, #28
 800758e:	460c      	mov	r4, r1
 8007590:	d458      	bmi.n	8007644 <__sflush_r+0xc0>
 8007592:	684b      	ldr	r3, [r1, #4]
 8007594:	2b00      	cmp	r3, #0
 8007596:	dc05      	bgt.n	80075a4 <__sflush_r+0x20>
 8007598:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800759a:	2b00      	cmp	r3, #0
 800759c:	dc02      	bgt.n	80075a4 <__sflush_r+0x20>
 800759e:	2000      	movs	r0, #0
 80075a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075a6:	2e00      	cmp	r6, #0
 80075a8:	d0f9      	beq.n	800759e <__sflush_r+0x1a>
 80075aa:	2300      	movs	r3, #0
 80075ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80075b0:	682f      	ldr	r7, [r5, #0]
 80075b2:	602b      	str	r3, [r5, #0]
 80075b4:	d032      	beq.n	800761c <__sflush_r+0x98>
 80075b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80075b8:	89a3      	ldrh	r3, [r4, #12]
 80075ba:	075a      	lsls	r2, r3, #29
 80075bc:	d505      	bpl.n	80075ca <__sflush_r+0x46>
 80075be:	6863      	ldr	r3, [r4, #4]
 80075c0:	1ac0      	subs	r0, r0, r3
 80075c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80075c4:	b10b      	cbz	r3, 80075ca <__sflush_r+0x46>
 80075c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80075c8:	1ac0      	subs	r0, r0, r3
 80075ca:	2300      	movs	r3, #0
 80075cc:	4602      	mov	r2, r0
 80075ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075d0:	6a21      	ldr	r1, [r4, #32]
 80075d2:	4628      	mov	r0, r5
 80075d4:	47b0      	blx	r6
 80075d6:	1c43      	adds	r3, r0, #1
 80075d8:	89a3      	ldrh	r3, [r4, #12]
 80075da:	d106      	bne.n	80075ea <__sflush_r+0x66>
 80075dc:	6829      	ldr	r1, [r5, #0]
 80075de:	291d      	cmp	r1, #29
 80075e0:	d82c      	bhi.n	800763c <__sflush_r+0xb8>
 80075e2:	4a2a      	ldr	r2, [pc, #168]	; (800768c <__sflush_r+0x108>)
 80075e4:	40ca      	lsrs	r2, r1
 80075e6:	07d6      	lsls	r6, r2, #31
 80075e8:	d528      	bpl.n	800763c <__sflush_r+0xb8>
 80075ea:	2200      	movs	r2, #0
 80075ec:	6062      	str	r2, [r4, #4]
 80075ee:	04d9      	lsls	r1, r3, #19
 80075f0:	6922      	ldr	r2, [r4, #16]
 80075f2:	6022      	str	r2, [r4, #0]
 80075f4:	d504      	bpl.n	8007600 <__sflush_r+0x7c>
 80075f6:	1c42      	adds	r2, r0, #1
 80075f8:	d101      	bne.n	80075fe <__sflush_r+0x7a>
 80075fa:	682b      	ldr	r3, [r5, #0]
 80075fc:	b903      	cbnz	r3, 8007600 <__sflush_r+0x7c>
 80075fe:	6560      	str	r0, [r4, #84]	; 0x54
 8007600:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007602:	602f      	str	r7, [r5, #0]
 8007604:	2900      	cmp	r1, #0
 8007606:	d0ca      	beq.n	800759e <__sflush_r+0x1a>
 8007608:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800760c:	4299      	cmp	r1, r3
 800760e:	d002      	beq.n	8007616 <__sflush_r+0x92>
 8007610:	4628      	mov	r0, r5
 8007612:	f000 f8fb 	bl	800780c <_free_r>
 8007616:	2000      	movs	r0, #0
 8007618:	6360      	str	r0, [r4, #52]	; 0x34
 800761a:	e7c1      	b.n	80075a0 <__sflush_r+0x1c>
 800761c:	6a21      	ldr	r1, [r4, #32]
 800761e:	2301      	movs	r3, #1
 8007620:	4628      	mov	r0, r5
 8007622:	47b0      	blx	r6
 8007624:	1c41      	adds	r1, r0, #1
 8007626:	d1c7      	bne.n	80075b8 <__sflush_r+0x34>
 8007628:	682b      	ldr	r3, [r5, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d0c4      	beq.n	80075b8 <__sflush_r+0x34>
 800762e:	2b1d      	cmp	r3, #29
 8007630:	d001      	beq.n	8007636 <__sflush_r+0xb2>
 8007632:	2b16      	cmp	r3, #22
 8007634:	d101      	bne.n	800763a <__sflush_r+0xb6>
 8007636:	602f      	str	r7, [r5, #0]
 8007638:	e7b1      	b.n	800759e <__sflush_r+0x1a>
 800763a:	89a3      	ldrh	r3, [r4, #12]
 800763c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007640:	81a3      	strh	r3, [r4, #12]
 8007642:	e7ad      	b.n	80075a0 <__sflush_r+0x1c>
 8007644:	690f      	ldr	r7, [r1, #16]
 8007646:	2f00      	cmp	r7, #0
 8007648:	d0a9      	beq.n	800759e <__sflush_r+0x1a>
 800764a:	0793      	lsls	r3, r2, #30
 800764c:	680e      	ldr	r6, [r1, #0]
 800764e:	bf08      	it	eq
 8007650:	694b      	ldreq	r3, [r1, #20]
 8007652:	600f      	str	r7, [r1, #0]
 8007654:	bf18      	it	ne
 8007656:	2300      	movne	r3, #0
 8007658:	eba6 0807 	sub.w	r8, r6, r7
 800765c:	608b      	str	r3, [r1, #8]
 800765e:	f1b8 0f00 	cmp.w	r8, #0
 8007662:	dd9c      	ble.n	800759e <__sflush_r+0x1a>
 8007664:	6a21      	ldr	r1, [r4, #32]
 8007666:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007668:	4643      	mov	r3, r8
 800766a:	463a      	mov	r2, r7
 800766c:	4628      	mov	r0, r5
 800766e:	47b0      	blx	r6
 8007670:	2800      	cmp	r0, #0
 8007672:	dc06      	bgt.n	8007682 <__sflush_r+0xfe>
 8007674:	89a3      	ldrh	r3, [r4, #12]
 8007676:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800767a:	81a3      	strh	r3, [r4, #12]
 800767c:	f04f 30ff 	mov.w	r0, #4294967295
 8007680:	e78e      	b.n	80075a0 <__sflush_r+0x1c>
 8007682:	4407      	add	r7, r0
 8007684:	eba8 0800 	sub.w	r8, r8, r0
 8007688:	e7e9      	b.n	800765e <__sflush_r+0xda>
 800768a:	bf00      	nop
 800768c:	20400001 	.word	0x20400001

08007690 <_fflush_r>:
 8007690:	b538      	push	{r3, r4, r5, lr}
 8007692:	690b      	ldr	r3, [r1, #16]
 8007694:	4605      	mov	r5, r0
 8007696:	460c      	mov	r4, r1
 8007698:	b913      	cbnz	r3, 80076a0 <_fflush_r+0x10>
 800769a:	2500      	movs	r5, #0
 800769c:	4628      	mov	r0, r5
 800769e:	bd38      	pop	{r3, r4, r5, pc}
 80076a0:	b118      	cbz	r0, 80076aa <_fflush_r+0x1a>
 80076a2:	6983      	ldr	r3, [r0, #24]
 80076a4:	b90b      	cbnz	r3, 80076aa <_fflush_r+0x1a>
 80076a6:	f7ff fa4f 	bl	8006b48 <__sinit>
 80076aa:	4b14      	ldr	r3, [pc, #80]	; (80076fc <_fflush_r+0x6c>)
 80076ac:	429c      	cmp	r4, r3
 80076ae:	d11b      	bne.n	80076e8 <_fflush_r+0x58>
 80076b0:	686c      	ldr	r4, [r5, #4]
 80076b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d0ef      	beq.n	800769a <_fflush_r+0xa>
 80076ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80076bc:	07d0      	lsls	r0, r2, #31
 80076be:	d404      	bmi.n	80076ca <_fflush_r+0x3a>
 80076c0:	0599      	lsls	r1, r3, #22
 80076c2:	d402      	bmi.n	80076ca <_fflush_r+0x3a>
 80076c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076c6:	f7ff fadd 	bl	8006c84 <__retarget_lock_acquire_recursive>
 80076ca:	4628      	mov	r0, r5
 80076cc:	4621      	mov	r1, r4
 80076ce:	f7ff ff59 	bl	8007584 <__sflush_r>
 80076d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80076d4:	07da      	lsls	r2, r3, #31
 80076d6:	4605      	mov	r5, r0
 80076d8:	d4e0      	bmi.n	800769c <_fflush_r+0xc>
 80076da:	89a3      	ldrh	r3, [r4, #12]
 80076dc:	059b      	lsls	r3, r3, #22
 80076de:	d4dd      	bmi.n	800769c <_fflush_r+0xc>
 80076e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076e2:	f7ff fad0 	bl	8006c86 <__retarget_lock_release_recursive>
 80076e6:	e7d9      	b.n	800769c <_fflush_r+0xc>
 80076e8:	4b05      	ldr	r3, [pc, #20]	; (8007700 <_fflush_r+0x70>)
 80076ea:	429c      	cmp	r4, r3
 80076ec:	d101      	bne.n	80076f2 <_fflush_r+0x62>
 80076ee:	68ac      	ldr	r4, [r5, #8]
 80076f0:	e7df      	b.n	80076b2 <_fflush_r+0x22>
 80076f2:	4b04      	ldr	r3, [pc, #16]	; (8007704 <_fflush_r+0x74>)
 80076f4:	429c      	cmp	r4, r3
 80076f6:	bf08      	it	eq
 80076f8:	68ec      	ldreq	r4, [r5, #12]
 80076fa:	e7da      	b.n	80076b2 <_fflush_r+0x22>
 80076fc:	08007a10 	.word	0x08007a10
 8007700:	08007a30 	.word	0x08007a30
 8007704:	080079f0 	.word	0x080079f0

08007708 <_lseek_r>:
 8007708:	b538      	push	{r3, r4, r5, lr}
 800770a:	4d07      	ldr	r5, [pc, #28]	; (8007728 <_lseek_r+0x20>)
 800770c:	4604      	mov	r4, r0
 800770e:	4608      	mov	r0, r1
 8007710:	4611      	mov	r1, r2
 8007712:	2200      	movs	r2, #0
 8007714:	602a      	str	r2, [r5, #0]
 8007716:	461a      	mov	r2, r3
 8007718:	f7fb f888 	bl	800282c <_lseek>
 800771c:	1c43      	adds	r3, r0, #1
 800771e:	d102      	bne.n	8007726 <_lseek_r+0x1e>
 8007720:	682b      	ldr	r3, [r5, #0]
 8007722:	b103      	cbz	r3, 8007726 <_lseek_r+0x1e>
 8007724:	6023      	str	r3, [r4, #0]
 8007726:	bd38      	pop	{r3, r4, r5, pc}
 8007728:	20000370 	.word	0x20000370

0800772c <__swhatbuf_r>:
 800772c:	b570      	push	{r4, r5, r6, lr}
 800772e:	460e      	mov	r6, r1
 8007730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007734:	2900      	cmp	r1, #0
 8007736:	b096      	sub	sp, #88	; 0x58
 8007738:	4614      	mov	r4, r2
 800773a:	461d      	mov	r5, r3
 800773c:	da07      	bge.n	800774e <__swhatbuf_r+0x22>
 800773e:	2300      	movs	r3, #0
 8007740:	602b      	str	r3, [r5, #0]
 8007742:	89b3      	ldrh	r3, [r6, #12]
 8007744:	061a      	lsls	r2, r3, #24
 8007746:	d410      	bmi.n	800776a <__swhatbuf_r+0x3e>
 8007748:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800774c:	e00e      	b.n	800776c <__swhatbuf_r+0x40>
 800774e:	466a      	mov	r2, sp
 8007750:	f000 f8be 	bl	80078d0 <_fstat_r>
 8007754:	2800      	cmp	r0, #0
 8007756:	dbf2      	blt.n	800773e <__swhatbuf_r+0x12>
 8007758:	9a01      	ldr	r2, [sp, #4]
 800775a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800775e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007762:	425a      	negs	r2, r3
 8007764:	415a      	adcs	r2, r3
 8007766:	602a      	str	r2, [r5, #0]
 8007768:	e7ee      	b.n	8007748 <__swhatbuf_r+0x1c>
 800776a:	2340      	movs	r3, #64	; 0x40
 800776c:	2000      	movs	r0, #0
 800776e:	6023      	str	r3, [r4, #0]
 8007770:	b016      	add	sp, #88	; 0x58
 8007772:	bd70      	pop	{r4, r5, r6, pc}

08007774 <__smakebuf_r>:
 8007774:	898b      	ldrh	r3, [r1, #12]
 8007776:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007778:	079d      	lsls	r5, r3, #30
 800777a:	4606      	mov	r6, r0
 800777c:	460c      	mov	r4, r1
 800777e:	d507      	bpl.n	8007790 <__smakebuf_r+0x1c>
 8007780:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007784:	6023      	str	r3, [r4, #0]
 8007786:	6123      	str	r3, [r4, #16]
 8007788:	2301      	movs	r3, #1
 800778a:	6163      	str	r3, [r4, #20]
 800778c:	b002      	add	sp, #8
 800778e:	bd70      	pop	{r4, r5, r6, pc}
 8007790:	ab01      	add	r3, sp, #4
 8007792:	466a      	mov	r2, sp
 8007794:	f7ff ffca 	bl	800772c <__swhatbuf_r>
 8007798:	9900      	ldr	r1, [sp, #0]
 800779a:	4605      	mov	r5, r0
 800779c:	4630      	mov	r0, r6
 800779e:	f7ff fa73 	bl	8006c88 <_malloc_r>
 80077a2:	b948      	cbnz	r0, 80077b8 <__smakebuf_r+0x44>
 80077a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077a8:	059a      	lsls	r2, r3, #22
 80077aa:	d4ef      	bmi.n	800778c <__smakebuf_r+0x18>
 80077ac:	f023 0303 	bic.w	r3, r3, #3
 80077b0:	f043 0302 	orr.w	r3, r3, #2
 80077b4:	81a3      	strh	r3, [r4, #12]
 80077b6:	e7e3      	b.n	8007780 <__smakebuf_r+0xc>
 80077b8:	4b0d      	ldr	r3, [pc, #52]	; (80077f0 <__smakebuf_r+0x7c>)
 80077ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80077bc:	89a3      	ldrh	r3, [r4, #12]
 80077be:	6020      	str	r0, [r4, #0]
 80077c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077c4:	81a3      	strh	r3, [r4, #12]
 80077c6:	9b00      	ldr	r3, [sp, #0]
 80077c8:	6163      	str	r3, [r4, #20]
 80077ca:	9b01      	ldr	r3, [sp, #4]
 80077cc:	6120      	str	r0, [r4, #16]
 80077ce:	b15b      	cbz	r3, 80077e8 <__smakebuf_r+0x74>
 80077d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077d4:	4630      	mov	r0, r6
 80077d6:	f000 f88d 	bl	80078f4 <_isatty_r>
 80077da:	b128      	cbz	r0, 80077e8 <__smakebuf_r+0x74>
 80077dc:	89a3      	ldrh	r3, [r4, #12]
 80077de:	f023 0303 	bic.w	r3, r3, #3
 80077e2:	f043 0301 	orr.w	r3, r3, #1
 80077e6:	81a3      	strh	r3, [r4, #12]
 80077e8:	89a0      	ldrh	r0, [r4, #12]
 80077ea:	4305      	orrs	r5, r0
 80077ec:	81a5      	strh	r5, [r4, #12]
 80077ee:	e7cd      	b.n	800778c <__smakebuf_r+0x18>
 80077f0:	08006ae1 	.word	0x08006ae1

080077f4 <__malloc_lock>:
 80077f4:	4801      	ldr	r0, [pc, #4]	; (80077fc <__malloc_lock+0x8>)
 80077f6:	f7ff ba45 	b.w	8006c84 <__retarget_lock_acquire_recursive>
 80077fa:	bf00      	nop
 80077fc:	20000368 	.word	0x20000368

08007800 <__malloc_unlock>:
 8007800:	4801      	ldr	r0, [pc, #4]	; (8007808 <__malloc_unlock+0x8>)
 8007802:	f7ff ba40 	b.w	8006c86 <__retarget_lock_release_recursive>
 8007806:	bf00      	nop
 8007808:	20000368 	.word	0x20000368

0800780c <_free_r>:
 800780c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800780e:	2900      	cmp	r1, #0
 8007810:	d048      	beq.n	80078a4 <_free_r+0x98>
 8007812:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007816:	9001      	str	r0, [sp, #4]
 8007818:	2b00      	cmp	r3, #0
 800781a:	f1a1 0404 	sub.w	r4, r1, #4
 800781e:	bfb8      	it	lt
 8007820:	18e4      	addlt	r4, r4, r3
 8007822:	f7ff ffe7 	bl	80077f4 <__malloc_lock>
 8007826:	4a20      	ldr	r2, [pc, #128]	; (80078a8 <_free_r+0x9c>)
 8007828:	9801      	ldr	r0, [sp, #4]
 800782a:	6813      	ldr	r3, [r2, #0]
 800782c:	4615      	mov	r5, r2
 800782e:	b933      	cbnz	r3, 800783e <_free_r+0x32>
 8007830:	6063      	str	r3, [r4, #4]
 8007832:	6014      	str	r4, [r2, #0]
 8007834:	b003      	add	sp, #12
 8007836:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800783a:	f7ff bfe1 	b.w	8007800 <__malloc_unlock>
 800783e:	42a3      	cmp	r3, r4
 8007840:	d90b      	bls.n	800785a <_free_r+0x4e>
 8007842:	6821      	ldr	r1, [r4, #0]
 8007844:	1862      	adds	r2, r4, r1
 8007846:	4293      	cmp	r3, r2
 8007848:	bf04      	itt	eq
 800784a:	681a      	ldreq	r2, [r3, #0]
 800784c:	685b      	ldreq	r3, [r3, #4]
 800784e:	6063      	str	r3, [r4, #4]
 8007850:	bf04      	itt	eq
 8007852:	1852      	addeq	r2, r2, r1
 8007854:	6022      	streq	r2, [r4, #0]
 8007856:	602c      	str	r4, [r5, #0]
 8007858:	e7ec      	b.n	8007834 <_free_r+0x28>
 800785a:	461a      	mov	r2, r3
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	b10b      	cbz	r3, 8007864 <_free_r+0x58>
 8007860:	42a3      	cmp	r3, r4
 8007862:	d9fa      	bls.n	800785a <_free_r+0x4e>
 8007864:	6811      	ldr	r1, [r2, #0]
 8007866:	1855      	adds	r5, r2, r1
 8007868:	42a5      	cmp	r5, r4
 800786a:	d10b      	bne.n	8007884 <_free_r+0x78>
 800786c:	6824      	ldr	r4, [r4, #0]
 800786e:	4421      	add	r1, r4
 8007870:	1854      	adds	r4, r2, r1
 8007872:	42a3      	cmp	r3, r4
 8007874:	6011      	str	r1, [r2, #0]
 8007876:	d1dd      	bne.n	8007834 <_free_r+0x28>
 8007878:	681c      	ldr	r4, [r3, #0]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	6053      	str	r3, [r2, #4]
 800787e:	4421      	add	r1, r4
 8007880:	6011      	str	r1, [r2, #0]
 8007882:	e7d7      	b.n	8007834 <_free_r+0x28>
 8007884:	d902      	bls.n	800788c <_free_r+0x80>
 8007886:	230c      	movs	r3, #12
 8007888:	6003      	str	r3, [r0, #0]
 800788a:	e7d3      	b.n	8007834 <_free_r+0x28>
 800788c:	6825      	ldr	r5, [r4, #0]
 800788e:	1961      	adds	r1, r4, r5
 8007890:	428b      	cmp	r3, r1
 8007892:	bf04      	itt	eq
 8007894:	6819      	ldreq	r1, [r3, #0]
 8007896:	685b      	ldreq	r3, [r3, #4]
 8007898:	6063      	str	r3, [r4, #4]
 800789a:	bf04      	itt	eq
 800789c:	1949      	addeq	r1, r1, r5
 800789e:	6021      	streq	r1, [r4, #0]
 80078a0:	6054      	str	r4, [r2, #4]
 80078a2:	e7c7      	b.n	8007834 <_free_r+0x28>
 80078a4:	b003      	add	sp, #12
 80078a6:	bd30      	pop	{r4, r5, pc}
 80078a8:	2000009c 	.word	0x2000009c

080078ac <_read_r>:
 80078ac:	b538      	push	{r3, r4, r5, lr}
 80078ae:	4d07      	ldr	r5, [pc, #28]	; (80078cc <_read_r+0x20>)
 80078b0:	4604      	mov	r4, r0
 80078b2:	4608      	mov	r0, r1
 80078b4:	4611      	mov	r1, r2
 80078b6:	2200      	movs	r2, #0
 80078b8:	602a      	str	r2, [r5, #0]
 80078ba:	461a      	mov	r2, r3
 80078bc:	f7fa ff56 	bl	800276c <_read>
 80078c0:	1c43      	adds	r3, r0, #1
 80078c2:	d102      	bne.n	80078ca <_read_r+0x1e>
 80078c4:	682b      	ldr	r3, [r5, #0]
 80078c6:	b103      	cbz	r3, 80078ca <_read_r+0x1e>
 80078c8:	6023      	str	r3, [r4, #0]
 80078ca:	bd38      	pop	{r3, r4, r5, pc}
 80078cc:	20000370 	.word	0x20000370

080078d0 <_fstat_r>:
 80078d0:	b538      	push	{r3, r4, r5, lr}
 80078d2:	4d07      	ldr	r5, [pc, #28]	; (80078f0 <_fstat_r+0x20>)
 80078d4:	2300      	movs	r3, #0
 80078d6:	4604      	mov	r4, r0
 80078d8:	4608      	mov	r0, r1
 80078da:	4611      	mov	r1, r2
 80078dc:	602b      	str	r3, [r5, #0]
 80078de:	f7fa ff8a 	bl	80027f6 <_fstat>
 80078e2:	1c43      	adds	r3, r0, #1
 80078e4:	d102      	bne.n	80078ec <_fstat_r+0x1c>
 80078e6:	682b      	ldr	r3, [r5, #0]
 80078e8:	b103      	cbz	r3, 80078ec <_fstat_r+0x1c>
 80078ea:	6023      	str	r3, [r4, #0]
 80078ec:	bd38      	pop	{r3, r4, r5, pc}
 80078ee:	bf00      	nop
 80078f0:	20000370 	.word	0x20000370

080078f4 <_isatty_r>:
 80078f4:	b538      	push	{r3, r4, r5, lr}
 80078f6:	4d06      	ldr	r5, [pc, #24]	; (8007910 <_isatty_r+0x1c>)
 80078f8:	2300      	movs	r3, #0
 80078fa:	4604      	mov	r4, r0
 80078fc:	4608      	mov	r0, r1
 80078fe:	602b      	str	r3, [r5, #0]
 8007900:	f7fa ff89 	bl	8002816 <_isatty>
 8007904:	1c43      	adds	r3, r0, #1
 8007906:	d102      	bne.n	800790e <_isatty_r+0x1a>
 8007908:	682b      	ldr	r3, [r5, #0]
 800790a:	b103      	cbz	r3, 800790e <_isatty_r+0x1a>
 800790c:	6023      	str	r3, [r4, #0]
 800790e:	bd38      	pop	{r3, r4, r5, pc}
 8007910:	20000370 	.word	0x20000370

08007914 <_init>:
 8007914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007916:	bf00      	nop
 8007918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800791a:	bc08      	pop	{r3}
 800791c:	469e      	mov	lr, r3
 800791e:	4770      	bx	lr

08007920 <_fini>:
 8007920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007922:	bf00      	nop
 8007924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007926:	bc08      	pop	{r3}
 8007928:	469e      	mov	lr, r3
 800792a:	4770      	bx	lr
