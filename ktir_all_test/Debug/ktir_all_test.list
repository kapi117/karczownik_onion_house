
ktir_all_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d0c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08004e9c  08004e9c  00014e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fa4  08004fa4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004fa4  08004fa4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004fa4  08004fa4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fa4  08004fa4  00014fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fa8  08004fa8  00014fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004fac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000160  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001d0  200001d0  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eb34  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002057  00000000  00000000  0002ebd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009f8  00000000  00000000  00030c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000930  00000000  00000000  00031628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021135  00000000  00000000  00031f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d34c  00000000  00000000  0005308d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2260  00000000  00000000  000603d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00122639  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000302c  00000000  00000000  0012268c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004e84 	.word	0x08004e84

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004e84 	.word	0x08004e84

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	2b0a      	cmp	r3, #10
 800027c:	d102      	bne.n	8000284 <__io_putchar+0x14>
    __io_putchar('\r');
 800027e:	200d      	movs	r0, #13
 8000280:	f7ff fff6 	bl	8000270 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000284:	1d39      	adds	r1, r7, #4
 8000286:	f04f 33ff 	mov.w	r3, #4294967295
 800028a:	2201      	movs	r2, #1
 800028c:	4803      	ldr	r0, [pc, #12]	; (800029c <__io_putchar+0x2c>)
 800028e:	f003 fa99 	bl	80037c4 <HAL_UART_Transmit>

  return 1;
 8000292:	2301      	movs	r3, #1
}
 8000294:	4618      	mov	r0, r3
 8000296:	3708      	adds	r7, #8
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	20000138 	.word	0x20000138

080002a0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
	conversion_complete = 1;
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <HAL_ADC_ConvCpltCallback+0x1c>)
 80002aa:	2201      	movs	r2, #1
 80002ac:	701a      	strb	r2, [r3, #0]
}
 80002ae:	bf00      	nop
 80002b0:	370c      	adds	r7, #12
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	2000008c 	.word	0x2000008c

080002c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b084      	sub	sp, #16
 80002c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c6:	f000 fbd1 	bl	8000a6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ca:	f000 f84d 	bl	8000368 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ce:	f000 f98d 	bl	80005ec <MX_GPIO_Init>
  MX_DMA_Init();
 80002d2:	f000 f96d 	bl	80005b0 <MX_DMA_Init>
  MX_ADC1_Init();
 80002d6:	f000 f8a1 	bl	800041c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80002da:	f000 f939 	bl	8000550 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	uint32_t tick = HAL_GetTick();
 80002de:	f000 fc1f 	bl	8000b20 <HAL_GetTick>
 80002e2:	6078      	str	r0, [r7, #4]
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GetTick() - tick > 400){
 80002e4:	f000 fc1c 	bl	8000b20 <HAL_GetTick>
 80002e8:	4602      	mov	r2, r0
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	1ad3      	subs	r3, r2, r3
 80002ee:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80002f2:	d9f7      	bls.n	80002e4 <main+0x24>
		  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ktir_results, NUMBER_OF_SENSORS);
 80002f4:	2204      	movs	r2, #4
 80002f6:	4918      	ldr	r1, [pc, #96]	; (8000358 <main+0x98>)
 80002f8:	4818      	ldr	r0, [pc, #96]	; (800035c <main+0x9c>)
 80002fa:	f000 fdc3 	bl	8000e84 <HAL_ADC_Start_DMA>
		  while (conversion_complete == 0){
 80002fe:	e002      	b.n	8000306 <main+0x46>
			  printf(".");
 8000300:	202e      	movs	r0, #46	; 0x2e
 8000302:	f003 fe23 	bl	8003f4c <putchar>
		  while (conversion_complete == 0){
 8000306:	4b16      	ldr	r3, [pc, #88]	; (8000360 <main+0xa0>)
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	b2db      	uxtb	r3, r3
 800030c:	2b00      	cmp	r3, #0
 800030e:	d0f7      	beq.n	8000300 <main+0x40>
		  }
		  conversion_complete = 0;
 8000310:	4b13      	ldr	r3, [pc, #76]	; (8000360 <main+0xa0>)
 8000312:	2200      	movs	r2, #0
 8000314:	701a      	strb	r2, [r3, #0]
		  printf("\n");
 8000316:	200a      	movs	r0, #10
 8000318:	f003 fe18 	bl	8003f4c <putchar>

		  printf("Result 1: %d\tResult 2: %d\tResult 3: %d\tResult 4: %d\n", ktir_results[0], ktir_results[1], ktir_results[2], ktir_results[3]);
 800031c:	4b0e      	ldr	r3, [pc, #56]	; (8000358 <main+0x98>)
 800031e:	881b      	ldrh	r3, [r3, #0]
 8000320:	b29b      	uxth	r3, r3
 8000322:	4619      	mov	r1, r3
 8000324:	4b0c      	ldr	r3, [pc, #48]	; (8000358 <main+0x98>)
 8000326:	885b      	ldrh	r3, [r3, #2]
 8000328:	b29b      	uxth	r3, r3
 800032a:	461a      	mov	r2, r3
 800032c:	4b0a      	ldr	r3, [pc, #40]	; (8000358 <main+0x98>)
 800032e:	889b      	ldrh	r3, [r3, #4]
 8000330:	b29b      	uxth	r3, r3
 8000332:	4618      	mov	r0, r3
 8000334:	4b08      	ldr	r3, [pc, #32]	; (8000358 <main+0x98>)
 8000336:	88db      	ldrh	r3, [r3, #6]
 8000338:	b29b      	uxth	r3, r3
 800033a:	9300      	str	r3, [sp, #0]
 800033c:	4603      	mov	r3, r0
 800033e:	4809      	ldr	r0, [pc, #36]	; (8000364 <main+0xa4>)
 8000340:	f003 fdec 	bl	8003f1c <iprintf>
		  tick = HAL_GetTick();
 8000344:	f000 fbec 	bl	8000b20 <HAL_GetTick>
 8000348:	6078      	str	r0, [r7, #4]
		  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800034a:	2120      	movs	r1, #32
 800034c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000350:	f001 ff5c 	bl	800220c <HAL_GPIO_TogglePin>
	  if(HAL_GetTick() - tick > 400){
 8000354:	e7c6      	b.n	80002e4 <main+0x24>
 8000356:	bf00      	nop
 8000358:	200000ec 	.word	0x200000ec
 800035c:	2000009c 	.word	0x2000009c
 8000360:	2000008c 	.word	0x2000008c
 8000364:	08004e9c 	.word	0x08004e9c

08000368 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b096      	sub	sp, #88	; 0x58
 800036c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800036e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000372:	2228      	movs	r2, #40	; 0x28
 8000374:	2100      	movs	r1, #0
 8000376:	4618      	mov	r0, r3
 8000378:	f003 fdc8 	bl	8003f0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800037c:	f107 031c 	add.w	r3, r7, #28
 8000380:	2200      	movs	r2, #0
 8000382:	601a      	str	r2, [r3, #0]
 8000384:	605a      	str	r2, [r3, #4]
 8000386:	609a      	str	r2, [r3, #8]
 8000388:	60da      	str	r2, [r3, #12]
 800038a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800038c:	463b      	mov	r3, r7
 800038e:	2200      	movs	r2, #0
 8000390:	601a      	str	r2, [r3, #0]
 8000392:	605a      	str	r2, [r3, #4]
 8000394:	609a      	str	r2, [r3, #8]
 8000396:	60da      	str	r2, [r3, #12]
 8000398:	611a      	str	r2, [r3, #16]
 800039a:	615a      	str	r2, [r3, #20]
 800039c:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800039e:	2302      	movs	r3, #2
 80003a0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003a2:	2301      	movs	r3, #1
 80003a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003a6:	2310      	movs	r3, #16
 80003a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003aa:	2302      	movs	r3, #2
 80003ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003ae:	2300      	movs	r3, #0
 80003b0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80003b2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80003b6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003bc:	4618      	mov	r0, r3
 80003be:	f001 ff3f 	bl	8002240 <HAL_RCC_OscConfig>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <SystemClock_Config+0x64>
  {
    Error_Handler();
 80003c8:	f000 f94e 	bl	8000668 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003cc:	230f      	movs	r3, #15
 80003ce:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003d0:	2300      	movs	r3, #0
 80003d2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003d4:	2300      	movs	r3, #0
 80003d6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003d8:	2300      	movs	r3, #0
 80003da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003dc:	2300      	movs	r3, #0
 80003de:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003e0:	f107 031c 	add.w	r3, r7, #28
 80003e4:	2100      	movs	r1, #0
 80003e6:	4618      	mov	r0, r3
 80003e8:	f002 fe32 	bl	8003050 <HAL_RCC_ClockConfig>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80003f2:	f000 f939 	bl	8000668 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80003f6:	2380      	movs	r3, #128	; 0x80
 80003f8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80003fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003fe:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000400:	463b      	mov	r3, r7
 8000402:	4618      	mov	r0, r3
 8000404:	f003 f85a 	bl	80034bc <HAL_RCCEx_PeriphCLKConfig>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800040e:	f000 f92b 	bl	8000668 <Error_Handler>
  }
}
 8000412:	bf00      	nop
 8000414:	3758      	adds	r7, #88	; 0x58
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
	...

0800041c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b08a      	sub	sp, #40	; 0x28
 8000420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000422:	f107 031c 	add.w	r3, r7, #28
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]
 800042c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800042e:	1d3b      	adds	r3, r7, #4
 8000430:	2200      	movs	r2, #0
 8000432:	601a      	str	r2, [r3, #0]
 8000434:	605a      	str	r2, [r3, #4]
 8000436:	609a      	str	r2, [r3, #8]
 8000438:	60da      	str	r2, [r3, #12]
 800043a:	611a      	str	r2, [r3, #16]
 800043c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800043e:	4b43      	ldr	r3, [pc, #268]	; (800054c <MX_ADC1_Init+0x130>)
 8000440:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000444:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000446:	4b41      	ldr	r3, [pc, #260]	; (800054c <MX_ADC1_Init+0x130>)
 8000448:	2200      	movs	r2, #0
 800044a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800044c:	4b3f      	ldr	r3, [pc, #252]	; (800054c <MX_ADC1_Init+0x130>)
 800044e:	2200      	movs	r2, #0
 8000450:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000452:	4b3e      	ldr	r3, [pc, #248]	; (800054c <MX_ADC1_Init+0x130>)
 8000454:	2201      	movs	r2, #1
 8000456:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000458:	4b3c      	ldr	r3, [pc, #240]	; (800054c <MX_ADC1_Init+0x130>)
 800045a:	2200      	movs	r2, #0
 800045c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800045e:	4b3b      	ldr	r3, [pc, #236]	; (800054c <MX_ADC1_Init+0x130>)
 8000460:	2200      	movs	r2, #0
 8000462:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000466:	4b39      	ldr	r3, [pc, #228]	; (800054c <MX_ADC1_Init+0x130>)
 8000468:	2200      	movs	r2, #0
 800046a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800046c:	4b37      	ldr	r3, [pc, #220]	; (800054c <MX_ADC1_Init+0x130>)
 800046e:	2201      	movs	r2, #1
 8000470:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000472:	4b36      	ldr	r3, [pc, #216]	; (800054c <MX_ADC1_Init+0x130>)
 8000474:	2200      	movs	r2, #0
 8000476:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000478:	4b34      	ldr	r3, [pc, #208]	; (800054c <MX_ADC1_Init+0x130>)
 800047a:	2204      	movs	r2, #4
 800047c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800047e:	4b33      	ldr	r3, [pc, #204]	; (800054c <MX_ADC1_Init+0x130>)
 8000480:	2200      	movs	r2, #0
 8000482:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000486:	4b31      	ldr	r3, [pc, #196]	; (800054c <MX_ADC1_Init+0x130>)
 8000488:	2204      	movs	r2, #4
 800048a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800048c:	4b2f      	ldr	r3, [pc, #188]	; (800054c <MX_ADC1_Init+0x130>)
 800048e:	2200      	movs	r2, #0
 8000490:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000492:	4b2e      	ldr	r3, [pc, #184]	; (800054c <MX_ADC1_Init+0x130>)
 8000494:	2200      	movs	r2, #0
 8000496:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000498:	482c      	ldr	r0, [pc, #176]	; (800054c <MX_ADC1_Init+0x130>)
 800049a:	f000 fb61 	bl	8000b60 <HAL_ADC_Init>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80004a4:	f000 f8e0 	bl	8000668 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80004a8:	2300      	movs	r3, #0
 80004aa:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80004ac:	f107 031c 	add.w	r3, r7, #28
 80004b0:	4619      	mov	r1, r3
 80004b2:	4826      	ldr	r0, [pc, #152]	; (800054c <MX_ADC1_Init+0x130>)
 80004b4:	f001 f882 	bl	80015bc <HAL_ADCEx_MultiModeConfigChannel>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80004be:	f000 f8d3 	bl	8000668 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80004c2:	2301      	movs	r3, #1
 80004c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004c6:	2301      	movs	r3, #1
 80004c8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004ca:	2300      	movs	r3, #0
 80004cc:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004ce:	2300      	movs	r3, #0
 80004d0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004d2:	2300      	movs	r3, #0
 80004d4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80004d6:	2300      	movs	r3, #0
 80004d8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	4619      	mov	r1, r3
 80004de:	481b      	ldr	r0, [pc, #108]	; (800054c <MX_ADC1_Init+0x130>)
 80004e0:	f000 fdaa 	bl	8001038 <HAL_ADC_ConfigChannel>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80004ea:	f000 f8bd 	bl	8000668 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80004ee:	2302      	movs	r3, #2
 80004f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80004f2:	2302      	movs	r3, #2
 80004f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	4619      	mov	r1, r3
 80004fa:	4814      	ldr	r0, [pc, #80]	; (800054c <MX_ADC1_Init+0x130>)
 80004fc:	f000 fd9c 	bl	8001038 <HAL_ADC_ConfigChannel>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8000506:	f000 f8af 	bl	8000668 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800050a:	2306      	movs	r3, #6
 800050c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800050e:	2303      	movs	r3, #3
 8000510:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000512:	1d3b      	adds	r3, r7, #4
 8000514:	4619      	mov	r1, r3
 8000516:	480d      	ldr	r0, [pc, #52]	; (800054c <MX_ADC1_Init+0x130>)
 8000518:	f000 fd8e 	bl	8001038 <HAL_ADC_ConfigChannel>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
 8000522:	f000 f8a1 	bl	8000668 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000526:	2307      	movs	r3, #7
 8000528:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800052a:	2304      	movs	r3, #4
 800052c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800052e:	1d3b      	adds	r3, r7, #4
 8000530:	4619      	mov	r1, r3
 8000532:	4806      	ldr	r0, [pc, #24]	; (800054c <MX_ADC1_Init+0x130>)
 8000534:	f000 fd80 	bl	8001038 <HAL_ADC_ConfigChannel>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 800053e:	f000 f893 	bl	8000668 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000542:	bf00      	nop
 8000544:	3728      	adds	r7, #40	; 0x28
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	2000009c 	.word	0x2000009c

08000550 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000554:	4b14      	ldr	r3, [pc, #80]	; (80005a8 <MX_USART2_UART_Init+0x58>)
 8000556:	4a15      	ldr	r2, [pc, #84]	; (80005ac <MX_USART2_UART_Init+0x5c>)
 8000558:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800055a:	4b13      	ldr	r3, [pc, #76]	; (80005a8 <MX_USART2_UART_Init+0x58>)
 800055c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000560:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000562:	4b11      	ldr	r3, [pc, #68]	; (80005a8 <MX_USART2_UART_Init+0x58>)
 8000564:	2200      	movs	r2, #0
 8000566:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000568:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <MX_USART2_UART_Init+0x58>)
 800056a:	2200      	movs	r2, #0
 800056c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800056e:	4b0e      	ldr	r3, [pc, #56]	; (80005a8 <MX_USART2_UART_Init+0x58>)
 8000570:	2200      	movs	r2, #0
 8000572:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000574:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <MX_USART2_UART_Init+0x58>)
 8000576:	220c      	movs	r2, #12
 8000578:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800057a:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <MX_USART2_UART_Init+0x58>)
 800057c:	2200      	movs	r2, #0
 800057e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000580:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <MX_USART2_UART_Init+0x58>)
 8000582:	2200      	movs	r2, #0
 8000584:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000586:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <MX_USART2_UART_Init+0x58>)
 8000588:	2200      	movs	r2, #0
 800058a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <MX_USART2_UART_Init+0x58>)
 800058e:	2200      	movs	r2, #0
 8000590:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000592:	4805      	ldr	r0, [pc, #20]	; (80005a8 <MX_USART2_UART_Init+0x58>)
 8000594:	f003 f8c8 	bl	8003728 <HAL_UART_Init>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800059e:	f000 f863 	bl	8000668 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000138 	.word	0x20000138
 80005ac:	40004400 	.word	0x40004400

080005b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005b6:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <MX_DMA_Init+0x38>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	4a0b      	ldr	r2, [pc, #44]	; (80005e8 <MX_DMA_Init+0x38>)
 80005bc:	f043 0301 	orr.w	r3, r3, #1
 80005c0:	6153      	str	r3, [r2, #20]
 80005c2:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <MX_DMA_Init+0x38>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2100      	movs	r1, #0
 80005d2:	200b      	movs	r0, #11
 80005d4:	f001 fac3 	bl	8001b5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005d8:	200b      	movs	r0, #11
 80005da:	f001 fadc 	bl	8001b96 <HAL_NVIC_EnableIRQ>

}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40021000 	.word	0x40021000

080005ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	f107 030c 	add.w	r3, r7, #12
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000602:	4b18      	ldr	r3, [pc, #96]	; (8000664 <MX_GPIO_Init+0x78>)
 8000604:	695b      	ldr	r3, [r3, #20]
 8000606:	4a17      	ldr	r2, [pc, #92]	; (8000664 <MX_GPIO_Init+0x78>)
 8000608:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800060c:	6153      	str	r3, [r2, #20]
 800060e:	4b15      	ldr	r3, [pc, #84]	; (8000664 <MX_GPIO_Init+0x78>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	4b12      	ldr	r3, [pc, #72]	; (8000664 <MX_GPIO_Init+0x78>)
 800061c:	695b      	ldr	r3, [r3, #20]
 800061e:	4a11      	ldr	r2, [pc, #68]	; (8000664 <MX_GPIO_Init+0x78>)
 8000620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000624:	6153      	str	r3, [r2, #20]
 8000626:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <MX_GPIO_Init+0x78>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	2120      	movs	r1, #32
 8000636:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800063a:	f001 fdcf 	bl	80021dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 800063e:	2320      	movs	r3, #32
 8000640:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000642:	2301      	movs	r3, #1
 8000644:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000646:	2300      	movs	r3, #0
 8000648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064a:	2300      	movs	r3, #0
 800064c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 800064e:	f107 030c 	add.w	r3, r7, #12
 8000652:	4619      	mov	r1, r3
 8000654:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000658:	f001 fc4e 	bl	8001ef8 <HAL_GPIO_Init>

}
 800065c:	bf00      	nop
 800065e:	3720      	adds	r7, #32
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40021000 	.word	0x40021000

08000668 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800066c:	b672      	cpsid	i
}
 800066e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000670:	e7fe      	b.n	8000670 <Error_Handler+0x8>
	...

08000674 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800067a:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <HAL_MspInit+0x44>)
 800067c:	699b      	ldr	r3, [r3, #24]
 800067e:	4a0e      	ldr	r2, [pc, #56]	; (80006b8 <HAL_MspInit+0x44>)
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	6193      	str	r3, [r2, #24]
 8000686:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <HAL_MspInit+0x44>)
 8000688:	699b      	ldr	r3, [r3, #24]
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <HAL_MspInit+0x44>)
 8000694:	69db      	ldr	r3, [r3, #28]
 8000696:	4a08      	ldr	r2, [pc, #32]	; (80006b8 <HAL_MspInit+0x44>)
 8000698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069c:	61d3      	str	r3, [r2, #28]
 800069e:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <HAL_MspInit+0x44>)
 80006a0:	69db      	ldr	r3, [r3, #28]
 80006a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a6:	603b      	str	r3, [r7, #0]
 80006a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	40021000 	.word	0x40021000

080006bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08a      	sub	sp, #40	; 0x28
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80006dc:	d164      	bne.n	80007a8 <HAL_ADC_MspInit+0xec>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80006de:	4b34      	ldr	r3, [pc, #208]	; (80007b0 <HAL_ADC_MspInit+0xf4>)
 80006e0:	695b      	ldr	r3, [r3, #20]
 80006e2:	4a33      	ldr	r2, [pc, #204]	; (80007b0 <HAL_ADC_MspInit+0xf4>)
 80006e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e8:	6153      	str	r3, [r2, #20]
 80006ea:	4b31      	ldr	r3, [pc, #196]	; (80007b0 <HAL_ADC_MspInit+0xf4>)
 80006ec:	695b      	ldr	r3, [r3, #20]
 80006ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f6:	4b2e      	ldr	r3, [pc, #184]	; (80007b0 <HAL_ADC_MspInit+0xf4>)
 80006f8:	695b      	ldr	r3, [r3, #20]
 80006fa:	4a2d      	ldr	r2, [pc, #180]	; (80007b0 <HAL_ADC_MspInit+0xf4>)
 80006fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000700:	6153      	str	r3, [r2, #20]
 8000702:	4b2b      	ldr	r3, [pc, #172]	; (80007b0 <HAL_ADC_MspInit+0xf4>)
 8000704:	695b      	ldr	r3, [r3, #20]
 8000706:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	4b28      	ldr	r3, [pc, #160]	; (80007b0 <HAL_ADC_MspInit+0xf4>)
 8000710:	695b      	ldr	r3, [r3, #20]
 8000712:	4a27      	ldr	r2, [pc, #156]	; (80007b0 <HAL_ADC_MspInit+0xf4>)
 8000714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000718:	6153      	str	r3, [r2, #20]
 800071a:	4b25      	ldr	r3, [pc, #148]	; (80007b0 <HAL_ADC_MspInit+0xf4>)
 800071c:	695b      	ldr	r3, [r3, #20]
 800071e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000726:	2303      	movs	r3, #3
 8000728:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800072a:	2303      	movs	r3, #3
 800072c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	4619      	mov	r1, r3
 8000738:	481e      	ldr	r0, [pc, #120]	; (80007b4 <HAL_ADC_MspInit+0xf8>)
 800073a:	f001 fbdd 	bl	8001ef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800073e:	2303      	movs	r3, #3
 8000740:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000742:	2303      	movs	r3, #3
 8000744:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074a:	f107 0314 	add.w	r3, r7, #20
 800074e:	4619      	mov	r1, r3
 8000750:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000754:	f001 fbd0 	bl	8001ef8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000758:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <HAL_ADC_MspInit+0xfc>)
 800075a:	4a18      	ldr	r2, [pc, #96]	; (80007bc <HAL_ADC_MspInit+0x100>)
 800075c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800075e:	4b16      	ldr	r3, [pc, #88]	; (80007b8 <HAL_ADC_MspInit+0xfc>)
 8000760:	2200      	movs	r2, #0
 8000762:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000764:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <HAL_ADC_MspInit+0xfc>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800076a:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <HAL_ADC_MspInit+0xfc>)
 800076c:	2280      	movs	r2, #128	; 0x80
 800076e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000770:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <HAL_ADC_MspInit+0xfc>)
 8000772:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000776:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <HAL_ADC_MspInit+0xfc>)
 800077a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800077e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000780:	4b0d      	ldr	r3, [pc, #52]	; (80007b8 <HAL_ADC_MspInit+0xfc>)
 8000782:	2200      	movs	r2, #0
 8000784:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000786:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <HAL_ADC_MspInit+0xfc>)
 8000788:	2200      	movs	r2, #0
 800078a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800078c:	480a      	ldr	r0, [pc, #40]	; (80007b8 <HAL_ADC_MspInit+0xfc>)
 800078e:	f001 fa1c 	bl	8001bca <HAL_DMA_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <HAL_ADC_MspInit+0xe0>
    {
      Error_Handler();
 8000798:	f7ff ff66 	bl	8000668 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	4a06      	ldr	r2, [pc, #24]	; (80007b8 <HAL_ADC_MspInit+0xfc>)
 80007a0:	639a      	str	r2, [r3, #56]	; 0x38
 80007a2:	4a05      	ldr	r2, [pc, #20]	; (80007b8 <HAL_ADC_MspInit+0xfc>)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80007a8:	bf00      	nop
 80007aa:	3728      	adds	r7, #40	; 0x28
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40021000 	.word	0x40021000
 80007b4:	48000800 	.word	0x48000800
 80007b8:	200000f4 	.word	0x200000f4
 80007bc:	40020008 	.word	0x40020008

080007c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08a      	sub	sp, #40	; 0x28
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a17      	ldr	r2, [pc, #92]	; (800083c <HAL_UART_MspInit+0x7c>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d128      	bne.n	8000834 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007e2:	4b17      	ldr	r3, [pc, #92]	; (8000840 <HAL_UART_MspInit+0x80>)
 80007e4:	69db      	ldr	r3, [r3, #28]
 80007e6:	4a16      	ldr	r2, [pc, #88]	; (8000840 <HAL_UART_MspInit+0x80>)
 80007e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007ec:	61d3      	str	r3, [r2, #28]
 80007ee:	4b14      	ldr	r3, [pc, #80]	; (8000840 <HAL_UART_MspInit+0x80>)
 80007f0:	69db      	ldr	r3, [r3, #28]
 80007f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <HAL_UART_MspInit+0x80>)
 80007fc:	695b      	ldr	r3, [r3, #20]
 80007fe:	4a10      	ldr	r2, [pc, #64]	; (8000840 <HAL_UART_MspInit+0x80>)
 8000800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000804:	6153      	str	r3, [r2, #20]
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <HAL_UART_MspInit+0x80>)
 8000808:	695b      	ldr	r3, [r3, #20]
 800080a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000812:	230c      	movs	r3, #12
 8000814:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000816:	2302      	movs	r3, #2
 8000818:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800081e:	2303      	movs	r3, #3
 8000820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000822:	2307      	movs	r3, #7
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000826:	f107 0314 	add.w	r3, r7, #20
 800082a:	4619      	mov	r1, r3
 800082c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000830:	f001 fb62 	bl	8001ef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000834:	bf00      	nop
 8000836:	3728      	adds	r7, #40	; 0x28
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40004400 	.word	0x40004400
 8000840:	40021000 	.word	0x40021000

08000844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000848:	e7fe      	b.n	8000848 <NMI_Handler+0x4>

0800084a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800084e:	e7fe      	b.n	800084e <HardFault_Handler+0x4>

08000850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000854:	e7fe      	b.n	8000854 <MemManage_Handler+0x4>

08000856 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800085a:	e7fe      	b.n	800085a <BusFault_Handler+0x4>

0800085c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000860:	e7fe      	b.n	8000860 <UsageFault_Handler+0x4>

08000862 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr

0800087e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000890:	f000 f932 	bl	8000af8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}

08000898 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800089c:	4802      	ldr	r0, [pc, #8]	; (80008a8 <DMA1_Channel1_IRQHandler+0x10>)
 800089e:	f001 fa3a 	bl	8001d16 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	200000f4 	.word	0x200000f4

080008ac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b086      	sub	sp, #24
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	60f8      	str	r0, [r7, #12]
 80008b4:	60b9      	str	r1, [r7, #8]
 80008b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]
 80008bc:	e00a      	b.n	80008d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008be:	f3af 8000 	nop.w
 80008c2:	4601      	mov	r1, r0
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	1c5a      	adds	r2, r3, #1
 80008c8:	60ba      	str	r2, [r7, #8]
 80008ca:	b2ca      	uxtb	r2, r1
 80008cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	3301      	adds	r3, #1
 80008d2:	617b      	str	r3, [r7, #20]
 80008d4:	697a      	ldr	r2, [r7, #20]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	429a      	cmp	r2, r3
 80008da:	dbf0      	blt.n	80008be <_read+0x12>
	}

return len;
 80008dc:	687b      	ldr	r3, [r7, #4]
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3718      	adds	r7, #24
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b086      	sub	sp, #24
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	60f8      	str	r0, [r7, #12]
 80008ee:	60b9      	str	r1, [r7, #8]
 80008f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
 80008f6:	e009      	b.n	800090c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	1c5a      	adds	r2, r3, #1
 80008fc:	60ba      	str	r2, [r7, #8]
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff fcb5 	bl	8000270 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	3301      	adds	r3, #1
 800090a:	617b      	str	r3, [r7, #20]
 800090c:	697a      	ldr	r2, [r7, #20]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	429a      	cmp	r2, r3
 8000912:	dbf1      	blt.n	80008f8 <_write+0x12>
	}
	return len;
 8000914:	687b      	ldr	r3, [r7, #4]
}
 8000916:	4618      	mov	r0, r3
 8000918:	3718      	adds	r7, #24
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <_close>:

int _close(int file)
{
 800091e:	b480      	push	{r7}
 8000920:	b083      	sub	sp, #12
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
	return -1;
 8000926:	f04f 33ff 	mov.w	r3, #4294967295
}
 800092a:	4618      	mov	r0, r3
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr

08000936 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000936:	b480      	push	{r7}
 8000938:	b083      	sub	sp, #12
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
 800093e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000946:	605a      	str	r2, [r3, #4]
	return 0;
 8000948:	2300      	movs	r3, #0
}
 800094a:	4618      	mov	r0, r3
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr

08000956 <_isatty>:

int _isatty(int file)
{
 8000956:	b480      	push	{r7}
 8000958:	b083      	sub	sp, #12
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
	return 1;
 800095e:	2301      	movs	r3, #1
}
 8000960:	4618      	mov	r0, r3
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800096c:	b480      	push	{r7}
 800096e:	b085      	sub	sp, #20
 8000970:	af00      	add	r7, sp, #0
 8000972:	60f8      	str	r0, [r7, #12]
 8000974:	60b9      	str	r1, [r7, #8]
 8000976:	607a      	str	r2, [r7, #4]
	return 0;
 8000978:	2300      	movs	r3, #0
}
 800097a:	4618      	mov	r0, r3
 800097c:	3714      	adds	r7, #20
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
	...

08000988 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000990:	4a14      	ldr	r2, [pc, #80]	; (80009e4 <_sbrk+0x5c>)
 8000992:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <_sbrk+0x60>)
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800099c:	4b13      	ldr	r3, [pc, #76]	; (80009ec <_sbrk+0x64>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d102      	bne.n	80009aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009a4:	4b11      	ldr	r3, [pc, #68]	; (80009ec <_sbrk+0x64>)
 80009a6:	4a12      	ldr	r2, [pc, #72]	; (80009f0 <_sbrk+0x68>)
 80009a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009aa:	4b10      	ldr	r3, [pc, #64]	; (80009ec <_sbrk+0x64>)
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4413      	add	r3, r2
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d207      	bcs.n	80009c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009b8:	f003 fa7e 	bl	8003eb8 <__errno>
 80009bc:	4603      	mov	r3, r0
 80009be:	220c      	movs	r2, #12
 80009c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009c2:	f04f 33ff 	mov.w	r3, #4294967295
 80009c6:	e009      	b.n	80009dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009c8:	4b08      	ldr	r3, [pc, #32]	; (80009ec <_sbrk+0x64>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ce:	4b07      	ldr	r3, [pc, #28]	; (80009ec <_sbrk+0x64>)
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4413      	add	r3, r2
 80009d6:	4a05      	ldr	r2, [pc, #20]	; (80009ec <_sbrk+0x64>)
 80009d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009da:	68fb      	ldr	r3, [r7, #12]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3718      	adds	r7, #24
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20003000 	.word	0x20003000
 80009e8:	00000400 	.word	0x00000400
 80009ec:	20000090 	.word	0x20000090
 80009f0:	200001d0 	.word	0x200001d0

080009f4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <SystemInit+0x20>)
 80009fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009fe:	4a05      	ldr	r2, [pc, #20]	; (8000a14 <SystemInit+0x20>)
 8000a00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a50 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a1c:	480d      	ldr	r0, [pc, #52]	; (8000a54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a1e:	490e      	ldr	r1, [pc, #56]	; (8000a58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a20:	4a0e      	ldr	r2, [pc, #56]	; (8000a5c <LoopForever+0xe>)
  movs r3, #0
 8000a22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a24:	e002      	b.n	8000a2c <LoopCopyDataInit>

08000a26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a2a:	3304      	adds	r3, #4

08000a2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a30:	d3f9      	bcc.n	8000a26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a32:	4a0b      	ldr	r2, [pc, #44]	; (8000a60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a34:	4c0b      	ldr	r4, [pc, #44]	; (8000a64 <LoopForever+0x16>)
  movs r3, #0
 8000a36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a38:	e001      	b.n	8000a3e <LoopFillZerobss>

08000a3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a3c:	3204      	adds	r2, #4

08000a3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a40:	d3fb      	bcc.n	8000a3a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a42:	f7ff ffd7 	bl	80009f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a46:	f003 fa3d 	bl	8003ec4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a4a:	f7ff fc39 	bl	80002c0 <main>

08000a4e <LoopForever>:

LoopForever:
    b LoopForever
 8000a4e:	e7fe      	b.n	8000a4e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a50:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000a54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a58:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a5c:	08004fac 	.word	0x08004fac
  ldr r2, =_sbss
 8000a60:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a64:	200001d0 	.word	0x200001d0

08000a68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a68:	e7fe      	b.n	8000a68 <ADC1_2_IRQHandler>
	...

08000a6c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a70:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <HAL_Init+0x28>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a07      	ldr	r2, [pc, #28]	; (8000a94 <HAL_Init+0x28>)
 8000a76:	f043 0310 	orr.w	r3, r3, #16
 8000a7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a7c:	2003      	movs	r0, #3
 8000a7e:	f001 f863 	bl	8001b48 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a82:	200f      	movs	r0, #15
 8000a84:	f000 f808 	bl	8000a98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a88:	f7ff fdf4 	bl	8000674 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a8c:	2300      	movs	r3, #0
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40022000 	.word	0x40022000

08000a98 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aa0:	4b12      	ldr	r3, [pc, #72]	; (8000aec <HAL_InitTick+0x54>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <HAL_InitTick+0x58>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f001 f87b 	bl	8001bb2 <HAL_SYSTICK_Config>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e00e      	b.n	8000ae4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2b0f      	cmp	r3, #15
 8000aca:	d80a      	bhi.n	8000ae2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000acc:	2200      	movs	r2, #0
 8000ace:	6879      	ldr	r1, [r7, #4]
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	f001 f843 	bl	8001b5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ad8:	4a06      	ldr	r2, [pc, #24]	; (8000af4 <HAL_InitTick+0x5c>)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	e000      	b.n	8000ae4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000000 	.word	0x20000000
 8000af0:	20000008 	.word	0x20000008
 8000af4:	20000004 	.word	0x20000004

08000af8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <HAL_IncTick+0x20>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	461a      	mov	r2, r3
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <HAL_IncTick+0x24>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4413      	add	r3, r2
 8000b08:	4a04      	ldr	r2, [pc, #16]	; (8000b1c <HAL_IncTick+0x24>)
 8000b0a:	6013      	str	r3, [r2, #0]
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	20000008 	.word	0x20000008
 8000b1c:	200001bc 	.word	0x200001bc

08000b20 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b24:	4b03      	ldr	r3, [pc, #12]	; (8000b34 <HAL_GetTick+0x14>)
 8000b26:	681b      	ldr	r3, [r3, #0]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	200001bc 	.word	0x200001bc

08000b38 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b09a      	sub	sp, #104	; 0x68
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000b72:	2300      	movs	r3, #0
 8000b74:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d101      	bne.n	8000b80 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	e172      	b.n	8000e66 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	691b      	ldr	r3, [r3, #16]
 8000b84:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	f003 0310 	and.w	r3, r3, #16
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d176      	bne.n	8000c80 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d152      	bne.n	8000c40 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2200      	movs	r2, #0
 8000baa:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f7ff fd81 	bl	80006bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	689b      	ldr	r3, [r3, #8]
 8000bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d13b      	bne.n	8000c40 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	f000 fe87 	bl	80018dc <ADC_Disable>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd8:	f003 0310 	and.w	r3, r3, #16
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d12f      	bne.n	8000c40 <HAL_ADC_Init+0xe0>
 8000be0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d12b      	bne.n	8000c40 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000bf0:	f023 0302 	bic.w	r3, r3, #2
 8000bf4:	f043 0202 	orr.w	r2, r3, #2
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	689a      	ldr	r2, [r3, #8]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000c0a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	689a      	ldr	r2, [r3, #8]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c1a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000c1c:	4b94      	ldr	r3, [pc, #592]	; (8000e70 <HAL_ADC_Init+0x310>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a94      	ldr	r2, [pc, #592]	; (8000e74 <HAL_ADC_Init+0x314>)
 8000c22:	fba2 2303 	umull	r2, r3, r2, r3
 8000c26:	0c9a      	lsrs	r2, r3, #18
 8000c28:	4613      	mov	r3, r2
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	4413      	add	r3, r2
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c32:	e002      	b.n	8000c3a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d1f9      	bne.n	8000c34 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d007      	beq.n	8000c5e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	689b      	ldr	r3, [r3, #8]
 8000c54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000c58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c5c:	d110      	bne.n	8000c80 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c62:	f023 0312 	bic.w	r3, r3, #18
 8000c66:	f043 0210 	orr.w	r2, r3, #16
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c72:	f043 0201 	orr.w	r2, r3, #1
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c84:	f003 0310 	and.w	r3, r3, #16
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	f040 80df 	bne.w	8000e4c <HAL_ADC_Init+0x2ec>
 8000c8e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 80da 	bne.w	8000e4c <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	f040 80d2 	bne.w	8000e4c <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cac:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000cb0:	f043 0202 	orr.w	r2, r3, #2
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000cb8:	4b6f      	ldr	r3, [pc, #444]	; (8000e78 <HAL_ADC_Init+0x318>)
 8000cba:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000cc4:	d102      	bne.n	8000ccc <HAL_ADC_Init+0x16c>
 8000cc6:	4b6d      	ldr	r3, [pc, #436]	; (8000e7c <HAL_ADC_Init+0x31c>)
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	e002      	b.n	8000cd2 <HAL_ADC_Init+0x172>
 8000ccc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000cd0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	f003 0303 	and.w	r3, r3, #3
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d108      	bne.n	8000cf2 <HAL_ADC_Init+0x192>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d101      	bne.n	8000cf2 <HAL_ADC_Init+0x192>
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e000      	b.n	8000cf4 <HAL_ADC_Init+0x194>
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d11c      	bne.n	8000d32 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000cf8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d010      	beq.n	8000d20 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	f003 0303 	and.w	r3, r3, #3
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d107      	bne.n	8000d1a <HAL_ADC_Init+0x1ba>
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d101      	bne.n	8000d1a <HAL_ADC_Init+0x1ba>
 8000d16:	2301      	movs	r3, #1
 8000d18:	e000      	b.n	8000d1c <HAL_ADC_Init+0x1bc>
 8000d1a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d108      	bne.n	8000d32 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000d20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d22:	689b      	ldr	r3, [r3, #8]
 8000d24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	431a      	orrs	r2, r3
 8000d2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d30:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	7e5b      	ldrb	r3, [r3, #25]
 8000d36:	035b      	lsls	r3, r3, #13
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000d3c:	2a01      	cmp	r2, #1
 8000d3e:	d002      	beq.n	8000d46 <HAL_ADC_Init+0x1e6>
 8000d40:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d44:	e000      	b.n	8000d48 <HAL_ADC_Init+0x1e8>
 8000d46:	2200      	movs	r2, #0
 8000d48:	431a      	orrs	r2, r3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	68db      	ldr	r3, [r3, #12]
 8000d4e:	431a      	orrs	r2, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d11b      	bne.n	8000d9e <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	7e5b      	ldrb	r3, [r3, #25]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d109      	bne.n	8000d82 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d72:	3b01      	subs	r3, #1
 8000d74:	045a      	lsls	r2, r3, #17
 8000d76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d7e:	663b      	str	r3, [r7, #96]	; 0x60
 8000d80:	e00d      	b.n	8000d9e <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000d8a:	f043 0220 	orr.w	r2, r3, #32
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d96:	f043 0201 	orr.w	r2, r3, #1
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d007      	beq.n	8000db6 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dae:	4313      	orrs	r3, r2
 8000db0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000db2:	4313      	orrs	r3, r2
 8000db4:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	f003 030c 	and.w	r3, r3, #12
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d114      	bne.n	8000dee <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	68db      	ldr	r3, [r3, #12]
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	6812      	ldr	r2, [r2, #0]
 8000dce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000dd2:	f023 0302 	bic.w	r3, r3, #2
 8000dd6:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	7e1b      	ldrb	r3, [r3, #24]
 8000ddc:	039a      	lsls	r2, r3, #14
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	4313      	orrs	r3, r2
 8000de8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000dea:	4313      	orrs	r3, r2
 8000dec:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	68da      	ldr	r2, [r3, #12]
 8000df4:	4b22      	ldr	r3, [pc, #136]	; (8000e80 <HAL_ADC_Init+0x320>)
 8000df6:	4013      	ands	r3, r2
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	6812      	ldr	r2, [r2, #0]
 8000dfc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000dfe:	430b      	orrs	r3, r1
 8000e00:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	691b      	ldr	r3, [r3, #16]
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d10c      	bne.n	8000e24 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e10:	f023 010f 	bic.w	r1, r3, #15
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	69db      	ldr	r3, [r3, #28]
 8000e18:	1e5a      	subs	r2, r3, #1
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	430a      	orrs	r2, r1
 8000e20:	631a      	str	r2, [r3, #48]	; 0x30
 8000e22:	e007      	b.n	8000e34 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f022 020f 	bic.w	r2, r2, #15
 8000e32:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2200      	movs	r2, #0
 8000e38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	f023 0303 	bic.w	r3, r3, #3
 8000e42:	f043 0201 	orr.w	r2, r3, #1
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	641a      	str	r2, [r3, #64]	; 0x40
 8000e4a:	e00a      	b.n	8000e62 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e50:	f023 0312 	bic.w	r3, r3, #18
 8000e54:	f043 0210 	orr.w	r2, r3, #16
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000e62:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3768      	adds	r7, #104	; 0x68
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000000 	.word	0x20000000
 8000e74:	431bde83 	.word	0x431bde83
 8000e78:	50000300 	.word	0x50000300
 8000e7c:	50000100 	.word	0x50000100
 8000e80:	fff0c007 	.word	0xfff0c007

08000e84 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e90:	2300      	movs	r3, #0
 8000e92:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	f003 0304 	and.w	r3, r3, #4
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	f040 80b9 	bne.w	8001016 <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d101      	bne.n	8000eb2 <HAL_ADC_Start_DMA+0x2e>
 8000eae:	2302      	movs	r3, #2
 8000eb0:	e0b4      	b.n	800101c <HAL_ADC_Start_DMA+0x198>
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8000eba:	4b5a      	ldr	r3, [pc, #360]	; (8001024 <HAL_ADC_Start_DMA+0x1a0>)
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	f003 031f 	and.w	r3, r3, #31
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	f040 80a0 	bne.w	8001008 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8000ec8:	68f8      	ldr	r0, [r7, #12]
 8000eca:	f000 fca3 	bl	8001814 <ADC_Enable>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8000ed2:	7dfb      	ldrb	r3, [r7, #23]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	f040 8092 	bne.w	8000ffe <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ede:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000ee2:	f023 0301 	bic.w	r3, r3, #1
 8000ee6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000eee:	4b4d      	ldr	r3, [pc, #308]	; (8001024 <HAL_ADC_Start_DMA+0x1a0>)
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	f003 031f 	and.w	r3, r3, #31
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d004      	beq.n	8000f04 <HAL_ADC_Start_DMA+0x80>
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f02:	d115      	bne.n	8000f30 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f08:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	68db      	ldr	r3, [r3, #12]
 8000f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d027      	beq.n	8000f6e <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f22:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f26:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000f2e:	e01e      	b.n	8000f6e <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f34:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f44:	d004      	beq.n	8000f50 <HAL_ADC_Start_DMA+0xcc>
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a37      	ldr	r2, [pc, #220]	; (8001028 <HAL_ADC_Start_DMA+0x1a4>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d10e      	bne.n	8000f6e <HAL_ADC_Start_DMA+0xea>
 8000f50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d007      	beq.n	8000f6e <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f62:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f66:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f7a:	d106      	bne.n	8000f8a <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f80:	f023 0206 	bic.w	r2, r3, #6
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	645a      	str	r2, [r3, #68]	; 0x44
 8000f88:	e002      	b.n	8000f90 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f9c:	4a23      	ldr	r2, [pc, #140]	; (800102c <HAL_ADC_Start_DMA+0x1a8>)
 8000f9e:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fa4:	4a22      	ldr	r2, [pc, #136]	; (8001030 <HAL_ADC_Start_DMA+0x1ac>)
 8000fa6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fac:	4a21      	ldr	r2, [pc, #132]	; (8001034 <HAL_ADC_Start_DMA+0x1b0>)
 8000fae:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	221c      	movs	r2, #28
 8000fb6:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	685a      	ldr	r2, [r3, #4]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f042 0210 	orr.w	r2, r2, #16
 8000fc6:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	68da      	ldr	r2, [r3, #12]
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f042 0201 	orr.w	r2, r2, #1
 8000fd6:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	3340      	adds	r3, #64	; 0x40
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	68ba      	ldr	r2, [r7, #8]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f000 fe36 	bl	8001c58 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	689a      	ldr	r2, [r3, #8]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f042 0204 	orr.w	r2, r2, #4
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	e00d      	b.n	800101a <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	2200      	movs	r2, #0
 8001002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001006:	e008      	b.n	800101a <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	2200      	movs	r2, #0
 8001010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001014:	e001      	b.n	800101a <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001016:	2302      	movs	r3, #2
 8001018:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800101a:	7dfb      	ldrb	r3, [r7, #23]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3718      	adds	r7, #24
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	50000300 	.word	0x50000300
 8001028:	50000100 	.word	0x50000100
 800102c:	08001749 	.word	0x08001749
 8001030:	080017c3 	.word	0x080017c3
 8001034:	080017df 	.word	0x080017df

08001038 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001038:	b480      	push	{r7}
 800103a:	b09b      	sub	sp, #108	; 0x6c
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001042:	2300      	movs	r3, #0
 8001044:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001048:	2300      	movs	r3, #0
 800104a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001052:	2b01      	cmp	r3, #1
 8001054:	d101      	bne.n	800105a <HAL_ADC_ConfigChannel+0x22>
 8001056:	2302      	movs	r3, #2
 8001058:	e2a5      	b.n	80015a6 <HAL_ADC_ConfigChannel+0x56e>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2201      	movs	r2, #1
 800105e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	f003 0304 	and.w	r3, r3, #4
 800106c:	2b00      	cmp	r3, #0
 800106e:	f040 8289 	bne.w	8001584 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	2b04      	cmp	r3, #4
 8001078:	d81c      	bhi.n	80010b4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685a      	ldr	r2, [r3, #4]
 8001084:	4613      	mov	r3, r2
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	4413      	add	r3, r2
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	461a      	mov	r2, r3
 800108e:	231f      	movs	r3, #31
 8001090:	4093      	lsls	r3, r2
 8001092:	43db      	mvns	r3, r3
 8001094:	4019      	ands	r1, r3
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	6818      	ldr	r0, [r3, #0]
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685a      	ldr	r2, [r3, #4]
 800109e:	4613      	mov	r3, r2
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	4413      	add	r3, r2
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	fa00 f203 	lsl.w	r2, r0, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	430a      	orrs	r2, r1
 80010b0:	631a      	str	r2, [r3, #48]	; 0x30
 80010b2:	e063      	b.n	800117c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	2b09      	cmp	r3, #9
 80010ba:	d81e      	bhi.n	80010fa <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685a      	ldr	r2, [r3, #4]
 80010c6:	4613      	mov	r3, r2
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	4413      	add	r3, r2
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	3b1e      	subs	r3, #30
 80010d0:	221f      	movs	r2, #31
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	4019      	ands	r1, r3
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	6818      	ldr	r0, [r3, #0]
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685a      	ldr	r2, [r3, #4]
 80010e2:	4613      	mov	r3, r2
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	4413      	add	r3, r2
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	3b1e      	subs	r3, #30
 80010ec:	fa00 f203 	lsl.w	r2, r0, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	430a      	orrs	r2, r1
 80010f6:	635a      	str	r2, [r3, #52]	; 0x34
 80010f8:	e040      	b.n	800117c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	2b0e      	cmp	r3, #14
 8001100:	d81e      	bhi.n	8001140 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685a      	ldr	r2, [r3, #4]
 800110c:	4613      	mov	r3, r2
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	4413      	add	r3, r2
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	3b3c      	subs	r3, #60	; 0x3c
 8001116:	221f      	movs	r2, #31
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	4019      	ands	r1, r3
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	6818      	ldr	r0, [r3, #0]
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685a      	ldr	r2, [r3, #4]
 8001128:	4613      	mov	r3, r2
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	4413      	add	r3, r2
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	3b3c      	subs	r3, #60	; 0x3c
 8001132:	fa00 f203 	lsl.w	r2, r0, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	430a      	orrs	r2, r1
 800113c:	639a      	str	r2, [r3, #56]	; 0x38
 800113e:	e01d      	b.n	800117c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685a      	ldr	r2, [r3, #4]
 800114a:	4613      	mov	r3, r2
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	4413      	add	r3, r2
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	3b5a      	subs	r3, #90	; 0x5a
 8001154:	221f      	movs	r2, #31
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	4019      	ands	r1, r3
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	6818      	ldr	r0, [r3, #0]
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685a      	ldr	r2, [r3, #4]
 8001166:	4613      	mov	r3, r2
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	4413      	add	r3, r2
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	3b5a      	subs	r3, #90	; 0x5a
 8001170:	fa00 f203 	lsl.w	r2, r0, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	430a      	orrs	r2, r1
 800117a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f003 030c 	and.w	r3, r3, #12
 8001186:	2b00      	cmp	r3, #0
 8001188:	f040 80e5 	bne.w	8001356 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b09      	cmp	r3, #9
 8001192:	d91c      	bls.n	80011ce <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6999      	ldr	r1, [r3, #24]
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	4613      	mov	r3, r2
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	4413      	add	r3, r2
 80011a4:	3b1e      	subs	r3, #30
 80011a6:	2207      	movs	r2, #7
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	4019      	ands	r1, r3
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	6898      	ldr	r0, [r3, #8]
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4613      	mov	r3, r2
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	4413      	add	r3, r2
 80011be:	3b1e      	subs	r3, #30
 80011c0:	fa00 f203 	lsl.w	r2, r0, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	430a      	orrs	r2, r1
 80011ca:	619a      	str	r2, [r3, #24]
 80011cc:	e019      	b.n	8001202 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	6959      	ldr	r1, [r3, #20]
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4613      	mov	r3, r2
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	4413      	add	r3, r2
 80011de:	2207      	movs	r2, #7
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	4019      	ands	r1, r3
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	6898      	ldr	r0, [r3, #8]
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4613      	mov	r3, r2
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	4413      	add	r3, r2
 80011f6:	fa00 f203 	lsl.w	r2, r0, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	430a      	orrs	r2, r1
 8001200:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	695a      	ldr	r2, [r3, #20]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	08db      	lsrs	r3, r3, #3
 800120e:	f003 0303 	and.w	r3, r3, #3
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	3b01      	subs	r3, #1
 8001220:	2b03      	cmp	r3, #3
 8001222:	d84f      	bhi.n	80012c4 <HAL_ADC_ConfigChannel+0x28c>
 8001224:	a201      	add	r2, pc, #4	; (adr r2, 800122c <HAL_ADC_ConfigChannel+0x1f4>)
 8001226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800122a:	bf00      	nop
 800122c:	0800123d 	.word	0x0800123d
 8001230:	0800125f 	.word	0x0800125f
 8001234:	08001281 	.word	0x08001281
 8001238:	080012a3 	.word	0x080012a3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001242:	4b9e      	ldr	r3, [pc, #632]	; (80014bc <HAL_ADC_ConfigChannel+0x484>)
 8001244:	4013      	ands	r3, r2
 8001246:	683a      	ldr	r2, [r7, #0]
 8001248:	6812      	ldr	r2, [r2, #0]
 800124a:	0691      	lsls	r1, r2, #26
 800124c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800124e:	430a      	orrs	r2, r1
 8001250:	431a      	orrs	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800125a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800125c:	e07e      	b.n	800135c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001264:	4b95      	ldr	r3, [pc, #596]	; (80014bc <HAL_ADC_ConfigChannel+0x484>)
 8001266:	4013      	ands	r3, r2
 8001268:	683a      	ldr	r2, [r7, #0]
 800126a:	6812      	ldr	r2, [r2, #0]
 800126c:	0691      	lsls	r1, r2, #26
 800126e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001270:	430a      	orrs	r2, r1
 8001272:	431a      	orrs	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800127c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800127e:	e06d      	b.n	800135c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001286:	4b8d      	ldr	r3, [pc, #564]	; (80014bc <HAL_ADC_ConfigChannel+0x484>)
 8001288:	4013      	ands	r3, r2
 800128a:	683a      	ldr	r2, [r7, #0]
 800128c:	6812      	ldr	r2, [r2, #0]
 800128e:	0691      	lsls	r1, r2, #26
 8001290:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001292:	430a      	orrs	r2, r1
 8001294:	431a      	orrs	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800129e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80012a0:	e05c      	b.n	800135c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80012a8:	4b84      	ldr	r3, [pc, #528]	; (80014bc <HAL_ADC_ConfigChannel+0x484>)
 80012aa:	4013      	ands	r3, r2
 80012ac:	683a      	ldr	r2, [r7, #0]
 80012ae:	6812      	ldr	r2, [r2, #0]
 80012b0:	0691      	lsls	r1, r2, #26
 80012b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012b4:	430a      	orrs	r2, r1
 80012b6:	431a      	orrs	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80012c0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80012c2:	e04b      	b.n	800135c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	069b      	lsls	r3, r3, #26
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d107      	bne.n	80012e8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80012e6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80012ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	069b      	lsls	r3, r3, #26
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d107      	bne.n	800130c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800130a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001312:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	069b      	lsls	r3, r3, #26
 800131c:	429a      	cmp	r2, r3
 800131e:	d107      	bne.n	8001330 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800132e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001336:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	069b      	lsls	r3, r3, #26
 8001340:	429a      	cmp	r2, r3
 8001342:	d10a      	bne.n	800135a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001352:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001354:	e001      	b.n	800135a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001356:	bf00      	nop
 8001358:	e000      	b.n	800135c <HAL_ADC_ConfigChannel+0x324>
      break;
 800135a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f003 0303 	and.w	r3, r3, #3
 8001366:	2b01      	cmp	r3, #1
 8001368:	d108      	bne.n	800137c <HAL_ADC_ConfigChannel+0x344>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0301 	and.w	r3, r3, #1
 8001374:	2b01      	cmp	r3, #1
 8001376:	d101      	bne.n	800137c <HAL_ADC_ConfigChannel+0x344>
 8001378:	2301      	movs	r3, #1
 800137a:	e000      	b.n	800137e <HAL_ADC_ConfigChannel+0x346>
 800137c:	2300      	movs	r3, #0
 800137e:	2b00      	cmp	r3, #0
 8001380:	f040 810b 	bne.w	800159a <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d00f      	beq.n	80013ac <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2201      	movs	r2, #1
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	43da      	mvns	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	400a      	ands	r2, r1
 80013a6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80013aa:	e049      	b.n	8001440 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2201      	movs	r2, #1
 80013ba:	409a      	lsls	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	430a      	orrs	r2, r1
 80013c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2b09      	cmp	r3, #9
 80013cc:	d91c      	bls.n	8001408 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6999      	ldr	r1, [r3, #24]
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4613      	mov	r3, r2
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	4413      	add	r3, r2
 80013de:	3b1b      	subs	r3, #27
 80013e0:	2207      	movs	r2, #7
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43db      	mvns	r3, r3
 80013e8:	4019      	ands	r1, r3
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	6898      	ldr	r0, [r3, #8]
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	4613      	mov	r3, r2
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	4413      	add	r3, r2
 80013f8:	3b1b      	subs	r3, #27
 80013fa:	fa00 f203 	lsl.w	r2, r0, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	430a      	orrs	r2, r1
 8001404:	619a      	str	r2, [r3, #24]
 8001406:	e01b      	b.n	8001440 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6959      	ldr	r1, [r3, #20]
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	1c5a      	adds	r2, r3, #1
 8001414:	4613      	mov	r3, r2
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	4413      	add	r3, r2
 800141a:	2207      	movs	r2, #7
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	4019      	ands	r1, r3
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	6898      	ldr	r0, [r3, #8]
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	1c5a      	adds	r2, r3, #1
 800142e:	4613      	mov	r3, r2
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	4413      	add	r3, r2
 8001434:	fa00 f203 	lsl.w	r2, r0, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	430a      	orrs	r2, r1
 800143e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001440:	4b1f      	ldr	r3, [pc, #124]	; (80014c0 <HAL_ADC_ConfigChannel+0x488>)
 8001442:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b10      	cmp	r3, #16
 800144a:	d105      	bne.n	8001458 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800144c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001454:	2b00      	cmp	r3, #0
 8001456:	d015      	beq.n	8001484 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800145c:	2b11      	cmp	r3, #17
 800145e:	d105      	bne.n	800146c <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001460:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001468:	2b00      	cmp	r3, #0
 800146a:	d00b      	beq.n	8001484 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001470:	2b12      	cmp	r3, #18
 8001472:	f040 8092 	bne.w	800159a <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001476:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800147e:	2b00      	cmp	r3, #0
 8001480:	f040 808b 	bne.w	800159a <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800148c:	d102      	bne.n	8001494 <HAL_ADC_ConfigChannel+0x45c>
 800148e:	4b0d      	ldr	r3, [pc, #52]	; (80014c4 <HAL_ADC_ConfigChannel+0x48c>)
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	e002      	b.n	800149a <HAL_ADC_ConfigChannel+0x462>
 8001494:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001498:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f003 0303 	and.w	r3, r3, #3
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d10f      	bne.n	80014c8 <HAL_ADC_ConfigChannel+0x490>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d108      	bne.n	80014c8 <HAL_ADC_ConfigChannel+0x490>
 80014b6:	2301      	movs	r3, #1
 80014b8:	e007      	b.n	80014ca <HAL_ADC_ConfigChannel+0x492>
 80014ba:	bf00      	nop
 80014bc:	83fff000 	.word	0x83fff000
 80014c0:	50000300 	.word	0x50000300
 80014c4:	50000100 	.word	0x50000100
 80014c8:	2300      	movs	r3, #0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d150      	bne.n	8001570 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80014ce:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d010      	beq.n	80014f6 <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f003 0303 	and.w	r3, r3, #3
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d107      	bne.n	80014f0 <HAL_ADC_ConfigChannel+0x4b8>
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d101      	bne.n	80014f0 <HAL_ADC_ConfigChannel+0x4b8>
 80014ec:	2301      	movs	r3, #1
 80014ee:	e000      	b.n	80014f2 <HAL_ADC_ConfigChannel+0x4ba>
 80014f0:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d13c      	bne.n	8001570 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2b10      	cmp	r3, #16
 80014fc:	d11d      	bne.n	800153a <HAL_ADC_ConfigChannel+0x502>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001506:	d118      	bne.n	800153a <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001508:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001510:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001512:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001514:	4b27      	ldr	r3, [pc, #156]	; (80015b4 <HAL_ADC_ConfigChannel+0x57c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a27      	ldr	r2, [pc, #156]	; (80015b8 <HAL_ADC_ConfigChannel+0x580>)
 800151a:	fba2 2303 	umull	r2, r3, r2, r3
 800151e:	0c9a      	lsrs	r2, r3, #18
 8001520:	4613      	mov	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	4413      	add	r3, r2
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800152a:	e002      	b.n	8001532 <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	3b01      	subs	r3, #1
 8001530:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d1f9      	bne.n	800152c <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001538:	e02e      	b.n	8001598 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2b11      	cmp	r3, #17
 8001540:	d10b      	bne.n	800155a <HAL_ADC_ConfigChannel+0x522>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800154a:	d106      	bne.n	800155a <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800154c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001554:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001556:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001558:	e01e      	b.n	8001598 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2b12      	cmp	r3, #18
 8001560:	d11a      	bne.n	8001598 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001562:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800156a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800156c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800156e:	e013      	b.n	8001598 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001574:	f043 0220 	orr.w	r2, r3, #32
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001582:	e00a      	b.n	800159a <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001588:	f043 0220 	orr.w	r2, r3, #32
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001596:	e000      	b.n	800159a <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001598:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80015a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	376c      	adds	r7, #108	; 0x6c
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	20000000 	.word	0x20000000
 80015b8:	431bde83 	.word	0x431bde83

080015bc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80015bc:	b480      	push	{r7}
 80015be:	b099      	sub	sp, #100	; 0x64
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015c6:	2300      	movs	r3, #0
 80015c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015d4:	d102      	bne.n	80015dc <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80015d6:	4b5a      	ldr	r3, [pc, #360]	; (8001740 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 80015d8:	60bb      	str	r3, [r7, #8]
 80015da:	e002      	b.n	80015e2 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 80015dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80015e0:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d101      	bne.n	80015ec <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e0a2      	b.n	8001732 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d101      	bne.n	80015fa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80015f6:	2302      	movs	r3, #2
 80015f8:	e09b      	b.n	8001732 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2201      	movs	r2, #1
 80015fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	f003 0304 	and.w	r3, r3, #4
 800160c:	2b00      	cmp	r3, #0
 800160e:	d17f      	bne.n	8001710 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f003 0304 	and.w	r3, r3, #4
 8001618:	2b00      	cmp	r3, #0
 800161a:	d179      	bne.n	8001710 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800161c:	4b49      	ldr	r3, [pc, #292]	; (8001744 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 800161e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d040      	beq.n	80016aa <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001628:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	6859      	ldr	r1, [r3, #4]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800163a:	035b      	lsls	r3, r3, #13
 800163c:	430b      	orrs	r3, r1
 800163e:	431a      	orrs	r2, r3
 8001640:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001642:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f003 0303 	and.w	r3, r3, #3
 800164e:	2b01      	cmp	r3, #1
 8001650:	d108      	bne.n	8001664 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0301 	and.w	r3, r3, #1
 800165c:	2b01      	cmp	r3, #1
 800165e:	d101      	bne.n	8001664 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001660:	2301      	movs	r3, #1
 8001662:	e000      	b.n	8001666 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001664:	2300      	movs	r3, #0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d15c      	bne.n	8001724 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f003 0303 	and.w	r3, r3, #3
 8001672:	2b01      	cmp	r3, #1
 8001674:	d107      	bne.n	8001686 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	2b01      	cmp	r3, #1
 8001680:	d101      	bne.n	8001686 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001682:	2301      	movs	r3, #1
 8001684:	e000      	b.n	8001688 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8001686:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001688:	2b00      	cmp	r3, #0
 800168a:	d14b      	bne.n	8001724 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800168c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001694:	f023 030f 	bic.w	r3, r3, #15
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	6811      	ldr	r1, [r2, #0]
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	6892      	ldr	r2, [r2, #8]
 80016a0:	430a      	orrs	r2, r1
 80016a2:	431a      	orrs	r2, r3
 80016a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80016a6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80016a8:	e03c      	b.n	8001724 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80016aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80016b4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f003 0303 	and.w	r3, r3, #3
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d108      	bne.n	80016d6 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d101      	bne.n	80016d6 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80016d2:	2301      	movs	r3, #1
 80016d4:	e000      	b.n	80016d8 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 80016d6:	2300      	movs	r3, #0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d123      	bne.n	8001724 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f003 0303 	and.w	r3, r3, #3
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d107      	bne.n	80016f8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d101      	bne.n	80016f8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80016f4:	2301      	movs	r3, #1
 80016f6:	e000      	b.n	80016fa <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80016f8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d112      	bne.n	8001724 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80016fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001706:	f023 030f 	bic.w	r3, r3, #15
 800170a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800170c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800170e:	e009      	b.n	8001724 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001714:	f043 0220 	orr.w	r2, r3, #32
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001722:	e000      	b.n	8001726 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001724:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800172e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001732:	4618      	mov	r0, r3
 8001734:	3764      	adds	r7, #100	; 0x64
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	50000100 	.word	0x50000100
 8001744:	50000300 	.word	0x50000300

08001748 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001754:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800175e:	2b00      	cmp	r3, #0
 8001760:	d126      	bne.n	80017b0 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001778:	2b00      	cmp	r3, #0
 800177a:	d115      	bne.n	80017a8 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001780:	2b00      	cmp	r3, #0
 8001782:	d111      	bne.n	80017a8 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001788:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001794:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d105      	bne.n	80017a8 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a0:	f043 0201 	orr.w	r2, r3, #1
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80017a8:	68f8      	ldr	r0, [r7, #12]
 80017aa:	f7fe fd79 	bl	80002a0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80017ae:	e004      	b.n	80017ba <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	4798      	blx	r3
}
 80017ba:	bf00      	nop
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b084      	sub	sp, #16
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ce:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80017d0:	68f8      	ldr	r0, [r7, #12]
 80017d2:	f7ff f9b1 	bl	8000b38 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80017d6:	bf00      	nop
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b084      	sub	sp, #16
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ea:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fc:	f043 0204 	orr.w	r2, r3, #4
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001804:	68f8      	ldr	r0, [r7, #12]
 8001806:	f7ff f9a1 	bl	8000b4c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800180a:	bf00      	nop
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
	...

08001814 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800181c:	2300      	movs	r3, #0
 800181e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 0303 	and.w	r3, r3, #3
 800182a:	2b01      	cmp	r3, #1
 800182c:	d108      	bne.n	8001840 <ADC_Enable+0x2c>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0301 	and.w	r3, r3, #1
 8001838:	2b01      	cmp	r3, #1
 800183a:	d101      	bne.n	8001840 <ADC_Enable+0x2c>
 800183c:	2301      	movs	r3, #1
 800183e:	e000      	b.n	8001842 <ADC_Enable+0x2e>
 8001840:	2300      	movs	r3, #0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d143      	bne.n	80018ce <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	4b22      	ldr	r3, [pc, #136]	; (80018d8 <ADC_Enable+0xc4>)
 800184e:	4013      	ands	r3, r2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d00d      	beq.n	8001870 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001858:	f043 0210 	orr.w	r2, r3, #16
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001864:	f043 0201 	orr.w	r2, r3, #1
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e02f      	b.n	80018d0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	689a      	ldr	r2, [r3, #8]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f042 0201 	orr.w	r2, r2, #1
 800187e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001880:	f7ff f94e 	bl	8000b20 <HAL_GetTick>
 8001884:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001886:	e01b      	b.n	80018c0 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001888:	f7ff f94a 	bl	8000b20 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d914      	bls.n	80018c0 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d00d      	beq.n	80018c0 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a8:	f043 0210 	orr.w	r2, r3, #16
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b4:	f043 0201 	orr.w	r2, r3, #1
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e007      	b.n	80018d0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d1dc      	bne.n	8001888 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	8000003f 	.word	0x8000003f

080018dc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018e4:	2300      	movs	r3, #0
 80018e6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 0303 	and.w	r3, r3, #3
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d108      	bne.n	8001908 <ADC_Disable+0x2c>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	2b01      	cmp	r3, #1
 8001902:	d101      	bne.n	8001908 <ADC_Disable+0x2c>
 8001904:	2301      	movs	r3, #1
 8001906:	e000      	b.n	800190a <ADC_Disable+0x2e>
 8001908:	2300      	movs	r3, #0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d047      	beq.n	800199e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f003 030d 	and.w	r3, r3, #13
 8001918:	2b01      	cmp	r3, #1
 800191a:	d10f      	bne.n	800193c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	689a      	ldr	r2, [r3, #8]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f042 0202 	orr.w	r2, r2, #2
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2203      	movs	r2, #3
 8001932:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001934:	f7ff f8f4 	bl	8000b20 <HAL_GetTick>
 8001938:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800193a:	e029      	b.n	8001990 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001940:	f043 0210 	orr.w	r2, r3, #16
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194c:	f043 0201 	orr.w	r2, r3, #1
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e023      	b.n	80019a0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001958:	f7ff f8e2 	bl	8000b20 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d914      	bls.n	8001990 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	2b01      	cmp	r3, #1
 8001972:	d10d      	bne.n	8001990 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001978:	f043 0210 	orr.w	r2, r3, #16
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001984:	f043 0201 	orr.w	r2, r3, #1
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e007      	b.n	80019a0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b01      	cmp	r3, #1
 800199c:	d0dc      	beq.n	8001958 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800199e:	2300      	movs	r3, #0
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019b8:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <__NVIC_SetPriorityGrouping+0x44>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019be:	68ba      	ldr	r2, [r7, #8]
 80019c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019c4:	4013      	ands	r3, r2
 80019c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019da:	4a04      	ldr	r2, [pc, #16]	; (80019ec <__NVIC_SetPriorityGrouping+0x44>)
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	60d3      	str	r3, [r2, #12]
}
 80019e0:	bf00      	nop
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019f4:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <__NVIC_GetPriorityGrouping+0x18>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	0a1b      	lsrs	r3, r3, #8
 80019fa:	f003 0307 	and.w	r3, r3, #7
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	db0b      	blt.n	8001a36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
 8001a20:	f003 021f 	and.w	r2, r3, #31
 8001a24:	4907      	ldr	r1, [pc, #28]	; (8001a44 <__NVIC_EnableIRQ+0x38>)
 8001a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2a:	095b      	lsrs	r3, r3, #5
 8001a2c:	2001      	movs	r0, #1
 8001a2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	e000e100 	.word	0xe000e100

08001a48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	6039      	str	r1, [r7, #0]
 8001a52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	db0a      	blt.n	8001a72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	490c      	ldr	r1, [pc, #48]	; (8001a94 <__NVIC_SetPriority+0x4c>)
 8001a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a66:	0112      	lsls	r2, r2, #4
 8001a68:	b2d2      	uxtb	r2, r2
 8001a6a:	440b      	add	r3, r1
 8001a6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a70:	e00a      	b.n	8001a88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	4908      	ldr	r1, [pc, #32]	; (8001a98 <__NVIC_SetPriority+0x50>)
 8001a78:	79fb      	ldrb	r3, [r7, #7]
 8001a7a:	f003 030f 	and.w	r3, r3, #15
 8001a7e:	3b04      	subs	r3, #4
 8001a80:	0112      	lsls	r2, r2, #4
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	440b      	add	r3, r1
 8001a86:	761a      	strb	r2, [r3, #24]
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	e000e100 	.word	0xe000e100
 8001a98:	e000ed00 	.word	0xe000ed00

08001a9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b089      	sub	sp, #36	; 0x24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	f1c3 0307 	rsb	r3, r3, #7
 8001ab6:	2b04      	cmp	r3, #4
 8001ab8:	bf28      	it	cs
 8001aba:	2304      	movcs	r3, #4
 8001abc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	3304      	adds	r3, #4
 8001ac2:	2b06      	cmp	r3, #6
 8001ac4:	d902      	bls.n	8001acc <NVIC_EncodePriority+0x30>
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	3b03      	subs	r3, #3
 8001aca:	e000      	b.n	8001ace <NVIC_EncodePriority+0x32>
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43da      	mvns	r2, r3
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	401a      	ands	r2, r3
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	fa01 f303 	lsl.w	r3, r1, r3
 8001aee:	43d9      	mvns	r1, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af4:	4313      	orrs	r3, r2
         );
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3724      	adds	r7, #36	; 0x24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
	...

08001b04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b14:	d301      	bcc.n	8001b1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b16:	2301      	movs	r3, #1
 8001b18:	e00f      	b.n	8001b3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b1a:	4a0a      	ldr	r2, [pc, #40]	; (8001b44 <SysTick_Config+0x40>)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b22:	210f      	movs	r1, #15
 8001b24:	f04f 30ff 	mov.w	r0, #4294967295
 8001b28:	f7ff ff8e 	bl	8001a48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b2c:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <SysTick_Config+0x40>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b32:	4b04      	ldr	r3, [pc, #16]	; (8001b44 <SysTick_Config+0x40>)
 8001b34:	2207      	movs	r2, #7
 8001b36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	e000e010 	.word	0xe000e010

08001b48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f7ff ff29 	bl	80019a8 <__NVIC_SetPriorityGrouping>
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b086      	sub	sp, #24
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	4603      	mov	r3, r0
 8001b66:	60b9      	str	r1, [r7, #8]
 8001b68:	607a      	str	r2, [r7, #4]
 8001b6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b70:	f7ff ff3e 	bl	80019f0 <__NVIC_GetPriorityGrouping>
 8001b74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	68b9      	ldr	r1, [r7, #8]
 8001b7a:	6978      	ldr	r0, [r7, #20]
 8001b7c:	f7ff ff8e 	bl	8001a9c <NVIC_EncodePriority>
 8001b80:	4602      	mov	r2, r0
 8001b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b86:	4611      	mov	r1, r2
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff ff5d 	bl	8001a48 <__NVIC_SetPriority>
}
 8001b8e:	bf00      	nop
 8001b90:	3718      	adds	r7, #24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff ff31 	bl	8001a0c <__NVIC_EnableIRQ>
}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7ff ffa2 	bl	8001b04 <SysTick_Config>
 8001bc0:	4603      	mov	r3, r0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b084      	sub	sp, #16
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d101      	bne.n	8001be0 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e037      	b.n	8001c50 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2202      	movs	r2, #2
 8001be4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001bf6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001bfa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001c04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c24:	68fa      	ldr	r2, [r7, #12]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 f940 	bl	8001eb8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}  
 8001c50:	4618      	mov	r0, r3
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
 8001c64:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001c66:	2300      	movs	r3, #0
 8001c68:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d101      	bne.n	8001c78 <HAL_DMA_Start_IT+0x20>
 8001c74:	2302      	movs	r3, #2
 8001c76:	e04a      	b.n	8001d0e <HAL_DMA_Start_IT+0xb6>
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d13a      	bne.n	8001d00 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2202      	movs	r2, #2
 8001c8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2200      	movs	r2, #0
 8001c96:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f022 0201 	bic.w	r2, r2, #1
 8001ca6:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	68b9      	ldr	r1, [r7, #8]
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	f000 f8d4 	bl	8001e5c <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d008      	beq.n	8001cce <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f042 020e 	orr.w	r2, r2, #14
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	e00f      	b.n	8001cee <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f042 020a 	orr.w	r2, r2, #10
 8001cdc:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f022 0204 	bic.w	r2, r2, #4
 8001cec:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f042 0201 	orr.w	r2, r2, #1
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	e005      	b.n	8001d0c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001d0c:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b084      	sub	sp, #16
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	2204      	movs	r2, #4
 8001d34:	409a      	lsls	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d024      	beq.n	8001d88 <HAL_DMA_IRQHandler+0x72>
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d01f      	beq.n	8001d88 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0320 	and.w	r3, r3, #32
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d107      	bne.n	8001d66 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f022 0204 	bic.w	r2, r2, #4
 8001d64:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d6e:	2104      	movs	r1, #4
 8001d70:	fa01 f202 	lsl.w	r2, r1, r2
 8001d74:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d06a      	beq.n	8001e54 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001d86:	e065      	b.n	8001e54 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8c:	2202      	movs	r2, #2
 8001d8e:	409a      	lsls	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	4013      	ands	r3, r2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d02c      	beq.n	8001df2 <HAL_DMA_IRQHandler+0xdc>
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d027      	beq.n	8001df2 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0320 	and.w	r3, r3, #32
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d10b      	bne.n	8001dc8 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 020a 	bic.w	r2, r2, #10
 8001dbe:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dd0:	2102      	movs	r1, #2
 8001dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd6:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d035      	beq.n	8001e54 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001df0:	e030      	b.n	8001e54 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	2208      	movs	r2, #8
 8001df8:	409a      	lsls	r2, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d028      	beq.n	8001e54 <HAL_DMA_IRQHandler+0x13e>
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	f003 0308 	and.w	r3, r3, #8
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d023      	beq.n	8001e54 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 020e 	bic.w	r2, r2, #14
 8001e1a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e24:	2101      	movs	r1, #1
 8001e26:	fa01 f202 	lsl.w	r2, r1, r2
 8001e2a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2201      	movs	r2, #1
 8001e36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d004      	beq.n	8001e54 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	4798      	blx	r3
    }
  }
}  
 8001e52:	e7ff      	b.n	8001e54 <HAL_DMA_IRQHandler+0x13e>
 8001e54:	bf00      	nop
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
 8001e68:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e72:	2101      	movs	r1, #1
 8001e74:	fa01 f202 	lsl.w	r2, r1, r2
 8001e78:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2b10      	cmp	r3, #16
 8001e88:	d108      	bne.n	8001e9c <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68ba      	ldr	r2, [r7, #8]
 8001e98:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e9a:	e007      	b.n	8001eac <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68ba      	ldr	r2, [r7, #8]
 8001ea2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	60da      	str	r2, [r3, #12]
}
 8001eac:	bf00      	nop
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	4b09      	ldr	r3, [pc, #36]	; (8001eec <DMA_CalcBaseAndBitshift+0x34>)
 8001ec8:	4413      	add	r3, r2
 8001eca:	4a09      	ldr	r2, [pc, #36]	; (8001ef0 <DMA_CalcBaseAndBitshift+0x38>)
 8001ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed0:	091b      	lsrs	r3, r3, #4
 8001ed2:	009a      	lsls	r2, r3, #2
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a06      	ldr	r2, [pc, #24]	; (8001ef4 <DMA_CalcBaseAndBitshift+0x3c>)
 8001edc:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	bffdfff8 	.word	0xbffdfff8
 8001ef0:	cccccccd 	.word	0xcccccccd
 8001ef4:	40020000 	.word	0x40020000

08001ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b087      	sub	sp, #28
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f02:	2300      	movs	r3, #0
 8001f04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f06:	e14e      	b.n	80021a6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	fa01 f303 	lsl.w	r3, r1, r3
 8001f14:	4013      	ands	r3, r2
 8001f16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f000 8140 	beq.w	80021a0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f003 0303 	and.w	r3, r3, #3
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d005      	beq.n	8001f38 <HAL_GPIO_Init+0x40>
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 0303 	and.w	r3, r3, #3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d130      	bne.n	8001f9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	2203      	movs	r2, #3
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	68da      	ldr	r2, [r3, #12]
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f6e:	2201      	movs	r2, #1
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	43db      	mvns	r3, r3
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	091b      	lsrs	r3, r3, #4
 8001f84:	f003 0201 	and.w	r2, r3, #1
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f003 0303 	and.w	r3, r3, #3
 8001fa2:	2b03      	cmp	r3, #3
 8001fa4:	d017      	beq.n	8001fd6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	2203      	movs	r2, #3
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	689a      	ldr	r2, [r3, #8]
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d123      	bne.n	800202a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	08da      	lsrs	r2, r3, #3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	3208      	adds	r2, #8
 8001fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	220f      	movs	r2, #15
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43db      	mvns	r3, r3
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	4013      	ands	r3, r2
 8002004:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	691a      	ldr	r2, [r3, #16]
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	f003 0307 	and.w	r3, r3, #7
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	4313      	orrs	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	08da      	lsrs	r2, r3, #3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3208      	adds	r2, #8
 8002024:	6939      	ldr	r1, [r7, #16]
 8002026:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	2203      	movs	r2, #3
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43db      	mvns	r3, r3
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	4013      	ands	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f003 0203 	and.w	r2, r3, #3
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	4313      	orrs	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002066:	2b00      	cmp	r3, #0
 8002068:	f000 809a 	beq.w	80021a0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800206c:	4b55      	ldr	r3, [pc, #340]	; (80021c4 <HAL_GPIO_Init+0x2cc>)
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	4a54      	ldr	r2, [pc, #336]	; (80021c4 <HAL_GPIO_Init+0x2cc>)
 8002072:	f043 0301 	orr.w	r3, r3, #1
 8002076:	6193      	str	r3, [r2, #24]
 8002078:	4b52      	ldr	r3, [pc, #328]	; (80021c4 <HAL_GPIO_Init+0x2cc>)
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	60bb      	str	r3, [r7, #8]
 8002082:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002084:	4a50      	ldr	r2, [pc, #320]	; (80021c8 <HAL_GPIO_Init+0x2d0>)
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	089b      	lsrs	r3, r3, #2
 800208a:	3302      	adds	r3, #2
 800208c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002090:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	f003 0303 	and.w	r3, r3, #3
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	220f      	movs	r2, #15
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	43db      	mvns	r3, r3
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	4013      	ands	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80020ae:	d013      	beq.n	80020d8 <HAL_GPIO_Init+0x1e0>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a46      	ldr	r2, [pc, #280]	; (80021cc <HAL_GPIO_Init+0x2d4>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d00d      	beq.n	80020d4 <HAL_GPIO_Init+0x1dc>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a45      	ldr	r2, [pc, #276]	; (80021d0 <HAL_GPIO_Init+0x2d8>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d007      	beq.n	80020d0 <HAL_GPIO_Init+0x1d8>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a44      	ldr	r2, [pc, #272]	; (80021d4 <HAL_GPIO_Init+0x2dc>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d101      	bne.n	80020cc <HAL_GPIO_Init+0x1d4>
 80020c8:	2303      	movs	r3, #3
 80020ca:	e006      	b.n	80020da <HAL_GPIO_Init+0x1e2>
 80020cc:	2305      	movs	r3, #5
 80020ce:	e004      	b.n	80020da <HAL_GPIO_Init+0x1e2>
 80020d0:	2302      	movs	r3, #2
 80020d2:	e002      	b.n	80020da <HAL_GPIO_Init+0x1e2>
 80020d4:	2301      	movs	r3, #1
 80020d6:	e000      	b.n	80020da <HAL_GPIO_Init+0x1e2>
 80020d8:	2300      	movs	r3, #0
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	f002 0203 	and.w	r2, r2, #3
 80020e0:	0092      	lsls	r2, r2, #2
 80020e2:	4093      	lsls	r3, r2
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020ea:	4937      	ldr	r1, [pc, #220]	; (80021c8 <HAL_GPIO_Init+0x2d0>)
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	089b      	lsrs	r3, r3, #2
 80020f0:	3302      	adds	r3, #2
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020f8:	4b37      	ldr	r3, [pc, #220]	; (80021d8 <HAL_GPIO_Init+0x2e0>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	43db      	mvns	r3, r3
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	4013      	ands	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	4313      	orrs	r3, r2
 800211a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800211c:	4a2e      	ldr	r2, [pc, #184]	; (80021d8 <HAL_GPIO_Init+0x2e0>)
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002122:	4b2d      	ldr	r3, [pc, #180]	; (80021d8 <HAL_GPIO_Init+0x2e0>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	43db      	mvns	r3, r3
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	4013      	ands	r3, r2
 8002130:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4313      	orrs	r3, r2
 8002144:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002146:	4a24      	ldr	r2, [pc, #144]	; (80021d8 <HAL_GPIO_Init+0x2e0>)
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800214c:	4b22      	ldr	r3, [pc, #136]	; (80021d8 <HAL_GPIO_Init+0x2e0>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	43db      	mvns	r3, r3
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	4013      	ands	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	4313      	orrs	r3, r2
 800216e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002170:	4a19      	ldr	r2, [pc, #100]	; (80021d8 <HAL_GPIO_Init+0x2e0>)
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002176:	4b18      	ldr	r3, [pc, #96]	; (80021d8 <HAL_GPIO_Init+0x2e0>)
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	43db      	mvns	r3, r3
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	4013      	ands	r3, r2
 8002184:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4313      	orrs	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800219a:	4a0f      	ldr	r2, [pc, #60]	; (80021d8 <HAL_GPIO_Init+0x2e0>)
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	3301      	adds	r3, #1
 80021a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	fa22 f303 	lsr.w	r3, r2, r3
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f47f aea9 	bne.w	8001f08 <HAL_GPIO_Init+0x10>
  }
}
 80021b6:	bf00      	nop
 80021b8:	bf00      	nop
 80021ba:	371c      	adds	r7, #28
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	40021000 	.word	0x40021000
 80021c8:	40010000 	.word	0x40010000
 80021cc:	48000400 	.word	0x48000400
 80021d0:	48000800 	.word	0x48000800
 80021d4:	48000c00 	.word	0x48000c00
 80021d8:	40010400 	.word	0x40010400

080021dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	460b      	mov	r3, r1
 80021e6:	807b      	strh	r3, [r7, #2]
 80021e8:	4613      	mov	r3, r2
 80021ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021ec:	787b      	ldrb	r3, [r7, #1]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021f2:	887a      	ldrh	r2, [r7, #2]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021f8:	e002      	b.n	8002200 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021fa:	887a      	ldrh	r2, [r7, #2]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	460b      	mov	r3, r1
 8002216:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800221e:	887a      	ldrh	r2, [r7, #2]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	4013      	ands	r3, r2
 8002224:	041a      	lsls	r2, r3, #16
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	43d9      	mvns	r1, r3
 800222a:	887b      	ldrh	r3, [r7, #2]
 800222c:	400b      	ands	r3, r1
 800222e:	431a      	orrs	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	619a      	str	r2, [r3, #24]
}
 8002234:	bf00      	nop
 8002236:	3714      	adds	r7, #20
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002246:	af00      	add	r7, sp, #0
 8002248:	1d3b      	adds	r3, r7, #4
 800224a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800224c:	1d3b      	adds	r3, r7, #4
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d102      	bne.n	800225a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	f000 bef4 	b.w	8003042 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800225a:	1d3b      	adds	r3, r7, #4
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b00      	cmp	r3, #0
 8002266:	f000 816a 	beq.w	800253e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800226a:	4bb3      	ldr	r3, [pc, #716]	; (8002538 <HAL_RCC_OscConfig+0x2f8>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f003 030c 	and.w	r3, r3, #12
 8002272:	2b04      	cmp	r3, #4
 8002274:	d00c      	beq.n	8002290 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002276:	4bb0      	ldr	r3, [pc, #704]	; (8002538 <HAL_RCC_OscConfig+0x2f8>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f003 030c 	and.w	r3, r3, #12
 800227e:	2b08      	cmp	r3, #8
 8002280:	d159      	bne.n	8002336 <HAL_RCC_OscConfig+0xf6>
 8002282:	4bad      	ldr	r3, [pc, #692]	; (8002538 <HAL_RCC_OscConfig+0x2f8>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800228a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800228e:	d152      	bne.n	8002336 <HAL_RCC_OscConfig+0xf6>
 8002290:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002294:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002298:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800229c:	fa93 f3a3 	rbit	r3, r3
 80022a0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022a4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022a8:	fab3 f383 	clz	r3, r3
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	095b      	lsrs	r3, r3, #5
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	f043 0301 	orr.w	r3, r3, #1
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d102      	bne.n	80022c2 <HAL_RCC_OscConfig+0x82>
 80022bc:	4b9e      	ldr	r3, [pc, #632]	; (8002538 <HAL_RCC_OscConfig+0x2f8>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	e015      	b.n	80022ee <HAL_RCC_OscConfig+0xae>
 80022c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022c6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ca:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80022ce:	fa93 f3a3 	rbit	r3, r3
 80022d2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80022d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022da:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80022de:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80022e2:	fa93 f3a3 	rbit	r3, r3
 80022e6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80022ea:	4b93      	ldr	r3, [pc, #588]	; (8002538 <HAL_RCC_OscConfig+0x2f8>)
 80022ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022f2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80022f6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80022fa:	fa92 f2a2 	rbit	r2, r2
 80022fe:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002302:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002306:	fab2 f282 	clz	r2, r2
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	f042 0220 	orr.w	r2, r2, #32
 8002310:	b2d2      	uxtb	r2, r2
 8002312:	f002 021f 	and.w	r2, r2, #31
 8002316:	2101      	movs	r1, #1
 8002318:	fa01 f202 	lsl.w	r2, r1, r2
 800231c:	4013      	ands	r3, r2
 800231e:	2b00      	cmp	r3, #0
 8002320:	f000 810c 	beq.w	800253c <HAL_RCC_OscConfig+0x2fc>
 8002324:	1d3b      	adds	r3, r7, #4
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	f040 8106 	bne.w	800253c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	f000 be86 	b.w	8003042 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002336:	1d3b      	adds	r3, r7, #4
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002340:	d106      	bne.n	8002350 <HAL_RCC_OscConfig+0x110>
 8002342:	4b7d      	ldr	r3, [pc, #500]	; (8002538 <HAL_RCC_OscConfig+0x2f8>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a7c      	ldr	r2, [pc, #496]	; (8002538 <HAL_RCC_OscConfig+0x2f8>)
 8002348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800234c:	6013      	str	r3, [r2, #0]
 800234e:	e030      	b.n	80023b2 <HAL_RCC_OscConfig+0x172>
 8002350:	1d3b      	adds	r3, r7, #4
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10c      	bne.n	8002374 <HAL_RCC_OscConfig+0x134>
 800235a:	4b77      	ldr	r3, [pc, #476]	; (8002538 <HAL_RCC_OscConfig+0x2f8>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a76      	ldr	r2, [pc, #472]	; (8002538 <HAL_RCC_OscConfig+0x2f8>)
 8002360:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002364:	6013      	str	r3, [r2, #0]
 8002366:	4b74      	ldr	r3, [pc, #464]	; (8002538 <HAL_RCC_OscConfig+0x2f8>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a73      	ldr	r2, [pc, #460]	; (8002538 <HAL_RCC_OscConfig+0x2f8>)
 800236c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002370:	6013      	str	r3, [r2, #0]
 8002372:	e01e      	b.n	80023b2 <HAL_RCC_OscConfig+0x172>
 8002374:	1d3b      	adds	r3, r7, #4
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800237e:	d10c      	bne.n	800239a <HAL_RCC_OscConfig+0x15a>
 8002380:	4b6d      	ldr	r3, [pc, #436]	; (8002538 <HAL_RCC_OscConfig+0x2f8>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a6c      	ldr	r2, [pc, #432]	; (8002538 <HAL_RCC_OscConfig+0x2f8>)
 8002386:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800238a:	6013      	str	r3, [r2, #0]
 800238c:	4b6a      	ldr	r3, [pc, #424]	; (8002538 <HAL_RCC_OscConfig+0x2f8>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a69      	ldr	r2, [pc, #420]	; (8002538 <HAL_RCC_OscConfig+0x2f8>)
 8002392:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002396:	6013      	str	r3, [r2, #0]
 8002398:	e00b      	b.n	80023b2 <HAL_RCC_OscConfig+0x172>
 800239a:	4b67      	ldr	r3, [pc, #412]	; (8002538 <HAL_RCC_OscConfig+0x2f8>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a66      	ldr	r2, [pc, #408]	; (8002538 <HAL_RCC_OscConfig+0x2f8>)
 80023a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023a4:	6013      	str	r3, [r2, #0]
 80023a6:	4b64      	ldr	r3, [pc, #400]	; (8002538 <HAL_RCC_OscConfig+0x2f8>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a63      	ldr	r2, [pc, #396]	; (8002538 <HAL_RCC_OscConfig+0x2f8>)
 80023ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023b0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023b2:	4b61      	ldr	r3, [pc, #388]	; (8002538 <HAL_RCC_OscConfig+0x2f8>)
 80023b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b6:	f023 020f 	bic.w	r2, r3, #15
 80023ba:	1d3b      	adds	r3, r7, #4
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	495d      	ldr	r1, [pc, #372]	; (8002538 <HAL_RCC_OscConfig+0x2f8>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023c6:	1d3b      	adds	r3, r7, #4
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d059      	beq.n	8002484 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d0:	f7fe fba6 	bl	8000b20 <HAL_GetTick>
 80023d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023d8:	e00a      	b.n	80023f0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023da:	f7fe fba1 	bl	8000b20 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b64      	cmp	r3, #100	; 0x64
 80023e8:	d902      	bls.n	80023f0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	f000 be29 	b.w	8003042 <HAL_RCC_OscConfig+0xe02>
 80023f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023f4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80023fc:	fa93 f3a3 	rbit	r3, r3
 8002400:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002404:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002408:	fab3 f383 	clz	r3, r3
 800240c:	b2db      	uxtb	r3, r3
 800240e:	095b      	lsrs	r3, r3, #5
 8002410:	b2db      	uxtb	r3, r3
 8002412:	f043 0301 	orr.w	r3, r3, #1
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b01      	cmp	r3, #1
 800241a:	d102      	bne.n	8002422 <HAL_RCC_OscConfig+0x1e2>
 800241c:	4b46      	ldr	r3, [pc, #280]	; (8002538 <HAL_RCC_OscConfig+0x2f8>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	e015      	b.n	800244e <HAL_RCC_OscConfig+0x20e>
 8002422:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002426:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800242e:	fa93 f3a3 	rbit	r3, r3
 8002432:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002436:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800243a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800243e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002442:	fa93 f3a3 	rbit	r3, r3
 8002446:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800244a:	4b3b      	ldr	r3, [pc, #236]	; (8002538 <HAL_RCC_OscConfig+0x2f8>)
 800244c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002452:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002456:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800245a:	fa92 f2a2 	rbit	r2, r2
 800245e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002462:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002466:	fab2 f282 	clz	r2, r2
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	f042 0220 	orr.w	r2, r2, #32
 8002470:	b2d2      	uxtb	r2, r2
 8002472:	f002 021f 	and.w	r2, r2, #31
 8002476:	2101      	movs	r1, #1
 8002478:	fa01 f202 	lsl.w	r2, r1, r2
 800247c:	4013      	ands	r3, r2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d0ab      	beq.n	80023da <HAL_RCC_OscConfig+0x19a>
 8002482:	e05c      	b.n	800253e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002484:	f7fe fb4c 	bl	8000b20 <HAL_GetTick>
 8002488:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800248c:	e00a      	b.n	80024a4 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800248e:	f7fe fb47 	bl	8000b20 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b64      	cmp	r3, #100	; 0x64
 800249c:	d902      	bls.n	80024a4 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	f000 bdcf 	b.w	8003042 <HAL_RCC_OscConfig+0xe02>
 80024a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024a8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ac:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80024b0:	fa93 f3a3 	rbit	r3, r3
 80024b4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80024b8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024bc:	fab3 f383 	clz	r3, r3
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	095b      	lsrs	r3, r3, #5
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	f043 0301 	orr.w	r3, r3, #1
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d102      	bne.n	80024d6 <HAL_RCC_OscConfig+0x296>
 80024d0:	4b19      	ldr	r3, [pc, #100]	; (8002538 <HAL_RCC_OscConfig+0x2f8>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	e015      	b.n	8002502 <HAL_RCC_OscConfig+0x2c2>
 80024d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024da:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024de:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80024e2:	fa93 f3a3 	rbit	r3, r3
 80024e6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80024ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024ee:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80024f2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80024f6:	fa93 f3a3 	rbit	r3, r3
 80024fa:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80024fe:	4b0e      	ldr	r3, [pc, #56]	; (8002538 <HAL_RCC_OscConfig+0x2f8>)
 8002500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002502:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002506:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800250a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800250e:	fa92 f2a2 	rbit	r2, r2
 8002512:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002516:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800251a:	fab2 f282 	clz	r2, r2
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	f042 0220 	orr.w	r2, r2, #32
 8002524:	b2d2      	uxtb	r2, r2
 8002526:	f002 021f 	and.w	r2, r2, #31
 800252a:	2101      	movs	r1, #1
 800252c:	fa01 f202 	lsl.w	r2, r1, r2
 8002530:	4013      	ands	r3, r2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1ab      	bne.n	800248e <HAL_RCC_OscConfig+0x24e>
 8002536:	e002      	b.n	800253e <HAL_RCC_OscConfig+0x2fe>
 8002538:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800253c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800253e:	1d3b      	adds	r3, r7, #4
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	f000 816f 	beq.w	800282c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800254e:	4bd0      	ldr	r3, [pc, #832]	; (8002890 <HAL_RCC_OscConfig+0x650>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f003 030c 	and.w	r3, r3, #12
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00b      	beq.n	8002572 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800255a:	4bcd      	ldr	r3, [pc, #820]	; (8002890 <HAL_RCC_OscConfig+0x650>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f003 030c 	and.w	r3, r3, #12
 8002562:	2b08      	cmp	r3, #8
 8002564:	d16c      	bne.n	8002640 <HAL_RCC_OscConfig+0x400>
 8002566:	4bca      	ldr	r3, [pc, #808]	; (8002890 <HAL_RCC_OscConfig+0x650>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d166      	bne.n	8002640 <HAL_RCC_OscConfig+0x400>
 8002572:	2302      	movs	r3, #2
 8002574:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002578:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800257c:	fa93 f3a3 	rbit	r3, r3
 8002580:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002584:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002588:	fab3 f383 	clz	r3, r3
 800258c:	b2db      	uxtb	r3, r3
 800258e:	095b      	lsrs	r3, r3, #5
 8002590:	b2db      	uxtb	r3, r3
 8002592:	f043 0301 	orr.w	r3, r3, #1
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2b01      	cmp	r3, #1
 800259a:	d102      	bne.n	80025a2 <HAL_RCC_OscConfig+0x362>
 800259c:	4bbc      	ldr	r3, [pc, #752]	; (8002890 <HAL_RCC_OscConfig+0x650>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	e013      	b.n	80025ca <HAL_RCC_OscConfig+0x38a>
 80025a2:	2302      	movs	r3, #2
 80025a4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80025ac:	fa93 f3a3 	rbit	r3, r3
 80025b0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80025b4:	2302      	movs	r3, #2
 80025b6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80025ba:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80025be:	fa93 f3a3 	rbit	r3, r3
 80025c2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80025c6:	4bb2      	ldr	r3, [pc, #712]	; (8002890 <HAL_RCC_OscConfig+0x650>)
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ca:	2202      	movs	r2, #2
 80025cc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80025d0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80025d4:	fa92 f2a2 	rbit	r2, r2
 80025d8:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80025dc:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80025e0:	fab2 f282 	clz	r2, r2
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	f042 0220 	orr.w	r2, r2, #32
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	f002 021f 	and.w	r2, r2, #31
 80025f0:	2101      	movs	r1, #1
 80025f2:	fa01 f202 	lsl.w	r2, r1, r2
 80025f6:	4013      	ands	r3, r2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d007      	beq.n	800260c <HAL_RCC_OscConfig+0x3cc>
 80025fc:	1d3b      	adds	r3, r7, #4
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d002      	beq.n	800260c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	f000 bd1b 	b.w	8003042 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800260c:	4ba0      	ldr	r3, [pc, #640]	; (8002890 <HAL_RCC_OscConfig+0x650>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002614:	1d3b      	adds	r3, r7, #4
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	21f8      	movs	r1, #248	; 0xf8
 800261c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002620:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002624:	fa91 f1a1 	rbit	r1, r1
 8002628:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800262c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002630:	fab1 f181 	clz	r1, r1
 8002634:	b2c9      	uxtb	r1, r1
 8002636:	408b      	lsls	r3, r1
 8002638:	4995      	ldr	r1, [pc, #596]	; (8002890 <HAL_RCC_OscConfig+0x650>)
 800263a:	4313      	orrs	r3, r2
 800263c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800263e:	e0f5      	b.n	800282c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002640:	1d3b      	adds	r3, r7, #4
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	2b00      	cmp	r3, #0
 8002648:	f000 8085 	beq.w	8002756 <HAL_RCC_OscConfig+0x516>
 800264c:	2301      	movs	r3, #1
 800264e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002652:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002656:	fa93 f3a3 	rbit	r3, r3
 800265a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800265e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002662:	fab3 f383 	clz	r3, r3
 8002666:	b2db      	uxtb	r3, r3
 8002668:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800266c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	461a      	mov	r2, r3
 8002674:	2301      	movs	r3, #1
 8002676:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002678:	f7fe fa52 	bl	8000b20 <HAL_GetTick>
 800267c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002680:	e00a      	b.n	8002698 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002682:	f7fe fa4d 	bl	8000b20 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d902      	bls.n	8002698 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	f000 bcd5 	b.w	8003042 <HAL_RCC_OscConfig+0xe02>
 8002698:	2302      	movs	r3, #2
 800269a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80026a2:	fa93 f3a3 	rbit	r3, r3
 80026a6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80026aa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ae:	fab3 f383 	clz	r3, r3
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	095b      	lsrs	r3, r3, #5
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	f043 0301 	orr.w	r3, r3, #1
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d102      	bne.n	80026c8 <HAL_RCC_OscConfig+0x488>
 80026c2:	4b73      	ldr	r3, [pc, #460]	; (8002890 <HAL_RCC_OscConfig+0x650>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	e013      	b.n	80026f0 <HAL_RCC_OscConfig+0x4b0>
 80026c8:	2302      	movs	r3, #2
 80026ca:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ce:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80026d2:	fa93 f3a3 	rbit	r3, r3
 80026d6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80026da:	2302      	movs	r3, #2
 80026dc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80026e0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80026e4:	fa93 f3a3 	rbit	r3, r3
 80026e8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80026ec:	4b68      	ldr	r3, [pc, #416]	; (8002890 <HAL_RCC_OscConfig+0x650>)
 80026ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f0:	2202      	movs	r2, #2
 80026f2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80026f6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80026fa:	fa92 f2a2 	rbit	r2, r2
 80026fe:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002702:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002706:	fab2 f282 	clz	r2, r2
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	f042 0220 	orr.w	r2, r2, #32
 8002710:	b2d2      	uxtb	r2, r2
 8002712:	f002 021f 	and.w	r2, r2, #31
 8002716:	2101      	movs	r1, #1
 8002718:	fa01 f202 	lsl.w	r2, r1, r2
 800271c:	4013      	ands	r3, r2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d0af      	beq.n	8002682 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002722:	4b5b      	ldr	r3, [pc, #364]	; (8002890 <HAL_RCC_OscConfig+0x650>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800272a:	1d3b      	adds	r3, r7, #4
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	695b      	ldr	r3, [r3, #20]
 8002730:	21f8      	movs	r1, #248	; 0xf8
 8002732:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002736:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800273a:	fa91 f1a1 	rbit	r1, r1
 800273e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002742:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002746:	fab1 f181 	clz	r1, r1
 800274a:	b2c9      	uxtb	r1, r1
 800274c:	408b      	lsls	r3, r1
 800274e:	4950      	ldr	r1, [pc, #320]	; (8002890 <HAL_RCC_OscConfig+0x650>)
 8002750:	4313      	orrs	r3, r2
 8002752:	600b      	str	r3, [r1, #0]
 8002754:	e06a      	b.n	800282c <HAL_RCC_OscConfig+0x5ec>
 8002756:	2301      	movs	r3, #1
 8002758:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002760:	fa93 f3a3 	rbit	r3, r3
 8002764:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002768:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800276c:	fab3 f383 	clz	r3, r3
 8002770:	b2db      	uxtb	r3, r3
 8002772:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002776:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	461a      	mov	r2, r3
 800277e:	2300      	movs	r3, #0
 8002780:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002782:	f7fe f9cd 	bl	8000b20 <HAL_GetTick>
 8002786:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800278a:	e00a      	b.n	80027a2 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800278c:	f7fe f9c8 	bl	8000b20 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d902      	bls.n	80027a2 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	f000 bc50 	b.w	8003042 <HAL_RCC_OscConfig+0xe02>
 80027a2:	2302      	movs	r3, #2
 80027a4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80027ac:	fa93 f3a3 	rbit	r3, r3
 80027b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80027b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027b8:	fab3 f383 	clz	r3, r3
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	095b      	lsrs	r3, r3, #5
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	f043 0301 	orr.w	r3, r3, #1
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d102      	bne.n	80027d2 <HAL_RCC_OscConfig+0x592>
 80027cc:	4b30      	ldr	r3, [pc, #192]	; (8002890 <HAL_RCC_OscConfig+0x650>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	e013      	b.n	80027fa <HAL_RCC_OscConfig+0x5ba>
 80027d2:	2302      	movs	r3, #2
 80027d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80027dc:	fa93 f3a3 	rbit	r3, r3
 80027e0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80027e4:	2302      	movs	r3, #2
 80027e6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80027ea:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80027ee:	fa93 f3a3 	rbit	r3, r3
 80027f2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80027f6:	4b26      	ldr	r3, [pc, #152]	; (8002890 <HAL_RCC_OscConfig+0x650>)
 80027f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fa:	2202      	movs	r2, #2
 80027fc:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002800:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002804:	fa92 f2a2 	rbit	r2, r2
 8002808:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800280c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002810:	fab2 f282 	clz	r2, r2
 8002814:	b2d2      	uxtb	r2, r2
 8002816:	f042 0220 	orr.w	r2, r2, #32
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	f002 021f 	and.w	r2, r2, #31
 8002820:	2101      	movs	r1, #1
 8002822:	fa01 f202 	lsl.w	r2, r1, r2
 8002826:	4013      	ands	r3, r2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1af      	bne.n	800278c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800282c:	1d3b      	adds	r3, r7, #4
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	2b00      	cmp	r3, #0
 8002838:	f000 80da 	beq.w	80029f0 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800283c:	1d3b      	adds	r3, r7, #4
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d069      	beq.n	800291a <HAL_RCC_OscConfig+0x6da>
 8002846:	2301      	movs	r3, #1
 8002848:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002850:	fa93 f3a3 	rbit	r3, r3
 8002854:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002858:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800285c:	fab3 f383 	clz	r3, r3
 8002860:	b2db      	uxtb	r3, r3
 8002862:	461a      	mov	r2, r3
 8002864:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <HAL_RCC_OscConfig+0x654>)
 8002866:	4413      	add	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	461a      	mov	r2, r3
 800286c:	2301      	movs	r3, #1
 800286e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002870:	f7fe f956 	bl	8000b20 <HAL_GetTick>
 8002874:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002878:	e00e      	b.n	8002898 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800287a:	f7fe f951 	bl	8000b20 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d906      	bls.n	8002898 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e3d9      	b.n	8003042 <HAL_RCC_OscConfig+0xe02>
 800288e:	bf00      	nop
 8002890:	40021000 	.word	0x40021000
 8002894:	10908120 	.word	0x10908120
 8002898:	2302      	movs	r3, #2
 800289a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80028a2:	fa93 f3a3 	rbit	r3, r3
 80028a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80028aa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80028ae:	2202      	movs	r2, #2
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	fa93 f2a3 	rbit	r2, r3
 80028bc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80028c6:	2202      	movs	r2, #2
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	fa93 f2a3 	rbit	r2, r3
 80028d4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80028d8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028da:	4ba5      	ldr	r3, [pc, #660]	; (8002b70 <HAL_RCC_OscConfig+0x930>)
 80028dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028de:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80028e2:	2102      	movs	r1, #2
 80028e4:	6019      	str	r1, [r3, #0]
 80028e6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	fa93 f1a3 	rbit	r1, r3
 80028f0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80028f4:	6019      	str	r1, [r3, #0]
  return result;
 80028f6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	fab3 f383 	clz	r3, r3
 8002900:	b2db      	uxtb	r3, r3
 8002902:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002906:	b2db      	uxtb	r3, r3
 8002908:	f003 031f 	and.w	r3, r3, #31
 800290c:	2101      	movs	r1, #1
 800290e:	fa01 f303 	lsl.w	r3, r1, r3
 8002912:	4013      	ands	r3, r2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d0b0      	beq.n	800287a <HAL_RCC_OscConfig+0x63a>
 8002918:	e06a      	b.n	80029f0 <HAL_RCC_OscConfig+0x7b0>
 800291a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800291e:	2201      	movs	r2, #1
 8002920:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002922:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	fa93 f2a3 	rbit	r2, r3
 800292c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002930:	601a      	str	r2, [r3, #0]
  return result;
 8002932:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002936:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002938:	fab3 f383 	clz	r3, r3
 800293c:	b2db      	uxtb	r3, r3
 800293e:	461a      	mov	r2, r3
 8002940:	4b8c      	ldr	r3, [pc, #560]	; (8002b74 <HAL_RCC_OscConfig+0x934>)
 8002942:	4413      	add	r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	461a      	mov	r2, r3
 8002948:	2300      	movs	r3, #0
 800294a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800294c:	f7fe f8e8 	bl	8000b20 <HAL_GetTick>
 8002950:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002954:	e009      	b.n	800296a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002956:	f7fe f8e3 	bl	8000b20 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e36b      	b.n	8003042 <HAL_RCC_OscConfig+0xe02>
 800296a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800296e:	2202      	movs	r2, #2
 8002970:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002972:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	fa93 f2a3 	rbit	r2, r3
 800297c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002980:	601a      	str	r2, [r3, #0]
 8002982:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002986:	2202      	movs	r2, #2
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	fa93 f2a3 	rbit	r2, r3
 8002994:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800299e:	2202      	movs	r2, #2
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	fa93 f2a3 	rbit	r2, r3
 80029ac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80029b0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029b2:	4b6f      	ldr	r3, [pc, #444]	; (8002b70 <HAL_RCC_OscConfig+0x930>)
 80029b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029b6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80029ba:	2102      	movs	r1, #2
 80029bc:	6019      	str	r1, [r3, #0]
 80029be:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	fa93 f1a3 	rbit	r1, r3
 80029c8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80029cc:	6019      	str	r1, [r3, #0]
  return result;
 80029ce:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	fab3 f383 	clz	r3, r3
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	f003 031f 	and.w	r3, r3, #31
 80029e4:	2101      	movs	r1, #1
 80029e6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ea:	4013      	ands	r3, r2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1b2      	bne.n	8002956 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029f0:	1d3b      	adds	r3, r7, #4
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0304 	and.w	r3, r3, #4
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 8158 	beq.w	8002cb0 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a00:	2300      	movs	r3, #0
 8002a02:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a06:	4b5a      	ldr	r3, [pc, #360]	; (8002b70 <HAL_RCC_OscConfig+0x930>)
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d112      	bne.n	8002a38 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a12:	4b57      	ldr	r3, [pc, #348]	; (8002b70 <HAL_RCC_OscConfig+0x930>)
 8002a14:	69db      	ldr	r3, [r3, #28]
 8002a16:	4a56      	ldr	r2, [pc, #344]	; (8002b70 <HAL_RCC_OscConfig+0x930>)
 8002a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a1c:	61d3      	str	r3, [r2, #28]
 8002a1e:	4b54      	ldr	r3, [pc, #336]	; (8002b70 <HAL_RCC_OscConfig+0x930>)
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002a26:	f107 0308 	add.w	r3, r7, #8
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	f107 0308 	add.w	r3, r7, #8
 8002a30:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002a32:	2301      	movs	r3, #1
 8002a34:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a38:	4b4f      	ldr	r3, [pc, #316]	; (8002b78 <HAL_RCC_OscConfig+0x938>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d11a      	bne.n	8002a7a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a44:	4b4c      	ldr	r3, [pc, #304]	; (8002b78 <HAL_RCC_OscConfig+0x938>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a4b      	ldr	r2, [pc, #300]	; (8002b78 <HAL_RCC_OscConfig+0x938>)
 8002a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a4e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a50:	f7fe f866 	bl	8000b20 <HAL_GetTick>
 8002a54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a58:	e009      	b.n	8002a6e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a5a:	f7fe f861 	bl	8000b20 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b64      	cmp	r3, #100	; 0x64
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e2e9      	b.n	8003042 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6e:	4b42      	ldr	r3, [pc, #264]	; (8002b78 <HAL_RCC_OscConfig+0x938>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d0ef      	beq.n	8002a5a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a7a:	1d3b      	adds	r3, r7, #4
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d106      	bne.n	8002a92 <HAL_RCC_OscConfig+0x852>
 8002a84:	4b3a      	ldr	r3, [pc, #232]	; (8002b70 <HAL_RCC_OscConfig+0x930>)
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	4a39      	ldr	r2, [pc, #228]	; (8002b70 <HAL_RCC_OscConfig+0x930>)
 8002a8a:	f043 0301 	orr.w	r3, r3, #1
 8002a8e:	6213      	str	r3, [r2, #32]
 8002a90:	e02f      	b.n	8002af2 <HAL_RCC_OscConfig+0x8b2>
 8002a92:	1d3b      	adds	r3, r7, #4
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d10c      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x876>
 8002a9c:	4b34      	ldr	r3, [pc, #208]	; (8002b70 <HAL_RCC_OscConfig+0x930>)
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	4a33      	ldr	r2, [pc, #204]	; (8002b70 <HAL_RCC_OscConfig+0x930>)
 8002aa2:	f023 0301 	bic.w	r3, r3, #1
 8002aa6:	6213      	str	r3, [r2, #32]
 8002aa8:	4b31      	ldr	r3, [pc, #196]	; (8002b70 <HAL_RCC_OscConfig+0x930>)
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	4a30      	ldr	r2, [pc, #192]	; (8002b70 <HAL_RCC_OscConfig+0x930>)
 8002aae:	f023 0304 	bic.w	r3, r3, #4
 8002ab2:	6213      	str	r3, [r2, #32]
 8002ab4:	e01d      	b.n	8002af2 <HAL_RCC_OscConfig+0x8b2>
 8002ab6:	1d3b      	adds	r3, r7, #4
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	2b05      	cmp	r3, #5
 8002abe:	d10c      	bne.n	8002ada <HAL_RCC_OscConfig+0x89a>
 8002ac0:	4b2b      	ldr	r3, [pc, #172]	; (8002b70 <HAL_RCC_OscConfig+0x930>)
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	4a2a      	ldr	r2, [pc, #168]	; (8002b70 <HAL_RCC_OscConfig+0x930>)
 8002ac6:	f043 0304 	orr.w	r3, r3, #4
 8002aca:	6213      	str	r3, [r2, #32]
 8002acc:	4b28      	ldr	r3, [pc, #160]	; (8002b70 <HAL_RCC_OscConfig+0x930>)
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	4a27      	ldr	r2, [pc, #156]	; (8002b70 <HAL_RCC_OscConfig+0x930>)
 8002ad2:	f043 0301 	orr.w	r3, r3, #1
 8002ad6:	6213      	str	r3, [r2, #32]
 8002ad8:	e00b      	b.n	8002af2 <HAL_RCC_OscConfig+0x8b2>
 8002ada:	4b25      	ldr	r3, [pc, #148]	; (8002b70 <HAL_RCC_OscConfig+0x930>)
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	4a24      	ldr	r2, [pc, #144]	; (8002b70 <HAL_RCC_OscConfig+0x930>)
 8002ae0:	f023 0301 	bic.w	r3, r3, #1
 8002ae4:	6213      	str	r3, [r2, #32]
 8002ae6:	4b22      	ldr	r3, [pc, #136]	; (8002b70 <HAL_RCC_OscConfig+0x930>)
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	4a21      	ldr	r2, [pc, #132]	; (8002b70 <HAL_RCC_OscConfig+0x930>)
 8002aec:	f023 0304 	bic.w	r3, r3, #4
 8002af0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002af2:	1d3b      	adds	r3, r7, #4
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d06b      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002afc:	f7fe f810 	bl	8000b20 <HAL_GetTick>
 8002b00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b04:	e00b      	b.n	8002b1e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b06:	f7fe f80b 	bl	8000b20 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e291      	b.n	8003042 <HAL_RCC_OscConfig+0xe02>
 8002b1e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002b22:	2202      	movs	r2, #2
 8002b24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b26:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	fa93 f2a3 	rbit	r2, r3
 8002b30:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002b34:	601a      	str	r2, [r3, #0]
 8002b36:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	fa93 f2a3 	rbit	r2, r3
 8002b48:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002b4c:	601a      	str	r2, [r3, #0]
  return result;
 8002b4e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002b52:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b54:	fab3 f383 	clz	r3, r3
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	095b      	lsrs	r3, r3, #5
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	f043 0302 	orr.w	r3, r3, #2
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d109      	bne.n	8002b7c <HAL_RCC_OscConfig+0x93c>
 8002b68:	4b01      	ldr	r3, [pc, #4]	; (8002b70 <HAL_RCC_OscConfig+0x930>)
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	e014      	b.n	8002b98 <HAL_RCC_OscConfig+0x958>
 8002b6e:	bf00      	nop
 8002b70:	40021000 	.word	0x40021000
 8002b74:	10908120 	.word	0x10908120
 8002b78:	40007000 	.word	0x40007000
 8002b7c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002b80:	2202      	movs	r2, #2
 8002b82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b84:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	fa93 f2a3 	rbit	r2, r3
 8002b8e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	4bbb      	ldr	r3, [pc, #748]	; (8002e84 <HAL_RCC_OscConfig+0xc44>)
 8002b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b98:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002b9c:	2102      	movs	r1, #2
 8002b9e:	6011      	str	r1, [r2, #0]
 8002ba0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002ba4:	6812      	ldr	r2, [r2, #0]
 8002ba6:	fa92 f1a2 	rbit	r1, r2
 8002baa:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002bae:	6011      	str	r1, [r2, #0]
  return result;
 8002bb0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002bb4:	6812      	ldr	r2, [r2, #0]
 8002bb6:	fab2 f282 	clz	r2, r2
 8002bba:	b2d2      	uxtb	r2, r2
 8002bbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bc0:	b2d2      	uxtb	r2, r2
 8002bc2:	f002 021f 	and.w	r2, r2, #31
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bcc:	4013      	ands	r3, r2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d099      	beq.n	8002b06 <HAL_RCC_OscConfig+0x8c6>
 8002bd2:	e063      	b.n	8002c9c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bd4:	f7fd ffa4 	bl	8000b20 <HAL_GetTick>
 8002bd8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bdc:	e00b      	b.n	8002bf6 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bde:	f7fd ff9f 	bl	8000b20 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e225      	b.n	8003042 <HAL_RCC_OscConfig+0xe02>
 8002bf6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	fa93 f2a3 	rbit	r2, r3
 8002c08:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002c12:	2202      	movs	r2, #2
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	fa93 f2a3 	rbit	r2, r3
 8002c20:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002c24:	601a      	str	r2, [r3, #0]
  return result;
 8002c26:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002c2a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c2c:	fab3 f383 	clz	r3, r3
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	095b      	lsrs	r3, r3, #5
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	f043 0302 	orr.w	r3, r3, #2
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d102      	bne.n	8002c46 <HAL_RCC_OscConfig+0xa06>
 8002c40:	4b90      	ldr	r3, [pc, #576]	; (8002e84 <HAL_RCC_OscConfig+0xc44>)
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	e00d      	b.n	8002c62 <HAL_RCC_OscConfig+0xa22>
 8002c46:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	fa93 f2a3 	rbit	r2, r3
 8002c58:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002c5c:	601a      	str	r2, [r3, #0]
 8002c5e:	4b89      	ldr	r3, [pc, #548]	; (8002e84 <HAL_RCC_OscConfig+0xc44>)
 8002c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c62:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002c66:	2102      	movs	r1, #2
 8002c68:	6011      	str	r1, [r2, #0]
 8002c6a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002c6e:	6812      	ldr	r2, [r2, #0]
 8002c70:	fa92 f1a2 	rbit	r1, r2
 8002c74:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002c78:	6011      	str	r1, [r2, #0]
  return result;
 8002c7a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002c7e:	6812      	ldr	r2, [r2, #0]
 8002c80:	fab2 f282 	clz	r2, r2
 8002c84:	b2d2      	uxtb	r2, r2
 8002c86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c8a:	b2d2      	uxtb	r2, r2
 8002c8c:	f002 021f 	and.w	r2, r2, #31
 8002c90:	2101      	movs	r1, #1
 8002c92:	fa01 f202 	lsl.w	r2, r1, r2
 8002c96:	4013      	ands	r3, r2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d1a0      	bne.n	8002bde <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c9c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d105      	bne.n	8002cb0 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ca4:	4b77      	ldr	r3, [pc, #476]	; (8002e84 <HAL_RCC_OscConfig+0xc44>)
 8002ca6:	69db      	ldr	r3, [r3, #28]
 8002ca8:	4a76      	ldr	r2, [pc, #472]	; (8002e84 <HAL_RCC_OscConfig+0xc44>)
 8002caa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cae:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cb0:	1d3b      	adds	r3, r7, #4
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f000 81c2 	beq.w	8003040 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cbc:	4b71      	ldr	r3, [pc, #452]	; (8002e84 <HAL_RCC_OscConfig+0xc44>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f003 030c 	and.w	r3, r3, #12
 8002cc4:	2b08      	cmp	r3, #8
 8002cc6:	f000 819c 	beq.w	8003002 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cca:	1d3b      	adds	r3, r7, #4
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	69db      	ldr	r3, [r3, #28]
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	f040 8114 	bne.w	8002efe <HAL_RCC_OscConfig+0xcbe>
 8002cd6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002cda:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002cde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	fa93 f2a3 	rbit	r2, r3
 8002cea:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002cee:	601a      	str	r2, [r3, #0]
  return result;
 8002cf0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002cf4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cf6:	fab3 f383 	clz	r3, r3
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d00:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	461a      	mov	r2, r3
 8002d08:	2300      	movs	r3, #0
 8002d0a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d0c:	f7fd ff08 	bl	8000b20 <HAL_GetTick>
 8002d10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d14:	e009      	b.n	8002d2a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d16:	f7fd ff03 	bl	8000b20 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e18b      	b.n	8003042 <HAL_RCC_OscConfig+0xe02>
 8002d2a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002d2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d34:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	fa93 f2a3 	rbit	r2, r3
 8002d3e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002d42:	601a      	str	r2, [r3, #0]
  return result;
 8002d44:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002d48:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d4a:	fab3 f383 	clz	r3, r3
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	095b      	lsrs	r3, r3, #5
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d102      	bne.n	8002d64 <HAL_RCC_OscConfig+0xb24>
 8002d5e:	4b49      	ldr	r3, [pc, #292]	; (8002e84 <HAL_RCC_OscConfig+0xc44>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	e01b      	b.n	8002d9c <HAL_RCC_OscConfig+0xb5c>
 8002d64:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002d68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	fa93 f2a3 	rbit	r2, r3
 8002d78:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002d82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	fa93 f2a3 	rbit	r2, r3
 8002d92:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	4b3a      	ldr	r3, [pc, #232]	; (8002e84 <HAL_RCC_OscConfig+0xc44>)
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002da0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002da4:	6011      	str	r1, [r2, #0]
 8002da6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002daa:	6812      	ldr	r2, [r2, #0]
 8002dac:	fa92 f1a2 	rbit	r1, r2
 8002db0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002db4:	6011      	str	r1, [r2, #0]
  return result;
 8002db6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002dba:	6812      	ldr	r2, [r2, #0]
 8002dbc:	fab2 f282 	clz	r2, r2
 8002dc0:	b2d2      	uxtb	r2, r2
 8002dc2:	f042 0220 	orr.w	r2, r2, #32
 8002dc6:	b2d2      	uxtb	r2, r2
 8002dc8:	f002 021f 	and.w	r2, r2, #31
 8002dcc:	2101      	movs	r1, #1
 8002dce:	fa01 f202 	lsl.w	r2, r1, r2
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d19e      	bne.n	8002d16 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dd8:	4b2a      	ldr	r3, [pc, #168]	; (8002e84 <HAL_RCC_OscConfig+0xc44>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002de0:	1d3b      	adds	r3, r7, #4
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002de6:	1d3b      	adds	r3, r7, #4
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	430b      	orrs	r3, r1
 8002dee:	4925      	ldr	r1, [pc, #148]	; (8002e84 <HAL_RCC_OscConfig+0xc44>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	604b      	str	r3, [r1, #4]
 8002df4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002df8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002dfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	fa93 f2a3 	rbit	r2, r3
 8002e08:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e0c:	601a      	str	r2, [r3, #0]
  return result;
 8002e0e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e12:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e14:	fab3 f383 	clz	r3, r3
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e1e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	461a      	mov	r2, r3
 8002e26:	2301      	movs	r3, #1
 8002e28:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2a:	f7fd fe79 	bl	8000b20 <HAL_GetTick>
 8002e2e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e32:	e009      	b.n	8002e48 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e34:	f7fd fe74 	bl	8000b20 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e0fc      	b.n	8003042 <HAL_RCC_OscConfig+0xe02>
 8002e48:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002e4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e52:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	fa93 f2a3 	rbit	r2, r3
 8002e5c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e60:	601a      	str	r2, [r3, #0]
  return result;
 8002e62:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e66:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e68:	fab3 f383 	clz	r3, r3
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	095b      	lsrs	r3, r3, #5
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	f043 0301 	orr.w	r3, r3, #1
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d105      	bne.n	8002e88 <HAL_RCC_OscConfig+0xc48>
 8002e7c:	4b01      	ldr	r3, [pc, #4]	; (8002e84 <HAL_RCC_OscConfig+0xc44>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	e01e      	b.n	8002ec0 <HAL_RCC_OscConfig+0xc80>
 8002e82:	bf00      	nop
 8002e84:	40021000 	.word	0x40021000
 8002e88:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002e8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e92:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	fa93 f2a3 	rbit	r2, r3
 8002e9c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002ea0:	601a      	str	r2, [r3, #0]
 8002ea2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ea6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	fa93 f2a3 	rbit	r2, r3
 8002eb6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	4b63      	ldr	r3, [pc, #396]	; (800304c <HAL_RCC_OscConfig+0xe0c>)
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002ec4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ec8:	6011      	str	r1, [r2, #0]
 8002eca:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002ece:	6812      	ldr	r2, [r2, #0]
 8002ed0:	fa92 f1a2 	rbit	r1, r2
 8002ed4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002ed8:	6011      	str	r1, [r2, #0]
  return result;
 8002eda:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002ede:	6812      	ldr	r2, [r2, #0]
 8002ee0:	fab2 f282 	clz	r2, r2
 8002ee4:	b2d2      	uxtb	r2, r2
 8002ee6:	f042 0220 	orr.w	r2, r2, #32
 8002eea:	b2d2      	uxtb	r2, r2
 8002eec:	f002 021f 	and.w	r2, r2, #31
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d09b      	beq.n	8002e34 <HAL_RCC_OscConfig+0xbf4>
 8002efc:	e0a0      	b.n	8003040 <HAL_RCC_OscConfig+0xe00>
 8002efe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f02:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	fa93 f2a3 	rbit	r2, r3
 8002f12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f16:	601a      	str	r2, [r3, #0]
  return result;
 8002f18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f1c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f1e:	fab3 f383 	clz	r3, r3
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f28:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	461a      	mov	r2, r3
 8002f30:	2300      	movs	r3, #0
 8002f32:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f34:	f7fd fdf4 	bl	8000b20 <HAL_GetTick>
 8002f38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f3c:	e009      	b.n	8002f52 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f3e:	f7fd fdef 	bl	8000b20 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e077      	b.n	8003042 <HAL_RCC_OscConfig+0xe02>
 8002f52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	fa93 f2a3 	rbit	r2, r3
 8002f66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f6a:	601a      	str	r2, [r3, #0]
  return result;
 8002f6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f70:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f72:	fab3 f383 	clz	r3, r3
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	095b      	lsrs	r3, r3, #5
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	f043 0301 	orr.w	r3, r3, #1
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d102      	bne.n	8002f8c <HAL_RCC_OscConfig+0xd4c>
 8002f86:	4b31      	ldr	r3, [pc, #196]	; (800304c <HAL_RCC_OscConfig+0xe0c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	e01b      	b.n	8002fc4 <HAL_RCC_OscConfig+0xd84>
 8002f8c:	f107 0320 	add.w	r3, r7, #32
 8002f90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f96:	f107 0320 	add.w	r3, r7, #32
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	fa93 f2a3 	rbit	r2, r3
 8002fa0:	f107 031c 	add.w	r3, r7, #28
 8002fa4:	601a      	str	r2, [r3, #0]
 8002fa6:	f107 0318 	add.w	r3, r7, #24
 8002faa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	f107 0318 	add.w	r3, r7, #24
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	fa93 f2a3 	rbit	r2, r3
 8002fba:	f107 0314 	add.w	r3, r7, #20
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	4b22      	ldr	r3, [pc, #136]	; (800304c <HAL_RCC_OscConfig+0xe0c>)
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc4:	f107 0210 	add.w	r2, r7, #16
 8002fc8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002fcc:	6011      	str	r1, [r2, #0]
 8002fce:	f107 0210 	add.w	r2, r7, #16
 8002fd2:	6812      	ldr	r2, [r2, #0]
 8002fd4:	fa92 f1a2 	rbit	r1, r2
 8002fd8:	f107 020c 	add.w	r2, r7, #12
 8002fdc:	6011      	str	r1, [r2, #0]
  return result;
 8002fde:	f107 020c 	add.w	r2, r7, #12
 8002fe2:	6812      	ldr	r2, [r2, #0]
 8002fe4:	fab2 f282 	clz	r2, r2
 8002fe8:	b2d2      	uxtb	r2, r2
 8002fea:	f042 0220 	orr.w	r2, r2, #32
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	f002 021f 	and.w	r2, r2, #31
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	fa01 f202 	lsl.w	r2, r1, r2
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d19e      	bne.n	8002f3e <HAL_RCC_OscConfig+0xcfe>
 8003000:	e01e      	b.n	8003040 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003002:	1d3b      	adds	r3, r7, #4
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	69db      	ldr	r3, [r3, #28]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d101      	bne.n	8003010 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e018      	b.n	8003042 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003010:	4b0e      	ldr	r3, [pc, #56]	; (800304c <HAL_RCC_OscConfig+0xe0c>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003018:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800301c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003020:	1d3b      	adds	r3, r7, #4
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6a1b      	ldr	r3, [r3, #32]
 8003026:	429a      	cmp	r2, r3
 8003028:	d108      	bne.n	800303c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800302a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800302e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003032:	1d3b      	adds	r3, r7, #4
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003038:	429a      	cmp	r2, r3
 800303a:	d001      	beq.n	8003040 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e000      	b.n	8003042 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	40021000 	.word	0x40021000

08003050 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b09e      	sub	sp, #120	; 0x78
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800305a:	2300      	movs	r3, #0
 800305c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e162      	b.n	800332e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003068:	4b90      	ldr	r3, [pc, #576]	; (80032ac <HAL_RCC_ClockConfig+0x25c>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	429a      	cmp	r2, r3
 8003074:	d910      	bls.n	8003098 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003076:	4b8d      	ldr	r3, [pc, #564]	; (80032ac <HAL_RCC_ClockConfig+0x25c>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f023 0207 	bic.w	r2, r3, #7
 800307e:	498b      	ldr	r1, [pc, #556]	; (80032ac <HAL_RCC_ClockConfig+0x25c>)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	4313      	orrs	r3, r2
 8003084:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003086:	4b89      	ldr	r3, [pc, #548]	; (80032ac <HAL_RCC_ClockConfig+0x25c>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	429a      	cmp	r2, r3
 8003092:	d001      	beq.n	8003098 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e14a      	b.n	800332e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d008      	beq.n	80030b6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030a4:	4b82      	ldr	r3, [pc, #520]	; (80032b0 <HAL_RCC_ClockConfig+0x260>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	497f      	ldr	r1, [pc, #508]	; (80032b0 <HAL_RCC_ClockConfig+0x260>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f000 80dc 	beq.w	800327c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d13c      	bne.n	8003146 <HAL_RCC_ClockConfig+0xf6>
 80030cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030d0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030d4:	fa93 f3a3 	rbit	r3, r3
 80030d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80030da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030dc:	fab3 f383 	clz	r3, r3
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	095b      	lsrs	r3, r3, #5
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	f043 0301 	orr.w	r3, r3, #1
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d102      	bne.n	80030f6 <HAL_RCC_ClockConfig+0xa6>
 80030f0:	4b6f      	ldr	r3, [pc, #444]	; (80032b0 <HAL_RCC_ClockConfig+0x260>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	e00f      	b.n	8003116 <HAL_RCC_ClockConfig+0xc6>
 80030f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030fa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030fe:	fa93 f3a3 	rbit	r3, r3
 8003102:	667b      	str	r3, [r7, #100]	; 0x64
 8003104:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003108:	663b      	str	r3, [r7, #96]	; 0x60
 800310a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800310c:	fa93 f3a3 	rbit	r3, r3
 8003110:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003112:	4b67      	ldr	r3, [pc, #412]	; (80032b0 <HAL_RCC_ClockConfig+0x260>)
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800311a:	65ba      	str	r2, [r7, #88]	; 0x58
 800311c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800311e:	fa92 f2a2 	rbit	r2, r2
 8003122:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003124:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003126:	fab2 f282 	clz	r2, r2
 800312a:	b2d2      	uxtb	r2, r2
 800312c:	f042 0220 	orr.w	r2, r2, #32
 8003130:	b2d2      	uxtb	r2, r2
 8003132:	f002 021f 	and.w	r2, r2, #31
 8003136:	2101      	movs	r1, #1
 8003138:	fa01 f202 	lsl.w	r2, r1, r2
 800313c:	4013      	ands	r3, r2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d17b      	bne.n	800323a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e0f3      	b.n	800332e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	2b02      	cmp	r3, #2
 800314c:	d13c      	bne.n	80031c8 <HAL_RCC_ClockConfig+0x178>
 800314e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003152:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003154:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003156:	fa93 f3a3 	rbit	r3, r3
 800315a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800315c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800315e:	fab3 f383 	clz	r3, r3
 8003162:	b2db      	uxtb	r3, r3
 8003164:	095b      	lsrs	r3, r3, #5
 8003166:	b2db      	uxtb	r3, r3
 8003168:	f043 0301 	orr.w	r3, r3, #1
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b01      	cmp	r3, #1
 8003170:	d102      	bne.n	8003178 <HAL_RCC_ClockConfig+0x128>
 8003172:	4b4f      	ldr	r3, [pc, #316]	; (80032b0 <HAL_RCC_ClockConfig+0x260>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	e00f      	b.n	8003198 <HAL_RCC_ClockConfig+0x148>
 8003178:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800317c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003180:	fa93 f3a3 	rbit	r3, r3
 8003184:	647b      	str	r3, [r7, #68]	; 0x44
 8003186:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800318a:	643b      	str	r3, [r7, #64]	; 0x40
 800318c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800318e:	fa93 f3a3 	rbit	r3, r3
 8003192:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003194:	4b46      	ldr	r3, [pc, #280]	; (80032b0 <HAL_RCC_ClockConfig+0x260>)
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800319c:	63ba      	str	r2, [r7, #56]	; 0x38
 800319e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031a0:	fa92 f2a2 	rbit	r2, r2
 80031a4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80031a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031a8:	fab2 f282 	clz	r2, r2
 80031ac:	b2d2      	uxtb	r2, r2
 80031ae:	f042 0220 	orr.w	r2, r2, #32
 80031b2:	b2d2      	uxtb	r2, r2
 80031b4:	f002 021f 	and.w	r2, r2, #31
 80031b8:	2101      	movs	r1, #1
 80031ba:	fa01 f202 	lsl.w	r2, r1, r2
 80031be:	4013      	ands	r3, r2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d13a      	bne.n	800323a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e0b2      	b.n	800332e <HAL_RCC_ClockConfig+0x2de>
 80031c8:	2302      	movs	r3, #2
 80031ca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ce:	fa93 f3a3 	rbit	r3, r3
 80031d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80031d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d6:	fab3 f383 	clz	r3, r3
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	095b      	lsrs	r3, r3, #5
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	f043 0301 	orr.w	r3, r3, #1
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d102      	bne.n	80031f0 <HAL_RCC_ClockConfig+0x1a0>
 80031ea:	4b31      	ldr	r3, [pc, #196]	; (80032b0 <HAL_RCC_ClockConfig+0x260>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	e00d      	b.n	800320c <HAL_RCC_ClockConfig+0x1bc>
 80031f0:	2302      	movs	r3, #2
 80031f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f6:	fa93 f3a3 	rbit	r3, r3
 80031fa:	627b      	str	r3, [r7, #36]	; 0x24
 80031fc:	2302      	movs	r3, #2
 80031fe:	623b      	str	r3, [r7, #32]
 8003200:	6a3b      	ldr	r3, [r7, #32]
 8003202:	fa93 f3a3 	rbit	r3, r3
 8003206:	61fb      	str	r3, [r7, #28]
 8003208:	4b29      	ldr	r3, [pc, #164]	; (80032b0 <HAL_RCC_ClockConfig+0x260>)
 800320a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320c:	2202      	movs	r2, #2
 800320e:	61ba      	str	r2, [r7, #24]
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	fa92 f2a2 	rbit	r2, r2
 8003216:	617a      	str	r2, [r7, #20]
  return result;
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	fab2 f282 	clz	r2, r2
 800321e:	b2d2      	uxtb	r2, r2
 8003220:	f042 0220 	orr.w	r2, r2, #32
 8003224:	b2d2      	uxtb	r2, r2
 8003226:	f002 021f 	and.w	r2, r2, #31
 800322a:	2101      	movs	r1, #1
 800322c:	fa01 f202 	lsl.w	r2, r1, r2
 8003230:	4013      	ands	r3, r2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e079      	b.n	800332e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800323a:	4b1d      	ldr	r3, [pc, #116]	; (80032b0 <HAL_RCC_ClockConfig+0x260>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f023 0203 	bic.w	r2, r3, #3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	491a      	ldr	r1, [pc, #104]	; (80032b0 <HAL_RCC_ClockConfig+0x260>)
 8003248:	4313      	orrs	r3, r2
 800324a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800324c:	f7fd fc68 	bl	8000b20 <HAL_GetTick>
 8003250:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003252:	e00a      	b.n	800326a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003254:	f7fd fc64 	bl	8000b20 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003262:	4293      	cmp	r3, r2
 8003264:	d901      	bls.n	800326a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e061      	b.n	800332e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800326a:	4b11      	ldr	r3, [pc, #68]	; (80032b0 <HAL_RCC_ClockConfig+0x260>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f003 020c 	and.w	r2, r3, #12
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	429a      	cmp	r2, r3
 800327a:	d1eb      	bne.n	8003254 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800327c:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <HAL_RCC_ClockConfig+0x25c>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	429a      	cmp	r2, r3
 8003288:	d214      	bcs.n	80032b4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800328a:	4b08      	ldr	r3, [pc, #32]	; (80032ac <HAL_RCC_ClockConfig+0x25c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f023 0207 	bic.w	r2, r3, #7
 8003292:	4906      	ldr	r1, [pc, #24]	; (80032ac <HAL_RCC_ClockConfig+0x25c>)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	4313      	orrs	r3, r2
 8003298:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800329a:	4b04      	ldr	r3, [pc, #16]	; (80032ac <HAL_RCC_ClockConfig+0x25c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	683a      	ldr	r2, [r7, #0]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d005      	beq.n	80032b4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e040      	b.n	800332e <HAL_RCC_ClockConfig+0x2de>
 80032ac:	40022000 	.word	0x40022000
 80032b0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0304 	and.w	r3, r3, #4
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d008      	beq.n	80032d2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032c0:	4b1d      	ldr	r3, [pc, #116]	; (8003338 <HAL_RCC_ClockConfig+0x2e8>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	491a      	ldr	r1, [pc, #104]	; (8003338 <HAL_RCC_ClockConfig+0x2e8>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0308 	and.w	r3, r3, #8
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d009      	beq.n	80032f2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032de:	4b16      	ldr	r3, [pc, #88]	; (8003338 <HAL_RCC_ClockConfig+0x2e8>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	4912      	ldr	r1, [pc, #72]	; (8003338 <HAL_RCC_ClockConfig+0x2e8>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80032f2:	f000 f829 	bl	8003348 <HAL_RCC_GetSysClockFreq>
 80032f6:	4601      	mov	r1, r0
 80032f8:	4b0f      	ldr	r3, [pc, #60]	; (8003338 <HAL_RCC_ClockConfig+0x2e8>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003300:	22f0      	movs	r2, #240	; 0xf0
 8003302:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	fa92 f2a2 	rbit	r2, r2
 800330a:	60fa      	str	r2, [r7, #12]
  return result;
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	fab2 f282 	clz	r2, r2
 8003312:	b2d2      	uxtb	r2, r2
 8003314:	40d3      	lsrs	r3, r2
 8003316:	4a09      	ldr	r2, [pc, #36]	; (800333c <HAL_RCC_ClockConfig+0x2ec>)
 8003318:	5cd3      	ldrb	r3, [r2, r3]
 800331a:	fa21 f303 	lsr.w	r3, r1, r3
 800331e:	4a08      	ldr	r2, [pc, #32]	; (8003340 <HAL_RCC_ClockConfig+0x2f0>)
 8003320:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003322:	4b08      	ldr	r3, [pc, #32]	; (8003344 <HAL_RCC_ClockConfig+0x2f4>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4618      	mov	r0, r3
 8003328:	f7fd fbb6 	bl	8000a98 <HAL_InitTick>
  
  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3778      	adds	r7, #120	; 0x78
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	40021000 	.word	0x40021000
 800333c:	08004ed4 	.word	0x08004ed4
 8003340:	20000000 	.word	0x20000000
 8003344:	20000004 	.word	0x20000004

08003348 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003348:	b480      	push	{r7}
 800334a:	b08b      	sub	sp, #44	; 0x2c
 800334c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800334e:	2300      	movs	r3, #0
 8003350:	61fb      	str	r3, [r7, #28]
 8003352:	2300      	movs	r3, #0
 8003354:	61bb      	str	r3, [r7, #24]
 8003356:	2300      	movs	r3, #0
 8003358:	627b      	str	r3, [r7, #36]	; 0x24
 800335a:	2300      	movs	r3, #0
 800335c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800335e:	2300      	movs	r3, #0
 8003360:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003362:	4b29      	ldr	r3, [pc, #164]	; (8003408 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	f003 030c 	and.w	r3, r3, #12
 800336e:	2b04      	cmp	r3, #4
 8003370:	d002      	beq.n	8003378 <HAL_RCC_GetSysClockFreq+0x30>
 8003372:	2b08      	cmp	r3, #8
 8003374:	d003      	beq.n	800337e <HAL_RCC_GetSysClockFreq+0x36>
 8003376:	e03c      	b.n	80033f2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003378:	4b24      	ldr	r3, [pc, #144]	; (800340c <HAL_RCC_GetSysClockFreq+0xc4>)
 800337a:	623b      	str	r3, [r7, #32]
      break;
 800337c:	e03c      	b.n	80033f8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003384:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003388:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338a:	68ba      	ldr	r2, [r7, #8]
 800338c:	fa92 f2a2 	rbit	r2, r2
 8003390:	607a      	str	r2, [r7, #4]
  return result;
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	fab2 f282 	clz	r2, r2
 8003398:	b2d2      	uxtb	r2, r2
 800339a:	40d3      	lsrs	r3, r2
 800339c:	4a1c      	ldr	r2, [pc, #112]	; (8003410 <HAL_RCC_GetSysClockFreq+0xc8>)
 800339e:	5cd3      	ldrb	r3, [r2, r3]
 80033a0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80033a2:	4b19      	ldr	r3, [pc, #100]	; (8003408 <HAL_RCC_GetSysClockFreq+0xc0>)
 80033a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a6:	f003 030f 	and.w	r3, r3, #15
 80033aa:	220f      	movs	r2, #15
 80033ac:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	fa92 f2a2 	rbit	r2, r2
 80033b4:	60fa      	str	r2, [r7, #12]
  return result;
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	fab2 f282 	clz	r2, r2
 80033bc:	b2d2      	uxtb	r2, r2
 80033be:	40d3      	lsrs	r3, r2
 80033c0:	4a14      	ldr	r2, [pc, #80]	; (8003414 <HAL_RCC_GetSysClockFreq+0xcc>)
 80033c2:	5cd3      	ldrb	r3, [r2, r3]
 80033c4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d008      	beq.n	80033e2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80033d0:	4a0e      	ldr	r2, [pc, #56]	; (800340c <HAL_RCC_GetSysClockFreq+0xc4>)
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	fb02 f303 	mul.w	r3, r2, r3
 80033de:	627b      	str	r3, [r7, #36]	; 0x24
 80033e0:	e004      	b.n	80033ec <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	4a0c      	ldr	r2, [pc, #48]	; (8003418 <HAL_RCC_GetSysClockFreq+0xd0>)
 80033e6:	fb02 f303 	mul.w	r3, r2, r3
 80033ea:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80033ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ee:	623b      	str	r3, [r7, #32]
      break;
 80033f0:	e002      	b.n	80033f8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033f2:	4b06      	ldr	r3, [pc, #24]	; (800340c <HAL_RCC_GetSysClockFreq+0xc4>)
 80033f4:	623b      	str	r3, [r7, #32]
      break;
 80033f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033f8:	6a3b      	ldr	r3, [r7, #32]
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	372c      	adds	r7, #44	; 0x2c
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	40021000 	.word	0x40021000
 800340c:	007a1200 	.word	0x007a1200
 8003410:	08004eec 	.word	0x08004eec
 8003414:	08004efc 	.word	0x08004efc
 8003418:	003d0900 	.word	0x003d0900

0800341c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003420:	4b03      	ldr	r3, [pc, #12]	; (8003430 <HAL_RCC_GetHCLKFreq+0x14>)
 8003422:	681b      	ldr	r3, [r3, #0]
}
 8003424:	4618      	mov	r0, r3
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	20000000 	.word	0x20000000

08003434 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800343a:	f7ff ffef 	bl	800341c <HAL_RCC_GetHCLKFreq>
 800343e:	4601      	mov	r1, r0
 8003440:	4b0b      	ldr	r3, [pc, #44]	; (8003470 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003448:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800344c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	fa92 f2a2 	rbit	r2, r2
 8003454:	603a      	str	r2, [r7, #0]
  return result;
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	fab2 f282 	clz	r2, r2
 800345c:	b2d2      	uxtb	r2, r2
 800345e:	40d3      	lsrs	r3, r2
 8003460:	4a04      	ldr	r2, [pc, #16]	; (8003474 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003462:	5cd3      	ldrb	r3, [r2, r3]
 8003464:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003468:	4618      	mov	r0, r3
 800346a:	3708      	adds	r7, #8
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40021000 	.word	0x40021000
 8003474:	08004ee4 	.word	0x08004ee4

08003478 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800347e:	f7ff ffcd 	bl	800341c <HAL_RCC_GetHCLKFreq>
 8003482:	4601      	mov	r1, r0
 8003484:	4b0b      	ldr	r3, [pc, #44]	; (80034b4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800348c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003490:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	fa92 f2a2 	rbit	r2, r2
 8003498:	603a      	str	r2, [r7, #0]
  return result;
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	fab2 f282 	clz	r2, r2
 80034a0:	b2d2      	uxtb	r2, r2
 80034a2:	40d3      	lsrs	r3, r2
 80034a4:	4a04      	ldr	r2, [pc, #16]	; (80034b8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80034a6:	5cd3      	ldrb	r3, [r2, r3]
 80034a8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80034ac:	4618      	mov	r0, r3
 80034ae:	3708      	adds	r7, #8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	40021000 	.word	0x40021000
 80034b8:	08004ee4 	.word	0x08004ee4

080034bc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b092      	sub	sp, #72	; 0x48
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034c4:	2300      	movs	r3, #0
 80034c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80034c8:	2300      	movs	r3, #0
 80034ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80034cc:	2300      	movs	r3, #0
 80034ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f000 80cd 	beq.w	800367a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034e0:	4b8e      	ldr	r3, [pc, #568]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034e2:	69db      	ldr	r3, [r3, #28]
 80034e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10e      	bne.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034ec:	4b8b      	ldr	r3, [pc, #556]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ee:	69db      	ldr	r3, [r3, #28]
 80034f0:	4a8a      	ldr	r2, [pc, #552]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034f6:	61d3      	str	r3, [r2, #28]
 80034f8:	4b88      	ldr	r3, [pc, #544]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034fa:	69db      	ldr	r3, [r3, #28]
 80034fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003500:	60bb      	str	r3, [r7, #8]
 8003502:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003504:	2301      	movs	r3, #1
 8003506:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800350a:	4b85      	ldr	r3, [pc, #532]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003512:	2b00      	cmp	r3, #0
 8003514:	d118      	bne.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003516:	4b82      	ldr	r3, [pc, #520]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a81      	ldr	r2, [pc, #516]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800351c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003520:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003522:	f7fd fafd 	bl	8000b20 <HAL_GetTick>
 8003526:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003528:	e008      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800352a:	f7fd faf9 	bl	8000b20 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b64      	cmp	r3, #100	; 0x64
 8003536:	d901      	bls.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e0ea      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800353c:	4b78      	ldr	r3, [pc, #480]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003544:	2b00      	cmp	r3, #0
 8003546:	d0f0      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003548:	4b74      	ldr	r3, [pc, #464]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003550:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003554:	2b00      	cmp	r3, #0
 8003556:	d07d      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003560:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003562:	429a      	cmp	r2, r3
 8003564:	d076      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003566:	4b6d      	ldr	r3, [pc, #436]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800356e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003570:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003574:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003578:	fa93 f3a3 	rbit	r3, r3
 800357c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800357e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003580:	fab3 f383 	clz	r3, r3
 8003584:	b2db      	uxtb	r3, r3
 8003586:	461a      	mov	r2, r3
 8003588:	4b66      	ldr	r3, [pc, #408]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800358a:	4413      	add	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	461a      	mov	r2, r3
 8003590:	2301      	movs	r3, #1
 8003592:	6013      	str	r3, [r2, #0]
 8003594:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003598:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800359c:	fa93 f3a3 	rbit	r3, r3
 80035a0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80035a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035a4:	fab3 f383 	clz	r3, r3
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	461a      	mov	r2, r3
 80035ac:	4b5d      	ldr	r3, [pc, #372]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80035ae:	4413      	add	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	461a      	mov	r2, r3
 80035b4:	2300      	movs	r3, #0
 80035b6:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80035b8:	4a58      	ldr	r2, [pc, #352]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035bc:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80035be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d045      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c8:	f7fd faaa 	bl	8000b20 <HAL_GetTick>
 80035cc:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ce:	e00a      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035d0:	f7fd faa6 	bl	8000b20 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	f241 3288 	movw	r2, #5000	; 0x1388
 80035de:	4293      	cmp	r3, r2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e095      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80035e6:	2302      	movs	r3, #2
 80035e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ec:	fa93 f3a3 	rbit	r3, r3
 80035f0:	627b      	str	r3, [r7, #36]	; 0x24
 80035f2:	2302      	movs	r3, #2
 80035f4:	623b      	str	r3, [r7, #32]
 80035f6:	6a3b      	ldr	r3, [r7, #32]
 80035f8:	fa93 f3a3 	rbit	r3, r3
 80035fc:	61fb      	str	r3, [r7, #28]
  return result;
 80035fe:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003600:	fab3 f383 	clz	r3, r3
 8003604:	b2db      	uxtb	r3, r3
 8003606:	095b      	lsrs	r3, r3, #5
 8003608:	b2db      	uxtb	r3, r3
 800360a:	f043 0302 	orr.w	r3, r3, #2
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d102      	bne.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003614:	4b41      	ldr	r3, [pc, #260]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	e007      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800361a:	2302      	movs	r3, #2
 800361c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	fa93 f3a3 	rbit	r3, r3
 8003624:	617b      	str	r3, [r7, #20]
 8003626:	4b3d      	ldr	r3, [pc, #244]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362a:	2202      	movs	r2, #2
 800362c:	613a      	str	r2, [r7, #16]
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	fa92 f2a2 	rbit	r2, r2
 8003634:	60fa      	str	r2, [r7, #12]
  return result;
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	fab2 f282 	clz	r2, r2
 800363c:	b2d2      	uxtb	r2, r2
 800363e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003642:	b2d2      	uxtb	r2, r2
 8003644:	f002 021f 	and.w	r2, r2, #31
 8003648:	2101      	movs	r1, #1
 800364a:	fa01 f202 	lsl.w	r2, r1, r2
 800364e:	4013      	ands	r3, r2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d0bd      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003654:	4b31      	ldr	r3, [pc, #196]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	492e      	ldr	r1, [pc, #184]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003662:	4313      	orrs	r3, r2
 8003664:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003666:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800366a:	2b01      	cmp	r3, #1
 800366c:	d105      	bne.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800366e:	4b2b      	ldr	r3, [pc, #172]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003670:	69db      	ldr	r3, [r3, #28]
 8003672:	4a2a      	ldr	r2, [pc, #168]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003674:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003678:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d008      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003686:	4b25      	ldr	r3, [pc, #148]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368a:	f023 0203 	bic.w	r2, r3, #3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	4922      	ldr	r1, [pc, #136]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003694:	4313      	orrs	r3, r2
 8003696:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0320 	and.w	r3, r3, #32
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d008      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036a4:	4b1d      	ldr	r3, [pc, #116]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a8:	f023 0210 	bic.w	r2, r3, #16
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	491a      	ldr	r1, [pc, #104]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d008      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80036c2:	4b16      	ldr	r3, [pc, #88]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	4913      	ldr	r1, [pc, #76]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d008      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80036e0:	4b0e      	ldr	r3, [pc, #56]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	695b      	ldr	r3, [r3, #20]
 80036ec:	490b      	ldr	r1, [pc, #44]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d008      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80036fe:	4b07      	ldr	r3, [pc, #28]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003702:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	4904      	ldr	r1, [pc, #16]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800370c:	4313      	orrs	r3, r2
 800370e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3748      	adds	r7, #72	; 0x48
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	40021000 	.word	0x40021000
 8003720:	40007000 	.word	0x40007000
 8003724:	10908100 	.word	0x10908100

08003728 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e040      	b.n	80037bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800373e:	2b00      	cmp	r3, #0
 8003740:	d106      	bne.n	8003750 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7fd f838 	bl	80007c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2224      	movs	r2, #36	; 0x24
 8003754:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f022 0201 	bic.w	r2, r2, #1
 8003764:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 f8c0 	bl	80038ec <UART_SetConfig>
 800376c:	4603      	mov	r3, r0
 800376e:	2b01      	cmp	r3, #1
 8003770:	d101      	bne.n	8003776 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e022      	b.n	80037bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377a:	2b00      	cmp	r3, #0
 800377c:	d002      	beq.n	8003784 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f9ea 	bl	8003b58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003792:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689a      	ldr	r2, [r3, #8]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f042 0201 	orr.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 fa71 	bl	8003c9c <UART_CheckIdleState>
 80037ba:	4603      	mov	r3, r0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3708      	adds	r7, #8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b08a      	sub	sp, #40	; 0x28
 80037c8:	af02      	add	r7, sp, #8
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	603b      	str	r3, [r7, #0]
 80037d0:	4613      	mov	r3, r2
 80037d2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037d8:	2b20      	cmp	r3, #32
 80037da:	f040 8082 	bne.w	80038e2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d002      	beq.n	80037ea <HAL_UART_Transmit+0x26>
 80037e4:	88fb      	ldrh	r3, [r7, #6]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e07a      	b.n	80038e4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d101      	bne.n	80037fc <HAL_UART_Transmit+0x38>
 80037f8:	2302      	movs	r3, #2
 80037fa:	e073      	b.n	80038e4 <HAL_UART_Transmit+0x120>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2221      	movs	r2, #33	; 0x21
 8003810:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003812:	f7fd f985 	bl	8000b20 <HAL_GetTick>
 8003816:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	88fa      	ldrh	r2, [r7, #6]
 800381c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	88fa      	ldrh	r2, [r7, #6]
 8003824:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003830:	d108      	bne.n	8003844 <HAL_UART_Transmit+0x80>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d104      	bne.n	8003844 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800383a:	2300      	movs	r3, #0
 800383c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	61bb      	str	r3, [r7, #24]
 8003842:	e003      	b.n	800384c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003848:	2300      	movs	r3, #0
 800384a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003854:	e02d      	b.n	80038b2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	9300      	str	r3, [sp, #0]
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	2200      	movs	r2, #0
 800385e:	2180      	movs	r1, #128	; 0x80
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	f000 fa64 	bl	8003d2e <UART_WaitOnFlagUntilTimeout>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e039      	b.n	80038e4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10b      	bne.n	800388e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	881a      	ldrh	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003882:	b292      	uxth	r2, r2
 8003884:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	3302      	adds	r3, #2
 800388a:	61bb      	str	r3, [r7, #24]
 800388c:	e008      	b.n	80038a0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	781a      	ldrb	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	b292      	uxth	r2, r2
 8003898:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	3301      	adds	r3, #1
 800389e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	3b01      	subs	r3, #1
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1cb      	bne.n	8003856 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	2200      	movs	r2, #0
 80038c6:	2140      	movs	r1, #64	; 0x40
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f000 fa30 	bl	8003d2e <UART_WaitOnFlagUntilTimeout>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e005      	b.n	80038e4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2220      	movs	r2, #32
 80038dc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80038de:	2300      	movs	r3, #0
 80038e0:	e000      	b.n	80038e4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80038e2:	2302      	movs	r3, #2
  }
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3720      	adds	r7, #32
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b088      	sub	sp, #32
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038f4:	2300      	movs	r3, #0
 80038f6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689a      	ldr	r2, [r3, #8]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	431a      	orrs	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	431a      	orrs	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	69db      	ldr	r3, [r3, #28]
 800390c:	4313      	orrs	r3, r2
 800390e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	4b8a      	ldr	r3, [pc, #552]	; (8003b40 <UART_SetConfig+0x254>)
 8003918:	4013      	ands	r3, r2
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	6812      	ldr	r2, [r2, #0]
 800391e:	6979      	ldr	r1, [r7, #20]
 8003920:	430b      	orrs	r3, r1
 8003922:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68da      	ldr	r2, [r3, #12]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	430a      	orrs	r2, r1
 8003938:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a1b      	ldr	r3, [r3, #32]
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	4313      	orrs	r3, r2
 8003948:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	430a      	orrs	r2, r1
 800395c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a78      	ldr	r2, [pc, #480]	; (8003b44 <UART_SetConfig+0x258>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d120      	bne.n	80039aa <UART_SetConfig+0xbe>
 8003968:	4b77      	ldr	r3, [pc, #476]	; (8003b48 <UART_SetConfig+0x25c>)
 800396a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396c:	f003 0303 	and.w	r3, r3, #3
 8003970:	2b03      	cmp	r3, #3
 8003972:	d817      	bhi.n	80039a4 <UART_SetConfig+0xb8>
 8003974:	a201      	add	r2, pc, #4	; (adr r2, 800397c <UART_SetConfig+0x90>)
 8003976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800397a:	bf00      	nop
 800397c:	0800398d 	.word	0x0800398d
 8003980:	08003999 	.word	0x08003999
 8003984:	0800399f 	.word	0x0800399f
 8003988:	08003993 	.word	0x08003993
 800398c:	2300      	movs	r3, #0
 800398e:	77fb      	strb	r3, [r7, #31]
 8003990:	e01d      	b.n	80039ce <UART_SetConfig+0xe2>
 8003992:	2302      	movs	r3, #2
 8003994:	77fb      	strb	r3, [r7, #31]
 8003996:	e01a      	b.n	80039ce <UART_SetConfig+0xe2>
 8003998:	2304      	movs	r3, #4
 800399a:	77fb      	strb	r3, [r7, #31]
 800399c:	e017      	b.n	80039ce <UART_SetConfig+0xe2>
 800399e:	2308      	movs	r3, #8
 80039a0:	77fb      	strb	r3, [r7, #31]
 80039a2:	e014      	b.n	80039ce <UART_SetConfig+0xe2>
 80039a4:	2310      	movs	r3, #16
 80039a6:	77fb      	strb	r3, [r7, #31]
 80039a8:	e011      	b.n	80039ce <UART_SetConfig+0xe2>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a67      	ldr	r2, [pc, #412]	; (8003b4c <UART_SetConfig+0x260>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d102      	bne.n	80039ba <UART_SetConfig+0xce>
 80039b4:	2300      	movs	r3, #0
 80039b6:	77fb      	strb	r3, [r7, #31]
 80039b8:	e009      	b.n	80039ce <UART_SetConfig+0xe2>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a64      	ldr	r2, [pc, #400]	; (8003b50 <UART_SetConfig+0x264>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d102      	bne.n	80039ca <UART_SetConfig+0xde>
 80039c4:	2300      	movs	r3, #0
 80039c6:	77fb      	strb	r3, [r7, #31]
 80039c8:	e001      	b.n	80039ce <UART_SetConfig+0xe2>
 80039ca:	2310      	movs	r3, #16
 80039cc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	69db      	ldr	r3, [r3, #28]
 80039d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039d6:	d15b      	bne.n	8003a90 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 80039d8:	7ffb      	ldrb	r3, [r7, #31]
 80039da:	2b08      	cmp	r3, #8
 80039dc:	d827      	bhi.n	8003a2e <UART_SetConfig+0x142>
 80039de:	a201      	add	r2, pc, #4	; (adr r2, 80039e4 <UART_SetConfig+0xf8>)
 80039e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e4:	08003a09 	.word	0x08003a09
 80039e8:	08003a11 	.word	0x08003a11
 80039ec:	08003a19 	.word	0x08003a19
 80039f0:	08003a2f 	.word	0x08003a2f
 80039f4:	08003a1f 	.word	0x08003a1f
 80039f8:	08003a2f 	.word	0x08003a2f
 80039fc:	08003a2f 	.word	0x08003a2f
 8003a00:	08003a2f 	.word	0x08003a2f
 8003a04:	08003a27 	.word	0x08003a27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a08:	f7ff fd14 	bl	8003434 <HAL_RCC_GetPCLK1Freq>
 8003a0c:	61b8      	str	r0, [r7, #24]
        break;
 8003a0e:	e013      	b.n	8003a38 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a10:	f7ff fd32 	bl	8003478 <HAL_RCC_GetPCLK2Freq>
 8003a14:	61b8      	str	r0, [r7, #24]
        break;
 8003a16:	e00f      	b.n	8003a38 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a18:	4b4e      	ldr	r3, [pc, #312]	; (8003b54 <UART_SetConfig+0x268>)
 8003a1a:	61bb      	str	r3, [r7, #24]
        break;
 8003a1c:	e00c      	b.n	8003a38 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a1e:	f7ff fc93 	bl	8003348 <HAL_RCC_GetSysClockFreq>
 8003a22:	61b8      	str	r0, [r7, #24]
        break;
 8003a24:	e008      	b.n	8003a38 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a2a:	61bb      	str	r3, [r7, #24]
        break;
 8003a2c:	e004      	b.n	8003a38 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	77bb      	strb	r3, [r7, #30]
        break;
 8003a36:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d074      	beq.n	8003b28 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	005a      	lsls	r2, r3, #1
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	085b      	lsrs	r3, r3, #1
 8003a48:	441a      	add	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	2b0f      	cmp	r3, #15
 8003a5a:	d916      	bls.n	8003a8a <UART_SetConfig+0x19e>
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a62:	d212      	bcs.n	8003a8a <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	f023 030f 	bic.w	r3, r3, #15
 8003a6c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	085b      	lsrs	r3, r3, #1
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	f003 0307 	and.w	r3, r3, #7
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	89fb      	ldrh	r3, [r7, #14]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	89fa      	ldrh	r2, [r7, #14]
 8003a86:	60da      	str	r2, [r3, #12]
 8003a88:	e04e      	b.n	8003b28 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	77bb      	strb	r3, [r7, #30]
 8003a8e:	e04b      	b.n	8003b28 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a90:	7ffb      	ldrb	r3, [r7, #31]
 8003a92:	2b08      	cmp	r3, #8
 8003a94:	d827      	bhi.n	8003ae6 <UART_SetConfig+0x1fa>
 8003a96:	a201      	add	r2, pc, #4	; (adr r2, 8003a9c <UART_SetConfig+0x1b0>)
 8003a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a9c:	08003ac1 	.word	0x08003ac1
 8003aa0:	08003ac9 	.word	0x08003ac9
 8003aa4:	08003ad1 	.word	0x08003ad1
 8003aa8:	08003ae7 	.word	0x08003ae7
 8003aac:	08003ad7 	.word	0x08003ad7
 8003ab0:	08003ae7 	.word	0x08003ae7
 8003ab4:	08003ae7 	.word	0x08003ae7
 8003ab8:	08003ae7 	.word	0x08003ae7
 8003abc:	08003adf 	.word	0x08003adf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ac0:	f7ff fcb8 	bl	8003434 <HAL_RCC_GetPCLK1Freq>
 8003ac4:	61b8      	str	r0, [r7, #24]
        break;
 8003ac6:	e013      	b.n	8003af0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ac8:	f7ff fcd6 	bl	8003478 <HAL_RCC_GetPCLK2Freq>
 8003acc:	61b8      	str	r0, [r7, #24]
        break;
 8003ace:	e00f      	b.n	8003af0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ad0:	4b20      	ldr	r3, [pc, #128]	; (8003b54 <UART_SetConfig+0x268>)
 8003ad2:	61bb      	str	r3, [r7, #24]
        break;
 8003ad4:	e00c      	b.n	8003af0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ad6:	f7ff fc37 	bl	8003348 <HAL_RCC_GetSysClockFreq>
 8003ada:	61b8      	str	r0, [r7, #24]
        break;
 8003adc:	e008      	b.n	8003af0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ade:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ae2:	61bb      	str	r3, [r7, #24]
        break;
 8003ae4:	e004      	b.n	8003af0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	77bb      	strb	r3, [r7, #30]
        break;
 8003aee:	bf00      	nop
    }

    if (pclk != 0U)
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d018      	beq.n	8003b28 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	085a      	lsrs	r2, r3, #1
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	441a      	add	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	2b0f      	cmp	r3, #15
 8003b10:	d908      	bls.n	8003b24 <UART_SetConfig+0x238>
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b18:	d204      	bcs.n	8003b24 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	60da      	str	r2, [r3, #12]
 8003b22:	e001      	b.n	8003b28 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003b34:	7fbb      	ldrb	r3, [r7, #30]
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3720      	adds	r7, #32
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	efff69f3 	.word	0xefff69f3
 8003b44:	40013800 	.word	0x40013800
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	40004400 	.word	0x40004400
 8003b50:	40004800 	.word	0x40004800
 8003b54:	007a1200 	.word	0x007a1200

08003b58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00a      	beq.n	8003b82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00a      	beq.n	8003ba4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba8:	f003 0304 	and.w	r3, r3, #4
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00a      	beq.n	8003bc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	f003 0308 	and.w	r3, r3, #8
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00a      	beq.n	8003be8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	f003 0310 	and.w	r3, r3, #16
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00a      	beq.n	8003c0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0e:	f003 0320 	and.w	r3, r3, #32
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00a      	beq.n	8003c2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d01a      	beq.n	8003c6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c56:	d10a      	bne.n	8003c6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00a      	beq.n	8003c90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	605a      	str	r2, [r3, #4]
  }
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af02      	add	r7, sp, #8
 8003ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003cac:	f7fc ff38 	bl	8000b20 <HAL_GetTick>
 8003cb0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0308 	and.w	r3, r3, #8
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	d10e      	bne.n	8003cde <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cc4:	9300      	str	r3, [sp, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 f82d 	bl	8003d2e <UART_WaitOnFlagUntilTimeout>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e023      	b.n	8003d26 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0304 	and.w	r3, r3, #4
 8003ce8:	2b04      	cmp	r3, #4
 8003cea:	d10e      	bne.n	8003d0a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cf0:	9300      	str	r3, [sp, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f817 	bl	8003d2e <UART_WaitOnFlagUntilTimeout>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e00d      	b.n	8003d26 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2220      	movs	r2, #32
 8003d0e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2220      	movs	r2, #32
 8003d14:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b09c      	sub	sp, #112	; 0x70
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	60f8      	str	r0, [r7, #12]
 8003d36:	60b9      	str	r1, [r7, #8]
 8003d38:	603b      	str	r3, [r7, #0]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d3e:	e0a5      	b.n	8003e8c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d46:	f000 80a1 	beq.w	8003e8c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d4a:	f7fc fee9 	bl	8000b20 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d302      	bcc.n	8003d60 <UART_WaitOnFlagUntilTimeout+0x32>
 8003d5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d13e      	bne.n	8003dde <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d68:	e853 3f00 	ldrex	r3, [r3]
 8003d6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003d6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d74:	667b      	str	r3, [r7, #100]	; 0x64
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d80:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003d84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d86:	e841 2300 	strex	r3, r2, [r1]
 8003d8a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003d8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1e6      	bne.n	8003d60 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	3308      	adds	r3, #8
 8003d98:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d9c:	e853 3f00 	ldrex	r3, [r3]
 8003da0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da4:	f023 0301 	bic.w	r3, r3, #1
 8003da8:	663b      	str	r3, [r7, #96]	; 0x60
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	3308      	adds	r3, #8
 8003db0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003db2:	64ba      	str	r2, [r7, #72]	; 0x48
 8003db4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003db8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dba:	e841 2300 	strex	r3, r2, [r1]
 8003dbe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003dc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1e5      	bne.n	8003d92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e067      	b.n	8003eae <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d04f      	beq.n	8003e8c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003df6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dfa:	d147      	bne.n	8003e8c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e04:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0e:	e853 3f00 	ldrex	r3, [r3]
 8003e12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e16:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	461a      	mov	r2, r3
 8003e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e24:	637b      	str	r3, [r7, #52]	; 0x34
 8003e26:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e2c:	e841 2300 	strex	r3, r2, [r1]
 8003e30:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1e6      	bne.n	8003e06 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	3308      	adds	r3, #8
 8003e3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	e853 3f00 	ldrex	r3, [r3]
 8003e46:	613b      	str	r3, [r7, #16]
   return(result);
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	f023 0301 	bic.w	r3, r3, #1
 8003e4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	3308      	adds	r3, #8
 8003e56:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003e58:	623a      	str	r2, [r7, #32]
 8003e5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5c:	69f9      	ldr	r1, [r7, #28]
 8003e5e:	6a3a      	ldr	r2, [r7, #32]
 8003e60:	e841 2300 	strex	r3, r2, [r1]
 8003e64:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1e5      	bne.n	8003e38 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2220      	movs	r2, #32
 8003e70:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2220      	movs	r2, #32
 8003e76:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e010      	b.n	8003eae <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	69da      	ldr	r2, [r3, #28]
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	4013      	ands	r3, r2
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	bf0c      	ite	eq
 8003e9c:	2301      	moveq	r3, #1
 8003e9e:	2300      	movne	r3, #0
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	79fb      	ldrb	r3, [r7, #7]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	f43f af4a 	beq.w	8003d40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3770      	adds	r7, #112	; 0x70
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
	...

08003eb8 <__errno>:
 8003eb8:	4b01      	ldr	r3, [pc, #4]	; (8003ec0 <__errno+0x8>)
 8003eba:	6818      	ldr	r0, [r3, #0]
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	2000000c 	.word	0x2000000c

08003ec4 <__libc_init_array>:
 8003ec4:	b570      	push	{r4, r5, r6, lr}
 8003ec6:	4d0d      	ldr	r5, [pc, #52]	; (8003efc <__libc_init_array+0x38>)
 8003ec8:	4c0d      	ldr	r4, [pc, #52]	; (8003f00 <__libc_init_array+0x3c>)
 8003eca:	1b64      	subs	r4, r4, r5
 8003ecc:	10a4      	asrs	r4, r4, #2
 8003ece:	2600      	movs	r6, #0
 8003ed0:	42a6      	cmp	r6, r4
 8003ed2:	d109      	bne.n	8003ee8 <__libc_init_array+0x24>
 8003ed4:	4d0b      	ldr	r5, [pc, #44]	; (8003f04 <__libc_init_array+0x40>)
 8003ed6:	4c0c      	ldr	r4, [pc, #48]	; (8003f08 <__libc_init_array+0x44>)
 8003ed8:	f000 ffd4 	bl	8004e84 <_init>
 8003edc:	1b64      	subs	r4, r4, r5
 8003ede:	10a4      	asrs	r4, r4, #2
 8003ee0:	2600      	movs	r6, #0
 8003ee2:	42a6      	cmp	r6, r4
 8003ee4:	d105      	bne.n	8003ef2 <__libc_init_array+0x2e>
 8003ee6:	bd70      	pop	{r4, r5, r6, pc}
 8003ee8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eec:	4798      	blx	r3
 8003eee:	3601      	adds	r6, #1
 8003ef0:	e7ee      	b.n	8003ed0 <__libc_init_array+0xc>
 8003ef2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ef6:	4798      	blx	r3
 8003ef8:	3601      	adds	r6, #1
 8003efa:	e7f2      	b.n	8003ee2 <__libc_init_array+0x1e>
 8003efc:	08004fa4 	.word	0x08004fa4
 8003f00:	08004fa4 	.word	0x08004fa4
 8003f04:	08004fa4 	.word	0x08004fa4
 8003f08:	08004fa8 	.word	0x08004fa8

08003f0c <memset>:
 8003f0c:	4402      	add	r2, r0
 8003f0e:	4603      	mov	r3, r0
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d100      	bne.n	8003f16 <memset+0xa>
 8003f14:	4770      	bx	lr
 8003f16:	f803 1b01 	strb.w	r1, [r3], #1
 8003f1a:	e7f9      	b.n	8003f10 <memset+0x4>

08003f1c <iprintf>:
 8003f1c:	b40f      	push	{r0, r1, r2, r3}
 8003f1e:	4b0a      	ldr	r3, [pc, #40]	; (8003f48 <iprintf+0x2c>)
 8003f20:	b513      	push	{r0, r1, r4, lr}
 8003f22:	681c      	ldr	r4, [r3, #0]
 8003f24:	b124      	cbz	r4, 8003f30 <iprintf+0x14>
 8003f26:	69a3      	ldr	r3, [r4, #24]
 8003f28:	b913      	cbnz	r3, 8003f30 <iprintf+0x14>
 8003f2a:	4620      	mov	r0, r4
 8003f2c:	f000 f87c 	bl	8004028 <__sinit>
 8003f30:	ab05      	add	r3, sp, #20
 8003f32:	9a04      	ldr	r2, [sp, #16]
 8003f34:	68a1      	ldr	r1, [r4, #8]
 8003f36:	9301      	str	r3, [sp, #4]
 8003f38:	4620      	mov	r0, r4
 8003f3a:	f000 f999 	bl	8004270 <_vfiprintf_r>
 8003f3e:	b002      	add	sp, #8
 8003f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f44:	b004      	add	sp, #16
 8003f46:	4770      	bx	lr
 8003f48:	2000000c 	.word	0x2000000c

08003f4c <putchar>:
 8003f4c:	4b09      	ldr	r3, [pc, #36]	; (8003f74 <putchar+0x28>)
 8003f4e:	b513      	push	{r0, r1, r4, lr}
 8003f50:	681c      	ldr	r4, [r3, #0]
 8003f52:	4601      	mov	r1, r0
 8003f54:	b134      	cbz	r4, 8003f64 <putchar+0x18>
 8003f56:	69a3      	ldr	r3, [r4, #24]
 8003f58:	b923      	cbnz	r3, 8003f64 <putchar+0x18>
 8003f5a:	9001      	str	r0, [sp, #4]
 8003f5c:	4620      	mov	r0, r4
 8003f5e:	f000 f863 	bl	8004028 <__sinit>
 8003f62:	9901      	ldr	r1, [sp, #4]
 8003f64:	68a2      	ldr	r2, [r4, #8]
 8003f66:	4620      	mov	r0, r4
 8003f68:	b002      	add	sp, #8
 8003f6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f6e:	f000 bc43 	b.w	80047f8 <_putc_r>
 8003f72:	bf00      	nop
 8003f74:	2000000c 	.word	0x2000000c

08003f78 <std>:
 8003f78:	2300      	movs	r3, #0
 8003f7a:	b510      	push	{r4, lr}
 8003f7c:	4604      	mov	r4, r0
 8003f7e:	e9c0 3300 	strd	r3, r3, [r0]
 8003f82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f86:	6083      	str	r3, [r0, #8]
 8003f88:	8181      	strh	r1, [r0, #12]
 8003f8a:	6643      	str	r3, [r0, #100]	; 0x64
 8003f8c:	81c2      	strh	r2, [r0, #14]
 8003f8e:	6183      	str	r3, [r0, #24]
 8003f90:	4619      	mov	r1, r3
 8003f92:	2208      	movs	r2, #8
 8003f94:	305c      	adds	r0, #92	; 0x5c
 8003f96:	f7ff ffb9 	bl	8003f0c <memset>
 8003f9a:	4b05      	ldr	r3, [pc, #20]	; (8003fb0 <std+0x38>)
 8003f9c:	6263      	str	r3, [r4, #36]	; 0x24
 8003f9e:	4b05      	ldr	r3, [pc, #20]	; (8003fb4 <std+0x3c>)
 8003fa0:	62a3      	str	r3, [r4, #40]	; 0x28
 8003fa2:	4b05      	ldr	r3, [pc, #20]	; (8003fb8 <std+0x40>)
 8003fa4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003fa6:	4b05      	ldr	r3, [pc, #20]	; (8003fbc <std+0x44>)
 8003fa8:	6224      	str	r4, [r4, #32]
 8003faa:	6323      	str	r3, [r4, #48]	; 0x30
 8003fac:	bd10      	pop	{r4, pc}
 8003fae:	bf00      	nop
 8003fb0:	080048a9 	.word	0x080048a9
 8003fb4:	080048cb 	.word	0x080048cb
 8003fb8:	08004903 	.word	0x08004903
 8003fbc:	08004927 	.word	0x08004927

08003fc0 <_cleanup_r>:
 8003fc0:	4901      	ldr	r1, [pc, #4]	; (8003fc8 <_cleanup_r+0x8>)
 8003fc2:	f000 b8af 	b.w	8004124 <_fwalk_reent>
 8003fc6:	bf00      	nop
 8003fc8:	08004c01 	.word	0x08004c01

08003fcc <__sfmoreglue>:
 8003fcc:	b570      	push	{r4, r5, r6, lr}
 8003fce:	1e4a      	subs	r2, r1, #1
 8003fd0:	2568      	movs	r5, #104	; 0x68
 8003fd2:	4355      	muls	r5, r2
 8003fd4:	460e      	mov	r6, r1
 8003fd6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003fda:	f000 f8c5 	bl	8004168 <_malloc_r>
 8003fde:	4604      	mov	r4, r0
 8003fe0:	b140      	cbz	r0, 8003ff4 <__sfmoreglue+0x28>
 8003fe2:	2100      	movs	r1, #0
 8003fe4:	e9c0 1600 	strd	r1, r6, [r0]
 8003fe8:	300c      	adds	r0, #12
 8003fea:	60a0      	str	r0, [r4, #8]
 8003fec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003ff0:	f7ff ff8c 	bl	8003f0c <memset>
 8003ff4:	4620      	mov	r0, r4
 8003ff6:	bd70      	pop	{r4, r5, r6, pc}

08003ff8 <__sfp_lock_acquire>:
 8003ff8:	4801      	ldr	r0, [pc, #4]	; (8004000 <__sfp_lock_acquire+0x8>)
 8003ffa:	f000 b8b3 	b.w	8004164 <__retarget_lock_acquire_recursive>
 8003ffe:	bf00      	nop
 8004000:	200001c8 	.word	0x200001c8

08004004 <__sfp_lock_release>:
 8004004:	4801      	ldr	r0, [pc, #4]	; (800400c <__sfp_lock_release+0x8>)
 8004006:	f000 b8ae 	b.w	8004166 <__retarget_lock_release_recursive>
 800400a:	bf00      	nop
 800400c:	200001c8 	.word	0x200001c8

08004010 <__sinit_lock_acquire>:
 8004010:	4801      	ldr	r0, [pc, #4]	; (8004018 <__sinit_lock_acquire+0x8>)
 8004012:	f000 b8a7 	b.w	8004164 <__retarget_lock_acquire_recursive>
 8004016:	bf00      	nop
 8004018:	200001c3 	.word	0x200001c3

0800401c <__sinit_lock_release>:
 800401c:	4801      	ldr	r0, [pc, #4]	; (8004024 <__sinit_lock_release+0x8>)
 800401e:	f000 b8a2 	b.w	8004166 <__retarget_lock_release_recursive>
 8004022:	bf00      	nop
 8004024:	200001c3 	.word	0x200001c3

08004028 <__sinit>:
 8004028:	b510      	push	{r4, lr}
 800402a:	4604      	mov	r4, r0
 800402c:	f7ff fff0 	bl	8004010 <__sinit_lock_acquire>
 8004030:	69a3      	ldr	r3, [r4, #24]
 8004032:	b11b      	cbz	r3, 800403c <__sinit+0x14>
 8004034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004038:	f7ff bff0 	b.w	800401c <__sinit_lock_release>
 800403c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004040:	6523      	str	r3, [r4, #80]	; 0x50
 8004042:	4b13      	ldr	r3, [pc, #76]	; (8004090 <__sinit+0x68>)
 8004044:	4a13      	ldr	r2, [pc, #76]	; (8004094 <__sinit+0x6c>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	62a2      	str	r2, [r4, #40]	; 0x28
 800404a:	42a3      	cmp	r3, r4
 800404c:	bf04      	itt	eq
 800404e:	2301      	moveq	r3, #1
 8004050:	61a3      	streq	r3, [r4, #24]
 8004052:	4620      	mov	r0, r4
 8004054:	f000 f820 	bl	8004098 <__sfp>
 8004058:	6060      	str	r0, [r4, #4]
 800405a:	4620      	mov	r0, r4
 800405c:	f000 f81c 	bl	8004098 <__sfp>
 8004060:	60a0      	str	r0, [r4, #8]
 8004062:	4620      	mov	r0, r4
 8004064:	f000 f818 	bl	8004098 <__sfp>
 8004068:	2200      	movs	r2, #0
 800406a:	60e0      	str	r0, [r4, #12]
 800406c:	2104      	movs	r1, #4
 800406e:	6860      	ldr	r0, [r4, #4]
 8004070:	f7ff ff82 	bl	8003f78 <std>
 8004074:	68a0      	ldr	r0, [r4, #8]
 8004076:	2201      	movs	r2, #1
 8004078:	2109      	movs	r1, #9
 800407a:	f7ff ff7d 	bl	8003f78 <std>
 800407e:	68e0      	ldr	r0, [r4, #12]
 8004080:	2202      	movs	r2, #2
 8004082:	2112      	movs	r1, #18
 8004084:	f7ff ff78 	bl	8003f78 <std>
 8004088:	2301      	movs	r3, #1
 800408a:	61a3      	str	r3, [r4, #24]
 800408c:	e7d2      	b.n	8004034 <__sinit+0xc>
 800408e:	bf00      	nop
 8004090:	08004f0c 	.word	0x08004f0c
 8004094:	08003fc1 	.word	0x08003fc1

08004098 <__sfp>:
 8004098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800409a:	4607      	mov	r7, r0
 800409c:	f7ff ffac 	bl	8003ff8 <__sfp_lock_acquire>
 80040a0:	4b1e      	ldr	r3, [pc, #120]	; (800411c <__sfp+0x84>)
 80040a2:	681e      	ldr	r6, [r3, #0]
 80040a4:	69b3      	ldr	r3, [r6, #24]
 80040a6:	b913      	cbnz	r3, 80040ae <__sfp+0x16>
 80040a8:	4630      	mov	r0, r6
 80040aa:	f7ff ffbd 	bl	8004028 <__sinit>
 80040ae:	3648      	adds	r6, #72	; 0x48
 80040b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80040b4:	3b01      	subs	r3, #1
 80040b6:	d503      	bpl.n	80040c0 <__sfp+0x28>
 80040b8:	6833      	ldr	r3, [r6, #0]
 80040ba:	b30b      	cbz	r3, 8004100 <__sfp+0x68>
 80040bc:	6836      	ldr	r6, [r6, #0]
 80040be:	e7f7      	b.n	80040b0 <__sfp+0x18>
 80040c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80040c4:	b9d5      	cbnz	r5, 80040fc <__sfp+0x64>
 80040c6:	4b16      	ldr	r3, [pc, #88]	; (8004120 <__sfp+0x88>)
 80040c8:	60e3      	str	r3, [r4, #12]
 80040ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80040ce:	6665      	str	r5, [r4, #100]	; 0x64
 80040d0:	f000 f847 	bl	8004162 <__retarget_lock_init_recursive>
 80040d4:	f7ff ff96 	bl	8004004 <__sfp_lock_release>
 80040d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80040dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80040e0:	6025      	str	r5, [r4, #0]
 80040e2:	61a5      	str	r5, [r4, #24]
 80040e4:	2208      	movs	r2, #8
 80040e6:	4629      	mov	r1, r5
 80040e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80040ec:	f7ff ff0e 	bl	8003f0c <memset>
 80040f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80040f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80040f8:	4620      	mov	r0, r4
 80040fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040fc:	3468      	adds	r4, #104	; 0x68
 80040fe:	e7d9      	b.n	80040b4 <__sfp+0x1c>
 8004100:	2104      	movs	r1, #4
 8004102:	4638      	mov	r0, r7
 8004104:	f7ff ff62 	bl	8003fcc <__sfmoreglue>
 8004108:	4604      	mov	r4, r0
 800410a:	6030      	str	r0, [r6, #0]
 800410c:	2800      	cmp	r0, #0
 800410e:	d1d5      	bne.n	80040bc <__sfp+0x24>
 8004110:	f7ff ff78 	bl	8004004 <__sfp_lock_release>
 8004114:	230c      	movs	r3, #12
 8004116:	603b      	str	r3, [r7, #0]
 8004118:	e7ee      	b.n	80040f8 <__sfp+0x60>
 800411a:	bf00      	nop
 800411c:	08004f0c 	.word	0x08004f0c
 8004120:	ffff0001 	.word	0xffff0001

08004124 <_fwalk_reent>:
 8004124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004128:	4606      	mov	r6, r0
 800412a:	4688      	mov	r8, r1
 800412c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004130:	2700      	movs	r7, #0
 8004132:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004136:	f1b9 0901 	subs.w	r9, r9, #1
 800413a:	d505      	bpl.n	8004148 <_fwalk_reent+0x24>
 800413c:	6824      	ldr	r4, [r4, #0]
 800413e:	2c00      	cmp	r4, #0
 8004140:	d1f7      	bne.n	8004132 <_fwalk_reent+0xe>
 8004142:	4638      	mov	r0, r7
 8004144:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004148:	89ab      	ldrh	r3, [r5, #12]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d907      	bls.n	800415e <_fwalk_reent+0x3a>
 800414e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004152:	3301      	adds	r3, #1
 8004154:	d003      	beq.n	800415e <_fwalk_reent+0x3a>
 8004156:	4629      	mov	r1, r5
 8004158:	4630      	mov	r0, r6
 800415a:	47c0      	blx	r8
 800415c:	4307      	orrs	r7, r0
 800415e:	3568      	adds	r5, #104	; 0x68
 8004160:	e7e9      	b.n	8004136 <_fwalk_reent+0x12>

08004162 <__retarget_lock_init_recursive>:
 8004162:	4770      	bx	lr

08004164 <__retarget_lock_acquire_recursive>:
 8004164:	4770      	bx	lr

08004166 <__retarget_lock_release_recursive>:
 8004166:	4770      	bx	lr

08004168 <_malloc_r>:
 8004168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800416a:	1ccd      	adds	r5, r1, #3
 800416c:	f025 0503 	bic.w	r5, r5, #3
 8004170:	3508      	adds	r5, #8
 8004172:	2d0c      	cmp	r5, #12
 8004174:	bf38      	it	cc
 8004176:	250c      	movcc	r5, #12
 8004178:	2d00      	cmp	r5, #0
 800417a:	4606      	mov	r6, r0
 800417c:	db01      	blt.n	8004182 <_malloc_r+0x1a>
 800417e:	42a9      	cmp	r1, r5
 8004180:	d903      	bls.n	800418a <_malloc_r+0x22>
 8004182:	230c      	movs	r3, #12
 8004184:	6033      	str	r3, [r6, #0]
 8004186:	2000      	movs	r0, #0
 8004188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800418a:	f000 fdeb 	bl	8004d64 <__malloc_lock>
 800418e:	4921      	ldr	r1, [pc, #132]	; (8004214 <_malloc_r+0xac>)
 8004190:	680a      	ldr	r2, [r1, #0]
 8004192:	4614      	mov	r4, r2
 8004194:	b99c      	cbnz	r4, 80041be <_malloc_r+0x56>
 8004196:	4f20      	ldr	r7, [pc, #128]	; (8004218 <_malloc_r+0xb0>)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	b923      	cbnz	r3, 80041a6 <_malloc_r+0x3e>
 800419c:	4621      	mov	r1, r4
 800419e:	4630      	mov	r0, r6
 80041a0:	f000 fb72 	bl	8004888 <_sbrk_r>
 80041a4:	6038      	str	r0, [r7, #0]
 80041a6:	4629      	mov	r1, r5
 80041a8:	4630      	mov	r0, r6
 80041aa:	f000 fb6d 	bl	8004888 <_sbrk_r>
 80041ae:	1c43      	adds	r3, r0, #1
 80041b0:	d123      	bne.n	80041fa <_malloc_r+0x92>
 80041b2:	230c      	movs	r3, #12
 80041b4:	6033      	str	r3, [r6, #0]
 80041b6:	4630      	mov	r0, r6
 80041b8:	f000 fdda 	bl	8004d70 <__malloc_unlock>
 80041bc:	e7e3      	b.n	8004186 <_malloc_r+0x1e>
 80041be:	6823      	ldr	r3, [r4, #0]
 80041c0:	1b5b      	subs	r3, r3, r5
 80041c2:	d417      	bmi.n	80041f4 <_malloc_r+0x8c>
 80041c4:	2b0b      	cmp	r3, #11
 80041c6:	d903      	bls.n	80041d0 <_malloc_r+0x68>
 80041c8:	6023      	str	r3, [r4, #0]
 80041ca:	441c      	add	r4, r3
 80041cc:	6025      	str	r5, [r4, #0]
 80041ce:	e004      	b.n	80041da <_malloc_r+0x72>
 80041d0:	6863      	ldr	r3, [r4, #4]
 80041d2:	42a2      	cmp	r2, r4
 80041d4:	bf0c      	ite	eq
 80041d6:	600b      	streq	r3, [r1, #0]
 80041d8:	6053      	strne	r3, [r2, #4]
 80041da:	4630      	mov	r0, r6
 80041dc:	f000 fdc8 	bl	8004d70 <__malloc_unlock>
 80041e0:	f104 000b 	add.w	r0, r4, #11
 80041e4:	1d23      	adds	r3, r4, #4
 80041e6:	f020 0007 	bic.w	r0, r0, #7
 80041ea:	1ac2      	subs	r2, r0, r3
 80041ec:	d0cc      	beq.n	8004188 <_malloc_r+0x20>
 80041ee:	1a1b      	subs	r3, r3, r0
 80041f0:	50a3      	str	r3, [r4, r2]
 80041f2:	e7c9      	b.n	8004188 <_malloc_r+0x20>
 80041f4:	4622      	mov	r2, r4
 80041f6:	6864      	ldr	r4, [r4, #4]
 80041f8:	e7cc      	b.n	8004194 <_malloc_r+0x2c>
 80041fa:	1cc4      	adds	r4, r0, #3
 80041fc:	f024 0403 	bic.w	r4, r4, #3
 8004200:	42a0      	cmp	r0, r4
 8004202:	d0e3      	beq.n	80041cc <_malloc_r+0x64>
 8004204:	1a21      	subs	r1, r4, r0
 8004206:	4630      	mov	r0, r6
 8004208:	f000 fb3e 	bl	8004888 <_sbrk_r>
 800420c:	3001      	adds	r0, #1
 800420e:	d1dd      	bne.n	80041cc <_malloc_r+0x64>
 8004210:	e7cf      	b.n	80041b2 <_malloc_r+0x4a>
 8004212:	bf00      	nop
 8004214:	20000094 	.word	0x20000094
 8004218:	20000098 	.word	0x20000098

0800421c <__sfputc_r>:
 800421c:	6893      	ldr	r3, [r2, #8]
 800421e:	3b01      	subs	r3, #1
 8004220:	2b00      	cmp	r3, #0
 8004222:	b410      	push	{r4}
 8004224:	6093      	str	r3, [r2, #8]
 8004226:	da08      	bge.n	800423a <__sfputc_r+0x1e>
 8004228:	6994      	ldr	r4, [r2, #24]
 800422a:	42a3      	cmp	r3, r4
 800422c:	db01      	blt.n	8004232 <__sfputc_r+0x16>
 800422e:	290a      	cmp	r1, #10
 8004230:	d103      	bne.n	800423a <__sfputc_r+0x1e>
 8004232:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004236:	f000 bb7b 	b.w	8004930 <__swbuf_r>
 800423a:	6813      	ldr	r3, [r2, #0]
 800423c:	1c58      	adds	r0, r3, #1
 800423e:	6010      	str	r0, [r2, #0]
 8004240:	7019      	strb	r1, [r3, #0]
 8004242:	4608      	mov	r0, r1
 8004244:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004248:	4770      	bx	lr

0800424a <__sfputs_r>:
 800424a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800424c:	4606      	mov	r6, r0
 800424e:	460f      	mov	r7, r1
 8004250:	4614      	mov	r4, r2
 8004252:	18d5      	adds	r5, r2, r3
 8004254:	42ac      	cmp	r4, r5
 8004256:	d101      	bne.n	800425c <__sfputs_r+0x12>
 8004258:	2000      	movs	r0, #0
 800425a:	e007      	b.n	800426c <__sfputs_r+0x22>
 800425c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004260:	463a      	mov	r2, r7
 8004262:	4630      	mov	r0, r6
 8004264:	f7ff ffda 	bl	800421c <__sfputc_r>
 8004268:	1c43      	adds	r3, r0, #1
 800426a:	d1f3      	bne.n	8004254 <__sfputs_r+0xa>
 800426c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004270 <_vfiprintf_r>:
 8004270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004274:	460d      	mov	r5, r1
 8004276:	b09d      	sub	sp, #116	; 0x74
 8004278:	4614      	mov	r4, r2
 800427a:	4698      	mov	r8, r3
 800427c:	4606      	mov	r6, r0
 800427e:	b118      	cbz	r0, 8004288 <_vfiprintf_r+0x18>
 8004280:	6983      	ldr	r3, [r0, #24]
 8004282:	b90b      	cbnz	r3, 8004288 <_vfiprintf_r+0x18>
 8004284:	f7ff fed0 	bl	8004028 <__sinit>
 8004288:	4b89      	ldr	r3, [pc, #548]	; (80044b0 <_vfiprintf_r+0x240>)
 800428a:	429d      	cmp	r5, r3
 800428c:	d11b      	bne.n	80042c6 <_vfiprintf_r+0x56>
 800428e:	6875      	ldr	r5, [r6, #4]
 8004290:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004292:	07d9      	lsls	r1, r3, #31
 8004294:	d405      	bmi.n	80042a2 <_vfiprintf_r+0x32>
 8004296:	89ab      	ldrh	r3, [r5, #12]
 8004298:	059a      	lsls	r2, r3, #22
 800429a:	d402      	bmi.n	80042a2 <_vfiprintf_r+0x32>
 800429c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800429e:	f7ff ff61 	bl	8004164 <__retarget_lock_acquire_recursive>
 80042a2:	89ab      	ldrh	r3, [r5, #12]
 80042a4:	071b      	lsls	r3, r3, #28
 80042a6:	d501      	bpl.n	80042ac <_vfiprintf_r+0x3c>
 80042a8:	692b      	ldr	r3, [r5, #16]
 80042aa:	b9eb      	cbnz	r3, 80042e8 <_vfiprintf_r+0x78>
 80042ac:	4629      	mov	r1, r5
 80042ae:	4630      	mov	r0, r6
 80042b0:	f000 fba2 	bl	80049f8 <__swsetup_r>
 80042b4:	b1c0      	cbz	r0, 80042e8 <_vfiprintf_r+0x78>
 80042b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80042b8:	07dc      	lsls	r4, r3, #31
 80042ba:	d50e      	bpl.n	80042da <_vfiprintf_r+0x6a>
 80042bc:	f04f 30ff 	mov.w	r0, #4294967295
 80042c0:	b01d      	add	sp, #116	; 0x74
 80042c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042c6:	4b7b      	ldr	r3, [pc, #492]	; (80044b4 <_vfiprintf_r+0x244>)
 80042c8:	429d      	cmp	r5, r3
 80042ca:	d101      	bne.n	80042d0 <_vfiprintf_r+0x60>
 80042cc:	68b5      	ldr	r5, [r6, #8]
 80042ce:	e7df      	b.n	8004290 <_vfiprintf_r+0x20>
 80042d0:	4b79      	ldr	r3, [pc, #484]	; (80044b8 <_vfiprintf_r+0x248>)
 80042d2:	429d      	cmp	r5, r3
 80042d4:	bf08      	it	eq
 80042d6:	68f5      	ldreq	r5, [r6, #12]
 80042d8:	e7da      	b.n	8004290 <_vfiprintf_r+0x20>
 80042da:	89ab      	ldrh	r3, [r5, #12]
 80042dc:	0598      	lsls	r0, r3, #22
 80042de:	d4ed      	bmi.n	80042bc <_vfiprintf_r+0x4c>
 80042e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80042e2:	f7ff ff40 	bl	8004166 <__retarget_lock_release_recursive>
 80042e6:	e7e9      	b.n	80042bc <_vfiprintf_r+0x4c>
 80042e8:	2300      	movs	r3, #0
 80042ea:	9309      	str	r3, [sp, #36]	; 0x24
 80042ec:	2320      	movs	r3, #32
 80042ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80042f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80042f6:	2330      	movs	r3, #48	; 0x30
 80042f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80044bc <_vfiprintf_r+0x24c>
 80042fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004300:	f04f 0901 	mov.w	r9, #1
 8004304:	4623      	mov	r3, r4
 8004306:	469a      	mov	sl, r3
 8004308:	f813 2b01 	ldrb.w	r2, [r3], #1
 800430c:	b10a      	cbz	r2, 8004312 <_vfiprintf_r+0xa2>
 800430e:	2a25      	cmp	r2, #37	; 0x25
 8004310:	d1f9      	bne.n	8004306 <_vfiprintf_r+0x96>
 8004312:	ebba 0b04 	subs.w	fp, sl, r4
 8004316:	d00b      	beq.n	8004330 <_vfiprintf_r+0xc0>
 8004318:	465b      	mov	r3, fp
 800431a:	4622      	mov	r2, r4
 800431c:	4629      	mov	r1, r5
 800431e:	4630      	mov	r0, r6
 8004320:	f7ff ff93 	bl	800424a <__sfputs_r>
 8004324:	3001      	adds	r0, #1
 8004326:	f000 80aa 	beq.w	800447e <_vfiprintf_r+0x20e>
 800432a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800432c:	445a      	add	r2, fp
 800432e:	9209      	str	r2, [sp, #36]	; 0x24
 8004330:	f89a 3000 	ldrb.w	r3, [sl]
 8004334:	2b00      	cmp	r3, #0
 8004336:	f000 80a2 	beq.w	800447e <_vfiprintf_r+0x20e>
 800433a:	2300      	movs	r3, #0
 800433c:	f04f 32ff 	mov.w	r2, #4294967295
 8004340:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004344:	f10a 0a01 	add.w	sl, sl, #1
 8004348:	9304      	str	r3, [sp, #16]
 800434a:	9307      	str	r3, [sp, #28]
 800434c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004350:	931a      	str	r3, [sp, #104]	; 0x68
 8004352:	4654      	mov	r4, sl
 8004354:	2205      	movs	r2, #5
 8004356:	f814 1b01 	ldrb.w	r1, [r4], #1
 800435a:	4858      	ldr	r0, [pc, #352]	; (80044bc <_vfiprintf_r+0x24c>)
 800435c:	f7fb ff38 	bl	80001d0 <memchr>
 8004360:	9a04      	ldr	r2, [sp, #16]
 8004362:	b9d8      	cbnz	r0, 800439c <_vfiprintf_r+0x12c>
 8004364:	06d1      	lsls	r1, r2, #27
 8004366:	bf44      	itt	mi
 8004368:	2320      	movmi	r3, #32
 800436a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800436e:	0713      	lsls	r3, r2, #28
 8004370:	bf44      	itt	mi
 8004372:	232b      	movmi	r3, #43	; 0x2b
 8004374:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004378:	f89a 3000 	ldrb.w	r3, [sl]
 800437c:	2b2a      	cmp	r3, #42	; 0x2a
 800437e:	d015      	beq.n	80043ac <_vfiprintf_r+0x13c>
 8004380:	9a07      	ldr	r2, [sp, #28]
 8004382:	4654      	mov	r4, sl
 8004384:	2000      	movs	r0, #0
 8004386:	f04f 0c0a 	mov.w	ip, #10
 800438a:	4621      	mov	r1, r4
 800438c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004390:	3b30      	subs	r3, #48	; 0x30
 8004392:	2b09      	cmp	r3, #9
 8004394:	d94e      	bls.n	8004434 <_vfiprintf_r+0x1c4>
 8004396:	b1b0      	cbz	r0, 80043c6 <_vfiprintf_r+0x156>
 8004398:	9207      	str	r2, [sp, #28]
 800439a:	e014      	b.n	80043c6 <_vfiprintf_r+0x156>
 800439c:	eba0 0308 	sub.w	r3, r0, r8
 80043a0:	fa09 f303 	lsl.w	r3, r9, r3
 80043a4:	4313      	orrs	r3, r2
 80043a6:	9304      	str	r3, [sp, #16]
 80043a8:	46a2      	mov	sl, r4
 80043aa:	e7d2      	b.n	8004352 <_vfiprintf_r+0xe2>
 80043ac:	9b03      	ldr	r3, [sp, #12]
 80043ae:	1d19      	adds	r1, r3, #4
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	9103      	str	r1, [sp, #12]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	bfbb      	ittet	lt
 80043b8:	425b      	neglt	r3, r3
 80043ba:	f042 0202 	orrlt.w	r2, r2, #2
 80043be:	9307      	strge	r3, [sp, #28]
 80043c0:	9307      	strlt	r3, [sp, #28]
 80043c2:	bfb8      	it	lt
 80043c4:	9204      	strlt	r2, [sp, #16]
 80043c6:	7823      	ldrb	r3, [r4, #0]
 80043c8:	2b2e      	cmp	r3, #46	; 0x2e
 80043ca:	d10c      	bne.n	80043e6 <_vfiprintf_r+0x176>
 80043cc:	7863      	ldrb	r3, [r4, #1]
 80043ce:	2b2a      	cmp	r3, #42	; 0x2a
 80043d0:	d135      	bne.n	800443e <_vfiprintf_r+0x1ce>
 80043d2:	9b03      	ldr	r3, [sp, #12]
 80043d4:	1d1a      	adds	r2, r3, #4
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	9203      	str	r2, [sp, #12]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	bfb8      	it	lt
 80043de:	f04f 33ff 	movlt.w	r3, #4294967295
 80043e2:	3402      	adds	r4, #2
 80043e4:	9305      	str	r3, [sp, #20]
 80043e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80044cc <_vfiprintf_r+0x25c>
 80043ea:	7821      	ldrb	r1, [r4, #0]
 80043ec:	2203      	movs	r2, #3
 80043ee:	4650      	mov	r0, sl
 80043f0:	f7fb feee 	bl	80001d0 <memchr>
 80043f4:	b140      	cbz	r0, 8004408 <_vfiprintf_r+0x198>
 80043f6:	2340      	movs	r3, #64	; 0x40
 80043f8:	eba0 000a 	sub.w	r0, r0, sl
 80043fc:	fa03 f000 	lsl.w	r0, r3, r0
 8004400:	9b04      	ldr	r3, [sp, #16]
 8004402:	4303      	orrs	r3, r0
 8004404:	3401      	adds	r4, #1
 8004406:	9304      	str	r3, [sp, #16]
 8004408:	f814 1b01 	ldrb.w	r1, [r4], #1
 800440c:	482c      	ldr	r0, [pc, #176]	; (80044c0 <_vfiprintf_r+0x250>)
 800440e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004412:	2206      	movs	r2, #6
 8004414:	f7fb fedc 	bl	80001d0 <memchr>
 8004418:	2800      	cmp	r0, #0
 800441a:	d03f      	beq.n	800449c <_vfiprintf_r+0x22c>
 800441c:	4b29      	ldr	r3, [pc, #164]	; (80044c4 <_vfiprintf_r+0x254>)
 800441e:	bb1b      	cbnz	r3, 8004468 <_vfiprintf_r+0x1f8>
 8004420:	9b03      	ldr	r3, [sp, #12]
 8004422:	3307      	adds	r3, #7
 8004424:	f023 0307 	bic.w	r3, r3, #7
 8004428:	3308      	adds	r3, #8
 800442a:	9303      	str	r3, [sp, #12]
 800442c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800442e:	443b      	add	r3, r7
 8004430:	9309      	str	r3, [sp, #36]	; 0x24
 8004432:	e767      	b.n	8004304 <_vfiprintf_r+0x94>
 8004434:	fb0c 3202 	mla	r2, ip, r2, r3
 8004438:	460c      	mov	r4, r1
 800443a:	2001      	movs	r0, #1
 800443c:	e7a5      	b.n	800438a <_vfiprintf_r+0x11a>
 800443e:	2300      	movs	r3, #0
 8004440:	3401      	adds	r4, #1
 8004442:	9305      	str	r3, [sp, #20]
 8004444:	4619      	mov	r1, r3
 8004446:	f04f 0c0a 	mov.w	ip, #10
 800444a:	4620      	mov	r0, r4
 800444c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004450:	3a30      	subs	r2, #48	; 0x30
 8004452:	2a09      	cmp	r2, #9
 8004454:	d903      	bls.n	800445e <_vfiprintf_r+0x1ee>
 8004456:	2b00      	cmp	r3, #0
 8004458:	d0c5      	beq.n	80043e6 <_vfiprintf_r+0x176>
 800445a:	9105      	str	r1, [sp, #20]
 800445c:	e7c3      	b.n	80043e6 <_vfiprintf_r+0x176>
 800445e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004462:	4604      	mov	r4, r0
 8004464:	2301      	movs	r3, #1
 8004466:	e7f0      	b.n	800444a <_vfiprintf_r+0x1da>
 8004468:	ab03      	add	r3, sp, #12
 800446a:	9300      	str	r3, [sp, #0]
 800446c:	462a      	mov	r2, r5
 800446e:	4b16      	ldr	r3, [pc, #88]	; (80044c8 <_vfiprintf_r+0x258>)
 8004470:	a904      	add	r1, sp, #16
 8004472:	4630      	mov	r0, r6
 8004474:	f3af 8000 	nop.w
 8004478:	4607      	mov	r7, r0
 800447a:	1c78      	adds	r0, r7, #1
 800447c:	d1d6      	bne.n	800442c <_vfiprintf_r+0x1bc>
 800447e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004480:	07d9      	lsls	r1, r3, #31
 8004482:	d405      	bmi.n	8004490 <_vfiprintf_r+0x220>
 8004484:	89ab      	ldrh	r3, [r5, #12]
 8004486:	059a      	lsls	r2, r3, #22
 8004488:	d402      	bmi.n	8004490 <_vfiprintf_r+0x220>
 800448a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800448c:	f7ff fe6b 	bl	8004166 <__retarget_lock_release_recursive>
 8004490:	89ab      	ldrh	r3, [r5, #12]
 8004492:	065b      	lsls	r3, r3, #25
 8004494:	f53f af12 	bmi.w	80042bc <_vfiprintf_r+0x4c>
 8004498:	9809      	ldr	r0, [sp, #36]	; 0x24
 800449a:	e711      	b.n	80042c0 <_vfiprintf_r+0x50>
 800449c:	ab03      	add	r3, sp, #12
 800449e:	9300      	str	r3, [sp, #0]
 80044a0:	462a      	mov	r2, r5
 80044a2:	4b09      	ldr	r3, [pc, #36]	; (80044c8 <_vfiprintf_r+0x258>)
 80044a4:	a904      	add	r1, sp, #16
 80044a6:	4630      	mov	r0, r6
 80044a8:	f000 f880 	bl	80045ac <_printf_i>
 80044ac:	e7e4      	b.n	8004478 <_vfiprintf_r+0x208>
 80044ae:	bf00      	nop
 80044b0:	08004f30 	.word	0x08004f30
 80044b4:	08004f50 	.word	0x08004f50
 80044b8:	08004f10 	.word	0x08004f10
 80044bc:	08004f70 	.word	0x08004f70
 80044c0:	08004f7a 	.word	0x08004f7a
 80044c4:	00000000 	.word	0x00000000
 80044c8:	0800424b 	.word	0x0800424b
 80044cc:	08004f76 	.word	0x08004f76

080044d0 <_printf_common>:
 80044d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044d4:	4616      	mov	r6, r2
 80044d6:	4699      	mov	r9, r3
 80044d8:	688a      	ldr	r2, [r1, #8]
 80044da:	690b      	ldr	r3, [r1, #16]
 80044dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044e0:	4293      	cmp	r3, r2
 80044e2:	bfb8      	it	lt
 80044e4:	4613      	movlt	r3, r2
 80044e6:	6033      	str	r3, [r6, #0]
 80044e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044ec:	4607      	mov	r7, r0
 80044ee:	460c      	mov	r4, r1
 80044f0:	b10a      	cbz	r2, 80044f6 <_printf_common+0x26>
 80044f2:	3301      	adds	r3, #1
 80044f4:	6033      	str	r3, [r6, #0]
 80044f6:	6823      	ldr	r3, [r4, #0]
 80044f8:	0699      	lsls	r1, r3, #26
 80044fa:	bf42      	ittt	mi
 80044fc:	6833      	ldrmi	r3, [r6, #0]
 80044fe:	3302      	addmi	r3, #2
 8004500:	6033      	strmi	r3, [r6, #0]
 8004502:	6825      	ldr	r5, [r4, #0]
 8004504:	f015 0506 	ands.w	r5, r5, #6
 8004508:	d106      	bne.n	8004518 <_printf_common+0x48>
 800450a:	f104 0a19 	add.w	sl, r4, #25
 800450e:	68e3      	ldr	r3, [r4, #12]
 8004510:	6832      	ldr	r2, [r6, #0]
 8004512:	1a9b      	subs	r3, r3, r2
 8004514:	42ab      	cmp	r3, r5
 8004516:	dc26      	bgt.n	8004566 <_printf_common+0x96>
 8004518:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800451c:	1e13      	subs	r3, r2, #0
 800451e:	6822      	ldr	r2, [r4, #0]
 8004520:	bf18      	it	ne
 8004522:	2301      	movne	r3, #1
 8004524:	0692      	lsls	r2, r2, #26
 8004526:	d42b      	bmi.n	8004580 <_printf_common+0xb0>
 8004528:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800452c:	4649      	mov	r1, r9
 800452e:	4638      	mov	r0, r7
 8004530:	47c0      	blx	r8
 8004532:	3001      	adds	r0, #1
 8004534:	d01e      	beq.n	8004574 <_printf_common+0xa4>
 8004536:	6823      	ldr	r3, [r4, #0]
 8004538:	68e5      	ldr	r5, [r4, #12]
 800453a:	6832      	ldr	r2, [r6, #0]
 800453c:	f003 0306 	and.w	r3, r3, #6
 8004540:	2b04      	cmp	r3, #4
 8004542:	bf08      	it	eq
 8004544:	1aad      	subeq	r5, r5, r2
 8004546:	68a3      	ldr	r3, [r4, #8]
 8004548:	6922      	ldr	r2, [r4, #16]
 800454a:	bf0c      	ite	eq
 800454c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004550:	2500      	movne	r5, #0
 8004552:	4293      	cmp	r3, r2
 8004554:	bfc4      	itt	gt
 8004556:	1a9b      	subgt	r3, r3, r2
 8004558:	18ed      	addgt	r5, r5, r3
 800455a:	2600      	movs	r6, #0
 800455c:	341a      	adds	r4, #26
 800455e:	42b5      	cmp	r5, r6
 8004560:	d11a      	bne.n	8004598 <_printf_common+0xc8>
 8004562:	2000      	movs	r0, #0
 8004564:	e008      	b.n	8004578 <_printf_common+0xa8>
 8004566:	2301      	movs	r3, #1
 8004568:	4652      	mov	r2, sl
 800456a:	4649      	mov	r1, r9
 800456c:	4638      	mov	r0, r7
 800456e:	47c0      	blx	r8
 8004570:	3001      	adds	r0, #1
 8004572:	d103      	bne.n	800457c <_printf_common+0xac>
 8004574:	f04f 30ff 	mov.w	r0, #4294967295
 8004578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800457c:	3501      	adds	r5, #1
 800457e:	e7c6      	b.n	800450e <_printf_common+0x3e>
 8004580:	18e1      	adds	r1, r4, r3
 8004582:	1c5a      	adds	r2, r3, #1
 8004584:	2030      	movs	r0, #48	; 0x30
 8004586:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800458a:	4422      	add	r2, r4
 800458c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004590:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004594:	3302      	adds	r3, #2
 8004596:	e7c7      	b.n	8004528 <_printf_common+0x58>
 8004598:	2301      	movs	r3, #1
 800459a:	4622      	mov	r2, r4
 800459c:	4649      	mov	r1, r9
 800459e:	4638      	mov	r0, r7
 80045a0:	47c0      	blx	r8
 80045a2:	3001      	adds	r0, #1
 80045a4:	d0e6      	beq.n	8004574 <_printf_common+0xa4>
 80045a6:	3601      	adds	r6, #1
 80045a8:	e7d9      	b.n	800455e <_printf_common+0x8e>
	...

080045ac <_printf_i>:
 80045ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045b0:	460c      	mov	r4, r1
 80045b2:	4691      	mov	r9, r2
 80045b4:	7e27      	ldrb	r7, [r4, #24]
 80045b6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80045b8:	2f78      	cmp	r7, #120	; 0x78
 80045ba:	4680      	mov	r8, r0
 80045bc:	469a      	mov	sl, r3
 80045be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045c2:	d807      	bhi.n	80045d4 <_printf_i+0x28>
 80045c4:	2f62      	cmp	r7, #98	; 0x62
 80045c6:	d80a      	bhi.n	80045de <_printf_i+0x32>
 80045c8:	2f00      	cmp	r7, #0
 80045ca:	f000 80d8 	beq.w	800477e <_printf_i+0x1d2>
 80045ce:	2f58      	cmp	r7, #88	; 0x58
 80045d0:	f000 80a3 	beq.w	800471a <_printf_i+0x16e>
 80045d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80045d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80045dc:	e03a      	b.n	8004654 <_printf_i+0xa8>
 80045de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80045e2:	2b15      	cmp	r3, #21
 80045e4:	d8f6      	bhi.n	80045d4 <_printf_i+0x28>
 80045e6:	a001      	add	r0, pc, #4	; (adr r0, 80045ec <_printf_i+0x40>)
 80045e8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80045ec:	08004645 	.word	0x08004645
 80045f0:	08004659 	.word	0x08004659
 80045f4:	080045d5 	.word	0x080045d5
 80045f8:	080045d5 	.word	0x080045d5
 80045fc:	080045d5 	.word	0x080045d5
 8004600:	080045d5 	.word	0x080045d5
 8004604:	08004659 	.word	0x08004659
 8004608:	080045d5 	.word	0x080045d5
 800460c:	080045d5 	.word	0x080045d5
 8004610:	080045d5 	.word	0x080045d5
 8004614:	080045d5 	.word	0x080045d5
 8004618:	08004765 	.word	0x08004765
 800461c:	08004689 	.word	0x08004689
 8004620:	08004747 	.word	0x08004747
 8004624:	080045d5 	.word	0x080045d5
 8004628:	080045d5 	.word	0x080045d5
 800462c:	08004787 	.word	0x08004787
 8004630:	080045d5 	.word	0x080045d5
 8004634:	08004689 	.word	0x08004689
 8004638:	080045d5 	.word	0x080045d5
 800463c:	080045d5 	.word	0x080045d5
 8004640:	0800474f 	.word	0x0800474f
 8004644:	680b      	ldr	r3, [r1, #0]
 8004646:	1d1a      	adds	r2, r3, #4
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	600a      	str	r2, [r1, #0]
 800464c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004650:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004654:	2301      	movs	r3, #1
 8004656:	e0a3      	b.n	80047a0 <_printf_i+0x1f4>
 8004658:	6825      	ldr	r5, [r4, #0]
 800465a:	6808      	ldr	r0, [r1, #0]
 800465c:	062e      	lsls	r6, r5, #24
 800465e:	f100 0304 	add.w	r3, r0, #4
 8004662:	d50a      	bpl.n	800467a <_printf_i+0xce>
 8004664:	6805      	ldr	r5, [r0, #0]
 8004666:	600b      	str	r3, [r1, #0]
 8004668:	2d00      	cmp	r5, #0
 800466a:	da03      	bge.n	8004674 <_printf_i+0xc8>
 800466c:	232d      	movs	r3, #45	; 0x2d
 800466e:	426d      	negs	r5, r5
 8004670:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004674:	485e      	ldr	r0, [pc, #376]	; (80047f0 <_printf_i+0x244>)
 8004676:	230a      	movs	r3, #10
 8004678:	e019      	b.n	80046ae <_printf_i+0x102>
 800467a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800467e:	6805      	ldr	r5, [r0, #0]
 8004680:	600b      	str	r3, [r1, #0]
 8004682:	bf18      	it	ne
 8004684:	b22d      	sxthne	r5, r5
 8004686:	e7ef      	b.n	8004668 <_printf_i+0xbc>
 8004688:	680b      	ldr	r3, [r1, #0]
 800468a:	6825      	ldr	r5, [r4, #0]
 800468c:	1d18      	adds	r0, r3, #4
 800468e:	6008      	str	r0, [r1, #0]
 8004690:	0628      	lsls	r0, r5, #24
 8004692:	d501      	bpl.n	8004698 <_printf_i+0xec>
 8004694:	681d      	ldr	r5, [r3, #0]
 8004696:	e002      	b.n	800469e <_printf_i+0xf2>
 8004698:	0669      	lsls	r1, r5, #25
 800469a:	d5fb      	bpl.n	8004694 <_printf_i+0xe8>
 800469c:	881d      	ldrh	r5, [r3, #0]
 800469e:	4854      	ldr	r0, [pc, #336]	; (80047f0 <_printf_i+0x244>)
 80046a0:	2f6f      	cmp	r7, #111	; 0x6f
 80046a2:	bf0c      	ite	eq
 80046a4:	2308      	moveq	r3, #8
 80046a6:	230a      	movne	r3, #10
 80046a8:	2100      	movs	r1, #0
 80046aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80046ae:	6866      	ldr	r6, [r4, #4]
 80046b0:	60a6      	str	r6, [r4, #8]
 80046b2:	2e00      	cmp	r6, #0
 80046b4:	bfa2      	ittt	ge
 80046b6:	6821      	ldrge	r1, [r4, #0]
 80046b8:	f021 0104 	bicge.w	r1, r1, #4
 80046bc:	6021      	strge	r1, [r4, #0]
 80046be:	b90d      	cbnz	r5, 80046c4 <_printf_i+0x118>
 80046c0:	2e00      	cmp	r6, #0
 80046c2:	d04d      	beq.n	8004760 <_printf_i+0x1b4>
 80046c4:	4616      	mov	r6, r2
 80046c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80046ca:	fb03 5711 	mls	r7, r3, r1, r5
 80046ce:	5dc7      	ldrb	r7, [r0, r7]
 80046d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80046d4:	462f      	mov	r7, r5
 80046d6:	42bb      	cmp	r3, r7
 80046d8:	460d      	mov	r5, r1
 80046da:	d9f4      	bls.n	80046c6 <_printf_i+0x11a>
 80046dc:	2b08      	cmp	r3, #8
 80046de:	d10b      	bne.n	80046f8 <_printf_i+0x14c>
 80046e0:	6823      	ldr	r3, [r4, #0]
 80046e2:	07df      	lsls	r7, r3, #31
 80046e4:	d508      	bpl.n	80046f8 <_printf_i+0x14c>
 80046e6:	6923      	ldr	r3, [r4, #16]
 80046e8:	6861      	ldr	r1, [r4, #4]
 80046ea:	4299      	cmp	r1, r3
 80046ec:	bfde      	ittt	le
 80046ee:	2330      	movle	r3, #48	; 0x30
 80046f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80046f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80046f8:	1b92      	subs	r2, r2, r6
 80046fa:	6122      	str	r2, [r4, #16]
 80046fc:	f8cd a000 	str.w	sl, [sp]
 8004700:	464b      	mov	r3, r9
 8004702:	aa03      	add	r2, sp, #12
 8004704:	4621      	mov	r1, r4
 8004706:	4640      	mov	r0, r8
 8004708:	f7ff fee2 	bl	80044d0 <_printf_common>
 800470c:	3001      	adds	r0, #1
 800470e:	d14c      	bne.n	80047aa <_printf_i+0x1fe>
 8004710:	f04f 30ff 	mov.w	r0, #4294967295
 8004714:	b004      	add	sp, #16
 8004716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800471a:	4835      	ldr	r0, [pc, #212]	; (80047f0 <_printf_i+0x244>)
 800471c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004720:	6823      	ldr	r3, [r4, #0]
 8004722:	680e      	ldr	r6, [r1, #0]
 8004724:	061f      	lsls	r7, r3, #24
 8004726:	f856 5b04 	ldr.w	r5, [r6], #4
 800472a:	600e      	str	r6, [r1, #0]
 800472c:	d514      	bpl.n	8004758 <_printf_i+0x1ac>
 800472e:	07d9      	lsls	r1, r3, #31
 8004730:	bf44      	itt	mi
 8004732:	f043 0320 	orrmi.w	r3, r3, #32
 8004736:	6023      	strmi	r3, [r4, #0]
 8004738:	b91d      	cbnz	r5, 8004742 <_printf_i+0x196>
 800473a:	6823      	ldr	r3, [r4, #0]
 800473c:	f023 0320 	bic.w	r3, r3, #32
 8004740:	6023      	str	r3, [r4, #0]
 8004742:	2310      	movs	r3, #16
 8004744:	e7b0      	b.n	80046a8 <_printf_i+0xfc>
 8004746:	6823      	ldr	r3, [r4, #0]
 8004748:	f043 0320 	orr.w	r3, r3, #32
 800474c:	6023      	str	r3, [r4, #0]
 800474e:	2378      	movs	r3, #120	; 0x78
 8004750:	4828      	ldr	r0, [pc, #160]	; (80047f4 <_printf_i+0x248>)
 8004752:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004756:	e7e3      	b.n	8004720 <_printf_i+0x174>
 8004758:	065e      	lsls	r6, r3, #25
 800475a:	bf48      	it	mi
 800475c:	b2ad      	uxthmi	r5, r5
 800475e:	e7e6      	b.n	800472e <_printf_i+0x182>
 8004760:	4616      	mov	r6, r2
 8004762:	e7bb      	b.n	80046dc <_printf_i+0x130>
 8004764:	680b      	ldr	r3, [r1, #0]
 8004766:	6826      	ldr	r6, [r4, #0]
 8004768:	6960      	ldr	r0, [r4, #20]
 800476a:	1d1d      	adds	r5, r3, #4
 800476c:	600d      	str	r5, [r1, #0]
 800476e:	0635      	lsls	r5, r6, #24
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	d501      	bpl.n	8004778 <_printf_i+0x1cc>
 8004774:	6018      	str	r0, [r3, #0]
 8004776:	e002      	b.n	800477e <_printf_i+0x1d2>
 8004778:	0671      	lsls	r1, r6, #25
 800477a:	d5fb      	bpl.n	8004774 <_printf_i+0x1c8>
 800477c:	8018      	strh	r0, [r3, #0]
 800477e:	2300      	movs	r3, #0
 8004780:	6123      	str	r3, [r4, #16]
 8004782:	4616      	mov	r6, r2
 8004784:	e7ba      	b.n	80046fc <_printf_i+0x150>
 8004786:	680b      	ldr	r3, [r1, #0]
 8004788:	1d1a      	adds	r2, r3, #4
 800478a:	600a      	str	r2, [r1, #0]
 800478c:	681e      	ldr	r6, [r3, #0]
 800478e:	6862      	ldr	r2, [r4, #4]
 8004790:	2100      	movs	r1, #0
 8004792:	4630      	mov	r0, r6
 8004794:	f7fb fd1c 	bl	80001d0 <memchr>
 8004798:	b108      	cbz	r0, 800479e <_printf_i+0x1f2>
 800479a:	1b80      	subs	r0, r0, r6
 800479c:	6060      	str	r0, [r4, #4]
 800479e:	6863      	ldr	r3, [r4, #4]
 80047a0:	6123      	str	r3, [r4, #16]
 80047a2:	2300      	movs	r3, #0
 80047a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047a8:	e7a8      	b.n	80046fc <_printf_i+0x150>
 80047aa:	6923      	ldr	r3, [r4, #16]
 80047ac:	4632      	mov	r2, r6
 80047ae:	4649      	mov	r1, r9
 80047b0:	4640      	mov	r0, r8
 80047b2:	47d0      	blx	sl
 80047b4:	3001      	adds	r0, #1
 80047b6:	d0ab      	beq.n	8004710 <_printf_i+0x164>
 80047b8:	6823      	ldr	r3, [r4, #0]
 80047ba:	079b      	lsls	r3, r3, #30
 80047bc:	d413      	bmi.n	80047e6 <_printf_i+0x23a>
 80047be:	68e0      	ldr	r0, [r4, #12]
 80047c0:	9b03      	ldr	r3, [sp, #12]
 80047c2:	4298      	cmp	r0, r3
 80047c4:	bfb8      	it	lt
 80047c6:	4618      	movlt	r0, r3
 80047c8:	e7a4      	b.n	8004714 <_printf_i+0x168>
 80047ca:	2301      	movs	r3, #1
 80047cc:	4632      	mov	r2, r6
 80047ce:	4649      	mov	r1, r9
 80047d0:	4640      	mov	r0, r8
 80047d2:	47d0      	blx	sl
 80047d4:	3001      	adds	r0, #1
 80047d6:	d09b      	beq.n	8004710 <_printf_i+0x164>
 80047d8:	3501      	adds	r5, #1
 80047da:	68e3      	ldr	r3, [r4, #12]
 80047dc:	9903      	ldr	r1, [sp, #12]
 80047de:	1a5b      	subs	r3, r3, r1
 80047e0:	42ab      	cmp	r3, r5
 80047e2:	dcf2      	bgt.n	80047ca <_printf_i+0x21e>
 80047e4:	e7eb      	b.n	80047be <_printf_i+0x212>
 80047e6:	2500      	movs	r5, #0
 80047e8:	f104 0619 	add.w	r6, r4, #25
 80047ec:	e7f5      	b.n	80047da <_printf_i+0x22e>
 80047ee:	bf00      	nop
 80047f0:	08004f81 	.word	0x08004f81
 80047f4:	08004f92 	.word	0x08004f92

080047f8 <_putc_r>:
 80047f8:	b570      	push	{r4, r5, r6, lr}
 80047fa:	460d      	mov	r5, r1
 80047fc:	4614      	mov	r4, r2
 80047fe:	4606      	mov	r6, r0
 8004800:	b118      	cbz	r0, 800480a <_putc_r+0x12>
 8004802:	6983      	ldr	r3, [r0, #24]
 8004804:	b90b      	cbnz	r3, 800480a <_putc_r+0x12>
 8004806:	f7ff fc0f 	bl	8004028 <__sinit>
 800480a:	4b1c      	ldr	r3, [pc, #112]	; (800487c <_putc_r+0x84>)
 800480c:	429c      	cmp	r4, r3
 800480e:	d124      	bne.n	800485a <_putc_r+0x62>
 8004810:	6874      	ldr	r4, [r6, #4]
 8004812:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004814:	07d8      	lsls	r0, r3, #31
 8004816:	d405      	bmi.n	8004824 <_putc_r+0x2c>
 8004818:	89a3      	ldrh	r3, [r4, #12]
 800481a:	0599      	lsls	r1, r3, #22
 800481c:	d402      	bmi.n	8004824 <_putc_r+0x2c>
 800481e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004820:	f7ff fca0 	bl	8004164 <__retarget_lock_acquire_recursive>
 8004824:	68a3      	ldr	r3, [r4, #8]
 8004826:	3b01      	subs	r3, #1
 8004828:	2b00      	cmp	r3, #0
 800482a:	60a3      	str	r3, [r4, #8]
 800482c:	da05      	bge.n	800483a <_putc_r+0x42>
 800482e:	69a2      	ldr	r2, [r4, #24]
 8004830:	4293      	cmp	r3, r2
 8004832:	db1c      	blt.n	800486e <_putc_r+0x76>
 8004834:	b2eb      	uxtb	r3, r5
 8004836:	2b0a      	cmp	r3, #10
 8004838:	d019      	beq.n	800486e <_putc_r+0x76>
 800483a:	6823      	ldr	r3, [r4, #0]
 800483c:	1c5a      	adds	r2, r3, #1
 800483e:	6022      	str	r2, [r4, #0]
 8004840:	701d      	strb	r5, [r3, #0]
 8004842:	b2ed      	uxtb	r5, r5
 8004844:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004846:	07da      	lsls	r2, r3, #31
 8004848:	d405      	bmi.n	8004856 <_putc_r+0x5e>
 800484a:	89a3      	ldrh	r3, [r4, #12]
 800484c:	059b      	lsls	r3, r3, #22
 800484e:	d402      	bmi.n	8004856 <_putc_r+0x5e>
 8004850:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004852:	f7ff fc88 	bl	8004166 <__retarget_lock_release_recursive>
 8004856:	4628      	mov	r0, r5
 8004858:	bd70      	pop	{r4, r5, r6, pc}
 800485a:	4b09      	ldr	r3, [pc, #36]	; (8004880 <_putc_r+0x88>)
 800485c:	429c      	cmp	r4, r3
 800485e:	d101      	bne.n	8004864 <_putc_r+0x6c>
 8004860:	68b4      	ldr	r4, [r6, #8]
 8004862:	e7d6      	b.n	8004812 <_putc_r+0x1a>
 8004864:	4b07      	ldr	r3, [pc, #28]	; (8004884 <_putc_r+0x8c>)
 8004866:	429c      	cmp	r4, r3
 8004868:	bf08      	it	eq
 800486a:	68f4      	ldreq	r4, [r6, #12]
 800486c:	e7d1      	b.n	8004812 <_putc_r+0x1a>
 800486e:	4629      	mov	r1, r5
 8004870:	4622      	mov	r2, r4
 8004872:	4630      	mov	r0, r6
 8004874:	f000 f85c 	bl	8004930 <__swbuf_r>
 8004878:	4605      	mov	r5, r0
 800487a:	e7e3      	b.n	8004844 <_putc_r+0x4c>
 800487c:	08004f30 	.word	0x08004f30
 8004880:	08004f50 	.word	0x08004f50
 8004884:	08004f10 	.word	0x08004f10

08004888 <_sbrk_r>:
 8004888:	b538      	push	{r3, r4, r5, lr}
 800488a:	4d06      	ldr	r5, [pc, #24]	; (80048a4 <_sbrk_r+0x1c>)
 800488c:	2300      	movs	r3, #0
 800488e:	4604      	mov	r4, r0
 8004890:	4608      	mov	r0, r1
 8004892:	602b      	str	r3, [r5, #0]
 8004894:	f7fc f878 	bl	8000988 <_sbrk>
 8004898:	1c43      	adds	r3, r0, #1
 800489a:	d102      	bne.n	80048a2 <_sbrk_r+0x1a>
 800489c:	682b      	ldr	r3, [r5, #0]
 800489e:	b103      	cbz	r3, 80048a2 <_sbrk_r+0x1a>
 80048a0:	6023      	str	r3, [r4, #0]
 80048a2:	bd38      	pop	{r3, r4, r5, pc}
 80048a4:	200001cc 	.word	0x200001cc

080048a8 <__sread>:
 80048a8:	b510      	push	{r4, lr}
 80048aa:	460c      	mov	r4, r1
 80048ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048b0:	f000 fab4 	bl	8004e1c <_read_r>
 80048b4:	2800      	cmp	r0, #0
 80048b6:	bfab      	itete	ge
 80048b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80048ba:	89a3      	ldrhlt	r3, [r4, #12]
 80048bc:	181b      	addge	r3, r3, r0
 80048be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80048c2:	bfac      	ite	ge
 80048c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80048c6:	81a3      	strhlt	r3, [r4, #12]
 80048c8:	bd10      	pop	{r4, pc}

080048ca <__swrite>:
 80048ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048ce:	461f      	mov	r7, r3
 80048d0:	898b      	ldrh	r3, [r1, #12]
 80048d2:	05db      	lsls	r3, r3, #23
 80048d4:	4605      	mov	r5, r0
 80048d6:	460c      	mov	r4, r1
 80048d8:	4616      	mov	r6, r2
 80048da:	d505      	bpl.n	80048e8 <__swrite+0x1e>
 80048dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048e0:	2302      	movs	r3, #2
 80048e2:	2200      	movs	r2, #0
 80048e4:	f000 f9c8 	bl	8004c78 <_lseek_r>
 80048e8:	89a3      	ldrh	r3, [r4, #12]
 80048ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048f2:	81a3      	strh	r3, [r4, #12]
 80048f4:	4632      	mov	r2, r6
 80048f6:	463b      	mov	r3, r7
 80048f8:	4628      	mov	r0, r5
 80048fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048fe:	f000 b869 	b.w	80049d4 <_write_r>

08004902 <__sseek>:
 8004902:	b510      	push	{r4, lr}
 8004904:	460c      	mov	r4, r1
 8004906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800490a:	f000 f9b5 	bl	8004c78 <_lseek_r>
 800490e:	1c43      	adds	r3, r0, #1
 8004910:	89a3      	ldrh	r3, [r4, #12]
 8004912:	bf15      	itete	ne
 8004914:	6560      	strne	r0, [r4, #84]	; 0x54
 8004916:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800491a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800491e:	81a3      	strheq	r3, [r4, #12]
 8004920:	bf18      	it	ne
 8004922:	81a3      	strhne	r3, [r4, #12]
 8004924:	bd10      	pop	{r4, pc}

08004926 <__sclose>:
 8004926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800492a:	f000 b8d3 	b.w	8004ad4 <_close_r>
	...

08004930 <__swbuf_r>:
 8004930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004932:	460e      	mov	r6, r1
 8004934:	4614      	mov	r4, r2
 8004936:	4605      	mov	r5, r0
 8004938:	b118      	cbz	r0, 8004942 <__swbuf_r+0x12>
 800493a:	6983      	ldr	r3, [r0, #24]
 800493c:	b90b      	cbnz	r3, 8004942 <__swbuf_r+0x12>
 800493e:	f7ff fb73 	bl	8004028 <__sinit>
 8004942:	4b21      	ldr	r3, [pc, #132]	; (80049c8 <__swbuf_r+0x98>)
 8004944:	429c      	cmp	r4, r3
 8004946:	d12b      	bne.n	80049a0 <__swbuf_r+0x70>
 8004948:	686c      	ldr	r4, [r5, #4]
 800494a:	69a3      	ldr	r3, [r4, #24]
 800494c:	60a3      	str	r3, [r4, #8]
 800494e:	89a3      	ldrh	r3, [r4, #12]
 8004950:	071a      	lsls	r2, r3, #28
 8004952:	d52f      	bpl.n	80049b4 <__swbuf_r+0x84>
 8004954:	6923      	ldr	r3, [r4, #16]
 8004956:	b36b      	cbz	r3, 80049b4 <__swbuf_r+0x84>
 8004958:	6923      	ldr	r3, [r4, #16]
 800495a:	6820      	ldr	r0, [r4, #0]
 800495c:	1ac0      	subs	r0, r0, r3
 800495e:	6963      	ldr	r3, [r4, #20]
 8004960:	b2f6      	uxtb	r6, r6
 8004962:	4283      	cmp	r3, r0
 8004964:	4637      	mov	r7, r6
 8004966:	dc04      	bgt.n	8004972 <__swbuf_r+0x42>
 8004968:	4621      	mov	r1, r4
 800496a:	4628      	mov	r0, r5
 800496c:	f000 f948 	bl	8004c00 <_fflush_r>
 8004970:	bb30      	cbnz	r0, 80049c0 <__swbuf_r+0x90>
 8004972:	68a3      	ldr	r3, [r4, #8]
 8004974:	3b01      	subs	r3, #1
 8004976:	60a3      	str	r3, [r4, #8]
 8004978:	6823      	ldr	r3, [r4, #0]
 800497a:	1c5a      	adds	r2, r3, #1
 800497c:	6022      	str	r2, [r4, #0]
 800497e:	701e      	strb	r6, [r3, #0]
 8004980:	6963      	ldr	r3, [r4, #20]
 8004982:	3001      	adds	r0, #1
 8004984:	4283      	cmp	r3, r0
 8004986:	d004      	beq.n	8004992 <__swbuf_r+0x62>
 8004988:	89a3      	ldrh	r3, [r4, #12]
 800498a:	07db      	lsls	r3, r3, #31
 800498c:	d506      	bpl.n	800499c <__swbuf_r+0x6c>
 800498e:	2e0a      	cmp	r6, #10
 8004990:	d104      	bne.n	800499c <__swbuf_r+0x6c>
 8004992:	4621      	mov	r1, r4
 8004994:	4628      	mov	r0, r5
 8004996:	f000 f933 	bl	8004c00 <_fflush_r>
 800499a:	b988      	cbnz	r0, 80049c0 <__swbuf_r+0x90>
 800499c:	4638      	mov	r0, r7
 800499e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049a0:	4b0a      	ldr	r3, [pc, #40]	; (80049cc <__swbuf_r+0x9c>)
 80049a2:	429c      	cmp	r4, r3
 80049a4:	d101      	bne.n	80049aa <__swbuf_r+0x7a>
 80049a6:	68ac      	ldr	r4, [r5, #8]
 80049a8:	e7cf      	b.n	800494a <__swbuf_r+0x1a>
 80049aa:	4b09      	ldr	r3, [pc, #36]	; (80049d0 <__swbuf_r+0xa0>)
 80049ac:	429c      	cmp	r4, r3
 80049ae:	bf08      	it	eq
 80049b0:	68ec      	ldreq	r4, [r5, #12]
 80049b2:	e7ca      	b.n	800494a <__swbuf_r+0x1a>
 80049b4:	4621      	mov	r1, r4
 80049b6:	4628      	mov	r0, r5
 80049b8:	f000 f81e 	bl	80049f8 <__swsetup_r>
 80049bc:	2800      	cmp	r0, #0
 80049be:	d0cb      	beq.n	8004958 <__swbuf_r+0x28>
 80049c0:	f04f 37ff 	mov.w	r7, #4294967295
 80049c4:	e7ea      	b.n	800499c <__swbuf_r+0x6c>
 80049c6:	bf00      	nop
 80049c8:	08004f30 	.word	0x08004f30
 80049cc:	08004f50 	.word	0x08004f50
 80049d0:	08004f10 	.word	0x08004f10

080049d4 <_write_r>:
 80049d4:	b538      	push	{r3, r4, r5, lr}
 80049d6:	4d07      	ldr	r5, [pc, #28]	; (80049f4 <_write_r+0x20>)
 80049d8:	4604      	mov	r4, r0
 80049da:	4608      	mov	r0, r1
 80049dc:	4611      	mov	r1, r2
 80049de:	2200      	movs	r2, #0
 80049e0:	602a      	str	r2, [r5, #0]
 80049e2:	461a      	mov	r2, r3
 80049e4:	f7fb ff7f 	bl	80008e6 <_write>
 80049e8:	1c43      	adds	r3, r0, #1
 80049ea:	d102      	bne.n	80049f2 <_write_r+0x1e>
 80049ec:	682b      	ldr	r3, [r5, #0]
 80049ee:	b103      	cbz	r3, 80049f2 <_write_r+0x1e>
 80049f0:	6023      	str	r3, [r4, #0]
 80049f2:	bd38      	pop	{r3, r4, r5, pc}
 80049f4:	200001cc 	.word	0x200001cc

080049f8 <__swsetup_r>:
 80049f8:	4b32      	ldr	r3, [pc, #200]	; (8004ac4 <__swsetup_r+0xcc>)
 80049fa:	b570      	push	{r4, r5, r6, lr}
 80049fc:	681d      	ldr	r5, [r3, #0]
 80049fe:	4606      	mov	r6, r0
 8004a00:	460c      	mov	r4, r1
 8004a02:	b125      	cbz	r5, 8004a0e <__swsetup_r+0x16>
 8004a04:	69ab      	ldr	r3, [r5, #24]
 8004a06:	b913      	cbnz	r3, 8004a0e <__swsetup_r+0x16>
 8004a08:	4628      	mov	r0, r5
 8004a0a:	f7ff fb0d 	bl	8004028 <__sinit>
 8004a0e:	4b2e      	ldr	r3, [pc, #184]	; (8004ac8 <__swsetup_r+0xd0>)
 8004a10:	429c      	cmp	r4, r3
 8004a12:	d10f      	bne.n	8004a34 <__swsetup_r+0x3c>
 8004a14:	686c      	ldr	r4, [r5, #4]
 8004a16:	89a3      	ldrh	r3, [r4, #12]
 8004a18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a1c:	0719      	lsls	r1, r3, #28
 8004a1e:	d42c      	bmi.n	8004a7a <__swsetup_r+0x82>
 8004a20:	06dd      	lsls	r5, r3, #27
 8004a22:	d411      	bmi.n	8004a48 <__swsetup_r+0x50>
 8004a24:	2309      	movs	r3, #9
 8004a26:	6033      	str	r3, [r6, #0]
 8004a28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004a2c:	81a3      	strh	r3, [r4, #12]
 8004a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8004a32:	e03e      	b.n	8004ab2 <__swsetup_r+0xba>
 8004a34:	4b25      	ldr	r3, [pc, #148]	; (8004acc <__swsetup_r+0xd4>)
 8004a36:	429c      	cmp	r4, r3
 8004a38:	d101      	bne.n	8004a3e <__swsetup_r+0x46>
 8004a3a:	68ac      	ldr	r4, [r5, #8]
 8004a3c:	e7eb      	b.n	8004a16 <__swsetup_r+0x1e>
 8004a3e:	4b24      	ldr	r3, [pc, #144]	; (8004ad0 <__swsetup_r+0xd8>)
 8004a40:	429c      	cmp	r4, r3
 8004a42:	bf08      	it	eq
 8004a44:	68ec      	ldreq	r4, [r5, #12]
 8004a46:	e7e6      	b.n	8004a16 <__swsetup_r+0x1e>
 8004a48:	0758      	lsls	r0, r3, #29
 8004a4a:	d512      	bpl.n	8004a72 <__swsetup_r+0x7a>
 8004a4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a4e:	b141      	cbz	r1, 8004a62 <__swsetup_r+0x6a>
 8004a50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a54:	4299      	cmp	r1, r3
 8004a56:	d002      	beq.n	8004a5e <__swsetup_r+0x66>
 8004a58:	4630      	mov	r0, r6
 8004a5a:	f000 f98f 	bl	8004d7c <_free_r>
 8004a5e:	2300      	movs	r3, #0
 8004a60:	6363      	str	r3, [r4, #52]	; 0x34
 8004a62:	89a3      	ldrh	r3, [r4, #12]
 8004a64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004a68:	81a3      	strh	r3, [r4, #12]
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	6063      	str	r3, [r4, #4]
 8004a6e:	6923      	ldr	r3, [r4, #16]
 8004a70:	6023      	str	r3, [r4, #0]
 8004a72:	89a3      	ldrh	r3, [r4, #12]
 8004a74:	f043 0308 	orr.w	r3, r3, #8
 8004a78:	81a3      	strh	r3, [r4, #12]
 8004a7a:	6923      	ldr	r3, [r4, #16]
 8004a7c:	b94b      	cbnz	r3, 8004a92 <__swsetup_r+0x9a>
 8004a7e:	89a3      	ldrh	r3, [r4, #12]
 8004a80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004a84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a88:	d003      	beq.n	8004a92 <__swsetup_r+0x9a>
 8004a8a:	4621      	mov	r1, r4
 8004a8c:	4630      	mov	r0, r6
 8004a8e:	f000 f929 	bl	8004ce4 <__smakebuf_r>
 8004a92:	89a0      	ldrh	r0, [r4, #12]
 8004a94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a98:	f010 0301 	ands.w	r3, r0, #1
 8004a9c:	d00a      	beq.n	8004ab4 <__swsetup_r+0xbc>
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	60a3      	str	r3, [r4, #8]
 8004aa2:	6963      	ldr	r3, [r4, #20]
 8004aa4:	425b      	negs	r3, r3
 8004aa6:	61a3      	str	r3, [r4, #24]
 8004aa8:	6923      	ldr	r3, [r4, #16]
 8004aaa:	b943      	cbnz	r3, 8004abe <__swsetup_r+0xc6>
 8004aac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004ab0:	d1ba      	bne.n	8004a28 <__swsetup_r+0x30>
 8004ab2:	bd70      	pop	{r4, r5, r6, pc}
 8004ab4:	0781      	lsls	r1, r0, #30
 8004ab6:	bf58      	it	pl
 8004ab8:	6963      	ldrpl	r3, [r4, #20]
 8004aba:	60a3      	str	r3, [r4, #8]
 8004abc:	e7f4      	b.n	8004aa8 <__swsetup_r+0xb0>
 8004abe:	2000      	movs	r0, #0
 8004ac0:	e7f7      	b.n	8004ab2 <__swsetup_r+0xba>
 8004ac2:	bf00      	nop
 8004ac4:	2000000c 	.word	0x2000000c
 8004ac8:	08004f30 	.word	0x08004f30
 8004acc:	08004f50 	.word	0x08004f50
 8004ad0:	08004f10 	.word	0x08004f10

08004ad4 <_close_r>:
 8004ad4:	b538      	push	{r3, r4, r5, lr}
 8004ad6:	4d06      	ldr	r5, [pc, #24]	; (8004af0 <_close_r+0x1c>)
 8004ad8:	2300      	movs	r3, #0
 8004ada:	4604      	mov	r4, r0
 8004adc:	4608      	mov	r0, r1
 8004ade:	602b      	str	r3, [r5, #0]
 8004ae0:	f7fb ff1d 	bl	800091e <_close>
 8004ae4:	1c43      	adds	r3, r0, #1
 8004ae6:	d102      	bne.n	8004aee <_close_r+0x1a>
 8004ae8:	682b      	ldr	r3, [r5, #0]
 8004aea:	b103      	cbz	r3, 8004aee <_close_r+0x1a>
 8004aec:	6023      	str	r3, [r4, #0]
 8004aee:	bd38      	pop	{r3, r4, r5, pc}
 8004af0:	200001cc 	.word	0x200001cc

08004af4 <__sflush_r>:
 8004af4:	898a      	ldrh	r2, [r1, #12]
 8004af6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004afa:	4605      	mov	r5, r0
 8004afc:	0710      	lsls	r0, r2, #28
 8004afe:	460c      	mov	r4, r1
 8004b00:	d458      	bmi.n	8004bb4 <__sflush_r+0xc0>
 8004b02:	684b      	ldr	r3, [r1, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	dc05      	bgt.n	8004b14 <__sflush_r+0x20>
 8004b08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	dc02      	bgt.n	8004b14 <__sflush_r+0x20>
 8004b0e:	2000      	movs	r0, #0
 8004b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b16:	2e00      	cmp	r6, #0
 8004b18:	d0f9      	beq.n	8004b0e <__sflush_r+0x1a>
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004b20:	682f      	ldr	r7, [r5, #0]
 8004b22:	602b      	str	r3, [r5, #0]
 8004b24:	d032      	beq.n	8004b8c <__sflush_r+0x98>
 8004b26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004b28:	89a3      	ldrh	r3, [r4, #12]
 8004b2a:	075a      	lsls	r2, r3, #29
 8004b2c:	d505      	bpl.n	8004b3a <__sflush_r+0x46>
 8004b2e:	6863      	ldr	r3, [r4, #4]
 8004b30:	1ac0      	subs	r0, r0, r3
 8004b32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b34:	b10b      	cbz	r3, 8004b3a <__sflush_r+0x46>
 8004b36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b38:	1ac0      	subs	r0, r0, r3
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b40:	6a21      	ldr	r1, [r4, #32]
 8004b42:	4628      	mov	r0, r5
 8004b44:	47b0      	blx	r6
 8004b46:	1c43      	adds	r3, r0, #1
 8004b48:	89a3      	ldrh	r3, [r4, #12]
 8004b4a:	d106      	bne.n	8004b5a <__sflush_r+0x66>
 8004b4c:	6829      	ldr	r1, [r5, #0]
 8004b4e:	291d      	cmp	r1, #29
 8004b50:	d82c      	bhi.n	8004bac <__sflush_r+0xb8>
 8004b52:	4a2a      	ldr	r2, [pc, #168]	; (8004bfc <__sflush_r+0x108>)
 8004b54:	40ca      	lsrs	r2, r1
 8004b56:	07d6      	lsls	r6, r2, #31
 8004b58:	d528      	bpl.n	8004bac <__sflush_r+0xb8>
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	6062      	str	r2, [r4, #4]
 8004b5e:	04d9      	lsls	r1, r3, #19
 8004b60:	6922      	ldr	r2, [r4, #16]
 8004b62:	6022      	str	r2, [r4, #0]
 8004b64:	d504      	bpl.n	8004b70 <__sflush_r+0x7c>
 8004b66:	1c42      	adds	r2, r0, #1
 8004b68:	d101      	bne.n	8004b6e <__sflush_r+0x7a>
 8004b6a:	682b      	ldr	r3, [r5, #0]
 8004b6c:	b903      	cbnz	r3, 8004b70 <__sflush_r+0x7c>
 8004b6e:	6560      	str	r0, [r4, #84]	; 0x54
 8004b70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b72:	602f      	str	r7, [r5, #0]
 8004b74:	2900      	cmp	r1, #0
 8004b76:	d0ca      	beq.n	8004b0e <__sflush_r+0x1a>
 8004b78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b7c:	4299      	cmp	r1, r3
 8004b7e:	d002      	beq.n	8004b86 <__sflush_r+0x92>
 8004b80:	4628      	mov	r0, r5
 8004b82:	f000 f8fb 	bl	8004d7c <_free_r>
 8004b86:	2000      	movs	r0, #0
 8004b88:	6360      	str	r0, [r4, #52]	; 0x34
 8004b8a:	e7c1      	b.n	8004b10 <__sflush_r+0x1c>
 8004b8c:	6a21      	ldr	r1, [r4, #32]
 8004b8e:	2301      	movs	r3, #1
 8004b90:	4628      	mov	r0, r5
 8004b92:	47b0      	blx	r6
 8004b94:	1c41      	adds	r1, r0, #1
 8004b96:	d1c7      	bne.n	8004b28 <__sflush_r+0x34>
 8004b98:	682b      	ldr	r3, [r5, #0]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d0c4      	beq.n	8004b28 <__sflush_r+0x34>
 8004b9e:	2b1d      	cmp	r3, #29
 8004ba0:	d001      	beq.n	8004ba6 <__sflush_r+0xb2>
 8004ba2:	2b16      	cmp	r3, #22
 8004ba4:	d101      	bne.n	8004baa <__sflush_r+0xb6>
 8004ba6:	602f      	str	r7, [r5, #0]
 8004ba8:	e7b1      	b.n	8004b0e <__sflush_r+0x1a>
 8004baa:	89a3      	ldrh	r3, [r4, #12]
 8004bac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bb0:	81a3      	strh	r3, [r4, #12]
 8004bb2:	e7ad      	b.n	8004b10 <__sflush_r+0x1c>
 8004bb4:	690f      	ldr	r7, [r1, #16]
 8004bb6:	2f00      	cmp	r7, #0
 8004bb8:	d0a9      	beq.n	8004b0e <__sflush_r+0x1a>
 8004bba:	0793      	lsls	r3, r2, #30
 8004bbc:	680e      	ldr	r6, [r1, #0]
 8004bbe:	bf08      	it	eq
 8004bc0:	694b      	ldreq	r3, [r1, #20]
 8004bc2:	600f      	str	r7, [r1, #0]
 8004bc4:	bf18      	it	ne
 8004bc6:	2300      	movne	r3, #0
 8004bc8:	eba6 0807 	sub.w	r8, r6, r7
 8004bcc:	608b      	str	r3, [r1, #8]
 8004bce:	f1b8 0f00 	cmp.w	r8, #0
 8004bd2:	dd9c      	ble.n	8004b0e <__sflush_r+0x1a>
 8004bd4:	6a21      	ldr	r1, [r4, #32]
 8004bd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004bd8:	4643      	mov	r3, r8
 8004bda:	463a      	mov	r2, r7
 8004bdc:	4628      	mov	r0, r5
 8004bde:	47b0      	blx	r6
 8004be0:	2800      	cmp	r0, #0
 8004be2:	dc06      	bgt.n	8004bf2 <__sflush_r+0xfe>
 8004be4:	89a3      	ldrh	r3, [r4, #12]
 8004be6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bea:	81a3      	strh	r3, [r4, #12]
 8004bec:	f04f 30ff 	mov.w	r0, #4294967295
 8004bf0:	e78e      	b.n	8004b10 <__sflush_r+0x1c>
 8004bf2:	4407      	add	r7, r0
 8004bf4:	eba8 0800 	sub.w	r8, r8, r0
 8004bf8:	e7e9      	b.n	8004bce <__sflush_r+0xda>
 8004bfa:	bf00      	nop
 8004bfc:	20400001 	.word	0x20400001

08004c00 <_fflush_r>:
 8004c00:	b538      	push	{r3, r4, r5, lr}
 8004c02:	690b      	ldr	r3, [r1, #16]
 8004c04:	4605      	mov	r5, r0
 8004c06:	460c      	mov	r4, r1
 8004c08:	b913      	cbnz	r3, 8004c10 <_fflush_r+0x10>
 8004c0a:	2500      	movs	r5, #0
 8004c0c:	4628      	mov	r0, r5
 8004c0e:	bd38      	pop	{r3, r4, r5, pc}
 8004c10:	b118      	cbz	r0, 8004c1a <_fflush_r+0x1a>
 8004c12:	6983      	ldr	r3, [r0, #24]
 8004c14:	b90b      	cbnz	r3, 8004c1a <_fflush_r+0x1a>
 8004c16:	f7ff fa07 	bl	8004028 <__sinit>
 8004c1a:	4b14      	ldr	r3, [pc, #80]	; (8004c6c <_fflush_r+0x6c>)
 8004c1c:	429c      	cmp	r4, r3
 8004c1e:	d11b      	bne.n	8004c58 <_fflush_r+0x58>
 8004c20:	686c      	ldr	r4, [r5, #4]
 8004c22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d0ef      	beq.n	8004c0a <_fflush_r+0xa>
 8004c2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004c2c:	07d0      	lsls	r0, r2, #31
 8004c2e:	d404      	bmi.n	8004c3a <_fflush_r+0x3a>
 8004c30:	0599      	lsls	r1, r3, #22
 8004c32:	d402      	bmi.n	8004c3a <_fflush_r+0x3a>
 8004c34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c36:	f7ff fa95 	bl	8004164 <__retarget_lock_acquire_recursive>
 8004c3a:	4628      	mov	r0, r5
 8004c3c:	4621      	mov	r1, r4
 8004c3e:	f7ff ff59 	bl	8004af4 <__sflush_r>
 8004c42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c44:	07da      	lsls	r2, r3, #31
 8004c46:	4605      	mov	r5, r0
 8004c48:	d4e0      	bmi.n	8004c0c <_fflush_r+0xc>
 8004c4a:	89a3      	ldrh	r3, [r4, #12]
 8004c4c:	059b      	lsls	r3, r3, #22
 8004c4e:	d4dd      	bmi.n	8004c0c <_fflush_r+0xc>
 8004c50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c52:	f7ff fa88 	bl	8004166 <__retarget_lock_release_recursive>
 8004c56:	e7d9      	b.n	8004c0c <_fflush_r+0xc>
 8004c58:	4b05      	ldr	r3, [pc, #20]	; (8004c70 <_fflush_r+0x70>)
 8004c5a:	429c      	cmp	r4, r3
 8004c5c:	d101      	bne.n	8004c62 <_fflush_r+0x62>
 8004c5e:	68ac      	ldr	r4, [r5, #8]
 8004c60:	e7df      	b.n	8004c22 <_fflush_r+0x22>
 8004c62:	4b04      	ldr	r3, [pc, #16]	; (8004c74 <_fflush_r+0x74>)
 8004c64:	429c      	cmp	r4, r3
 8004c66:	bf08      	it	eq
 8004c68:	68ec      	ldreq	r4, [r5, #12]
 8004c6a:	e7da      	b.n	8004c22 <_fflush_r+0x22>
 8004c6c:	08004f30 	.word	0x08004f30
 8004c70:	08004f50 	.word	0x08004f50
 8004c74:	08004f10 	.word	0x08004f10

08004c78 <_lseek_r>:
 8004c78:	b538      	push	{r3, r4, r5, lr}
 8004c7a:	4d07      	ldr	r5, [pc, #28]	; (8004c98 <_lseek_r+0x20>)
 8004c7c:	4604      	mov	r4, r0
 8004c7e:	4608      	mov	r0, r1
 8004c80:	4611      	mov	r1, r2
 8004c82:	2200      	movs	r2, #0
 8004c84:	602a      	str	r2, [r5, #0]
 8004c86:	461a      	mov	r2, r3
 8004c88:	f7fb fe70 	bl	800096c <_lseek>
 8004c8c:	1c43      	adds	r3, r0, #1
 8004c8e:	d102      	bne.n	8004c96 <_lseek_r+0x1e>
 8004c90:	682b      	ldr	r3, [r5, #0]
 8004c92:	b103      	cbz	r3, 8004c96 <_lseek_r+0x1e>
 8004c94:	6023      	str	r3, [r4, #0]
 8004c96:	bd38      	pop	{r3, r4, r5, pc}
 8004c98:	200001cc 	.word	0x200001cc

08004c9c <__swhatbuf_r>:
 8004c9c:	b570      	push	{r4, r5, r6, lr}
 8004c9e:	460e      	mov	r6, r1
 8004ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ca4:	2900      	cmp	r1, #0
 8004ca6:	b096      	sub	sp, #88	; 0x58
 8004ca8:	4614      	mov	r4, r2
 8004caa:	461d      	mov	r5, r3
 8004cac:	da07      	bge.n	8004cbe <__swhatbuf_r+0x22>
 8004cae:	2300      	movs	r3, #0
 8004cb0:	602b      	str	r3, [r5, #0]
 8004cb2:	89b3      	ldrh	r3, [r6, #12]
 8004cb4:	061a      	lsls	r2, r3, #24
 8004cb6:	d410      	bmi.n	8004cda <__swhatbuf_r+0x3e>
 8004cb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cbc:	e00e      	b.n	8004cdc <__swhatbuf_r+0x40>
 8004cbe:	466a      	mov	r2, sp
 8004cc0:	f000 f8be 	bl	8004e40 <_fstat_r>
 8004cc4:	2800      	cmp	r0, #0
 8004cc6:	dbf2      	blt.n	8004cae <__swhatbuf_r+0x12>
 8004cc8:	9a01      	ldr	r2, [sp, #4]
 8004cca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004cce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004cd2:	425a      	negs	r2, r3
 8004cd4:	415a      	adcs	r2, r3
 8004cd6:	602a      	str	r2, [r5, #0]
 8004cd8:	e7ee      	b.n	8004cb8 <__swhatbuf_r+0x1c>
 8004cda:	2340      	movs	r3, #64	; 0x40
 8004cdc:	2000      	movs	r0, #0
 8004cde:	6023      	str	r3, [r4, #0]
 8004ce0:	b016      	add	sp, #88	; 0x58
 8004ce2:	bd70      	pop	{r4, r5, r6, pc}

08004ce4 <__smakebuf_r>:
 8004ce4:	898b      	ldrh	r3, [r1, #12]
 8004ce6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004ce8:	079d      	lsls	r5, r3, #30
 8004cea:	4606      	mov	r6, r0
 8004cec:	460c      	mov	r4, r1
 8004cee:	d507      	bpl.n	8004d00 <__smakebuf_r+0x1c>
 8004cf0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004cf4:	6023      	str	r3, [r4, #0]
 8004cf6:	6123      	str	r3, [r4, #16]
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	6163      	str	r3, [r4, #20]
 8004cfc:	b002      	add	sp, #8
 8004cfe:	bd70      	pop	{r4, r5, r6, pc}
 8004d00:	ab01      	add	r3, sp, #4
 8004d02:	466a      	mov	r2, sp
 8004d04:	f7ff ffca 	bl	8004c9c <__swhatbuf_r>
 8004d08:	9900      	ldr	r1, [sp, #0]
 8004d0a:	4605      	mov	r5, r0
 8004d0c:	4630      	mov	r0, r6
 8004d0e:	f7ff fa2b 	bl	8004168 <_malloc_r>
 8004d12:	b948      	cbnz	r0, 8004d28 <__smakebuf_r+0x44>
 8004d14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d18:	059a      	lsls	r2, r3, #22
 8004d1a:	d4ef      	bmi.n	8004cfc <__smakebuf_r+0x18>
 8004d1c:	f023 0303 	bic.w	r3, r3, #3
 8004d20:	f043 0302 	orr.w	r3, r3, #2
 8004d24:	81a3      	strh	r3, [r4, #12]
 8004d26:	e7e3      	b.n	8004cf0 <__smakebuf_r+0xc>
 8004d28:	4b0d      	ldr	r3, [pc, #52]	; (8004d60 <__smakebuf_r+0x7c>)
 8004d2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8004d2c:	89a3      	ldrh	r3, [r4, #12]
 8004d2e:	6020      	str	r0, [r4, #0]
 8004d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d34:	81a3      	strh	r3, [r4, #12]
 8004d36:	9b00      	ldr	r3, [sp, #0]
 8004d38:	6163      	str	r3, [r4, #20]
 8004d3a:	9b01      	ldr	r3, [sp, #4]
 8004d3c:	6120      	str	r0, [r4, #16]
 8004d3e:	b15b      	cbz	r3, 8004d58 <__smakebuf_r+0x74>
 8004d40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d44:	4630      	mov	r0, r6
 8004d46:	f000 f88d 	bl	8004e64 <_isatty_r>
 8004d4a:	b128      	cbz	r0, 8004d58 <__smakebuf_r+0x74>
 8004d4c:	89a3      	ldrh	r3, [r4, #12]
 8004d4e:	f023 0303 	bic.w	r3, r3, #3
 8004d52:	f043 0301 	orr.w	r3, r3, #1
 8004d56:	81a3      	strh	r3, [r4, #12]
 8004d58:	89a0      	ldrh	r0, [r4, #12]
 8004d5a:	4305      	orrs	r5, r0
 8004d5c:	81a5      	strh	r5, [r4, #12]
 8004d5e:	e7cd      	b.n	8004cfc <__smakebuf_r+0x18>
 8004d60:	08003fc1 	.word	0x08003fc1

08004d64 <__malloc_lock>:
 8004d64:	4801      	ldr	r0, [pc, #4]	; (8004d6c <__malloc_lock+0x8>)
 8004d66:	f7ff b9fd 	b.w	8004164 <__retarget_lock_acquire_recursive>
 8004d6a:	bf00      	nop
 8004d6c:	200001c4 	.word	0x200001c4

08004d70 <__malloc_unlock>:
 8004d70:	4801      	ldr	r0, [pc, #4]	; (8004d78 <__malloc_unlock+0x8>)
 8004d72:	f7ff b9f8 	b.w	8004166 <__retarget_lock_release_recursive>
 8004d76:	bf00      	nop
 8004d78:	200001c4 	.word	0x200001c4

08004d7c <_free_r>:
 8004d7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d7e:	2900      	cmp	r1, #0
 8004d80:	d048      	beq.n	8004e14 <_free_r+0x98>
 8004d82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d86:	9001      	str	r0, [sp, #4]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f1a1 0404 	sub.w	r4, r1, #4
 8004d8e:	bfb8      	it	lt
 8004d90:	18e4      	addlt	r4, r4, r3
 8004d92:	f7ff ffe7 	bl	8004d64 <__malloc_lock>
 8004d96:	4a20      	ldr	r2, [pc, #128]	; (8004e18 <_free_r+0x9c>)
 8004d98:	9801      	ldr	r0, [sp, #4]
 8004d9a:	6813      	ldr	r3, [r2, #0]
 8004d9c:	4615      	mov	r5, r2
 8004d9e:	b933      	cbnz	r3, 8004dae <_free_r+0x32>
 8004da0:	6063      	str	r3, [r4, #4]
 8004da2:	6014      	str	r4, [r2, #0]
 8004da4:	b003      	add	sp, #12
 8004da6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004daa:	f7ff bfe1 	b.w	8004d70 <__malloc_unlock>
 8004dae:	42a3      	cmp	r3, r4
 8004db0:	d90b      	bls.n	8004dca <_free_r+0x4e>
 8004db2:	6821      	ldr	r1, [r4, #0]
 8004db4:	1862      	adds	r2, r4, r1
 8004db6:	4293      	cmp	r3, r2
 8004db8:	bf04      	itt	eq
 8004dba:	681a      	ldreq	r2, [r3, #0]
 8004dbc:	685b      	ldreq	r3, [r3, #4]
 8004dbe:	6063      	str	r3, [r4, #4]
 8004dc0:	bf04      	itt	eq
 8004dc2:	1852      	addeq	r2, r2, r1
 8004dc4:	6022      	streq	r2, [r4, #0]
 8004dc6:	602c      	str	r4, [r5, #0]
 8004dc8:	e7ec      	b.n	8004da4 <_free_r+0x28>
 8004dca:	461a      	mov	r2, r3
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	b10b      	cbz	r3, 8004dd4 <_free_r+0x58>
 8004dd0:	42a3      	cmp	r3, r4
 8004dd2:	d9fa      	bls.n	8004dca <_free_r+0x4e>
 8004dd4:	6811      	ldr	r1, [r2, #0]
 8004dd6:	1855      	adds	r5, r2, r1
 8004dd8:	42a5      	cmp	r5, r4
 8004dda:	d10b      	bne.n	8004df4 <_free_r+0x78>
 8004ddc:	6824      	ldr	r4, [r4, #0]
 8004dde:	4421      	add	r1, r4
 8004de0:	1854      	adds	r4, r2, r1
 8004de2:	42a3      	cmp	r3, r4
 8004de4:	6011      	str	r1, [r2, #0]
 8004de6:	d1dd      	bne.n	8004da4 <_free_r+0x28>
 8004de8:	681c      	ldr	r4, [r3, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	6053      	str	r3, [r2, #4]
 8004dee:	4421      	add	r1, r4
 8004df0:	6011      	str	r1, [r2, #0]
 8004df2:	e7d7      	b.n	8004da4 <_free_r+0x28>
 8004df4:	d902      	bls.n	8004dfc <_free_r+0x80>
 8004df6:	230c      	movs	r3, #12
 8004df8:	6003      	str	r3, [r0, #0]
 8004dfa:	e7d3      	b.n	8004da4 <_free_r+0x28>
 8004dfc:	6825      	ldr	r5, [r4, #0]
 8004dfe:	1961      	adds	r1, r4, r5
 8004e00:	428b      	cmp	r3, r1
 8004e02:	bf04      	itt	eq
 8004e04:	6819      	ldreq	r1, [r3, #0]
 8004e06:	685b      	ldreq	r3, [r3, #4]
 8004e08:	6063      	str	r3, [r4, #4]
 8004e0a:	bf04      	itt	eq
 8004e0c:	1949      	addeq	r1, r1, r5
 8004e0e:	6021      	streq	r1, [r4, #0]
 8004e10:	6054      	str	r4, [r2, #4]
 8004e12:	e7c7      	b.n	8004da4 <_free_r+0x28>
 8004e14:	b003      	add	sp, #12
 8004e16:	bd30      	pop	{r4, r5, pc}
 8004e18:	20000094 	.word	0x20000094

08004e1c <_read_r>:
 8004e1c:	b538      	push	{r3, r4, r5, lr}
 8004e1e:	4d07      	ldr	r5, [pc, #28]	; (8004e3c <_read_r+0x20>)
 8004e20:	4604      	mov	r4, r0
 8004e22:	4608      	mov	r0, r1
 8004e24:	4611      	mov	r1, r2
 8004e26:	2200      	movs	r2, #0
 8004e28:	602a      	str	r2, [r5, #0]
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	f7fb fd3e 	bl	80008ac <_read>
 8004e30:	1c43      	adds	r3, r0, #1
 8004e32:	d102      	bne.n	8004e3a <_read_r+0x1e>
 8004e34:	682b      	ldr	r3, [r5, #0]
 8004e36:	b103      	cbz	r3, 8004e3a <_read_r+0x1e>
 8004e38:	6023      	str	r3, [r4, #0]
 8004e3a:	bd38      	pop	{r3, r4, r5, pc}
 8004e3c:	200001cc 	.word	0x200001cc

08004e40 <_fstat_r>:
 8004e40:	b538      	push	{r3, r4, r5, lr}
 8004e42:	4d07      	ldr	r5, [pc, #28]	; (8004e60 <_fstat_r+0x20>)
 8004e44:	2300      	movs	r3, #0
 8004e46:	4604      	mov	r4, r0
 8004e48:	4608      	mov	r0, r1
 8004e4a:	4611      	mov	r1, r2
 8004e4c:	602b      	str	r3, [r5, #0]
 8004e4e:	f7fb fd72 	bl	8000936 <_fstat>
 8004e52:	1c43      	adds	r3, r0, #1
 8004e54:	d102      	bne.n	8004e5c <_fstat_r+0x1c>
 8004e56:	682b      	ldr	r3, [r5, #0]
 8004e58:	b103      	cbz	r3, 8004e5c <_fstat_r+0x1c>
 8004e5a:	6023      	str	r3, [r4, #0]
 8004e5c:	bd38      	pop	{r3, r4, r5, pc}
 8004e5e:	bf00      	nop
 8004e60:	200001cc 	.word	0x200001cc

08004e64 <_isatty_r>:
 8004e64:	b538      	push	{r3, r4, r5, lr}
 8004e66:	4d06      	ldr	r5, [pc, #24]	; (8004e80 <_isatty_r+0x1c>)
 8004e68:	2300      	movs	r3, #0
 8004e6a:	4604      	mov	r4, r0
 8004e6c:	4608      	mov	r0, r1
 8004e6e:	602b      	str	r3, [r5, #0]
 8004e70:	f7fb fd71 	bl	8000956 <_isatty>
 8004e74:	1c43      	adds	r3, r0, #1
 8004e76:	d102      	bne.n	8004e7e <_isatty_r+0x1a>
 8004e78:	682b      	ldr	r3, [r5, #0]
 8004e7a:	b103      	cbz	r3, 8004e7e <_isatty_r+0x1a>
 8004e7c:	6023      	str	r3, [r4, #0]
 8004e7e:	bd38      	pop	{r3, r4, r5, pc}
 8004e80:	200001cc 	.word	0x200001cc

08004e84 <_init>:
 8004e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e86:	bf00      	nop
 8004e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e8a:	bc08      	pop	{r3}
 8004e8c:	469e      	mov	lr, r3
 8004e8e:	4770      	bx	lr

08004e90 <_fini>:
 8004e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e92:	bf00      	nop
 8004e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e96:	bc08      	pop	{r3}
 8004e98:	469e      	mov	lr, r3
 8004e9a:	4770      	bx	lr
