
move_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ac4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08004c54  08004c54  00014c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d38  08004d38  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004d38  08004d38  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d38  08004d38  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d38  08004d38  00014d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d3c  08004d3c  00014d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004d40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000124  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000194  20000194  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001086b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000203f  00000000  00000000  0003090b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cb8  00000000  00000000  00032950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bf0  00000000  00000000  00033608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002132c  00000000  00000000  000341f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fbad  00000000  00000000  00055524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4a36  00000000  00000000  000650d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00129b07  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003cac  00000000  00000000  00129b5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004c3c 	.word	0x08004c3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004c3c 	.word	0x08004c3c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	2b0a      	cmp	r3, #10
 800027c:	d102      	bne.n	8000284 <__io_putchar+0x14>
    __io_putchar('\r');
 800027e:	200d      	movs	r0, #13
 8000280:	f7ff fff6 	bl	8000270 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000284:	1d39      	adds	r1, r7, #4
 8000286:	f04f 33ff 	mov.w	r3, #4294967295
 800028a:	2201      	movs	r2, #1
 800028c:	4803      	ldr	r0, [pc, #12]	; (800029c <__io_putchar+0x2c>)
 800028e:	f003 f9d3 	bl	8003638 <HAL_UART_Transmit>

  return 1;
 8000292:	2301      	movs	r3, #1
}
 8000294:	4618      	mov	r0, r3
 8000296:	3708      	adds	r7, #8
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	200000fc 	.word	0x200000fc

080002a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002a6:	f000 fd89 	bl	8000dbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002aa:	f000 f861 	bl	8000370 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ae:	f000 f9a1 	bl	80005f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002b2:	f000 f96f 	bl	8000594 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80002b6:	f000 f8b9 	bl	800042c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_StatusTypeDef status = motor_init(&left_motor, &htim1, LEFT_MOTOR_CHANNEL_A, LEFT_MOTOR_CHANNEL_B);
 80002ba:	2308      	movs	r3, #8
 80002bc:	220c      	movs	r2, #12
 80002be:	4927      	ldr	r1, [pc, #156]	; (800035c <main+0xbc>)
 80002c0:	4827      	ldr	r0, [pc, #156]	; (8000360 <main+0xc0>)
 80002c2:	f000 fa02 	bl	80006ca <motor_init>
 80002c6:	4603      	mov	r3, r0
 80002c8:	717b      	strb	r3, [r7, #5]
  printf("Status: %d\n", status);
 80002ca:	797b      	ldrb	r3, [r7, #5]
 80002cc:	4619      	mov	r1, r3
 80002ce:	4825      	ldr	r0, [pc, #148]	; (8000364 <main+0xc4>)
 80002d0:	f003 fd5e 	bl	8003d90 <iprintf>

  status = motor_init(&right_motor, &htim1, RIGHT_MOTOR_CHANNEL_A, RIGHT_MOTOR_CHANNEL_B);
 80002d4:	2300      	movs	r3, #0
 80002d6:	2204      	movs	r2, #4
 80002d8:	4920      	ldr	r1, [pc, #128]	; (800035c <main+0xbc>)
 80002da:	4823      	ldr	r0, [pc, #140]	; (8000368 <main+0xc8>)
 80002dc:	f000 f9f5 	bl	80006ca <motor_init>
 80002e0:	4603      	mov	r3, r0
 80002e2:	717b      	strb	r3, [r7, #5]
  printf("Status: %d\n", status);
 80002e4:	797b      	ldrb	r3, [r7, #5]
 80002e6:	4619      	mov	r1, r3
 80002e8:	481e      	ldr	r0, [pc, #120]	; (8000364 <main+0xc4>)
 80002ea:	f003 fd51 	bl	8003d90 <iprintf>

  int8_t value = 0;
 80002ee:	2300      	movs	r3, #0
 80002f0:	71fb      	strb	r3, [r7, #7]
  int8_t dir = 1;
 80002f2:	2301      	movs	r3, #1
 80002f4:	71bb      	strb	r3, [r7, #6]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (value >= 100 || value <= -100) dir = -dir;
 80002f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002fa:	2b63      	cmp	r3, #99	; 0x63
 80002fc:	dc04      	bgt.n	8000308 <main+0x68>
 80002fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000302:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8000306:	da03      	bge.n	8000310 <main+0x70>
 8000308:	79bb      	ldrb	r3, [r7, #6]
 800030a:	425b      	negs	r3, r3
 800030c:	b2db      	uxtb	r3, r3
 800030e:	71bb      	strb	r3, [r7, #6]
	  if (value == 0){
 8000310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d106      	bne.n	8000326 <main+0x86>
		  motor_brake(&left_motor);
 8000318:	4811      	ldr	r0, [pc, #68]	; (8000360 <main+0xc0>)
 800031a:	f000 fb0f 	bl	800093c <motor_brake>
		  motor_brake(&right_motor);
 800031e:	4812      	ldr	r0, [pc, #72]	; (8000368 <main+0xc8>)
 8000320:	f000 fb0c 	bl	800093c <motor_brake>
 8000324:	e00c      	b.n	8000340 <main+0xa0>
	  } else {
		  printf("%ld\n", motor_run(&left_motor, 10));
 8000326:	210a      	movs	r1, #10
 8000328:	480d      	ldr	r0, [pc, #52]	; (8000360 <main+0xc0>)
 800032a:	f000 f9ed 	bl	8000708 <motor_run>
 800032e:	4603      	mov	r3, r0
 8000330:	4619      	mov	r1, r3
 8000332:	480e      	ldr	r0, [pc, #56]	; (800036c <main+0xcc>)
 8000334:	f003 fd2c 	bl	8003d90 <iprintf>
		  motor_run(&right_motor, 10);
 8000338:	210a      	movs	r1, #10
 800033a:	480b      	ldr	r0, [pc, #44]	; (8000368 <main+0xc8>)
 800033c:	f000 f9e4 	bl	8000708 <motor_run>
	  };
	  value += 10*dir;
 8000340:	79bb      	ldrb	r3, [r7, #6]
 8000342:	461a      	mov	r2, r3
 8000344:	0092      	lsls	r2, r2, #2
 8000346:	4413      	add	r3, r2
 8000348:	005b      	lsls	r3, r3, #1
 800034a:	b2da      	uxtb	r2, r3
 800034c:	79fb      	ldrb	r3, [r7, #7]
 800034e:	4413      	add	r3, r2
 8000350:	b2db      	uxtb	r3, r3
 8000352:	71fb      	strb	r3, [r7, #7]


	  HAL_Delay(200);
 8000354:	20c8      	movs	r0, #200	; 0xc8
 8000356:	f000 fd97 	bl	8000e88 <HAL_Delay>
	  if (value >= 100 || value <= -100) dir = -dir;
 800035a:	e7cc      	b.n	80002f6 <main+0x56>
 800035c:	200000b0 	.word	0x200000b0
 8000360:	200000a4 	.word	0x200000a4
 8000364:	08004c54 	.word	0x08004c54
 8000368:	20000098 	.word	0x20000098
 800036c:	08004c60 	.word	0x08004c60

08000370 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b096      	sub	sp, #88	; 0x58
 8000374:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000376:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800037a:	2228      	movs	r2, #40	; 0x28
 800037c:	2100      	movs	r1, #0
 800037e:	4618      	mov	r0, r3
 8000380:	f003 fcfe 	bl	8003d80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000384:	f107 031c 	add.w	r3, r7, #28
 8000388:	2200      	movs	r2, #0
 800038a:	601a      	str	r2, [r3, #0]
 800038c:	605a      	str	r2, [r3, #4]
 800038e:	609a      	str	r2, [r3, #8]
 8000390:	60da      	str	r2, [r3, #12]
 8000392:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000394:	463b      	mov	r3, r7
 8000396:	2200      	movs	r2, #0
 8000398:	601a      	str	r2, [r3, #0]
 800039a:	605a      	str	r2, [r3, #4]
 800039c:	609a      	str	r2, [r3, #8]
 800039e:	60da      	str	r2, [r3, #12]
 80003a0:	611a      	str	r2, [r3, #16]
 80003a2:	615a      	str	r2, [r3, #20]
 80003a4:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003a6:	2301      	movs	r3, #1
 80003a8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80003aa:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80003ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003b0:	2300      	movs	r3, #0
 80003b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003b4:	2301      	movs	r3, #1
 80003b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003b8:	2302      	movs	r3, #2
 80003ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003c0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003c2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003c6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003cc:	4618      	mov	r0, r3
 80003ce:	f000 ffef 	bl	80013b0 <HAL_RCC_OscConfig>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80003d8:	f000 f972 	bl	80006c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003dc:	230f      	movs	r3, #15
 80003de:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003e0:	2302      	movs	r3, #2
 80003e2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003e4:	2300      	movs	r3, #0
 80003e6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ee:	2300      	movs	r3, #0
 80003f0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003f2:	f107 031c 	add.w	r3, r7, #28
 80003f6:	2102      	movs	r1, #2
 80003f8:	4618      	mov	r0, r3
 80003fa:	f001 fee1 	bl	80021c0 <HAL_RCC_ClockConfig>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000404:	f000 f95c 	bl	80006c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000408:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800040c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800040e:	2300      	movs	r3, #0
 8000410:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000412:	463b      	mov	r3, r7
 8000414:	4618      	mov	r0, r3
 8000416:	f002 f909 	bl	800262c <HAL_RCCEx_PeriphCLKConfig>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000420:	f000 f94e 	bl	80006c0 <Error_Handler>
  }
}
 8000424:	bf00      	nop
 8000426:	3758      	adds	r7, #88	; 0x58
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}

0800042c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b096      	sub	sp, #88	; 0x58
 8000430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000432:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
 800043a:	605a      	str	r2, [r3, #4]
 800043c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800043e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000442:	2200      	movs	r2, #0
 8000444:	601a      	str	r2, [r3, #0]
 8000446:	605a      	str	r2, [r3, #4]
 8000448:	609a      	str	r2, [r3, #8]
 800044a:	60da      	str	r2, [r3, #12]
 800044c:	611a      	str	r2, [r3, #16]
 800044e:	615a      	str	r2, [r3, #20]
 8000450:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000452:	1d3b      	adds	r3, r7, #4
 8000454:	222c      	movs	r2, #44	; 0x2c
 8000456:	2100      	movs	r1, #0
 8000458:	4618      	mov	r0, r3
 800045a:	f003 fc91 	bl	8003d80 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800045e:	4b4b      	ldr	r3, [pc, #300]	; (800058c <MX_TIM1_Init+0x160>)
 8000460:	4a4b      	ldr	r2, [pc, #300]	; (8000590 <MX_TIM1_Init+0x164>)
 8000462:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7-1;
 8000464:	4b49      	ldr	r3, [pc, #292]	; (800058c <MX_TIM1_Init+0x160>)
 8000466:	2206      	movs	r2, #6
 8000468:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800046a:	4b48      	ldr	r3, [pc, #288]	; (800058c <MX_TIM1_Init+0x160>)
 800046c:	2200      	movs	r2, #0
 800046e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000470:	4b46      	ldr	r3, [pc, #280]	; (800058c <MX_TIM1_Init+0x160>)
 8000472:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000476:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000478:	4b44      	ldr	r3, [pc, #272]	; (800058c <MX_TIM1_Init+0x160>)
 800047a:	2200      	movs	r2, #0
 800047c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800047e:	4b43      	ldr	r3, [pc, #268]	; (800058c <MX_TIM1_Init+0x160>)
 8000480:	2200      	movs	r2, #0
 8000482:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000484:	4b41      	ldr	r3, [pc, #260]	; (800058c <MX_TIM1_Init+0x160>)
 8000486:	2200      	movs	r2, #0
 8000488:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800048a:	4840      	ldr	r0, [pc, #256]	; (800058c <MX_TIM1_Init+0x160>)
 800048c:	f002 fa04 	bl	8002898 <HAL_TIM_PWM_Init>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000496:	f000 f913 	bl	80006c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800049a:	2300      	movs	r3, #0
 800049c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800049e:	2300      	movs	r3, #0
 80004a0:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004a2:	2300      	movs	r3, #0
 80004a4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004a6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80004aa:	4619      	mov	r1, r3
 80004ac:	4837      	ldr	r0, [pc, #220]	; (800058c <MX_TIM1_Init+0x160>)
 80004ae:	f002 ff8f 	bl	80033d0 <HAL_TIMEx_MasterConfigSynchronization>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80004b8:	f000 f902 	bl	80006c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004bc:	2360      	movs	r3, #96	; 0x60
 80004be:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80004c0:	2300      	movs	r3, #0
 80004c2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004c4:	2300      	movs	r3, #0
 80004c6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80004c8:	2300      	movs	r3, #0
 80004ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004cc:	2300      	movs	r3, #0
 80004ce:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80004d0:	2300      	movs	r3, #0
 80004d2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80004d4:	2300      	movs	r3, #0
 80004d6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004dc:	2200      	movs	r2, #0
 80004de:	4619      	mov	r1, r3
 80004e0:	482a      	ldr	r0, [pc, #168]	; (800058c <MX_TIM1_Init+0x160>)
 80004e2:	f002 fb1d 	bl	8002b20 <HAL_TIM_PWM_ConfigChannel>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80004ec:	f000 f8e8 	bl	80006c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004f4:	2204      	movs	r2, #4
 80004f6:	4619      	mov	r1, r3
 80004f8:	4824      	ldr	r0, [pc, #144]	; (800058c <MX_TIM1_Init+0x160>)
 80004fa:	f002 fb11 	bl	8002b20 <HAL_TIM_PWM_ConfigChannel>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000504:	f000 f8dc 	bl	80006c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000508:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800050c:	2208      	movs	r2, #8
 800050e:	4619      	mov	r1, r3
 8000510:	481e      	ldr	r0, [pc, #120]	; (800058c <MX_TIM1_Init+0x160>)
 8000512:	f002 fb05 	bl	8002b20 <HAL_TIM_PWM_ConfigChannel>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 800051c:	f000 f8d0 	bl	80006c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000520:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000524:	220c      	movs	r2, #12
 8000526:	4619      	mov	r1, r3
 8000528:	4818      	ldr	r0, [pc, #96]	; (800058c <MX_TIM1_Init+0x160>)
 800052a:	f002 faf9 	bl	8002b20 <HAL_TIM_PWM_ConfigChannel>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000534:	f000 f8c4 	bl	80006c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000538:	2300      	movs	r3, #0
 800053a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800053c:	2300      	movs	r3, #0
 800053e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000540:	2300      	movs	r3, #0
 8000542:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000544:	2300      	movs	r3, #0
 8000546:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000548:	2300      	movs	r3, #0
 800054a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800054c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000550:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000552:	2300      	movs	r3, #0
 8000554:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000556:	2300      	movs	r3, #0
 8000558:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800055a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800055e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000560:	2300      	movs	r3, #0
 8000562:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000564:	2300      	movs	r3, #0
 8000566:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	4619      	mov	r1, r3
 800056c:	4807      	ldr	r0, [pc, #28]	; (800058c <MX_TIM1_Init+0x160>)
 800056e:	f002 ff9d 	bl	80034ac <HAL_TIMEx_ConfigBreakDeadTime>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 8000578:	f000 f8a2 	bl	80006c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800057c:	4803      	ldr	r0, [pc, #12]	; (800058c <MX_TIM1_Init+0x160>)
 800057e:	f000 fa99 	bl	8000ab4 <HAL_TIM_MspPostInit>

}
 8000582:	bf00      	nop
 8000584:	3758      	adds	r7, #88	; 0x58
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	200000b0 	.word	0x200000b0
 8000590:	40012c00 	.word	0x40012c00

08000594 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000598:	4b14      	ldr	r3, [pc, #80]	; (80005ec <MX_USART2_UART_Init+0x58>)
 800059a:	4a15      	ldr	r2, [pc, #84]	; (80005f0 <MX_USART2_UART_Init+0x5c>)
 800059c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800059e:	4b13      	ldr	r3, [pc, #76]	; (80005ec <MX_USART2_UART_Init+0x58>)
 80005a0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80005a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005a6:	4b11      	ldr	r3, [pc, #68]	; (80005ec <MX_USART2_UART_Init+0x58>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005ac:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <MX_USART2_UART_Init+0x58>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005b2:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <MX_USART2_UART_Init+0x58>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005b8:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <MX_USART2_UART_Init+0x58>)
 80005ba:	220c      	movs	r2, #12
 80005bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005be:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <MX_USART2_UART_Init+0x58>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005c4:	4b09      	ldr	r3, [pc, #36]	; (80005ec <MX_USART2_UART_Init+0x58>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005ca:	4b08      	ldr	r3, [pc, #32]	; (80005ec <MX_USART2_UART_Init+0x58>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005d0:	4b06      	ldr	r3, [pc, #24]	; (80005ec <MX_USART2_UART_Init+0x58>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005d6:	4805      	ldr	r0, [pc, #20]	; (80005ec <MX_USART2_UART_Init+0x58>)
 80005d8:	f002 ffe0 	bl	800359c <HAL_UART_Init>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005e2:	f000 f86d 	bl	80006c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	200000fc 	.word	0x200000fc
 80005f0:	40004400 	.word	0x40004400

080005f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08a      	sub	sp, #40	; 0x28
 80005f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800060a:	4b2b      	ldr	r3, [pc, #172]	; (80006b8 <MX_GPIO_Init+0xc4>)
 800060c:	695b      	ldr	r3, [r3, #20]
 800060e:	4a2a      	ldr	r2, [pc, #168]	; (80006b8 <MX_GPIO_Init+0xc4>)
 8000610:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000614:	6153      	str	r3, [r2, #20]
 8000616:	4b28      	ldr	r3, [pc, #160]	; (80006b8 <MX_GPIO_Init+0xc4>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800061e:	613b      	str	r3, [r7, #16]
 8000620:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000622:	4b25      	ldr	r3, [pc, #148]	; (80006b8 <MX_GPIO_Init+0xc4>)
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	4a24      	ldr	r2, [pc, #144]	; (80006b8 <MX_GPIO_Init+0xc4>)
 8000628:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800062c:	6153      	str	r3, [r2, #20]
 800062e:	4b22      	ldr	r3, [pc, #136]	; (80006b8 <MX_GPIO_Init+0xc4>)
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063a:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <MX_GPIO_Init+0xc4>)
 800063c:	695b      	ldr	r3, [r3, #20]
 800063e:	4a1e      	ldr	r2, [pc, #120]	; (80006b8 <MX_GPIO_Init+0xc4>)
 8000640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000644:	6153      	str	r3, [r2, #20]
 8000646:	4b1c      	ldr	r3, [pc, #112]	; (80006b8 <MX_GPIO_Init+0xc4>)
 8000648:	695b      	ldr	r3, [r3, #20]
 800064a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000652:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <MX_GPIO_Init+0xc4>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	4a18      	ldr	r2, [pc, #96]	; (80006b8 <MX_GPIO_Init+0xc4>)
 8000658:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800065c:	6153      	str	r3, [r2, #20]
 800065e:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <MX_GPIO_Init+0xc4>)
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	2120      	movs	r1, #32
 800066e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000672:	f000 fe85 	bl	8001380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000676:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800067a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800067c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000680:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	4619      	mov	r1, r3
 800068c:	480b      	ldr	r0, [pc, #44]	; (80006bc <MX_GPIO_Init+0xc8>)
 800068e:	f000 fd05 	bl	800109c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000692:	2320      	movs	r3, #32
 8000694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000696:	2301      	movs	r3, #1
 8000698:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069e:	2300      	movs	r3, #0
 80006a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	4619      	mov	r1, r3
 80006a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ac:	f000 fcf6 	bl	800109c <HAL_GPIO_Init>

}
 80006b0:	bf00      	nop
 80006b2:	3728      	adds	r7, #40	; 0x28
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40021000 	.word	0x40021000
 80006bc:	48000800 	.word	0x48000800

080006c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c4:	b672      	cpsid	i
}
 80006c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c8:	e7fe      	b.n	80006c8 <Error_Handler+0x8>

080006ca <motor_init>:
 *      Author: Hyperbook
 */

#include "motor.h"

HAL_StatusTypeDef motor_init(Motor* motor, TIM_HandleTypeDef* pwm_tim, uint32_t channel_A, uint32_t channel_B){
 80006ca:	b580      	push	{r7, lr}
 80006cc:	b086      	sub	sp, #24
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	60f8      	str	r0, [r7, #12]
 80006d2:	60b9      	str	r1, [r7, #8]
 80006d4:	607a      	str	r2, [r7, #4]
 80006d6:	603b      	str	r3, [r7, #0]
	motor->channel_A = channel_A;
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	601a      	str	r2, [r3, #0]
	motor->channel_B = channel_B;
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	683a      	ldr	r2, [r7, #0]
 80006e2:	605a      	str	r2, [r3, #4]
	motor->pwm_tim = pwm_tim;
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	68ba      	ldr	r2, [r7, #8]
 80006e8:	609a      	str	r2, [r3, #8]
	HAL_StatusTypeDef status = HAL_TIM_PWM_Start(pwm_tim, channel_A);
 80006ea:	6879      	ldr	r1, [r7, #4]
 80006ec:	68b8      	ldr	r0, [r7, #8]
 80006ee:	f002 f92b 	bl	8002948 <HAL_TIM_PWM_Start>
 80006f2:	4603      	mov	r3, r0
 80006f4:	75fb      	strb	r3, [r7, #23]
	HAL_TIM_PWM_Start(pwm_tim, channel_B);
 80006f6:	6839      	ldr	r1, [r7, #0]
 80006f8:	68b8      	ldr	r0, [r7, #8]
 80006fa:	f002 f925 	bl	8002948 <HAL_TIM_PWM_Start>
	return status;
 80006fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8000700:	4618      	mov	r0, r3
 8000702:	3718      	adds	r7, #24
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <motor_run>:

uint32_t motor_run(Motor* motor, int8_t speed){
 8000708:	b480      	push	{r7}
 800070a:	b085      	sub	sp, #20
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	460b      	mov	r3, r1
 8000712:	70fb      	strb	r3, [r7, #3]
	// speed <-100; 100>
	uint32_t duty;
	speed = speed > 100 ? 100 : (speed < -100 ? -100 : speed);
 8000714:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000718:	2b64      	cmp	r3, #100	; 0x64
 800071a:	dc08      	bgt.n	800072e <motor_run+0x26>
 800071c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000720:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8000724:	4293      	cmp	r3, r2
 8000726:	bfb8      	it	lt
 8000728:	4613      	movlt	r3, r2
 800072a:	b25b      	sxtb	r3, r3
 800072c:	e000      	b.n	8000730 <motor_run+0x28>
 800072e:	2364      	movs	r3, #100	; 0x64
 8000730:	70fb      	strb	r3, [r7, #3]
	if (speed >= 0){
 8000732:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000736:	2b00      	cmp	r3, #0
 8000738:	db7b      	blt.n	8000832 <motor_run+0x12a>
		duty = speed * CLOCK_COUNTER_PERIOD / 100;
 800073a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800073e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000742:	fb02 f303 	mul.w	r3, r2, r3
 8000746:	4a7b      	ldr	r2, [pc, #492]	; (8000934 <motor_run+0x22c>)
 8000748:	fb82 1203 	smull	r1, r2, r2, r3
 800074c:	1152      	asrs	r2, r2, #5
 800074e:	17db      	asrs	r3, r3, #31
 8000750:	1ad3      	subs	r3, r2, r3
 8000752:	60fb      	str	r3, [r7, #12]
		__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->channel_B, 0);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d105      	bne.n	8000768 <motor_run+0x60>
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	689b      	ldr	r3, [r3, #8]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2200      	movs	r2, #0
 8000764:	635a      	str	r2, [r3, #52]	; 0x34
 8000766:	e02c      	b.n	80007c2 <motor_run+0xba>
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	685b      	ldr	r3, [r3, #4]
 800076c:	2b04      	cmp	r3, #4
 800076e:	d105      	bne.n	800077c <motor_run+0x74>
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	689b      	ldr	r3, [r3, #8]
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	2300      	movs	r3, #0
 8000778:	6393      	str	r3, [r2, #56]	; 0x38
 800077a:	e022      	b.n	80007c2 <motor_run+0xba>
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	685b      	ldr	r3, [r3, #4]
 8000780:	2b08      	cmp	r3, #8
 8000782:	d105      	bne.n	8000790 <motor_run+0x88>
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	689b      	ldr	r3, [r3, #8]
 8000788:	681a      	ldr	r2, [r3, #0]
 800078a:	2300      	movs	r3, #0
 800078c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800078e:	e018      	b.n	80007c2 <motor_run+0xba>
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	2b0c      	cmp	r3, #12
 8000796:	d105      	bne.n	80007a4 <motor_run+0x9c>
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	689b      	ldr	r3, [r3, #8]
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	2300      	movs	r3, #0
 80007a0:	6413      	str	r3, [r2, #64]	; 0x40
 80007a2:	e00e      	b.n	80007c2 <motor_run+0xba>
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	2b10      	cmp	r3, #16
 80007aa:	d105      	bne.n	80007b8 <motor_run+0xb0>
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	689b      	ldr	r3, [r3, #8]
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	2300      	movs	r3, #0
 80007b4:	6593      	str	r3, [r2, #88]	; 0x58
 80007b6:	e004      	b.n	80007c2 <motor_run+0xba>
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	689b      	ldr	r3, [r3, #8]
 80007bc:	681a      	ldr	r2, [r3, #0]
 80007be:	2300      	movs	r3, #0
 80007c0:	65d3      	str	r3, [r2, #92]	; 0x5c
		__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->channel_A, duty);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d105      	bne.n	80007d6 <motor_run+0xce>
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	689b      	ldr	r3, [r3, #8]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	68fa      	ldr	r2, [r7, #12]
 80007d2:	635a      	str	r2, [r3, #52]	; 0x34
 80007d4:	e0a7      	b.n	8000926 <motor_run+0x21e>
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	2b04      	cmp	r3, #4
 80007dc:	d105      	bne.n	80007ea <motor_run+0xe2>
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	689b      	ldr	r3, [r3, #8]
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	6393      	str	r3, [r2, #56]	; 0x38
 80007e8:	e09d      	b.n	8000926 <motor_run+0x21e>
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	2b08      	cmp	r3, #8
 80007f0:	d105      	bne.n	80007fe <motor_run+0xf6>
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	689b      	ldr	r3, [r3, #8]
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	63d3      	str	r3, [r2, #60]	; 0x3c
 80007fc:	e093      	b.n	8000926 <motor_run+0x21e>
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	2b0c      	cmp	r3, #12
 8000804:	d105      	bne.n	8000812 <motor_run+0x10a>
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	689b      	ldr	r3, [r3, #8]
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	6413      	str	r3, [r2, #64]	; 0x40
 8000810:	e089      	b.n	8000926 <motor_run+0x21e>
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	2b10      	cmp	r3, #16
 8000818:	d105      	bne.n	8000826 <motor_run+0x11e>
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	689b      	ldr	r3, [r3, #8]
 800081e:	681a      	ldr	r2, [r3, #0]
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	6593      	str	r3, [r2, #88]	; 0x58
 8000824:	e07f      	b.n	8000926 <motor_run+0x21e>
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	689b      	ldr	r3, [r3, #8]
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000830:	e079      	b.n	8000926 <motor_run+0x21e>
	} else {
		duty = (-speed) * CLOCK_COUNTER_PERIOD / 100;
 8000832:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000836:	4a40      	ldr	r2, [pc, #256]	; (8000938 <motor_run+0x230>)
 8000838:	fb02 f303 	mul.w	r3, r2, r3
 800083c:	4a3d      	ldr	r2, [pc, #244]	; (8000934 <motor_run+0x22c>)
 800083e:	fb82 1203 	smull	r1, r2, r2, r3
 8000842:	1152      	asrs	r2, r2, #5
 8000844:	17db      	asrs	r3, r3, #31
 8000846:	1ad3      	subs	r3, r2, r3
 8000848:	60fb      	str	r3, [r7, #12]
		__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->channel_A, 0);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d105      	bne.n	800085e <motor_run+0x156>
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	689b      	ldr	r3, [r3, #8]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2200      	movs	r2, #0
 800085a:	635a      	str	r2, [r3, #52]	; 0x34
 800085c:	e02c      	b.n	80008b8 <motor_run+0x1b0>
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	2b04      	cmp	r3, #4
 8000864:	d105      	bne.n	8000872 <motor_run+0x16a>
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	689b      	ldr	r3, [r3, #8]
 800086a:	681a      	ldr	r2, [r3, #0]
 800086c:	2300      	movs	r3, #0
 800086e:	6393      	str	r3, [r2, #56]	; 0x38
 8000870:	e022      	b.n	80008b8 <motor_run+0x1b0>
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	2b08      	cmp	r3, #8
 8000878:	d105      	bne.n	8000886 <motor_run+0x17e>
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	689b      	ldr	r3, [r3, #8]
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	2300      	movs	r3, #0
 8000882:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000884:	e018      	b.n	80008b8 <motor_run+0x1b0>
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2b0c      	cmp	r3, #12
 800088c:	d105      	bne.n	800089a <motor_run+0x192>
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	689b      	ldr	r3, [r3, #8]
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	2300      	movs	r3, #0
 8000896:	6413      	str	r3, [r2, #64]	; 0x40
 8000898:	e00e      	b.n	80008b8 <motor_run+0x1b0>
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	2b10      	cmp	r3, #16
 80008a0:	d105      	bne.n	80008ae <motor_run+0x1a6>
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	689b      	ldr	r3, [r3, #8]
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	2300      	movs	r3, #0
 80008aa:	6593      	str	r3, [r2, #88]	; 0x58
 80008ac:	e004      	b.n	80008b8 <motor_run+0x1b0>
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	689b      	ldr	r3, [r3, #8]
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	2300      	movs	r3, #0
 80008b6:	65d3      	str	r3, [r2, #92]	; 0x5c
		__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->channel_B, duty);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d105      	bne.n	80008cc <motor_run+0x1c4>
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	689b      	ldr	r3, [r3, #8]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	68fa      	ldr	r2, [r7, #12]
 80008c8:	635a      	str	r2, [r3, #52]	; 0x34
 80008ca:	e02c      	b.n	8000926 <motor_run+0x21e>
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	2b04      	cmp	r3, #4
 80008d2:	d105      	bne.n	80008e0 <motor_run+0x1d8>
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	689b      	ldr	r3, [r3, #8]
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	6393      	str	r3, [r2, #56]	; 0x38
 80008de:	e022      	b.n	8000926 <motor_run+0x21e>
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	2b08      	cmp	r3, #8
 80008e6:	d105      	bne.n	80008f4 <motor_run+0x1ec>
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	689b      	ldr	r3, [r3, #8]
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	63d3      	str	r3, [r2, #60]	; 0x3c
 80008f2:	e018      	b.n	8000926 <motor_run+0x21e>
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	2b0c      	cmp	r3, #12
 80008fa:	d105      	bne.n	8000908 <motor_run+0x200>
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	689b      	ldr	r3, [r3, #8]
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	6413      	str	r3, [r2, #64]	; 0x40
 8000906:	e00e      	b.n	8000926 <motor_run+0x21e>
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	2b10      	cmp	r3, #16
 800090e:	d105      	bne.n	800091c <motor_run+0x214>
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	689b      	ldr	r3, [r3, #8]
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	6593      	str	r3, [r2, #88]	; 0x58
 800091a:	e004      	b.n	8000926 <motor_run+0x21e>
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	689b      	ldr	r3, [r3, #8]
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	65d3      	str	r3, [r2, #92]	; 0x5c
	}
	return duty;
 8000926:	68fb      	ldr	r3, [r7, #12]
}
 8000928:	4618      	mov	r0, r3
 800092a:	3714      	adds	r7, #20
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	51eb851f 	.word	0x51eb851f
 8000938:	fffffc19 	.word	0xfffffc19

0800093c <motor_brake>:

void motor_brake(Motor* motor){
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->channel_A, 0);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d105      	bne.n	8000958 <motor_brake+0x1c>
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	689b      	ldr	r3, [r3, #8]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	2200      	movs	r2, #0
 8000954:	635a      	str	r2, [r3, #52]	; 0x34
 8000956:	e02c      	b.n	80009b2 <motor_brake+0x76>
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2b04      	cmp	r3, #4
 800095e:	d105      	bne.n	800096c <motor_brake+0x30>
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	2300      	movs	r3, #0
 8000968:	6393      	str	r3, [r2, #56]	; 0x38
 800096a:	e022      	b.n	80009b2 <motor_brake+0x76>
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2b08      	cmp	r3, #8
 8000972:	d105      	bne.n	8000980 <motor_brake+0x44>
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	689b      	ldr	r3, [r3, #8]
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	2300      	movs	r3, #0
 800097c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800097e:	e018      	b.n	80009b2 <motor_brake+0x76>
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2b0c      	cmp	r3, #12
 8000986:	d105      	bne.n	8000994 <motor_brake+0x58>
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	689b      	ldr	r3, [r3, #8]
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	2300      	movs	r3, #0
 8000990:	6413      	str	r3, [r2, #64]	; 0x40
 8000992:	e00e      	b.n	80009b2 <motor_brake+0x76>
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2b10      	cmp	r3, #16
 800099a:	d105      	bne.n	80009a8 <motor_brake+0x6c>
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	689b      	ldr	r3, [r3, #8]
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	2300      	movs	r3, #0
 80009a4:	6593      	str	r3, [r2, #88]	; 0x58
 80009a6:	e004      	b.n	80009b2 <motor_brake+0x76>
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	2300      	movs	r3, #0
 80009b0:	65d3      	str	r3, [r2, #92]	; 0x5c
	__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->channel_B, 0);
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d105      	bne.n	80009c6 <motor_brake+0x8a>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	689b      	ldr	r3, [r3, #8]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2200      	movs	r2, #0
 80009c2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80009c4:	e02c      	b.n	8000a20 <motor_brake+0xe4>
	__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->channel_B, 0);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	2b04      	cmp	r3, #4
 80009cc:	d105      	bne.n	80009da <motor_brake+0x9e>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	689b      	ldr	r3, [r3, #8]
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	2300      	movs	r3, #0
 80009d6:	6393      	str	r3, [r2, #56]	; 0x38
}
 80009d8:	e022      	b.n	8000a20 <motor_brake+0xe4>
	__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->channel_B, 0);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	2b08      	cmp	r3, #8
 80009e0:	d105      	bne.n	80009ee <motor_brake+0xb2>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	689b      	ldr	r3, [r3, #8]
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	2300      	movs	r3, #0
 80009ea:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80009ec:	e018      	b.n	8000a20 <motor_brake+0xe4>
	__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->channel_B, 0);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	2b0c      	cmp	r3, #12
 80009f4:	d105      	bne.n	8000a02 <motor_brake+0xc6>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	689b      	ldr	r3, [r3, #8]
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	2300      	movs	r3, #0
 80009fe:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a00:	e00e      	b.n	8000a20 <motor_brake+0xe4>
	__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->channel_B, 0);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	2b10      	cmp	r3, #16
 8000a08:	d105      	bne.n	8000a16 <motor_brake+0xda>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	689b      	ldr	r3, [r3, #8]
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	2300      	movs	r3, #0
 8000a12:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000a14:	e004      	b.n	8000a20 <motor_brake+0xe4>
	__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->channel_B, 0);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	689b      	ldr	r3, [r3, #8]
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000a20:	bf00      	nop
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a32:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <HAL_MspInit+0x44>)
 8000a34:	699b      	ldr	r3, [r3, #24]
 8000a36:	4a0e      	ldr	r2, [pc, #56]	; (8000a70 <HAL_MspInit+0x44>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	6193      	str	r3, [r2, #24]
 8000a3e:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <HAL_MspInit+0x44>)
 8000a40:	699b      	ldr	r3, [r3, #24]
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4a:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <HAL_MspInit+0x44>)
 8000a4c:	69db      	ldr	r3, [r3, #28]
 8000a4e:	4a08      	ldr	r2, [pc, #32]	; (8000a70 <HAL_MspInit+0x44>)
 8000a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a54:	61d3      	str	r3, [r2, #28]
 8000a56:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <HAL_MspInit+0x44>)
 8000a58:	69db      	ldr	r3, [r3, #28]
 8000a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5e:	603b      	str	r3, [r7, #0]
 8000a60:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a62:	2007      	movs	r0, #7
 8000a64:	f000 fae6 	bl	8001034 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a68:	bf00      	nop
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40021000 	.word	0x40021000

08000a74 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <HAL_TIM_PWM_MspInit+0x38>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d10b      	bne.n	8000a9e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a86:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <HAL_TIM_PWM_MspInit+0x3c>)
 8000a88:	699b      	ldr	r3, [r3, #24]
 8000a8a:	4a09      	ldr	r2, [pc, #36]	; (8000ab0 <HAL_TIM_PWM_MspInit+0x3c>)
 8000a8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a90:	6193      	str	r3, [r2, #24]
 8000a92:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <HAL_TIM_PWM_MspInit+0x3c>)
 8000a94:	699b      	ldr	r3, [r3, #24]
 8000a96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a9e:	bf00      	nop
 8000aa0:	3714      	adds	r7, #20
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	40012c00 	.word	0x40012c00
 8000ab0:	40021000 	.word	0x40021000

08000ab4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b088      	sub	sp, #32
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 030c 	add.w	r3, r7, #12
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a11      	ldr	r2, [pc, #68]	; (8000b18 <HAL_TIM_MspPostInit+0x64>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d11b      	bne.n	8000b0e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad6:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <HAL_TIM_MspPostInit+0x68>)
 8000ad8:	695b      	ldr	r3, [r3, #20]
 8000ada:	4a10      	ldr	r2, [pc, #64]	; (8000b1c <HAL_TIM_MspPostInit+0x68>)
 8000adc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ae0:	6153      	str	r3, [r2, #20]
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <HAL_TIM_MspPostInit+0x68>)
 8000ae4:	695b      	ldr	r3, [r3, #20]
 8000ae6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000aee:	230f      	movs	r3, #15
 8000af0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	2302      	movs	r3, #2
 8000af4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000afe:	2302      	movs	r3, #2
 8000b00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b02:	f107 030c 	add.w	r3, r7, #12
 8000b06:	4619      	mov	r1, r3
 8000b08:	4805      	ldr	r0, [pc, #20]	; (8000b20 <HAL_TIM_MspPostInit+0x6c>)
 8000b0a:	f000 fac7 	bl	800109c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000b0e:	bf00      	nop
 8000b10:	3720      	adds	r7, #32
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40012c00 	.word	0x40012c00
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	48000800 	.word	0x48000800

08000b24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08a      	sub	sp, #40	; 0x28
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a17      	ldr	r2, [pc, #92]	; (8000ba0 <HAL_UART_MspInit+0x7c>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d128      	bne.n	8000b98 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b46:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <HAL_UART_MspInit+0x80>)
 8000b48:	69db      	ldr	r3, [r3, #28]
 8000b4a:	4a16      	ldr	r2, [pc, #88]	; (8000ba4 <HAL_UART_MspInit+0x80>)
 8000b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b50:	61d3      	str	r3, [r2, #28]
 8000b52:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <HAL_UART_MspInit+0x80>)
 8000b54:	69db      	ldr	r3, [r3, #28]
 8000b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5e:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <HAL_UART_MspInit+0x80>)
 8000b60:	695b      	ldr	r3, [r3, #20]
 8000b62:	4a10      	ldr	r2, [pc, #64]	; (8000ba4 <HAL_UART_MspInit+0x80>)
 8000b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b68:	6153      	str	r3, [r2, #20]
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <HAL_UART_MspInit+0x80>)
 8000b6c:	695b      	ldr	r3, [r3, #20]
 8000b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b76:	230c      	movs	r3, #12
 8000b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b82:	2303      	movs	r3, #3
 8000b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b86:	2307      	movs	r3, #7
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8a:	f107 0314 	add.w	r3, r7, #20
 8000b8e:	4619      	mov	r1, r3
 8000b90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b94:	f000 fa82 	bl	800109c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b98:	bf00      	nop
 8000b9a:	3728      	adds	r7, #40	; 0x28
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40004400 	.word	0x40004400
 8000ba4:	40021000 	.word	0x40021000

08000ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <NMI_Handler+0x4>

08000bae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb2:	e7fe      	b.n	8000bb2 <HardFault_Handler+0x4>

08000bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <MemManage_Handler+0x4>

08000bba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bbe:	e7fe      	b.n	8000bbe <BusFault_Handler+0x4>

08000bc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <UsageFault_Handler+0x4>

08000bc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf4:	f000 f928 	bl	8000e48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]
 8000c0c:	e00a      	b.n	8000c24 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c0e:	f3af 8000 	nop.w
 8000c12:	4601      	mov	r1, r0
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	1c5a      	adds	r2, r3, #1
 8000c18:	60ba      	str	r2, [r7, #8]
 8000c1a:	b2ca      	uxtb	r2, r1
 8000c1c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	3301      	adds	r3, #1
 8000c22:	617b      	str	r3, [r7, #20]
 8000c24:	697a      	ldr	r2, [r7, #20]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	dbf0      	blt.n	8000c0e <_read+0x12>
	}

return len;
 8000c2c:	687b      	ldr	r3, [r7, #4]
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3718      	adds	r7, #24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b086      	sub	sp, #24
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	60f8      	str	r0, [r7, #12]
 8000c3e:	60b9      	str	r1, [r7, #8]
 8000c40:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
 8000c46:	e009      	b.n	8000c5c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	1c5a      	adds	r2, r3, #1
 8000c4c:	60ba      	str	r2, [r7, #8]
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff fb0d 	bl	8000270 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	617b      	str	r3, [r7, #20]
 8000c5c:	697a      	ldr	r2, [r7, #20]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	dbf1      	blt.n	8000c48 <_write+0x12>
	}
	return len;
 8000c64:	687b      	ldr	r3, [r7, #4]
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3718      	adds	r7, #24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <_close>:

int _close(int file)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	b083      	sub	sp, #12
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
	return -1;
 8000c76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c86:	b480      	push	{r7}
 8000c88:	b083      	sub	sp, #12
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
 8000c8e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c96:	605a      	str	r2, [r3, #4]
	return 0;
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <_isatty>:

int _isatty(int file)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	b083      	sub	sp, #12
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
	return 1;
 8000cae:	2301      	movs	r3, #1
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
	return 0;
 8000cc8:	2300      	movs	r3, #0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3714      	adds	r7, #20
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
	...

08000cd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce0:	4a14      	ldr	r2, [pc, #80]	; (8000d34 <_sbrk+0x5c>)
 8000ce2:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <_sbrk+0x60>)
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cec:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <_sbrk+0x64>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d102      	bne.n	8000cfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf4:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <_sbrk+0x64>)
 8000cf6:	4a12      	ldr	r2, [pc, #72]	; (8000d40 <_sbrk+0x68>)
 8000cf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cfa:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <_sbrk+0x64>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4413      	add	r3, r2
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d207      	bcs.n	8000d18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d08:	f003 f810 	bl	8003d2c <__errno>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	220c      	movs	r2, #12
 8000d10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d12:	f04f 33ff 	mov.w	r3, #4294967295
 8000d16:	e009      	b.n	8000d2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <_sbrk+0x64>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d1e:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <_sbrk+0x64>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4413      	add	r3, r2
 8000d26:	4a05      	ldr	r2, [pc, #20]	; (8000d3c <_sbrk+0x64>)
 8000d28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3718      	adds	r7, #24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20003000 	.word	0x20003000
 8000d38:	00000400 	.word	0x00000400
 8000d3c:	2000008c 	.word	0x2000008c
 8000d40:	20000198 	.word	0x20000198

08000d44 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <SystemInit+0x20>)
 8000d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d4e:	4a05      	ldr	r2, [pc, #20]	; (8000d64 <SystemInit+0x20>)
 8000d50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000da0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d6c:	480d      	ldr	r0, [pc, #52]	; (8000da4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d6e:	490e      	ldr	r1, [pc, #56]	; (8000da8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d70:	4a0e      	ldr	r2, [pc, #56]	; (8000dac <LoopForever+0xe>)
  movs r3, #0
 8000d72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d74:	e002      	b.n	8000d7c <LoopCopyDataInit>

08000d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d7a:	3304      	adds	r3, #4

08000d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d80:	d3f9      	bcc.n	8000d76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d82:	4a0b      	ldr	r2, [pc, #44]	; (8000db0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d84:	4c0b      	ldr	r4, [pc, #44]	; (8000db4 <LoopForever+0x16>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d88:	e001      	b.n	8000d8e <LoopFillZerobss>

08000d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d8c:	3204      	adds	r2, #4

08000d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d90:	d3fb      	bcc.n	8000d8a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d92:	f7ff ffd7 	bl	8000d44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d96:	f002 ffcf 	bl	8003d38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d9a:	f7ff fa81 	bl	80002a0 <main>

08000d9e <LoopForever>:

LoopForever:
    b LoopForever
 8000d9e:	e7fe      	b.n	8000d9e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000da0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000da4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000dac:	08004d40 	.word	0x08004d40
  ldr r2, =_sbss
 8000db0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000db4:	20000194 	.word	0x20000194

08000db8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000db8:	e7fe      	b.n	8000db8 <ADC1_2_IRQHandler>
	...

08000dbc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc0:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <HAL_Init+0x28>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a07      	ldr	r2, [pc, #28]	; (8000de4 <HAL_Init+0x28>)
 8000dc6:	f043 0310 	orr.w	r3, r3, #16
 8000dca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dcc:	2003      	movs	r0, #3
 8000dce:	f000 f931 	bl	8001034 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	f000 f808 	bl	8000de8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dd8:	f7ff fe28 	bl	8000a2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40022000 	.word	0x40022000

08000de8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000df0:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <HAL_InitTick+0x54>)
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <HAL_InitTick+0x58>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	4619      	mov	r1, r3
 8000dfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e06:	4618      	mov	r0, r3
 8000e08:	f000 f93b 	bl	8001082 <HAL_SYSTICK_Config>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	e00e      	b.n	8000e34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2b0f      	cmp	r3, #15
 8000e1a:	d80a      	bhi.n	8000e32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	6879      	ldr	r1, [r7, #4]
 8000e20:	f04f 30ff 	mov.w	r0, #4294967295
 8000e24:	f000 f911 	bl	800104a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e28:	4a06      	ldr	r2, [pc, #24]	; (8000e44 <HAL_InitTick+0x5c>)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	e000      	b.n	8000e34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20000000 	.word	0x20000000
 8000e40:	20000008 	.word	0x20000008
 8000e44:	20000004 	.word	0x20000004

08000e48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e4c:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <HAL_IncTick+0x20>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	461a      	mov	r2, r3
 8000e52:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <HAL_IncTick+0x24>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4413      	add	r3, r2
 8000e58:	4a04      	ldr	r2, [pc, #16]	; (8000e6c <HAL_IncTick+0x24>)
 8000e5a:	6013      	str	r3, [r2, #0]
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	20000008 	.word	0x20000008
 8000e6c:	20000180 	.word	0x20000180

08000e70 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  return uwTick;  
 8000e74:	4b03      	ldr	r3, [pc, #12]	; (8000e84 <HAL_GetTick+0x14>)
 8000e76:	681b      	ldr	r3, [r3, #0]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	20000180 	.word	0x20000180

08000e88 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e90:	f7ff ffee 	bl	8000e70 <HAL_GetTick>
 8000e94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ea0:	d005      	beq.n	8000eae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ea2:	4b0a      	ldr	r3, [pc, #40]	; (8000ecc <HAL_Delay+0x44>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	4413      	add	r3, r2
 8000eac:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000eae:	bf00      	nop
 8000eb0:	f7ff ffde 	bl	8000e70 <HAL_GetTick>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	68fa      	ldr	r2, [r7, #12]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d8f7      	bhi.n	8000eb0 <HAL_Delay+0x28>
  {
  }
}
 8000ec0:	bf00      	nop
 8000ec2:	bf00      	nop
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000008 	.word	0x20000008

08000ed0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ee6:	68ba      	ldr	r2, [r7, #8]
 8000ee8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eec:	4013      	ands	r3, r2
 8000eee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ef8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f02:	4a04      	ldr	r2, [pc, #16]	; (8000f14 <__NVIC_SetPriorityGrouping+0x44>)
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	60d3      	str	r3, [r2, #12]
}
 8000f08:	bf00      	nop
 8000f0a:	3714      	adds	r7, #20
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f1c:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <__NVIC_GetPriorityGrouping+0x18>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	0a1b      	lsrs	r3, r3, #8
 8000f22:	f003 0307 	and.w	r3, r3, #7
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	6039      	str	r1, [r7, #0]
 8000f3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	db0a      	blt.n	8000f5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	490c      	ldr	r1, [pc, #48]	; (8000f80 <__NVIC_SetPriority+0x4c>)
 8000f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f52:	0112      	lsls	r2, r2, #4
 8000f54:	b2d2      	uxtb	r2, r2
 8000f56:	440b      	add	r3, r1
 8000f58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f5c:	e00a      	b.n	8000f74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	4908      	ldr	r1, [pc, #32]	; (8000f84 <__NVIC_SetPriority+0x50>)
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	f003 030f 	and.w	r3, r3, #15
 8000f6a:	3b04      	subs	r3, #4
 8000f6c:	0112      	lsls	r2, r2, #4
 8000f6e:	b2d2      	uxtb	r2, r2
 8000f70:	440b      	add	r3, r1
 8000f72:	761a      	strb	r2, [r3, #24]
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000e100 	.word	0xe000e100
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b089      	sub	sp, #36	; 0x24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	f1c3 0307 	rsb	r3, r3, #7
 8000fa2:	2b04      	cmp	r3, #4
 8000fa4:	bf28      	it	cs
 8000fa6:	2304      	movcs	r3, #4
 8000fa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	3304      	adds	r3, #4
 8000fae:	2b06      	cmp	r3, #6
 8000fb0:	d902      	bls.n	8000fb8 <NVIC_EncodePriority+0x30>
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3b03      	subs	r3, #3
 8000fb6:	e000      	b.n	8000fba <NVIC_EncodePriority+0x32>
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43da      	mvns	r2, r3
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	401a      	ands	r2, r3
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fda:	43d9      	mvns	r1, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe0:	4313      	orrs	r3, r2
         );
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3724      	adds	r7, #36	; 0x24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
	...

08000ff0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001000:	d301      	bcc.n	8001006 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001002:	2301      	movs	r3, #1
 8001004:	e00f      	b.n	8001026 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001006:	4a0a      	ldr	r2, [pc, #40]	; (8001030 <SysTick_Config+0x40>)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3b01      	subs	r3, #1
 800100c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800100e:	210f      	movs	r1, #15
 8001010:	f04f 30ff 	mov.w	r0, #4294967295
 8001014:	f7ff ff8e 	bl	8000f34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <SysTick_Config+0x40>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800101e:	4b04      	ldr	r3, [pc, #16]	; (8001030 <SysTick_Config+0x40>)
 8001020:	2207      	movs	r2, #7
 8001022:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	e000e010 	.word	0xe000e010

08001034 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f7ff ff47 	bl	8000ed0 <__NVIC_SetPriorityGrouping>
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b086      	sub	sp, #24
 800104e:	af00      	add	r7, sp, #0
 8001050:	4603      	mov	r3, r0
 8001052:	60b9      	str	r1, [r7, #8]
 8001054:	607a      	str	r2, [r7, #4]
 8001056:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800105c:	f7ff ff5c 	bl	8000f18 <__NVIC_GetPriorityGrouping>
 8001060:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	68b9      	ldr	r1, [r7, #8]
 8001066:	6978      	ldr	r0, [r7, #20]
 8001068:	f7ff ff8e 	bl	8000f88 <NVIC_EncodePriority>
 800106c:	4602      	mov	r2, r0
 800106e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001072:	4611      	mov	r1, r2
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ff5d 	bl	8000f34 <__NVIC_SetPriority>
}
 800107a:	bf00      	nop
 800107c:	3718      	adds	r7, #24
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b082      	sub	sp, #8
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f7ff ffb0 	bl	8000ff0 <SysTick_Config>
 8001090:	4603      	mov	r3, r0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800109c:	b480      	push	{r7}
 800109e:	b087      	sub	sp, #28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010aa:	e14e      	b.n	800134a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	2101      	movs	r1, #1
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	fa01 f303 	lsl.w	r3, r1, r3
 80010b8:	4013      	ands	r3, r2
 80010ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	f000 8140 	beq.w	8001344 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f003 0303 	and.w	r3, r3, #3
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d005      	beq.n	80010dc <HAL_GPIO_Init+0x40>
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 0303 	and.w	r3, r3, #3
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d130      	bne.n	800113e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	2203      	movs	r2, #3
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	4013      	ands	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	68da      	ldr	r2, [r3, #12]
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	4313      	orrs	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001112:	2201      	movs	r2, #1
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43db      	mvns	r3, r3
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	4013      	ands	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	091b      	lsrs	r3, r3, #4
 8001128:	f003 0201 	and.w	r2, r3, #1
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f003 0303 	and.w	r3, r3, #3
 8001146:	2b03      	cmp	r3, #3
 8001148:	d017      	beq.n	800117a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	2203      	movs	r2, #3
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	4013      	ands	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	689a      	ldr	r2, [r3, #8]
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	4313      	orrs	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f003 0303 	and.w	r3, r3, #3
 8001182:	2b02      	cmp	r3, #2
 8001184:	d123      	bne.n	80011ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	08da      	lsrs	r2, r3, #3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	3208      	adds	r2, #8
 800118e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001192:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	220f      	movs	r2, #15
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43db      	mvns	r3, r3
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	4013      	ands	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	691a      	ldr	r2, [r3, #16]
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	f003 0307 	and.w	r3, r3, #7
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	4313      	orrs	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	08da      	lsrs	r2, r3, #3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3208      	adds	r2, #8
 80011c8:	6939      	ldr	r1, [r7, #16]
 80011ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	2203      	movs	r2, #3
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	43db      	mvns	r3, r3
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	4013      	ands	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f003 0203 	and.w	r2, r3, #3
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800120a:	2b00      	cmp	r3, #0
 800120c:	f000 809a 	beq.w	8001344 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001210:	4b55      	ldr	r3, [pc, #340]	; (8001368 <HAL_GPIO_Init+0x2cc>)
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	4a54      	ldr	r2, [pc, #336]	; (8001368 <HAL_GPIO_Init+0x2cc>)
 8001216:	f043 0301 	orr.w	r3, r3, #1
 800121a:	6193      	str	r3, [r2, #24]
 800121c:	4b52      	ldr	r3, [pc, #328]	; (8001368 <HAL_GPIO_Init+0x2cc>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	60bb      	str	r3, [r7, #8]
 8001226:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001228:	4a50      	ldr	r2, [pc, #320]	; (800136c <HAL_GPIO_Init+0x2d0>)
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	089b      	lsrs	r3, r3, #2
 800122e:	3302      	adds	r3, #2
 8001230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001234:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	f003 0303 	and.w	r3, r3, #3
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	220f      	movs	r2, #15
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	43db      	mvns	r3, r3
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	4013      	ands	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001252:	d013      	beq.n	800127c <HAL_GPIO_Init+0x1e0>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4a46      	ldr	r2, [pc, #280]	; (8001370 <HAL_GPIO_Init+0x2d4>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d00d      	beq.n	8001278 <HAL_GPIO_Init+0x1dc>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4a45      	ldr	r2, [pc, #276]	; (8001374 <HAL_GPIO_Init+0x2d8>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d007      	beq.n	8001274 <HAL_GPIO_Init+0x1d8>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4a44      	ldr	r2, [pc, #272]	; (8001378 <HAL_GPIO_Init+0x2dc>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d101      	bne.n	8001270 <HAL_GPIO_Init+0x1d4>
 800126c:	2303      	movs	r3, #3
 800126e:	e006      	b.n	800127e <HAL_GPIO_Init+0x1e2>
 8001270:	2305      	movs	r3, #5
 8001272:	e004      	b.n	800127e <HAL_GPIO_Init+0x1e2>
 8001274:	2302      	movs	r3, #2
 8001276:	e002      	b.n	800127e <HAL_GPIO_Init+0x1e2>
 8001278:	2301      	movs	r3, #1
 800127a:	e000      	b.n	800127e <HAL_GPIO_Init+0x1e2>
 800127c:	2300      	movs	r3, #0
 800127e:	697a      	ldr	r2, [r7, #20]
 8001280:	f002 0203 	and.w	r2, r2, #3
 8001284:	0092      	lsls	r2, r2, #2
 8001286:	4093      	lsls	r3, r2
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	4313      	orrs	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800128e:	4937      	ldr	r1, [pc, #220]	; (800136c <HAL_GPIO_Init+0x2d0>)
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	089b      	lsrs	r3, r3, #2
 8001294:	3302      	adds	r3, #2
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800129c:	4b37      	ldr	r3, [pc, #220]	; (800137c <HAL_GPIO_Init+0x2e0>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	43db      	mvns	r3, r3
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	4013      	ands	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d003      	beq.n	80012c0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	4313      	orrs	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012c0:	4a2e      	ldr	r2, [pc, #184]	; (800137c <HAL_GPIO_Init+0x2e0>)
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012c6:	4b2d      	ldr	r3, [pc, #180]	; (800137c <HAL_GPIO_Init+0x2e0>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	43db      	mvns	r3, r3
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	4013      	ands	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012ea:	4a24      	ldr	r2, [pc, #144]	; (800137c <HAL_GPIO_Init+0x2e0>)
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012f0:	4b22      	ldr	r3, [pc, #136]	; (800137c <HAL_GPIO_Init+0x2e0>)
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	43db      	mvns	r3, r3
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	4013      	ands	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d003      	beq.n	8001314 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	4313      	orrs	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001314:	4a19      	ldr	r2, [pc, #100]	; (800137c <HAL_GPIO_Init+0x2e0>)
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800131a:	4b18      	ldr	r3, [pc, #96]	; (800137c <HAL_GPIO_Init+0x2e0>)
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	43db      	mvns	r3, r3
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	4013      	ands	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4313      	orrs	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800133e:	4a0f      	ldr	r2, [pc, #60]	; (800137c <HAL_GPIO_Init+0x2e0>)
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	3301      	adds	r3, #1
 8001348:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	fa22 f303 	lsr.w	r3, r2, r3
 8001354:	2b00      	cmp	r3, #0
 8001356:	f47f aea9 	bne.w	80010ac <HAL_GPIO_Init+0x10>
  }
}
 800135a:	bf00      	nop
 800135c:	bf00      	nop
 800135e:	371c      	adds	r7, #28
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	40021000 	.word	0x40021000
 800136c:	40010000 	.word	0x40010000
 8001370:	48000400 	.word	0x48000400
 8001374:	48000800 	.word	0x48000800
 8001378:	48000c00 	.word	0x48000c00
 800137c:	40010400 	.word	0x40010400

08001380 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	460b      	mov	r3, r1
 800138a:	807b      	strh	r3, [r7, #2]
 800138c:	4613      	mov	r3, r2
 800138e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001390:	787b      	ldrb	r3, [r7, #1]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d003      	beq.n	800139e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001396:	887a      	ldrh	r2, [r7, #2]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800139c:	e002      	b.n	80013a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800139e:	887a      	ldrh	r2, [r7, #2]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d102      	bne.n	80013ca <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	f000 bef4 	b.w	80021b2 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	f000 816a 	beq.w	80016ae <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80013da:	4bb3      	ldr	r3, [pc, #716]	; (80016a8 <HAL_RCC_OscConfig+0x2f8>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f003 030c 	and.w	r3, r3, #12
 80013e2:	2b04      	cmp	r3, #4
 80013e4:	d00c      	beq.n	8001400 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013e6:	4bb0      	ldr	r3, [pc, #704]	; (80016a8 <HAL_RCC_OscConfig+0x2f8>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f003 030c 	and.w	r3, r3, #12
 80013ee:	2b08      	cmp	r3, #8
 80013f0:	d159      	bne.n	80014a6 <HAL_RCC_OscConfig+0xf6>
 80013f2:	4bad      	ldr	r3, [pc, #692]	; (80016a8 <HAL_RCC_OscConfig+0x2f8>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013fe:	d152      	bne.n	80014a6 <HAL_RCC_OscConfig+0xf6>
 8001400:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001404:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001408:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800140c:	fa93 f3a3 	rbit	r3, r3
 8001410:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001414:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001418:	fab3 f383 	clz	r3, r3
 800141c:	b2db      	uxtb	r3, r3
 800141e:	095b      	lsrs	r3, r3, #5
 8001420:	b2db      	uxtb	r3, r3
 8001422:	f043 0301 	orr.w	r3, r3, #1
 8001426:	b2db      	uxtb	r3, r3
 8001428:	2b01      	cmp	r3, #1
 800142a:	d102      	bne.n	8001432 <HAL_RCC_OscConfig+0x82>
 800142c:	4b9e      	ldr	r3, [pc, #632]	; (80016a8 <HAL_RCC_OscConfig+0x2f8>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	e015      	b.n	800145e <HAL_RCC_OscConfig+0xae>
 8001432:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001436:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800143a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800143e:	fa93 f3a3 	rbit	r3, r3
 8001442:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001446:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800144a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800144e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001452:	fa93 f3a3 	rbit	r3, r3
 8001456:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800145a:	4b93      	ldr	r3, [pc, #588]	; (80016a8 <HAL_RCC_OscConfig+0x2f8>)
 800145c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001462:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001466:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800146a:	fa92 f2a2 	rbit	r2, r2
 800146e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001472:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001476:	fab2 f282 	clz	r2, r2
 800147a:	b2d2      	uxtb	r2, r2
 800147c:	f042 0220 	orr.w	r2, r2, #32
 8001480:	b2d2      	uxtb	r2, r2
 8001482:	f002 021f 	and.w	r2, r2, #31
 8001486:	2101      	movs	r1, #1
 8001488:	fa01 f202 	lsl.w	r2, r1, r2
 800148c:	4013      	ands	r3, r2
 800148e:	2b00      	cmp	r3, #0
 8001490:	f000 810c 	beq.w	80016ac <HAL_RCC_OscConfig+0x2fc>
 8001494:	1d3b      	adds	r3, r7, #4
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	f040 8106 	bne.w	80016ac <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	f000 be86 	b.w	80021b2 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014b0:	d106      	bne.n	80014c0 <HAL_RCC_OscConfig+0x110>
 80014b2:	4b7d      	ldr	r3, [pc, #500]	; (80016a8 <HAL_RCC_OscConfig+0x2f8>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a7c      	ldr	r2, [pc, #496]	; (80016a8 <HAL_RCC_OscConfig+0x2f8>)
 80014b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	e030      	b.n	8001522 <HAL_RCC_OscConfig+0x172>
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d10c      	bne.n	80014e4 <HAL_RCC_OscConfig+0x134>
 80014ca:	4b77      	ldr	r3, [pc, #476]	; (80016a8 <HAL_RCC_OscConfig+0x2f8>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a76      	ldr	r2, [pc, #472]	; (80016a8 <HAL_RCC_OscConfig+0x2f8>)
 80014d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014d4:	6013      	str	r3, [r2, #0]
 80014d6:	4b74      	ldr	r3, [pc, #464]	; (80016a8 <HAL_RCC_OscConfig+0x2f8>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a73      	ldr	r2, [pc, #460]	; (80016a8 <HAL_RCC_OscConfig+0x2f8>)
 80014dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014e0:	6013      	str	r3, [r2, #0]
 80014e2:	e01e      	b.n	8001522 <HAL_RCC_OscConfig+0x172>
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014ee:	d10c      	bne.n	800150a <HAL_RCC_OscConfig+0x15a>
 80014f0:	4b6d      	ldr	r3, [pc, #436]	; (80016a8 <HAL_RCC_OscConfig+0x2f8>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a6c      	ldr	r2, [pc, #432]	; (80016a8 <HAL_RCC_OscConfig+0x2f8>)
 80014f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014fa:	6013      	str	r3, [r2, #0]
 80014fc:	4b6a      	ldr	r3, [pc, #424]	; (80016a8 <HAL_RCC_OscConfig+0x2f8>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a69      	ldr	r2, [pc, #420]	; (80016a8 <HAL_RCC_OscConfig+0x2f8>)
 8001502:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001506:	6013      	str	r3, [r2, #0]
 8001508:	e00b      	b.n	8001522 <HAL_RCC_OscConfig+0x172>
 800150a:	4b67      	ldr	r3, [pc, #412]	; (80016a8 <HAL_RCC_OscConfig+0x2f8>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a66      	ldr	r2, [pc, #408]	; (80016a8 <HAL_RCC_OscConfig+0x2f8>)
 8001510:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001514:	6013      	str	r3, [r2, #0]
 8001516:	4b64      	ldr	r3, [pc, #400]	; (80016a8 <HAL_RCC_OscConfig+0x2f8>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a63      	ldr	r2, [pc, #396]	; (80016a8 <HAL_RCC_OscConfig+0x2f8>)
 800151c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001520:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001522:	4b61      	ldr	r3, [pc, #388]	; (80016a8 <HAL_RCC_OscConfig+0x2f8>)
 8001524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001526:	f023 020f 	bic.w	r2, r3, #15
 800152a:	1d3b      	adds	r3, r7, #4
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	495d      	ldr	r1, [pc, #372]	; (80016a8 <HAL_RCC_OscConfig+0x2f8>)
 8001532:	4313      	orrs	r3, r2
 8001534:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d059      	beq.n	80015f4 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001540:	f7ff fc96 	bl	8000e70 <HAL_GetTick>
 8001544:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001548:	e00a      	b.n	8001560 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800154a:	f7ff fc91 	bl	8000e70 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b64      	cmp	r3, #100	; 0x64
 8001558:	d902      	bls.n	8001560 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	f000 be29 	b.w	80021b2 <HAL_RCC_OscConfig+0xe02>
 8001560:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001564:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001568:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800156c:	fa93 f3a3 	rbit	r3, r3
 8001570:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001574:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001578:	fab3 f383 	clz	r3, r3
 800157c:	b2db      	uxtb	r3, r3
 800157e:	095b      	lsrs	r3, r3, #5
 8001580:	b2db      	uxtb	r3, r3
 8001582:	f043 0301 	orr.w	r3, r3, #1
 8001586:	b2db      	uxtb	r3, r3
 8001588:	2b01      	cmp	r3, #1
 800158a:	d102      	bne.n	8001592 <HAL_RCC_OscConfig+0x1e2>
 800158c:	4b46      	ldr	r3, [pc, #280]	; (80016a8 <HAL_RCC_OscConfig+0x2f8>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	e015      	b.n	80015be <HAL_RCC_OscConfig+0x20e>
 8001592:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001596:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800159a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800159e:	fa93 f3a3 	rbit	r3, r3
 80015a2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80015a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015aa:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80015ae:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80015b2:	fa93 f3a3 	rbit	r3, r3
 80015b6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80015ba:	4b3b      	ldr	r3, [pc, #236]	; (80016a8 <HAL_RCC_OscConfig+0x2f8>)
 80015bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015c2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80015c6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80015ca:	fa92 f2a2 	rbit	r2, r2
 80015ce:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80015d2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80015d6:	fab2 f282 	clz	r2, r2
 80015da:	b2d2      	uxtb	r2, r2
 80015dc:	f042 0220 	orr.w	r2, r2, #32
 80015e0:	b2d2      	uxtb	r2, r2
 80015e2:	f002 021f 	and.w	r2, r2, #31
 80015e6:	2101      	movs	r1, #1
 80015e8:	fa01 f202 	lsl.w	r2, r1, r2
 80015ec:	4013      	ands	r3, r2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d0ab      	beq.n	800154a <HAL_RCC_OscConfig+0x19a>
 80015f2:	e05c      	b.n	80016ae <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f4:	f7ff fc3c 	bl	8000e70 <HAL_GetTick>
 80015f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015fc:	e00a      	b.n	8001614 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015fe:	f7ff fc37 	bl	8000e70 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b64      	cmp	r3, #100	; 0x64
 800160c:	d902      	bls.n	8001614 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	f000 bdcf 	b.w	80021b2 <HAL_RCC_OscConfig+0xe02>
 8001614:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001618:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800161c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001620:	fa93 f3a3 	rbit	r3, r3
 8001624:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001628:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800162c:	fab3 f383 	clz	r3, r3
 8001630:	b2db      	uxtb	r3, r3
 8001632:	095b      	lsrs	r3, r3, #5
 8001634:	b2db      	uxtb	r3, r3
 8001636:	f043 0301 	orr.w	r3, r3, #1
 800163a:	b2db      	uxtb	r3, r3
 800163c:	2b01      	cmp	r3, #1
 800163e:	d102      	bne.n	8001646 <HAL_RCC_OscConfig+0x296>
 8001640:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <HAL_RCC_OscConfig+0x2f8>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	e015      	b.n	8001672 <HAL_RCC_OscConfig+0x2c2>
 8001646:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800164a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800164e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001652:	fa93 f3a3 	rbit	r3, r3
 8001656:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800165a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800165e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001662:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001666:	fa93 f3a3 	rbit	r3, r3
 800166a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800166e:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <HAL_RCC_OscConfig+0x2f8>)
 8001670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001672:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001676:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800167a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800167e:	fa92 f2a2 	rbit	r2, r2
 8001682:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001686:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800168a:	fab2 f282 	clz	r2, r2
 800168e:	b2d2      	uxtb	r2, r2
 8001690:	f042 0220 	orr.w	r2, r2, #32
 8001694:	b2d2      	uxtb	r2, r2
 8001696:	f002 021f 	and.w	r2, r2, #31
 800169a:	2101      	movs	r1, #1
 800169c:	fa01 f202 	lsl.w	r2, r1, r2
 80016a0:	4013      	ands	r3, r2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1ab      	bne.n	80015fe <HAL_RCC_OscConfig+0x24e>
 80016a6:	e002      	b.n	80016ae <HAL_RCC_OscConfig+0x2fe>
 80016a8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ae:	1d3b      	adds	r3, r7, #4
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	f000 816f 	beq.w	800199c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80016be:	4bd0      	ldr	r3, [pc, #832]	; (8001a00 <HAL_RCC_OscConfig+0x650>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f003 030c 	and.w	r3, r3, #12
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d00b      	beq.n	80016e2 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80016ca:	4bcd      	ldr	r3, [pc, #820]	; (8001a00 <HAL_RCC_OscConfig+0x650>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f003 030c 	and.w	r3, r3, #12
 80016d2:	2b08      	cmp	r3, #8
 80016d4:	d16c      	bne.n	80017b0 <HAL_RCC_OscConfig+0x400>
 80016d6:	4bca      	ldr	r3, [pc, #808]	; (8001a00 <HAL_RCC_OscConfig+0x650>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d166      	bne.n	80017b0 <HAL_RCC_OscConfig+0x400>
 80016e2:	2302      	movs	r3, #2
 80016e4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80016ec:	fa93 f3a3 	rbit	r3, r3
 80016f0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80016f4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016f8:	fab3 f383 	clz	r3, r3
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	095b      	lsrs	r3, r3, #5
 8001700:	b2db      	uxtb	r3, r3
 8001702:	f043 0301 	orr.w	r3, r3, #1
 8001706:	b2db      	uxtb	r3, r3
 8001708:	2b01      	cmp	r3, #1
 800170a:	d102      	bne.n	8001712 <HAL_RCC_OscConfig+0x362>
 800170c:	4bbc      	ldr	r3, [pc, #752]	; (8001a00 <HAL_RCC_OscConfig+0x650>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	e013      	b.n	800173a <HAL_RCC_OscConfig+0x38a>
 8001712:	2302      	movs	r3, #2
 8001714:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001718:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800171c:	fa93 f3a3 	rbit	r3, r3
 8001720:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001724:	2302      	movs	r3, #2
 8001726:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800172a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800172e:	fa93 f3a3 	rbit	r3, r3
 8001732:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001736:	4bb2      	ldr	r3, [pc, #712]	; (8001a00 <HAL_RCC_OscConfig+0x650>)
 8001738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173a:	2202      	movs	r2, #2
 800173c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001740:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001744:	fa92 f2a2 	rbit	r2, r2
 8001748:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800174c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001750:	fab2 f282 	clz	r2, r2
 8001754:	b2d2      	uxtb	r2, r2
 8001756:	f042 0220 	orr.w	r2, r2, #32
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	f002 021f 	and.w	r2, r2, #31
 8001760:	2101      	movs	r1, #1
 8001762:	fa01 f202 	lsl.w	r2, r1, r2
 8001766:	4013      	ands	r3, r2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d007      	beq.n	800177c <HAL_RCC_OscConfig+0x3cc>
 800176c:	1d3b      	adds	r3, r7, #4
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d002      	beq.n	800177c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	f000 bd1b 	b.w	80021b2 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800177c:	4ba0      	ldr	r3, [pc, #640]	; (8001a00 <HAL_RCC_OscConfig+0x650>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001784:	1d3b      	adds	r3, r7, #4
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	21f8      	movs	r1, #248	; 0xf8
 800178c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001790:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001794:	fa91 f1a1 	rbit	r1, r1
 8001798:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800179c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80017a0:	fab1 f181 	clz	r1, r1
 80017a4:	b2c9      	uxtb	r1, r1
 80017a6:	408b      	lsls	r3, r1
 80017a8:	4995      	ldr	r1, [pc, #596]	; (8001a00 <HAL_RCC_OscConfig+0x650>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ae:	e0f5      	b.n	800199c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	f000 8085 	beq.w	80018c6 <HAL_RCC_OscConfig+0x516>
 80017bc:	2301      	movs	r3, #1
 80017be:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80017c6:	fa93 f3a3 	rbit	r3, r3
 80017ca:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80017ce:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017d2:	fab3 f383 	clz	r3, r3
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	461a      	mov	r2, r3
 80017e4:	2301      	movs	r3, #1
 80017e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e8:	f7ff fb42 	bl	8000e70 <HAL_GetTick>
 80017ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f0:	e00a      	b.n	8001808 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017f2:	f7ff fb3d 	bl	8000e70 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d902      	bls.n	8001808 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	f000 bcd5 	b.w	80021b2 <HAL_RCC_OscConfig+0xe02>
 8001808:	2302      	movs	r3, #2
 800180a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001812:	fa93 f3a3 	rbit	r3, r3
 8001816:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800181a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800181e:	fab3 f383 	clz	r3, r3
 8001822:	b2db      	uxtb	r3, r3
 8001824:	095b      	lsrs	r3, r3, #5
 8001826:	b2db      	uxtb	r3, r3
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b01      	cmp	r3, #1
 8001830:	d102      	bne.n	8001838 <HAL_RCC_OscConfig+0x488>
 8001832:	4b73      	ldr	r3, [pc, #460]	; (8001a00 <HAL_RCC_OscConfig+0x650>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	e013      	b.n	8001860 <HAL_RCC_OscConfig+0x4b0>
 8001838:	2302      	movs	r3, #2
 800183a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001842:	fa93 f3a3 	rbit	r3, r3
 8001846:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800184a:	2302      	movs	r3, #2
 800184c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001850:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001854:	fa93 f3a3 	rbit	r3, r3
 8001858:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800185c:	4b68      	ldr	r3, [pc, #416]	; (8001a00 <HAL_RCC_OscConfig+0x650>)
 800185e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001860:	2202      	movs	r2, #2
 8001862:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001866:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800186a:	fa92 f2a2 	rbit	r2, r2
 800186e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001872:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001876:	fab2 f282 	clz	r2, r2
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	f042 0220 	orr.w	r2, r2, #32
 8001880:	b2d2      	uxtb	r2, r2
 8001882:	f002 021f 	and.w	r2, r2, #31
 8001886:	2101      	movs	r1, #1
 8001888:	fa01 f202 	lsl.w	r2, r1, r2
 800188c:	4013      	ands	r3, r2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d0af      	beq.n	80017f2 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001892:	4b5b      	ldr	r3, [pc, #364]	; (8001a00 <HAL_RCC_OscConfig+0x650>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800189a:	1d3b      	adds	r3, r7, #4
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	695b      	ldr	r3, [r3, #20]
 80018a0:	21f8      	movs	r1, #248	; 0xf8
 80018a2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80018aa:	fa91 f1a1 	rbit	r1, r1
 80018ae:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80018b2:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80018b6:	fab1 f181 	clz	r1, r1
 80018ba:	b2c9      	uxtb	r1, r1
 80018bc:	408b      	lsls	r3, r1
 80018be:	4950      	ldr	r1, [pc, #320]	; (8001a00 <HAL_RCC_OscConfig+0x650>)
 80018c0:	4313      	orrs	r3, r2
 80018c2:	600b      	str	r3, [r1, #0]
 80018c4:	e06a      	b.n	800199c <HAL_RCC_OscConfig+0x5ec>
 80018c6:	2301      	movs	r3, #1
 80018c8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018cc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80018d0:	fa93 f3a3 	rbit	r3, r3
 80018d4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80018d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018dc:	fab3 f383 	clz	r3, r3
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018e6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	461a      	mov	r2, r3
 80018ee:	2300      	movs	r3, #0
 80018f0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f2:	f7ff fabd 	bl	8000e70 <HAL_GetTick>
 80018f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018fa:	e00a      	b.n	8001912 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018fc:	f7ff fab8 	bl	8000e70 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d902      	bls.n	8001912 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	f000 bc50 	b.w	80021b2 <HAL_RCC_OscConfig+0xe02>
 8001912:	2302      	movs	r3, #2
 8001914:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001918:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800191c:	fa93 f3a3 	rbit	r3, r3
 8001920:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001924:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001928:	fab3 f383 	clz	r3, r3
 800192c:	b2db      	uxtb	r3, r3
 800192e:	095b      	lsrs	r3, r3, #5
 8001930:	b2db      	uxtb	r3, r3
 8001932:	f043 0301 	orr.w	r3, r3, #1
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b01      	cmp	r3, #1
 800193a:	d102      	bne.n	8001942 <HAL_RCC_OscConfig+0x592>
 800193c:	4b30      	ldr	r3, [pc, #192]	; (8001a00 <HAL_RCC_OscConfig+0x650>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	e013      	b.n	800196a <HAL_RCC_OscConfig+0x5ba>
 8001942:	2302      	movs	r3, #2
 8001944:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001948:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800194c:	fa93 f3a3 	rbit	r3, r3
 8001950:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001954:	2302      	movs	r3, #2
 8001956:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800195a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800195e:	fa93 f3a3 	rbit	r3, r3
 8001962:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001966:	4b26      	ldr	r3, [pc, #152]	; (8001a00 <HAL_RCC_OscConfig+0x650>)
 8001968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196a:	2202      	movs	r2, #2
 800196c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001970:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001974:	fa92 f2a2 	rbit	r2, r2
 8001978:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800197c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001980:	fab2 f282 	clz	r2, r2
 8001984:	b2d2      	uxtb	r2, r2
 8001986:	f042 0220 	orr.w	r2, r2, #32
 800198a:	b2d2      	uxtb	r2, r2
 800198c:	f002 021f 	and.w	r2, r2, #31
 8001990:	2101      	movs	r1, #1
 8001992:	fa01 f202 	lsl.w	r2, r1, r2
 8001996:	4013      	ands	r3, r2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d1af      	bne.n	80018fc <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800199c:	1d3b      	adds	r3, r7, #4
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0308 	and.w	r3, r3, #8
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f000 80da 	beq.w	8001b60 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019ac:	1d3b      	adds	r3, r7, #4
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d069      	beq.n	8001a8a <HAL_RCC_OscConfig+0x6da>
 80019b6:	2301      	movs	r3, #1
 80019b8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019bc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80019c0:	fa93 f3a3 	rbit	r3, r3
 80019c4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80019c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019cc:	fab3 f383 	clz	r3, r3
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	461a      	mov	r2, r3
 80019d4:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <HAL_RCC_OscConfig+0x654>)
 80019d6:	4413      	add	r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	461a      	mov	r2, r3
 80019dc:	2301      	movs	r3, #1
 80019de:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e0:	f7ff fa46 	bl	8000e70 <HAL_GetTick>
 80019e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019e8:	e00e      	b.n	8001a08 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019ea:	f7ff fa41 	bl	8000e70 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d906      	bls.n	8001a08 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e3d9      	b.n	80021b2 <HAL_RCC_OscConfig+0xe02>
 80019fe:	bf00      	nop
 8001a00:	40021000 	.word	0x40021000
 8001a04:	10908120 	.word	0x10908120
 8001a08:	2302      	movs	r3, #2
 8001a0a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001a12:	fa93 f3a3 	rbit	r3, r3
 8001a16:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001a1a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001a1e:	2202      	movs	r2, #2
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	fa93 f2a3 	rbit	r2, r3
 8001a2c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001a36:	2202      	movs	r2, #2
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	fa93 f2a3 	rbit	r2, r3
 8001a44:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001a48:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a4a:	4ba5      	ldr	r3, [pc, #660]	; (8001ce0 <HAL_RCC_OscConfig+0x930>)
 8001a4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a4e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001a52:	2102      	movs	r1, #2
 8001a54:	6019      	str	r1, [r3, #0]
 8001a56:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	fa93 f1a3 	rbit	r1, r3
 8001a60:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001a64:	6019      	str	r1, [r3, #0]
  return result;
 8001a66:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	fab3 f383 	clz	r3, r3
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	f003 031f 	and.w	r3, r3, #31
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a82:	4013      	ands	r3, r2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d0b0      	beq.n	80019ea <HAL_RCC_OscConfig+0x63a>
 8001a88:	e06a      	b.n	8001b60 <HAL_RCC_OscConfig+0x7b0>
 8001a8a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001a8e:	2201      	movs	r2, #1
 8001a90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a92:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	fa93 f2a3 	rbit	r2, r3
 8001a9c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001aa0:	601a      	str	r2, [r3, #0]
  return result;
 8001aa2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001aa6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aa8:	fab3 f383 	clz	r3, r3
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	461a      	mov	r2, r3
 8001ab0:	4b8c      	ldr	r3, [pc, #560]	; (8001ce4 <HAL_RCC_OscConfig+0x934>)
 8001ab2:	4413      	add	r3, r2
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	2300      	movs	r3, #0
 8001aba:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001abc:	f7ff f9d8 	bl	8000e70 <HAL_GetTick>
 8001ac0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac4:	e009      	b.n	8001ada <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ac6:	f7ff f9d3 	bl	8000e70 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e36b      	b.n	80021b2 <HAL_RCC_OscConfig+0xe02>
 8001ada:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001ade:	2202      	movs	r2, #2
 8001ae0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	fa93 f2a3 	rbit	r2, r3
 8001aec:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001af6:	2202      	movs	r2, #2
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	fa93 f2a3 	rbit	r2, r3
 8001b04:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001b0e:	2202      	movs	r2, #2
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	fa93 f2a3 	rbit	r2, r3
 8001b1c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b20:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b22:	4b6f      	ldr	r3, [pc, #444]	; (8001ce0 <HAL_RCC_OscConfig+0x930>)
 8001b24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b26:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001b2a:	2102      	movs	r1, #2
 8001b2c:	6019      	str	r1, [r3, #0]
 8001b2e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	fa93 f1a3 	rbit	r1, r3
 8001b38:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001b3c:	6019      	str	r1, [r3, #0]
  return result;
 8001b3e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	fab3 f383 	clz	r3, r3
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	f003 031f 	and.w	r3, r3, #31
 8001b54:	2101      	movs	r1, #1
 8001b56:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1b2      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b60:	1d3b      	adds	r3, r7, #4
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0304 	and.w	r3, r3, #4
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f000 8158 	beq.w	8001e20 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b70:	2300      	movs	r3, #0
 8001b72:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b76:	4b5a      	ldr	r3, [pc, #360]	; (8001ce0 <HAL_RCC_OscConfig+0x930>)
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d112      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b82:	4b57      	ldr	r3, [pc, #348]	; (8001ce0 <HAL_RCC_OscConfig+0x930>)
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	4a56      	ldr	r2, [pc, #344]	; (8001ce0 <HAL_RCC_OscConfig+0x930>)
 8001b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b8c:	61d3      	str	r3, [r2, #28]
 8001b8e:	4b54      	ldr	r3, [pc, #336]	; (8001ce0 <HAL_RCC_OscConfig+0x930>)
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001b96:	f107 0308 	add.w	r3, r7, #8
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	f107 0308 	add.w	r3, r7, #8
 8001ba0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba8:	4b4f      	ldr	r3, [pc, #316]	; (8001ce8 <HAL_RCC_OscConfig+0x938>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d11a      	bne.n	8001bea <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bb4:	4b4c      	ldr	r3, [pc, #304]	; (8001ce8 <HAL_RCC_OscConfig+0x938>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a4b      	ldr	r2, [pc, #300]	; (8001ce8 <HAL_RCC_OscConfig+0x938>)
 8001bba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bbe:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bc0:	f7ff f956 	bl	8000e70 <HAL_GetTick>
 8001bc4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc8:	e009      	b.n	8001bde <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bca:	f7ff f951 	bl	8000e70 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b64      	cmp	r3, #100	; 0x64
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e2e9      	b.n	80021b2 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bde:	4b42      	ldr	r3, [pc, #264]	; (8001ce8 <HAL_RCC_OscConfig+0x938>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d0ef      	beq.n	8001bca <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bea:	1d3b      	adds	r3, r7, #4
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d106      	bne.n	8001c02 <HAL_RCC_OscConfig+0x852>
 8001bf4:	4b3a      	ldr	r3, [pc, #232]	; (8001ce0 <HAL_RCC_OscConfig+0x930>)
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	4a39      	ldr	r2, [pc, #228]	; (8001ce0 <HAL_RCC_OscConfig+0x930>)
 8001bfa:	f043 0301 	orr.w	r3, r3, #1
 8001bfe:	6213      	str	r3, [r2, #32]
 8001c00:	e02f      	b.n	8001c62 <HAL_RCC_OscConfig+0x8b2>
 8001c02:	1d3b      	adds	r3, r7, #4
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d10c      	bne.n	8001c26 <HAL_RCC_OscConfig+0x876>
 8001c0c:	4b34      	ldr	r3, [pc, #208]	; (8001ce0 <HAL_RCC_OscConfig+0x930>)
 8001c0e:	6a1b      	ldr	r3, [r3, #32]
 8001c10:	4a33      	ldr	r2, [pc, #204]	; (8001ce0 <HAL_RCC_OscConfig+0x930>)
 8001c12:	f023 0301 	bic.w	r3, r3, #1
 8001c16:	6213      	str	r3, [r2, #32]
 8001c18:	4b31      	ldr	r3, [pc, #196]	; (8001ce0 <HAL_RCC_OscConfig+0x930>)
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	4a30      	ldr	r2, [pc, #192]	; (8001ce0 <HAL_RCC_OscConfig+0x930>)
 8001c1e:	f023 0304 	bic.w	r3, r3, #4
 8001c22:	6213      	str	r3, [r2, #32]
 8001c24:	e01d      	b.n	8001c62 <HAL_RCC_OscConfig+0x8b2>
 8001c26:	1d3b      	adds	r3, r7, #4
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	2b05      	cmp	r3, #5
 8001c2e:	d10c      	bne.n	8001c4a <HAL_RCC_OscConfig+0x89a>
 8001c30:	4b2b      	ldr	r3, [pc, #172]	; (8001ce0 <HAL_RCC_OscConfig+0x930>)
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	4a2a      	ldr	r2, [pc, #168]	; (8001ce0 <HAL_RCC_OscConfig+0x930>)
 8001c36:	f043 0304 	orr.w	r3, r3, #4
 8001c3a:	6213      	str	r3, [r2, #32]
 8001c3c:	4b28      	ldr	r3, [pc, #160]	; (8001ce0 <HAL_RCC_OscConfig+0x930>)
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	4a27      	ldr	r2, [pc, #156]	; (8001ce0 <HAL_RCC_OscConfig+0x930>)
 8001c42:	f043 0301 	orr.w	r3, r3, #1
 8001c46:	6213      	str	r3, [r2, #32]
 8001c48:	e00b      	b.n	8001c62 <HAL_RCC_OscConfig+0x8b2>
 8001c4a:	4b25      	ldr	r3, [pc, #148]	; (8001ce0 <HAL_RCC_OscConfig+0x930>)
 8001c4c:	6a1b      	ldr	r3, [r3, #32]
 8001c4e:	4a24      	ldr	r2, [pc, #144]	; (8001ce0 <HAL_RCC_OscConfig+0x930>)
 8001c50:	f023 0301 	bic.w	r3, r3, #1
 8001c54:	6213      	str	r3, [r2, #32]
 8001c56:	4b22      	ldr	r3, [pc, #136]	; (8001ce0 <HAL_RCC_OscConfig+0x930>)
 8001c58:	6a1b      	ldr	r3, [r3, #32]
 8001c5a:	4a21      	ldr	r2, [pc, #132]	; (8001ce0 <HAL_RCC_OscConfig+0x930>)
 8001c5c:	f023 0304 	bic.w	r3, r3, #4
 8001c60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c62:	1d3b      	adds	r3, r7, #4
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d06b      	beq.n	8001d44 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c6c:	f7ff f900 	bl	8000e70 <HAL_GetTick>
 8001c70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c74:	e00b      	b.n	8001c8e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c76:	f7ff f8fb 	bl	8000e70 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e291      	b.n	80021b2 <HAL_RCC_OscConfig+0xe02>
 8001c8e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001c92:	2202      	movs	r2, #2
 8001c94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c96:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	fa93 f2a3 	rbit	r2, r3
 8001ca0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001caa:	2202      	movs	r2, #2
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	fa93 f2a3 	rbit	r2, r3
 8001cb8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001cbc:	601a      	str	r2, [r3, #0]
  return result;
 8001cbe:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001cc2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cc4:	fab3 f383 	clz	r3, r3
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	095b      	lsrs	r3, r3, #5
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	f043 0302 	orr.w	r3, r3, #2
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d109      	bne.n	8001cec <HAL_RCC_OscConfig+0x93c>
 8001cd8:	4b01      	ldr	r3, [pc, #4]	; (8001ce0 <HAL_RCC_OscConfig+0x930>)
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	e014      	b.n	8001d08 <HAL_RCC_OscConfig+0x958>
 8001cde:	bf00      	nop
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	10908120 	.word	0x10908120
 8001ce8:	40007000 	.word	0x40007000
 8001cec:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001cf0:	2202      	movs	r2, #2
 8001cf2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	fa93 f2a3 	rbit	r2, r3
 8001cfe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	4bbb      	ldr	r3, [pc, #748]	; (8001ff4 <HAL_RCC_OscConfig+0xc44>)
 8001d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d08:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001d0c:	2102      	movs	r1, #2
 8001d0e:	6011      	str	r1, [r2, #0]
 8001d10:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001d14:	6812      	ldr	r2, [r2, #0]
 8001d16:	fa92 f1a2 	rbit	r1, r2
 8001d1a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001d1e:	6011      	str	r1, [r2, #0]
  return result;
 8001d20:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001d24:	6812      	ldr	r2, [r2, #0]
 8001d26:	fab2 f282 	clz	r2, r2
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	f002 021f 	and.w	r2, r2, #31
 8001d36:	2101      	movs	r1, #1
 8001d38:	fa01 f202 	lsl.w	r2, r1, r2
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d099      	beq.n	8001c76 <HAL_RCC_OscConfig+0x8c6>
 8001d42:	e063      	b.n	8001e0c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d44:	f7ff f894 	bl	8000e70 <HAL_GetTick>
 8001d48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d4c:	e00b      	b.n	8001d66 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d4e:	f7ff f88f 	bl	8000e70 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e225      	b.n	80021b2 <HAL_RCC_OscConfig+0xe02>
 8001d66:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	fa93 f2a3 	rbit	r2, r3
 8001d78:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001d82:	2202      	movs	r2, #2
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	fa93 f2a3 	rbit	r2, r3
 8001d90:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001d94:	601a      	str	r2, [r3, #0]
  return result;
 8001d96:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001d9a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d9c:	fab3 f383 	clz	r3, r3
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	095b      	lsrs	r3, r3, #5
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	f043 0302 	orr.w	r3, r3, #2
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d102      	bne.n	8001db6 <HAL_RCC_OscConfig+0xa06>
 8001db0:	4b90      	ldr	r3, [pc, #576]	; (8001ff4 <HAL_RCC_OscConfig+0xc44>)
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	e00d      	b.n	8001dd2 <HAL_RCC_OscConfig+0xa22>
 8001db6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001dba:	2202      	movs	r2, #2
 8001dbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbe:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	fa93 f2a3 	rbit	r2, r3
 8001dc8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	4b89      	ldr	r3, [pc, #548]	; (8001ff4 <HAL_RCC_OscConfig+0xc44>)
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001dd6:	2102      	movs	r1, #2
 8001dd8:	6011      	str	r1, [r2, #0]
 8001dda:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001dde:	6812      	ldr	r2, [r2, #0]
 8001de0:	fa92 f1a2 	rbit	r1, r2
 8001de4:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001de8:	6011      	str	r1, [r2, #0]
  return result;
 8001dea:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001dee:	6812      	ldr	r2, [r2, #0]
 8001df0:	fab2 f282 	clz	r2, r2
 8001df4:	b2d2      	uxtb	r2, r2
 8001df6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	f002 021f 	and.w	r2, r2, #31
 8001e00:	2101      	movs	r1, #1
 8001e02:	fa01 f202 	lsl.w	r2, r1, r2
 8001e06:	4013      	ands	r3, r2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1a0      	bne.n	8001d4e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e0c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d105      	bne.n	8001e20 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e14:	4b77      	ldr	r3, [pc, #476]	; (8001ff4 <HAL_RCC_OscConfig+0xc44>)
 8001e16:	69db      	ldr	r3, [r3, #28]
 8001e18:	4a76      	ldr	r2, [pc, #472]	; (8001ff4 <HAL_RCC_OscConfig+0xc44>)
 8001e1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e1e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e20:	1d3b      	adds	r3, r7, #4
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f000 81c2 	beq.w	80021b0 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e2c:	4b71      	ldr	r3, [pc, #452]	; (8001ff4 <HAL_RCC_OscConfig+0xc44>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f003 030c 	and.w	r3, r3, #12
 8001e34:	2b08      	cmp	r3, #8
 8001e36:	f000 819c 	beq.w	8002172 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e3a:	1d3b      	adds	r3, r7, #4
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	69db      	ldr	r3, [r3, #28]
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	f040 8114 	bne.w	800206e <HAL_RCC_OscConfig+0xcbe>
 8001e46:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001e4a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e50:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	fa93 f2a3 	rbit	r2, r3
 8001e5a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001e5e:	601a      	str	r2, [r3, #0]
  return result;
 8001e60:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001e64:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e66:	fab3 f383 	clz	r3, r3
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e70:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	461a      	mov	r2, r3
 8001e78:	2300      	movs	r3, #0
 8001e7a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7c:	f7fe fff8 	bl	8000e70 <HAL_GetTick>
 8001e80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e84:	e009      	b.n	8001e9a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e86:	f7fe fff3 	bl	8000e70 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e18b      	b.n	80021b2 <HAL_RCC_OscConfig+0xe02>
 8001e9a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001e9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ea2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	fa93 f2a3 	rbit	r2, r3
 8001eae:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001eb2:	601a      	str	r2, [r3, #0]
  return result;
 8001eb4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001eb8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eba:	fab3 f383 	clz	r3, r3
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	095b      	lsrs	r3, r3, #5
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d102      	bne.n	8001ed4 <HAL_RCC_OscConfig+0xb24>
 8001ece:	4b49      	ldr	r3, [pc, #292]	; (8001ff4 <HAL_RCC_OscConfig+0xc44>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	e01b      	b.n	8001f0c <HAL_RCC_OscConfig+0xb5c>
 8001ed4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001ed8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001edc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ede:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	fa93 f2a3 	rbit	r2, r3
 8001ee8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001ef2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	fa93 f2a3 	rbit	r2, r3
 8001f02:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	4b3a      	ldr	r3, [pc, #232]	; (8001ff4 <HAL_RCC_OscConfig+0xc44>)
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001f10:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f14:	6011      	str	r1, [r2, #0]
 8001f16:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001f1a:	6812      	ldr	r2, [r2, #0]
 8001f1c:	fa92 f1a2 	rbit	r1, r2
 8001f20:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001f24:	6011      	str	r1, [r2, #0]
  return result;
 8001f26:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001f2a:	6812      	ldr	r2, [r2, #0]
 8001f2c:	fab2 f282 	clz	r2, r2
 8001f30:	b2d2      	uxtb	r2, r2
 8001f32:	f042 0220 	orr.w	r2, r2, #32
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	f002 021f 	and.w	r2, r2, #31
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f42:	4013      	ands	r3, r2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d19e      	bne.n	8001e86 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f48:	4b2a      	ldr	r3, [pc, #168]	; (8001ff4 <HAL_RCC_OscConfig+0xc44>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f50:	1d3b      	adds	r3, r7, #4
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001f56:	1d3b      	adds	r3, r7, #4
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	430b      	orrs	r3, r1
 8001f5e:	4925      	ldr	r1, [pc, #148]	; (8001ff4 <HAL_RCC_OscConfig+0xc44>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	604b      	str	r3, [r1, #4]
 8001f64:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	fa93 f2a3 	rbit	r2, r3
 8001f78:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f7c:	601a      	str	r2, [r3, #0]
  return result;
 8001f7e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f82:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f84:	fab3 f383 	clz	r3, r3
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f8e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	461a      	mov	r2, r3
 8001f96:	2301      	movs	r3, #1
 8001f98:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9a:	f7fe ff69 	bl	8000e70 <HAL_GetTick>
 8001f9e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fa2:	e009      	b.n	8001fb8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fa4:	f7fe ff64 	bl	8000e70 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e0fc      	b.n	80021b2 <HAL_RCC_OscConfig+0xe02>
 8001fb8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001fbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	fa93 f2a3 	rbit	r2, r3
 8001fcc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001fd0:	601a      	str	r2, [r3, #0]
  return result;
 8001fd2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001fd6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fd8:	fab3 f383 	clz	r3, r3
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	095b      	lsrs	r3, r3, #5
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	f043 0301 	orr.w	r3, r3, #1
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d105      	bne.n	8001ff8 <HAL_RCC_OscConfig+0xc48>
 8001fec:	4b01      	ldr	r3, [pc, #4]	; (8001ff4 <HAL_RCC_OscConfig+0xc44>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	e01e      	b.n	8002030 <HAL_RCC_OscConfig+0xc80>
 8001ff2:	bf00      	nop
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ffc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002000:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002002:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	fa93 f2a3 	rbit	r2, r3
 800200c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002016:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	fa93 f2a3 	rbit	r2, r3
 8002026:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	4b63      	ldr	r3, [pc, #396]	; (80021bc <HAL_RCC_OscConfig+0xe0c>)
 800202e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002030:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002034:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002038:	6011      	str	r1, [r2, #0]
 800203a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800203e:	6812      	ldr	r2, [r2, #0]
 8002040:	fa92 f1a2 	rbit	r1, r2
 8002044:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002048:	6011      	str	r1, [r2, #0]
  return result;
 800204a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800204e:	6812      	ldr	r2, [r2, #0]
 8002050:	fab2 f282 	clz	r2, r2
 8002054:	b2d2      	uxtb	r2, r2
 8002056:	f042 0220 	orr.w	r2, r2, #32
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	f002 021f 	and.w	r2, r2, #31
 8002060:	2101      	movs	r1, #1
 8002062:	fa01 f202 	lsl.w	r2, r1, r2
 8002066:	4013      	ands	r3, r2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d09b      	beq.n	8001fa4 <HAL_RCC_OscConfig+0xbf4>
 800206c:	e0a0      	b.n	80021b0 <HAL_RCC_OscConfig+0xe00>
 800206e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002072:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002076:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002078:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	fa93 f2a3 	rbit	r2, r3
 8002082:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002086:	601a      	str	r2, [r3, #0]
  return result;
 8002088:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800208c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800208e:	fab3 f383 	clz	r3, r3
 8002092:	b2db      	uxtb	r3, r3
 8002094:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002098:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	461a      	mov	r2, r3
 80020a0:	2300      	movs	r3, #0
 80020a2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a4:	f7fe fee4 	bl	8000e70 <HAL_GetTick>
 80020a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ac:	e009      	b.n	80020c2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ae:	f7fe fedf 	bl	8000e70 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e077      	b.n	80021b2 <HAL_RCC_OscConfig+0xe02>
 80020c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	fa93 f2a3 	rbit	r2, r3
 80020d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020da:	601a      	str	r2, [r3, #0]
  return result;
 80020dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020e2:	fab3 f383 	clz	r3, r3
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	095b      	lsrs	r3, r3, #5
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	f043 0301 	orr.w	r3, r3, #1
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d102      	bne.n	80020fc <HAL_RCC_OscConfig+0xd4c>
 80020f6:	4b31      	ldr	r3, [pc, #196]	; (80021bc <HAL_RCC_OscConfig+0xe0c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	e01b      	b.n	8002134 <HAL_RCC_OscConfig+0xd84>
 80020fc:	f107 0320 	add.w	r3, r7, #32
 8002100:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002104:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002106:	f107 0320 	add.w	r3, r7, #32
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	fa93 f2a3 	rbit	r2, r3
 8002110:	f107 031c 	add.w	r3, r7, #28
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	f107 0318 	add.w	r3, r7, #24
 800211a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	f107 0318 	add.w	r3, r7, #24
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	fa93 f2a3 	rbit	r2, r3
 800212a:	f107 0314 	add.w	r3, r7, #20
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	4b22      	ldr	r3, [pc, #136]	; (80021bc <HAL_RCC_OscConfig+0xe0c>)
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	f107 0210 	add.w	r2, r7, #16
 8002138:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800213c:	6011      	str	r1, [r2, #0]
 800213e:	f107 0210 	add.w	r2, r7, #16
 8002142:	6812      	ldr	r2, [r2, #0]
 8002144:	fa92 f1a2 	rbit	r1, r2
 8002148:	f107 020c 	add.w	r2, r7, #12
 800214c:	6011      	str	r1, [r2, #0]
  return result;
 800214e:	f107 020c 	add.w	r2, r7, #12
 8002152:	6812      	ldr	r2, [r2, #0]
 8002154:	fab2 f282 	clz	r2, r2
 8002158:	b2d2      	uxtb	r2, r2
 800215a:	f042 0220 	orr.w	r2, r2, #32
 800215e:	b2d2      	uxtb	r2, r2
 8002160:	f002 021f 	and.w	r2, r2, #31
 8002164:	2101      	movs	r1, #1
 8002166:	fa01 f202 	lsl.w	r2, r1, r2
 800216a:	4013      	ands	r3, r2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d19e      	bne.n	80020ae <HAL_RCC_OscConfig+0xcfe>
 8002170:	e01e      	b.n	80021b0 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002172:	1d3b      	adds	r3, r7, #4
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	69db      	ldr	r3, [r3, #28]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d101      	bne.n	8002180 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e018      	b.n	80021b2 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002180:	4b0e      	ldr	r3, [pc, #56]	; (80021bc <HAL_RCC_OscConfig+0xe0c>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002188:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800218c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002190:	1d3b      	adds	r3, r7, #4
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	429a      	cmp	r2, r3
 8002198:	d108      	bne.n	80021ac <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800219a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800219e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021a2:	1d3b      	adds	r3, r7, #4
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d001      	beq.n	80021b0 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e000      	b.n	80021b2 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40021000 	.word	0x40021000

080021c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b09e      	sub	sp, #120	; 0x78
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d101      	bne.n	80021d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e162      	b.n	800249e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021d8:	4b90      	ldr	r3, [pc, #576]	; (800241c <HAL_RCC_ClockConfig+0x25c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0307 	and.w	r3, r3, #7
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d910      	bls.n	8002208 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021e6:	4b8d      	ldr	r3, [pc, #564]	; (800241c <HAL_RCC_ClockConfig+0x25c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f023 0207 	bic.w	r2, r3, #7
 80021ee:	498b      	ldr	r1, [pc, #556]	; (800241c <HAL_RCC_ClockConfig+0x25c>)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f6:	4b89      	ldr	r3, [pc, #548]	; (800241c <HAL_RCC_ClockConfig+0x25c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	429a      	cmp	r2, r3
 8002202:	d001      	beq.n	8002208 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e14a      	b.n	800249e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d008      	beq.n	8002226 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002214:	4b82      	ldr	r3, [pc, #520]	; (8002420 <HAL_RCC_ClockConfig+0x260>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	497f      	ldr	r1, [pc, #508]	; (8002420 <HAL_RCC_ClockConfig+0x260>)
 8002222:	4313      	orrs	r3, r2
 8002224:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	f000 80dc 	beq.w	80023ec <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d13c      	bne.n	80022b6 <HAL_RCC_ClockConfig+0xf6>
 800223c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002240:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002242:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002244:	fa93 f3a3 	rbit	r3, r3
 8002248:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800224a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800224c:	fab3 f383 	clz	r3, r3
 8002250:	b2db      	uxtb	r3, r3
 8002252:	095b      	lsrs	r3, r3, #5
 8002254:	b2db      	uxtb	r3, r3
 8002256:	f043 0301 	orr.w	r3, r3, #1
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b01      	cmp	r3, #1
 800225e:	d102      	bne.n	8002266 <HAL_RCC_ClockConfig+0xa6>
 8002260:	4b6f      	ldr	r3, [pc, #444]	; (8002420 <HAL_RCC_ClockConfig+0x260>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	e00f      	b.n	8002286 <HAL_RCC_ClockConfig+0xc6>
 8002266:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800226a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800226e:	fa93 f3a3 	rbit	r3, r3
 8002272:	667b      	str	r3, [r7, #100]	; 0x64
 8002274:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002278:	663b      	str	r3, [r7, #96]	; 0x60
 800227a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800227c:	fa93 f3a3 	rbit	r3, r3
 8002280:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002282:	4b67      	ldr	r3, [pc, #412]	; (8002420 <HAL_RCC_ClockConfig+0x260>)
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002286:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800228a:	65ba      	str	r2, [r7, #88]	; 0x58
 800228c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800228e:	fa92 f2a2 	rbit	r2, r2
 8002292:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002294:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002296:	fab2 f282 	clz	r2, r2
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	f042 0220 	orr.w	r2, r2, #32
 80022a0:	b2d2      	uxtb	r2, r2
 80022a2:	f002 021f 	and.w	r2, r2, #31
 80022a6:	2101      	movs	r1, #1
 80022a8:	fa01 f202 	lsl.w	r2, r1, r2
 80022ac:	4013      	ands	r3, r2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d17b      	bne.n	80023aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e0f3      	b.n	800249e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d13c      	bne.n	8002338 <HAL_RCC_ClockConfig+0x178>
 80022be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022c2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022c6:	fa93 f3a3 	rbit	r3, r3
 80022ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80022cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ce:	fab3 f383 	clz	r3, r3
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	095b      	lsrs	r3, r3, #5
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	f043 0301 	orr.w	r3, r3, #1
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d102      	bne.n	80022e8 <HAL_RCC_ClockConfig+0x128>
 80022e2:	4b4f      	ldr	r3, [pc, #316]	; (8002420 <HAL_RCC_ClockConfig+0x260>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	e00f      	b.n	8002308 <HAL_RCC_ClockConfig+0x148>
 80022e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022ec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022f0:	fa93 f3a3 	rbit	r3, r3
 80022f4:	647b      	str	r3, [r7, #68]	; 0x44
 80022f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022fa:	643b      	str	r3, [r7, #64]	; 0x40
 80022fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022fe:	fa93 f3a3 	rbit	r3, r3
 8002302:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002304:	4b46      	ldr	r3, [pc, #280]	; (8002420 <HAL_RCC_ClockConfig+0x260>)
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002308:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800230c:	63ba      	str	r2, [r7, #56]	; 0x38
 800230e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002310:	fa92 f2a2 	rbit	r2, r2
 8002314:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002316:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002318:	fab2 f282 	clz	r2, r2
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	f042 0220 	orr.w	r2, r2, #32
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	f002 021f 	and.w	r2, r2, #31
 8002328:	2101      	movs	r1, #1
 800232a:	fa01 f202 	lsl.w	r2, r1, r2
 800232e:	4013      	ands	r3, r2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d13a      	bne.n	80023aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e0b2      	b.n	800249e <HAL_RCC_ClockConfig+0x2de>
 8002338:	2302      	movs	r3, #2
 800233a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800233e:	fa93 f3a3 	rbit	r3, r3
 8002342:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002346:	fab3 f383 	clz	r3, r3
 800234a:	b2db      	uxtb	r3, r3
 800234c:	095b      	lsrs	r3, r3, #5
 800234e:	b2db      	uxtb	r3, r3
 8002350:	f043 0301 	orr.w	r3, r3, #1
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b01      	cmp	r3, #1
 8002358:	d102      	bne.n	8002360 <HAL_RCC_ClockConfig+0x1a0>
 800235a:	4b31      	ldr	r3, [pc, #196]	; (8002420 <HAL_RCC_ClockConfig+0x260>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	e00d      	b.n	800237c <HAL_RCC_ClockConfig+0x1bc>
 8002360:	2302      	movs	r3, #2
 8002362:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002366:	fa93 f3a3 	rbit	r3, r3
 800236a:	627b      	str	r3, [r7, #36]	; 0x24
 800236c:	2302      	movs	r3, #2
 800236e:	623b      	str	r3, [r7, #32]
 8002370:	6a3b      	ldr	r3, [r7, #32]
 8002372:	fa93 f3a3 	rbit	r3, r3
 8002376:	61fb      	str	r3, [r7, #28]
 8002378:	4b29      	ldr	r3, [pc, #164]	; (8002420 <HAL_RCC_ClockConfig+0x260>)
 800237a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237c:	2202      	movs	r2, #2
 800237e:	61ba      	str	r2, [r7, #24]
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	fa92 f2a2 	rbit	r2, r2
 8002386:	617a      	str	r2, [r7, #20]
  return result;
 8002388:	697a      	ldr	r2, [r7, #20]
 800238a:	fab2 f282 	clz	r2, r2
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	f042 0220 	orr.w	r2, r2, #32
 8002394:	b2d2      	uxtb	r2, r2
 8002396:	f002 021f 	and.w	r2, r2, #31
 800239a:	2101      	movs	r1, #1
 800239c:	fa01 f202 	lsl.w	r2, r1, r2
 80023a0:	4013      	ands	r3, r2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e079      	b.n	800249e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023aa:	4b1d      	ldr	r3, [pc, #116]	; (8002420 <HAL_RCC_ClockConfig+0x260>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f023 0203 	bic.w	r2, r3, #3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	491a      	ldr	r1, [pc, #104]	; (8002420 <HAL_RCC_ClockConfig+0x260>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023bc:	f7fe fd58 	bl	8000e70 <HAL_GetTick>
 80023c0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023c2:	e00a      	b.n	80023da <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023c4:	f7fe fd54 	bl	8000e70 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e061      	b.n	800249e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023da:	4b11      	ldr	r3, [pc, #68]	; (8002420 <HAL_RCC_ClockConfig+0x260>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f003 020c 	and.w	r2, r3, #12
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d1eb      	bne.n	80023c4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023ec:	4b0b      	ldr	r3, [pc, #44]	; (800241c <HAL_RCC_ClockConfig+0x25c>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0307 	and.w	r3, r3, #7
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d214      	bcs.n	8002424 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fa:	4b08      	ldr	r3, [pc, #32]	; (800241c <HAL_RCC_ClockConfig+0x25c>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f023 0207 	bic.w	r2, r3, #7
 8002402:	4906      	ldr	r1, [pc, #24]	; (800241c <HAL_RCC_ClockConfig+0x25c>)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	4313      	orrs	r3, r2
 8002408:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800240a:	4b04      	ldr	r3, [pc, #16]	; (800241c <HAL_RCC_ClockConfig+0x25c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	429a      	cmp	r2, r3
 8002416:	d005      	beq.n	8002424 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e040      	b.n	800249e <HAL_RCC_ClockConfig+0x2de>
 800241c:	40022000 	.word	0x40022000
 8002420:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	2b00      	cmp	r3, #0
 800242e:	d008      	beq.n	8002442 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002430:	4b1d      	ldr	r3, [pc, #116]	; (80024a8 <HAL_RCC_ClockConfig+0x2e8>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	491a      	ldr	r1, [pc, #104]	; (80024a8 <HAL_RCC_ClockConfig+0x2e8>)
 800243e:	4313      	orrs	r3, r2
 8002440:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0308 	and.w	r3, r3, #8
 800244a:	2b00      	cmp	r3, #0
 800244c:	d009      	beq.n	8002462 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800244e:	4b16      	ldr	r3, [pc, #88]	; (80024a8 <HAL_RCC_ClockConfig+0x2e8>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	4912      	ldr	r1, [pc, #72]	; (80024a8 <HAL_RCC_ClockConfig+0x2e8>)
 800245e:	4313      	orrs	r3, r2
 8002460:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002462:	f000 f829 	bl	80024b8 <HAL_RCC_GetSysClockFreq>
 8002466:	4601      	mov	r1, r0
 8002468:	4b0f      	ldr	r3, [pc, #60]	; (80024a8 <HAL_RCC_ClockConfig+0x2e8>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002470:	22f0      	movs	r2, #240	; 0xf0
 8002472:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	fa92 f2a2 	rbit	r2, r2
 800247a:	60fa      	str	r2, [r7, #12]
  return result;
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	fab2 f282 	clz	r2, r2
 8002482:	b2d2      	uxtb	r2, r2
 8002484:	40d3      	lsrs	r3, r2
 8002486:	4a09      	ldr	r2, [pc, #36]	; (80024ac <HAL_RCC_ClockConfig+0x2ec>)
 8002488:	5cd3      	ldrb	r3, [r2, r3]
 800248a:	fa21 f303 	lsr.w	r3, r1, r3
 800248e:	4a08      	ldr	r2, [pc, #32]	; (80024b0 <HAL_RCC_ClockConfig+0x2f0>)
 8002490:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002492:	4b08      	ldr	r3, [pc, #32]	; (80024b4 <HAL_RCC_ClockConfig+0x2f4>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f7fe fca6 	bl	8000de8 <HAL_InitTick>
  
  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3778      	adds	r7, #120	; 0x78
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40021000 	.word	0x40021000
 80024ac:	08004c68 	.word	0x08004c68
 80024b0:	20000000 	.word	0x20000000
 80024b4:	20000004 	.word	0x20000004

080024b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b08b      	sub	sp, #44	; 0x2c
 80024bc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024be:	2300      	movs	r3, #0
 80024c0:	61fb      	str	r3, [r7, #28]
 80024c2:	2300      	movs	r3, #0
 80024c4:	61bb      	str	r3, [r7, #24]
 80024c6:	2300      	movs	r3, #0
 80024c8:	627b      	str	r3, [r7, #36]	; 0x24
 80024ca:	2300      	movs	r3, #0
 80024cc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80024ce:	2300      	movs	r3, #0
 80024d0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80024d2:	4b29      	ldr	r3, [pc, #164]	; (8002578 <HAL_RCC_GetSysClockFreq+0xc0>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	f003 030c 	and.w	r3, r3, #12
 80024de:	2b04      	cmp	r3, #4
 80024e0:	d002      	beq.n	80024e8 <HAL_RCC_GetSysClockFreq+0x30>
 80024e2:	2b08      	cmp	r3, #8
 80024e4:	d003      	beq.n	80024ee <HAL_RCC_GetSysClockFreq+0x36>
 80024e6:	e03c      	b.n	8002562 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024e8:	4b24      	ldr	r3, [pc, #144]	; (800257c <HAL_RCC_GetSysClockFreq+0xc4>)
 80024ea:	623b      	str	r3, [r7, #32]
      break;
 80024ec:	e03c      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80024f4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80024f8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fa:	68ba      	ldr	r2, [r7, #8]
 80024fc:	fa92 f2a2 	rbit	r2, r2
 8002500:	607a      	str	r2, [r7, #4]
  return result;
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	fab2 f282 	clz	r2, r2
 8002508:	b2d2      	uxtb	r2, r2
 800250a:	40d3      	lsrs	r3, r2
 800250c:	4a1c      	ldr	r2, [pc, #112]	; (8002580 <HAL_RCC_GetSysClockFreq+0xc8>)
 800250e:	5cd3      	ldrb	r3, [r2, r3]
 8002510:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002512:	4b19      	ldr	r3, [pc, #100]	; (8002578 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002516:	f003 030f 	and.w	r3, r3, #15
 800251a:	220f      	movs	r2, #15
 800251c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	fa92 f2a2 	rbit	r2, r2
 8002524:	60fa      	str	r2, [r7, #12]
  return result;
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	fab2 f282 	clz	r2, r2
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	40d3      	lsrs	r3, r2
 8002530:	4a14      	ldr	r2, [pc, #80]	; (8002584 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002532:	5cd3      	ldrb	r3, [r2, r3]
 8002534:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d008      	beq.n	8002552 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002540:	4a0e      	ldr	r2, [pc, #56]	; (800257c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	fbb2 f2f3 	udiv	r2, r2, r3
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	fb02 f303 	mul.w	r3, r2, r3
 800254e:	627b      	str	r3, [r7, #36]	; 0x24
 8002550:	e004      	b.n	800255c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	4a0c      	ldr	r2, [pc, #48]	; (8002588 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002556:	fb02 f303 	mul.w	r3, r2, r3
 800255a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	623b      	str	r3, [r7, #32]
      break;
 8002560:	e002      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002562:	4b06      	ldr	r3, [pc, #24]	; (800257c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002564:	623b      	str	r3, [r7, #32]
      break;
 8002566:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002568:	6a3b      	ldr	r3, [r7, #32]
}
 800256a:	4618      	mov	r0, r3
 800256c:	372c      	adds	r7, #44	; 0x2c
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	40021000 	.word	0x40021000
 800257c:	007a1200 	.word	0x007a1200
 8002580:	08004c80 	.word	0x08004c80
 8002584:	08004c90 	.word	0x08004c90
 8002588:	003d0900 	.word	0x003d0900

0800258c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002590:	4b03      	ldr	r3, [pc, #12]	; (80025a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002592:	681b      	ldr	r3, [r3, #0]
}
 8002594:	4618      	mov	r0, r3
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	20000000 	.word	0x20000000

080025a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80025aa:	f7ff ffef 	bl	800258c <HAL_RCC_GetHCLKFreq>
 80025ae:	4601      	mov	r1, r0
 80025b0:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80025b8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80025bc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	fa92 f2a2 	rbit	r2, r2
 80025c4:	603a      	str	r2, [r7, #0]
  return result;
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	fab2 f282 	clz	r2, r2
 80025cc:	b2d2      	uxtb	r2, r2
 80025ce:	40d3      	lsrs	r3, r2
 80025d0:	4a04      	ldr	r2, [pc, #16]	; (80025e4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80025d2:	5cd3      	ldrb	r3, [r2, r3]
 80025d4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80025d8:	4618      	mov	r0, r3
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40021000 	.word	0x40021000
 80025e4:	08004c78 	.word	0x08004c78

080025e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80025ee:	f7ff ffcd 	bl	800258c <HAL_RCC_GetHCLKFreq>
 80025f2:	4601      	mov	r1, r0
 80025f4:	4b0b      	ldr	r3, [pc, #44]	; (8002624 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80025fc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002600:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	fa92 f2a2 	rbit	r2, r2
 8002608:	603a      	str	r2, [r7, #0]
  return result;
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	fab2 f282 	clz	r2, r2
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	40d3      	lsrs	r3, r2
 8002614:	4a04      	ldr	r2, [pc, #16]	; (8002628 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002616:	5cd3      	ldrb	r3, [r2, r3]
 8002618:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800261c:	4618      	mov	r0, r3
 800261e:	3708      	adds	r7, #8
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40021000 	.word	0x40021000
 8002628:	08004c78 	.word	0x08004c78

0800262c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b092      	sub	sp, #72	; 0x48
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002634:	2300      	movs	r3, #0
 8002636:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002638:	2300      	movs	r3, #0
 800263a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800263c:	2300      	movs	r3, #0
 800263e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800264a:	2b00      	cmp	r3, #0
 800264c:	f000 80cd 	beq.w	80027ea <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002650:	4b8e      	ldr	r3, [pc, #568]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002652:	69db      	ldr	r3, [r3, #28]
 8002654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10e      	bne.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800265c:	4b8b      	ldr	r3, [pc, #556]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800265e:	69db      	ldr	r3, [r3, #28]
 8002660:	4a8a      	ldr	r2, [pc, #552]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002666:	61d3      	str	r3, [r2, #28]
 8002668:	4b88      	ldr	r3, [pc, #544]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800266a:	69db      	ldr	r3, [r3, #28]
 800266c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002670:	60bb      	str	r3, [r7, #8]
 8002672:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002674:	2301      	movs	r3, #1
 8002676:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800267a:	4b85      	ldr	r3, [pc, #532]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002682:	2b00      	cmp	r3, #0
 8002684:	d118      	bne.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002686:	4b82      	ldr	r3, [pc, #520]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a81      	ldr	r2, [pc, #516]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800268c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002690:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002692:	f7fe fbed 	bl	8000e70 <HAL_GetTick>
 8002696:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002698:	e008      	b.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800269a:	f7fe fbe9 	bl	8000e70 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b64      	cmp	r3, #100	; 0x64
 80026a6:	d901      	bls.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e0ea      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ac:	4b78      	ldr	r3, [pc, #480]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d0f0      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026b8:	4b74      	ldr	r3, [pc, #464]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ba:	6a1b      	ldr	r3, [r3, #32]
 80026bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d07d      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d076      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026d6:	4b6d      	ldr	r3, [pc, #436]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026e4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e8:	fa93 f3a3 	rbit	r3, r3
 80026ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80026ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026f0:	fab3 f383 	clz	r3, r3
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	461a      	mov	r2, r3
 80026f8:	4b66      	ldr	r3, [pc, #408]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026fa:	4413      	add	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	461a      	mov	r2, r3
 8002700:	2301      	movs	r3, #1
 8002702:	6013      	str	r3, [r2, #0]
 8002704:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002708:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800270c:	fa93 f3a3 	rbit	r3, r3
 8002710:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002714:	fab3 f383 	clz	r3, r3
 8002718:	b2db      	uxtb	r3, r3
 800271a:	461a      	mov	r2, r3
 800271c:	4b5d      	ldr	r3, [pc, #372]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800271e:	4413      	add	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	461a      	mov	r2, r3
 8002724:	2300      	movs	r3, #0
 8002726:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002728:	4a58      	ldr	r2, [pc, #352]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800272a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800272c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800272e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	2b00      	cmp	r3, #0
 8002736:	d045      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002738:	f7fe fb9a 	bl	8000e70 <HAL_GetTick>
 800273c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800273e:	e00a      	b.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002740:	f7fe fb96 	bl	8000e70 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	f241 3288 	movw	r2, #5000	; 0x1388
 800274e:	4293      	cmp	r3, r2
 8002750:	d901      	bls.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e095      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8002756:	2302      	movs	r3, #2
 8002758:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275c:	fa93 f3a3 	rbit	r3, r3
 8002760:	627b      	str	r3, [r7, #36]	; 0x24
 8002762:	2302      	movs	r3, #2
 8002764:	623b      	str	r3, [r7, #32]
 8002766:	6a3b      	ldr	r3, [r7, #32]
 8002768:	fa93 f3a3 	rbit	r3, r3
 800276c:	61fb      	str	r3, [r7, #28]
  return result;
 800276e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002770:	fab3 f383 	clz	r3, r3
 8002774:	b2db      	uxtb	r3, r3
 8002776:	095b      	lsrs	r3, r3, #5
 8002778:	b2db      	uxtb	r3, r3
 800277a:	f043 0302 	orr.w	r3, r3, #2
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d102      	bne.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002784:	4b41      	ldr	r3, [pc, #260]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	e007      	b.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800278a:	2302      	movs	r3, #2
 800278c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	fa93 f3a3 	rbit	r3, r3
 8002794:	617b      	str	r3, [r7, #20]
 8002796:	4b3d      	ldr	r3, [pc, #244]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279a:	2202      	movs	r2, #2
 800279c:	613a      	str	r2, [r7, #16]
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	fa92 f2a2 	rbit	r2, r2
 80027a4:	60fa      	str	r2, [r7, #12]
  return result;
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	fab2 f282 	clz	r2, r2
 80027ac:	b2d2      	uxtb	r2, r2
 80027ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027b2:	b2d2      	uxtb	r2, r2
 80027b4:	f002 021f 	and.w	r2, r2, #31
 80027b8:	2101      	movs	r1, #1
 80027ba:	fa01 f202 	lsl.w	r2, r1, r2
 80027be:	4013      	ands	r3, r2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d0bd      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80027c4:	4b31      	ldr	r3, [pc, #196]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	492e      	ldr	r1, [pc, #184]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80027d6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d105      	bne.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027de:	4b2b      	ldr	r3, [pc, #172]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	4a2a      	ldr	r2, [pc, #168]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027e8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d008      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027f6:	4b25      	ldr	r3, [pc, #148]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	f023 0203 	bic.w	r2, r3, #3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	4922      	ldr	r1, [pc, #136]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002804:	4313      	orrs	r3, r2
 8002806:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0320 	and.w	r3, r3, #32
 8002810:	2b00      	cmp	r3, #0
 8002812:	d008      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002814:	4b1d      	ldr	r3, [pc, #116]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002818:	f023 0210 	bic.w	r2, r3, #16
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	491a      	ldr	r1, [pc, #104]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002822:	4313      	orrs	r3, r2
 8002824:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800282e:	2b00      	cmp	r3, #0
 8002830:	d008      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002832:	4b16      	ldr	r3, [pc, #88]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002836:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	4913      	ldr	r1, [pc, #76]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002840:	4313      	orrs	r3, r2
 8002842:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d008      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002850:	4b0e      	ldr	r3, [pc, #56]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002854:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	490b      	ldr	r1, [pc, #44]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800285e:	4313      	orrs	r3, r2
 8002860:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d008      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800286e:	4b07      	ldr	r3, [pc, #28]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	4904      	ldr	r1, [pc, #16]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800287c:	4313      	orrs	r3, r2
 800287e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3748      	adds	r7, #72	; 0x48
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	40021000 	.word	0x40021000
 8002890:	40007000 	.word	0x40007000
 8002894:	10908100 	.word	0x10908100

08002898 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e049      	b.n	800293e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d106      	bne.n	80028c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7fe f8d8 	bl	8000a74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2202      	movs	r2, #2
 80028c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3304      	adds	r3, #4
 80028d4:	4619      	mov	r1, r3
 80028d6:	4610      	mov	r0, r2
 80028d8:	f000 fa36 	bl	8002d48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
	...

08002948 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d109      	bne.n	800296c <HAL_TIM_PWM_Start+0x24>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b01      	cmp	r3, #1
 8002962:	bf14      	ite	ne
 8002964:	2301      	movne	r3, #1
 8002966:	2300      	moveq	r3, #0
 8002968:	b2db      	uxtb	r3, r3
 800296a:	e03c      	b.n	80029e6 <HAL_TIM_PWM_Start+0x9e>
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	2b04      	cmp	r3, #4
 8002970:	d109      	bne.n	8002986 <HAL_TIM_PWM_Start+0x3e>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b01      	cmp	r3, #1
 800297c:	bf14      	ite	ne
 800297e:	2301      	movne	r3, #1
 8002980:	2300      	moveq	r3, #0
 8002982:	b2db      	uxtb	r3, r3
 8002984:	e02f      	b.n	80029e6 <HAL_TIM_PWM_Start+0x9e>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	2b08      	cmp	r3, #8
 800298a:	d109      	bne.n	80029a0 <HAL_TIM_PWM_Start+0x58>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002992:	b2db      	uxtb	r3, r3
 8002994:	2b01      	cmp	r3, #1
 8002996:	bf14      	ite	ne
 8002998:	2301      	movne	r3, #1
 800299a:	2300      	moveq	r3, #0
 800299c:	b2db      	uxtb	r3, r3
 800299e:	e022      	b.n	80029e6 <HAL_TIM_PWM_Start+0x9e>
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	2b0c      	cmp	r3, #12
 80029a4:	d109      	bne.n	80029ba <HAL_TIM_PWM_Start+0x72>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	bf14      	ite	ne
 80029b2:	2301      	movne	r3, #1
 80029b4:	2300      	moveq	r3, #0
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	e015      	b.n	80029e6 <HAL_TIM_PWM_Start+0x9e>
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	2b10      	cmp	r3, #16
 80029be:	d109      	bne.n	80029d4 <HAL_TIM_PWM_Start+0x8c>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	bf14      	ite	ne
 80029cc:	2301      	movne	r3, #1
 80029ce:	2300      	moveq	r3, #0
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	e008      	b.n	80029e6 <HAL_TIM_PWM_Start+0x9e>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b01      	cmp	r3, #1
 80029de:	bf14      	ite	ne
 80029e0:	2301      	movne	r3, #1
 80029e2:	2300      	moveq	r3, #0
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e088      	b.n	8002b00 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d104      	bne.n	80029fe <HAL_TIM_PWM_Start+0xb6>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2202      	movs	r2, #2
 80029f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029fc:	e023      	b.n	8002a46 <HAL_TIM_PWM_Start+0xfe>
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	2b04      	cmp	r3, #4
 8002a02:	d104      	bne.n	8002a0e <HAL_TIM_PWM_Start+0xc6>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2202      	movs	r2, #2
 8002a08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a0c:	e01b      	b.n	8002a46 <HAL_TIM_PWM_Start+0xfe>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	2b08      	cmp	r3, #8
 8002a12:	d104      	bne.n	8002a1e <HAL_TIM_PWM_Start+0xd6>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2202      	movs	r2, #2
 8002a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a1c:	e013      	b.n	8002a46 <HAL_TIM_PWM_Start+0xfe>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2b0c      	cmp	r3, #12
 8002a22:	d104      	bne.n	8002a2e <HAL_TIM_PWM_Start+0xe6>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2202      	movs	r2, #2
 8002a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a2c:	e00b      	b.n	8002a46 <HAL_TIM_PWM_Start+0xfe>
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	2b10      	cmp	r3, #16
 8002a32:	d104      	bne.n	8002a3e <HAL_TIM_PWM_Start+0xf6>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a3c:	e003      	b.n	8002a46 <HAL_TIM_PWM_Start+0xfe>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2202      	movs	r2, #2
 8002a42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	6839      	ldr	r1, [r7, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 fc98 	bl	8003384 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a2b      	ldr	r2, [pc, #172]	; (8002b08 <HAL_TIM_PWM_Start+0x1c0>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d00e      	beq.n	8002a7c <HAL_TIM_PWM_Start+0x134>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a2a      	ldr	r2, [pc, #168]	; (8002b0c <HAL_TIM_PWM_Start+0x1c4>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d009      	beq.n	8002a7c <HAL_TIM_PWM_Start+0x134>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a28      	ldr	r2, [pc, #160]	; (8002b10 <HAL_TIM_PWM_Start+0x1c8>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d004      	beq.n	8002a7c <HAL_TIM_PWM_Start+0x134>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a27      	ldr	r2, [pc, #156]	; (8002b14 <HAL_TIM_PWM_Start+0x1cc>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d101      	bne.n	8002a80 <HAL_TIM_PWM_Start+0x138>
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e000      	b.n	8002a82 <HAL_TIM_PWM_Start+0x13a>
 8002a80:	2300      	movs	r3, #0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d007      	beq.n	8002a96 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a94:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a1b      	ldr	r2, [pc, #108]	; (8002b08 <HAL_TIM_PWM_Start+0x1c0>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d00e      	beq.n	8002abe <HAL_TIM_PWM_Start+0x176>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa8:	d009      	beq.n	8002abe <HAL_TIM_PWM_Start+0x176>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a1a      	ldr	r2, [pc, #104]	; (8002b18 <HAL_TIM_PWM_Start+0x1d0>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d004      	beq.n	8002abe <HAL_TIM_PWM_Start+0x176>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a14      	ldr	r2, [pc, #80]	; (8002b0c <HAL_TIM_PWM_Start+0x1c4>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d115      	bne.n	8002aea <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	4b15      	ldr	r3, [pc, #84]	; (8002b1c <HAL_TIM_PWM_Start+0x1d4>)
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2b06      	cmp	r3, #6
 8002ace:	d015      	beq.n	8002afc <HAL_TIM_PWM_Start+0x1b4>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ad6:	d011      	beq.n	8002afc <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f042 0201 	orr.w	r2, r2, #1
 8002ae6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ae8:	e008      	b.n	8002afc <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f042 0201 	orr.w	r2, r2, #1
 8002af8:	601a      	str	r2, [r3, #0]
 8002afa:	e000      	b.n	8002afe <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002afc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40012c00 	.word	0x40012c00
 8002b0c:	40014000 	.word	0x40014000
 8002b10:	40014400 	.word	0x40014400
 8002b14:	40014800 	.word	0x40014800
 8002b18:	40000400 	.word	0x40000400
 8002b1c:	00010007 	.word	0x00010007

08002b20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d101      	bne.n	8002b3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	e0ff      	b.n	8002d3e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2b14      	cmp	r3, #20
 8002b4a:	f200 80f0 	bhi.w	8002d2e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002b4e:	a201      	add	r2, pc, #4	; (adr r2, 8002b54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b54:	08002ba9 	.word	0x08002ba9
 8002b58:	08002d2f 	.word	0x08002d2f
 8002b5c:	08002d2f 	.word	0x08002d2f
 8002b60:	08002d2f 	.word	0x08002d2f
 8002b64:	08002be9 	.word	0x08002be9
 8002b68:	08002d2f 	.word	0x08002d2f
 8002b6c:	08002d2f 	.word	0x08002d2f
 8002b70:	08002d2f 	.word	0x08002d2f
 8002b74:	08002c2b 	.word	0x08002c2b
 8002b78:	08002d2f 	.word	0x08002d2f
 8002b7c:	08002d2f 	.word	0x08002d2f
 8002b80:	08002d2f 	.word	0x08002d2f
 8002b84:	08002c6b 	.word	0x08002c6b
 8002b88:	08002d2f 	.word	0x08002d2f
 8002b8c:	08002d2f 	.word	0x08002d2f
 8002b90:	08002d2f 	.word	0x08002d2f
 8002b94:	08002cad 	.word	0x08002cad
 8002b98:	08002d2f 	.word	0x08002d2f
 8002b9c:	08002d2f 	.word	0x08002d2f
 8002ba0:	08002d2f 	.word	0x08002d2f
 8002ba4:	08002ced 	.word	0x08002ced
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68b9      	ldr	r1, [r7, #8]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f000 f942 	bl	8002e38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	699a      	ldr	r2, [r3, #24]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f042 0208 	orr.w	r2, r2, #8
 8002bc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	699a      	ldr	r2, [r3, #24]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0204 	bic.w	r2, r2, #4
 8002bd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6999      	ldr	r1, [r3, #24]
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	691a      	ldr	r2, [r3, #16]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	619a      	str	r2, [r3, #24]
      break;
 8002be6:	e0a5      	b.n	8002d34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68b9      	ldr	r1, [r7, #8]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 f9a8 	bl	8002f44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	699a      	ldr	r2, [r3, #24]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	699a      	ldr	r2, [r3, #24]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6999      	ldr	r1, [r3, #24]
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	021a      	lsls	r2, r3, #8
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	430a      	orrs	r2, r1
 8002c26:	619a      	str	r2, [r3, #24]
      break;
 8002c28:	e084      	b.n	8002d34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68b9      	ldr	r1, [r7, #8]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f000 fa07 	bl	8003044 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	69da      	ldr	r2, [r3, #28]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f042 0208 	orr.w	r2, r2, #8
 8002c44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	69da      	ldr	r2, [r3, #28]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0204 	bic.w	r2, r2, #4
 8002c54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	69d9      	ldr	r1, [r3, #28]
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	691a      	ldr	r2, [r3, #16]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	430a      	orrs	r2, r1
 8002c66:	61da      	str	r2, [r3, #28]
      break;
 8002c68:	e064      	b.n	8002d34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68b9      	ldr	r1, [r7, #8]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f000 fa65 	bl	8003140 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	69da      	ldr	r2, [r3, #28]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	69da      	ldr	r2, [r3, #28]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	69d9      	ldr	r1, [r3, #28]
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	021a      	lsls	r2, r3, #8
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	61da      	str	r2, [r3, #28]
      break;
 8002caa:	e043      	b.n	8002d34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68b9      	ldr	r1, [r7, #8]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f000 faa8 	bl	8003208 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f042 0208 	orr.w	r2, r2, #8
 8002cc6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 0204 	bic.w	r2, r2, #4
 8002cd6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	691a      	ldr	r2, [r3, #16]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002cea:	e023      	b.n	8002d34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68b9      	ldr	r1, [r7, #8]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f000 fae6 	bl	80032c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d06:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d16:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	021a      	lsls	r2, r3, #8
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002d2c:	e002      	b.n	8002d34 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	75fb      	strb	r3, [r7, #23]
      break;
 8002d32:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3718      	adds	r7, #24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop

08002d48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a32      	ldr	r2, [pc, #200]	; (8002e24 <TIM_Base_SetConfig+0xdc>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d007      	beq.n	8002d70 <TIM_Base_SetConfig+0x28>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d66:	d003      	beq.n	8002d70 <TIM_Base_SetConfig+0x28>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a2f      	ldr	r2, [pc, #188]	; (8002e28 <TIM_Base_SetConfig+0xe0>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d108      	bne.n	8002d82 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a27      	ldr	r2, [pc, #156]	; (8002e24 <TIM_Base_SetConfig+0xdc>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d013      	beq.n	8002db2 <TIM_Base_SetConfig+0x6a>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d90:	d00f      	beq.n	8002db2 <TIM_Base_SetConfig+0x6a>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a24      	ldr	r2, [pc, #144]	; (8002e28 <TIM_Base_SetConfig+0xe0>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d00b      	beq.n	8002db2 <TIM_Base_SetConfig+0x6a>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a23      	ldr	r2, [pc, #140]	; (8002e2c <TIM_Base_SetConfig+0xe4>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d007      	beq.n	8002db2 <TIM_Base_SetConfig+0x6a>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a22      	ldr	r2, [pc, #136]	; (8002e30 <TIM_Base_SetConfig+0xe8>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d003      	beq.n	8002db2 <TIM_Base_SetConfig+0x6a>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a21      	ldr	r2, [pc, #132]	; (8002e34 <TIM_Base_SetConfig+0xec>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d108      	bne.n	8002dc4 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002db8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a0e      	ldr	r2, [pc, #56]	; (8002e24 <TIM_Base_SetConfig+0xdc>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d00b      	beq.n	8002e08 <TIM_Base_SetConfig+0xc0>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a0e      	ldr	r2, [pc, #56]	; (8002e2c <TIM_Base_SetConfig+0xe4>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d007      	beq.n	8002e08 <TIM_Base_SetConfig+0xc0>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a0d      	ldr	r2, [pc, #52]	; (8002e30 <TIM_Base_SetConfig+0xe8>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d003      	beq.n	8002e08 <TIM_Base_SetConfig+0xc0>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a0c      	ldr	r2, [pc, #48]	; (8002e34 <TIM_Base_SetConfig+0xec>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d103      	bne.n	8002e10 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	691a      	ldr	r2, [r3, #16]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	615a      	str	r2, [r3, #20]
}
 8002e16:	bf00      	nop
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	40012c00 	.word	0x40012c00
 8002e28:	40000400 	.word	0x40000400
 8002e2c:	40014000 	.word	0x40014000
 8002e30:	40014400 	.word	0x40014400
 8002e34:	40014800 	.word	0x40014800

08002e38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b087      	sub	sp, #28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	f023 0201 	bic.w	r2, r3, #1
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f023 0303 	bic.w	r3, r3, #3
 8002e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	f023 0302 	bic.w	r3, r3, #2
 8002e84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a28      	ldr	r2, [pc, #160]	; (8002f34 <TIM_OC1_SetConfig+0xfc>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d00b      	beq.n	8002eb0 <TIM_OC1_SetConfig+0x78>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a27      	ldr	r2, [pc, #156]	; (8002f38 <TIM_OC1_SetConfig+0x100>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d007      	beq.n	8002eb0 <TIM_OC1_SetConfig+0x78>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a26      	ldr	r2, [pc, #152]	; (8002f3c <TIM_OC1_SetConfig+0x104>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d003      	beq.n	8002eb0 <TIM_OC1_SetConfig+0x78>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a25      	ldr	r2, [pc, #148]	; (8002f40 <TIM_OC1_SetConfig+0x108>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d10c      	bne.n	8002eca <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	f023 0308 	bic.w	r3, r3, #8
 8002eb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	697a      	ldr	r2, [r7, #20]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	f023 0304 	bic.w	r3, r3, #4
 8002ec8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a19      	ldr	r2, [pc, #100]	; (8002f34 <TIM_OC1_SetConfig+0xfc>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d00b      	beq.n	8002eea <TIM_OC1_SetConfig+0xb2>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a18      	ldr	r2, [pc, #96]	; (8002f38 <TIM_OC1_SetConfig+0x100>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d007      	beq.n	8002eea <TIM_OC1_SetConfig+0xb2>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a17      	ldr	r2, [pc, #92]	; (8002f3c <TIM_OC1_SetConfig+0x104>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d003      	beq.n	8002eea <TIM_OC1_SetConfig+0xb2>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a16      	ldr	r2, [pc, #88]	; (8002f40 <TIM_OC1_SetConfig+0x108>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d111      	bne.n	8002f0e <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ef0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ef8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	621a      	str	r2, [r3, #32]
}
 8002f28:	bf00      	nop
 8002f2a:	371c      	adds	r7, #28
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr
 8002f34:	40012c00 	.word	0x40012c00
 8002f38:	40014000 	.word	0x40014000
 8002f3c:	40014400 	.word	0x40014400
 8002f40:	40014800 	.word	0x40014800

08002f44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b087      	sub	sp, #28
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	f023 0210 	bic.w	r2, r3, #16
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	021b      	lsls	r3, r3, #8
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	f023 0320 	bic.w	r3, r3, #32
 8002f92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	011b      	lsls	r3, r3, #4
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a24      	ldr	r2, [pc, #144]	; (8003034 <TIM_OC2_SetConfig+0xf0>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d10d      	bne.n	8002fc4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	011b      	lsls	r3, r3, #4
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fc2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a1b      	ldr	r2, [pc, #108]	; (8003034 <TIM_OC2_SetConfig+0xf0>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d00b      	beq.n	8002fe4 <TIM_OC2_SetConfig+0xa0>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a1a      	ldr	r2, [pc, #104]	; (8003038 <TIM_OC2_SetConfig+0xf4>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d007      	beq.n	8002fe4 <TIM_OC2_SetConfig+0xa0>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a19      	ldr	r2, [pc, #100]	; (800303c <TIM_OC2_SetConfig+0xf8>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d003      	beq.n	8002fe4 <TIM_OC2_SetConfig+0xa0>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a18      	ldr	r2, [pc, #96]	; (8003040 <TIM_OC2_SetConfig+0xfc>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d113      	bne.n	800300c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fea:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ff2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	695b      	ldr	r3, [r3, #20]
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	4313      	orrs	r3, r2
 800300a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	621a      	str	r2, [r3, #32]
}
 8003026:	bf00      	nop
 8003028:	371c      	adds	r7, #28
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	40012c00 	.word	0x40012c00
 8003038:	40014000 	.word	0x40014000
 800303c:	40014400 	.word	0x40014400
 8003040:	40014800 	.word	0x40014800

08003044 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003044:	b480      	push	{r7}
 8003046:	b087      	sub	sp, #28
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003076:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f023 0303 	bic.w	r3, r3, #3
 800307e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	4313      	orrs	r3, r2
 8003088:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003090:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	021b      	lsls	r3, r3, #8
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	4313      	orrs	r3, r2
 800309c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a23      	ldr	r2, [pc, #140]	; (8003130 <TIM_OC3_SetConfig+0xec>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d10d      	bne.n	80030c2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	021b      	lsls	r3, r3, #8
 80030b4:	697a      	ldr	r2, [r7, #20]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030c0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a1a      	ldr	r2, [pc, #104]	; (8003130 <TIM_OC3_SetConfig+0xec>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d00b      	beq.n	80030e2 <TIM_OC3_SetConfig+0x9e>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a19      	ldr	r2, [pc, #100]	; (8003134 <TIM_OC3_SetConfig+0xf0>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d007      	beq.n	80030e2 <TIM_OC3_SetConfig+0x9e>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a18      	ldr	r2, [pc, #96]	; (8003138 <TIM_OC3_SetConfig+0xf4>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d003      	beq.n	80030e2 <TIM_OC3_SetConfig+0x9e>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a17      	ldr	r2, [pc, #92]	; (800313c <TIM_OC3_SetConfig+0xf8>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d113      	bne.n	800310a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	011b      	lsls	r3, r3, #4
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	011b      	lsls	r3, r3, #4
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	4313      	orrs	r3, r2
 8003108:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	621a      	str	r2, [r3, #32]
}
 8003124:	bf00      	nop
 8003126:	371c      	adds	r7, #28
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	40012c00 	.word	0x40012c00
 8003134:	40014000 	.word	0x40014000
 8003138:	40014400 	.word	0x40014400
 800313c:	40014800 	.word	0x40014800

08003140 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003140:	b480      	push	{r7}
 8003142:	b087      	sub	sp, #28
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800316e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800317a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	021b      	lsls	r3, r3, #8
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	4313      	orrs	r3, r2
 8003186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800318e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	031b      	lsls	r3, r3, #12
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	4313      	orrs	r3, r2
 800319a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a16      	ldr	r2, [pc, #88]	; (80031f8 <TIM_OC4_SetConfig+0xb8>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d00b      	beq.n	80031bc <TIM_OC4_SetConfig+0x7c>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a15      	ldr	r2, [pc, #84]	; (80031fc <TIM_OC4_SetConfig+0xbc>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d007      	beq.n	80031bc <TIM_OC4_SetConfig+0x7c>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a14      	ldr	r2, [pc, #80]	; (8003200 <TIM_OC4_SetConfig+0xc0>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d003      	beq.n	80031bc <TIM_OC4_SetConfig+0x7c>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a13      	ldr	r2, [pc, #76]	; (8003204 <TIM_OC4_SetConfig+0xc4>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d109      	bne.n	80031d0 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	019b      	lsls	r3, r3, #6
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	621a      	str	r2, [r3, #32]
}
 80031ea:	bf00      	nop
 80031ec:	371c      	adds	r7, #28
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	40012c00 	.word	0x40012c00
 80031fc:	40014000 	.word	0x40014000
 8003200:	40014400 	.word	0x40014400
 8003204:	40014800 	.word	0x40014800

08003208 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003208:	b480      	push	{r7}
 800320a:	b087      	sub	sp, #28
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800322e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800323a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	4313      	orrs	r3, r2
 8003244:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800324c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	041b      	lsls	r3, r3, #16
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	4313      	orrs	r3, r2
 8003258:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a15      	ldr	r2, [pc, #84]	; (80032b4 <TIM_OC5_SetConfig+0xac>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d00b      	beq.n	800327a <TIM_OC5_SetConfig+0x72>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a14      	ldr	r2, [pc, #80]	; (80032b8 <TIM_OC5_SetConfig+0xb0>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d007      	beq.n	800327a <TIM_OC5_SetConfig+0x72>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a13      	ldr	r2, [pc, #76]	; (80032bc <TIM_OC5_SetConfig+0xb4>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d003      	beq.n	800327a <TIM_OC5_SetConfig+0x72>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a12      	ldr	r2, [pc, #72]	; (80032c0 <TIM_OC5_SetConfig+0xb8>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d109      	bne.n	800328e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003280:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	021b      	lsls	r3, r3, #8
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	4313      	orrs	r3, r2
 800328c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	621a      	str	r2, [r3, #32]
}
 80032a8:	bf00      	nop
 80032aa:	371c      	adds	r7, #28
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr
 80032b4:	40012c00 	.word	0x40012c00
 80032b8:	40014000 	.word	0x40014000
 80032bc:	40014400 	.word	0x40014400
 80032c0:	40014800 	.word	0x40014800

080032c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b087      	sub	sp, #28
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	021b      	lsls	r3, r3, #8
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	4313      	orrs	r3, r2
 8003302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800330a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	051b      	lsls	r3, r3, #20
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	4313      	orrs	r3, r2
 8003316:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a16      	ldr	r2, [pc, #88]	; (8003374 <TIM_OC6_SetConfig+0xb0>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d00b      	beq.n	8003338 <TIM_OC6_SetConfig+0x74>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a15      	ldr	r2, [pc, #84]	; (8003378 <TIM_OC6_SetConfig+0xb4>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d007      	beq.n	8003338 <TIM_OC6_SetConfig+0x74>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a14      	ldr	r2, [pc, #80]	; (800337c <TIM_OC6_SetConfig+0xb8>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d003      	beq.n	8003338 <TIM_OC6_SetConfig+0x74>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a13      	ldr	r2, [pc, #76]	; (8003380 <TIM_OC6_SetConfig+0xbc>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d109      	bne.n	800334c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800333e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	029b      	lsls	r3, r3, #10
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	4313      	orrs	r3, r2
 800334a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685a      	ldr	r2, [r3, #4]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	621a      	str	r2, [r3, #32]
}
 8003366:	bf00      	nop
 8003368:	371c      	adds	r7, #28
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	40012c00 	.word	0x40012c00
 8003378:	40014000 	.word	0x40014000
 800337c:	40014400 	.word	0x40014400
 8003380:	40014800 	.word	0x40014800

08003384 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003384:	b480      	push	{r7}
 8003386:	b087      	sub	sp, #28
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	f003 031f 	and.w	r3, r3, #31
 8003396:	2201      	movs	r2, #1
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6a1a      	ldr	r2, [r3, #32]
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	43db      	mvns	r3, r3
 80033a6:	401a      	ands	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6a1a      	ldr	r2, [r3, #32]
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	f003 031f 	and.w	r3, r3, #31
 80033b6:	6879      	ldr	r1, [r7, #4]
 80033b8:	fa01 f303 	lsl.w	r3, r1, r3
 80033bc:	431a      	orrs	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	621a      	str	r2, [r3, #32]
}
 80033c2:	bf00      	nop
 80033c4:	371c      	adds	r7, #28
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
	...

080033d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d101      	bne.n	80033e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033e4:	2302      	movs	r3, #2
 80033e6:	e054      	b.n	8003492 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2202      	movs	r2, #2
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a24      	ldr	r2, [pc, #144]	; (80034a0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d108      	bne.n	8003424 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003418:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	4313      	orrs	r3, r2
 8003422:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800342a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	4313      	orrs	r3, r2
 8003434:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a17      	ldr	r2, [pc, #92]	; (80034a0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d00e      	beq.n	8003466 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003450:	d009      	beq.n	8003466 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a13      	ldr	r2, [pc, #76]	; (80034a4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d004      	beq.n	8003466 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a11      	ldr	r2, [pc, #68]	; (80034a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d10c      	bne.n	8003480 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800346c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	68ba      	ldr	r2, [r7, #8]
 8003474:	4313      	orrs	r3, r2
 8003476:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68ba      	ldr	r2, [r7, #8]
 800347e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3714      	adds	r7, #20
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	40012c00 	.word	0x40012c00
 80034a4:	40000400 	.word	0x40000400
 80034a8:	40014000 	.word	0x40014000

080034ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80034b6:	2300      	movs	r3, #0
 80034b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d101      	bne.n	80034c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80034c4:	2302      	movs	r3, #2
 80034c6:	e060      	b.n	800358a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	4313      	orrs	r3, r2
 80034dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4313      	orrs	r3, r2
 8003506:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	4313      	orrs	r3, r2
 8003514:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	4313      	orrs	r3, r2
 8003522:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352e:	4313      	orrs	r3, r2
 8003530:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	041b      	lsls	r3, r3, #16
 800353e:	4313      	orrs	r3, r2
 8003540:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a14      	ldr	r2, [pc, #80]	; (8003598 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d115      	bne.n	8003578 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003556:	051b      	lsls	r3, r3, #20
 8003558:	4313      	orrs	r3, r2
 800355a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	4313      	orrs	r3, r2
 8003568:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	4313      	orrs	r3, r2
 8003576:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3714      	adds	r7, #20
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	40012c00 	.word	0x40012c00

0800359c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e040      	b.n	8003630 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d106      	bne.n	80035c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7fd fab0 	bl	8000b24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2224      	movs	r2, #36	; 0x24
 80035c8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 0201 	bic.w	r2, r2, #1
 80035d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f8c0 	bl	8003760 <UART_SetConfig>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d101      	bne.n	80035ea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e022      	b.n	8003630 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d002      	beq.n	80035f8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f9ea 	bl	80039cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003606:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689a      	ldr	r2, [r3, #8]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003616:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f042 0201 	orr.w	r2, r2, #1
 8003626:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 fa71 	bl	8003b10 <UART_CheckIdleState>
 800362e:	4603      	mov	r3, r0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3708      	adds	r7, #8
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b08a      	sub	sp, #40	; 0x28
 800363c:	af02      	add	r7, sp, #8
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	603b      	str	r3, [r7, #0]
 8003644:	4613      	mov	r3, r2
 8003646:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800364c:	2b20      	cmp	r3, #32
 800364e:	f040 8082 	bne.w	8003756 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d002      	beq.n	800365e <HAL_UART_Transmit+0x26>
 8003658:	88fb      	ldrh	r3, [r7, #6]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e07a      	b.n	8003758 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003668:	2b01      	cmp	r3, #1
 800366a:	d101      	bne.n	8003670 <HAL_UART_Transmit+0x38>
 800366c:	2302      	movs	r3, #2
 800366e:	e073      	b.n	8003758 <HAL_UART_Transmit+0x120>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2221      	movs	r2, #33	; 0x21
 8003684:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003686:	f7fd fbf3 	bl	8000e70 <HAL_GetTick>
 800368a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	88fa      	ldrh	r2, [r7, #6]
 8003690:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	88fa      	ldrh	r2, [r7, #6]
 8003698:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036a4:	d108      	bne.n	80036b8 <HAL_UART_Transmit+0x80>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d104      	bne.n	80036b8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80036ae:	2300      	movs	r3, #0
 80036b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	61bb      	str	r3, [r7, #24]
 80036b6:	e003      	b.n	80036c0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036bc:	2300      	movs	r3, #0
 80036be:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80036c8:	e02d      	b.n	8003726 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	2200      	movs	r2, #0
 80036d2:	2180      	movs	r1, #128	; 0x80
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f000 fa64 	bl	8003ba2 <UART_WaitOnFlagUntilTimeout>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e039      	b.n	8003758 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d10b      	bne.n	8003702 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	881a      	ldrh	r2, [r3, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036f6:	b292      	uxth	r2, r2
 80036f8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	3302      	adds	r3, #2
 80036fe:	61bb      	str	r3, [r7, #24]
 8003700:	e008      	b.n	8003714 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	781a      	ldrb	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	b292      	uxth	r2, r2
 800370c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	3301      	adds	r3, #1
 8003712:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800371a:	b29b      	uxth	r3, r3
 800371c:	3b01      	subs	r3, #1
 800371e:	b29a      	uxth	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800372c:	b29b      	uxth	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1cb      	bne.n	80036ca <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	2200      	movs	r2, #0
 800373a:	2140      	movs	r1, #64	; 0x40
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f000 fa30 	bl	8003ba2 <UART_WaitOnFlagUntilTimeout>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e005      	b.n	8003758 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2220      	movs	r2, #32
 8003750:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003752:	2300      	movs	r3, #0
 8003754:	e000      	b.n	8003758 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003756:	2302      	movs	r3, #2
  }
}
 8003758:	4618      	mov	r0, r3
 800375a:	3720      	adds	r7, #32
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b088      	sub	sp, #32
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003768:	2300      	movs	r3, #0
 800376a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689a      	ldr	r2, [r3, #8]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	431a      	orrs	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	431a      	orrs	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	69db      	ldr	r3, [r3, #28]
 8003780:	4313      	orrs	r3, r2
 8003782:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	4b8a      	ldr	r3, [pc, #552]	; (80039b4 <UART_SetConfig+0x254>)
 800378c:	4013      	ands	r3, r2
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	6812      	ldr	r2, [r2, #0]
 8003792:	6979      	ldr	r1, [r7, #20]
 8003794:	430b      	orrs	r3, r1
 8003796:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68da      	ldr	r2, [r3, #12]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a1b      	ldr	r3, [r3, #32]
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a78      	ldr	r2, [pc, #480]	; (80039b8 <UART_SetConfig+0x258>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d120      	bne.n	800381e <UART_SetConfig+0xbe>
 80037dc:	4b77      	ldr	r3, [pc, #476]	; (80039bc <UART_SetConfig+0x25c>)
 80037de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e0:	f003 0303 	and.w	r3, r3, #3
 80037e4:	2b03      	cmp	r3, #3
 80037e6:	d817      	bhi.n	8003818 <UART_SetConfig+0xb8>
 80037e8:	a201      	add	r2, pc, #4	; (adr r2, 80037f0 <UART_SetConfig+0x90>)
 80037ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ee:	bf00      	nop
 80037f0:	08003801 	.word	0x08003801
 80037f4:	0800380d 	.word	0x0800380d
 80037f8:	08003813 	.word	0x08003813
 80037fc:	08003807 	.word	0x08003807
 8003800:	2300      	movs	r3, #0
 8003802:	77fb      	strb	r3, [r7, #31]
 8003804:	e01d      	b.n	8003842 <UART_SetConfig+0xe2>
 8003806:	2302      	movs	r3, #2
 8003808:	77fb      	strb	r3, [r7, #31]
 800380a:	e01a      	b.n	8003842 <UART_SetConfig+0xe2>
 800380c:	2304      	movs	r3, #4
 800380e:	77fb      	strb	r3, [r7, #31]
 8003810:	e017      	b.n	8003842 <UART_SetConfig+0xe2>
 8003812:	2308      	movs	r3, #8
 8003814:	77fb      	strb	r3, [r7, #31]
 8003816:	e014      	b.n	8003842 <UART_SetConfig+0xe2>
 8003818:	2310      	movs	r3, #16
 800381a:	77fb      	strb	r3, [r7, #31]
 800381c:	e011      	b.n	8003842 <UART_SetConfig+0xe2>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a67      	ldr	r2, [pc, #412]	; (80039c0 <UART_SetConfig+0x260>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d102      	bne.n	800382e <UART_SetConfig+0xce>
 8003828:	2300      	movs	r3, #0
 800382a:	77fb      	strb	r3, [r7, #31]
 800382c:	e009      	b.n	8003842 <UART_SetConfig+0xe2>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a64      	ldr	r2, [pc, #400]	; (80039c4 <UART_SetConfig+0x264>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d102      	bne.n	800383e <UART_SetConfig+0xde>
 8003838:	2300      	movs	r3, #0
 800383a:	77fb      	strb	r3, [r7, #31]
 800383c:	e001      	b.n	8003842 <UART_SetConfig+0xe2>
 800383e:	2310      	movs	r3, #16
 8003840:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800384a:	d15b      	bne.n	8003904 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 800384c:	7ffb      	ldrb	r3, [r7, #31]
 800384e:	2b08      	cmp	r3, #8
 8003850:	d827      	bhi.n	80038a2 <UART_SetConfig+0x142>
 8003852:	a201      	add	r2, pc, #4	; (adr r2, 8003858 <UART_SetConfig+0xf8>)
 8003854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003858:	0800387d 	.word	0x0800387d
 800385c:	08003885 	.word	0x08003885
 8003860:	0800388d 	.word	0x0800388d
 8003864:	080038a3 	.word	0x080038a3
 8003868:	08003893 	.word	0x08003893
 800386c:	080038a3 	.word	0x080038a3
 8003870:	080038a3 	.word	0x080038a3
 8003874:	080038a3 	.word	0x080038a3
 8003878:	0800389b 	.word	0x0800389b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800387c:	f7fe fe92 	bl	80025a4 <HAL_RCC_GetPCLK1Freq>
 8003880:	61b8      	str	r0, [r7, #24]
        break;
 8003882:	e013      	b.n	80038ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003884:	f7fe feb0 	bl	80025e8 <HAL_RCC_GetPCLK2Freq>
 8003888:	61b8      	str	r0, [r7, #24]
        break;
 800388a:	e00f      	b.n	80038ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800388c:	4b4e      	ldr	r3, [pc, #312]	; (80039c8 <UART_SetConfig+0x268>)
 800388e:	61bb      	str	r3, [r7, #24]
        break;
 8003890:	e00c      	b.n	80038ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003892:	f7fe fe11 	bl	80024b8 <HAL_RCC_GetSysClockFreq>
 8003896:	61b8      	str	r0, [r7, #24]
        break;
 8003898:	e008      	b.n	80038ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800389a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800389e:	61bb      	str	r3, [r7, #24]
        break;
 80038a0:	e004      	b.n	80038ac <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80038a2:	2300      	movs	r3, #0
 80038a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	77bb      	strb	r3, [r7, #30]
        break;
 80038aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d074      	beq.n	800399c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	005a      	lsls	r2, r3, #1
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	085b      	lsrs	r3, r3, #1
 80038bc:	441a      	add	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	2b0f      	cmp	r3, #15
 80038ce:	d916      	bls.n	80038fe <UART_SetConfig+0x19e>
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038d6:	d212      	bcs.n	80038fe <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	b29b      	uxth	r3, r3
 80038dc:	f023 030f 	bic.w	r3, r3, #15
 80038e0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	085b      	lsrs	r3, r3, #1
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	f003 0307 	and.w	r3, r3, #7
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	89fb      	ldrh	r3, [r7, #14]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	89fa      	ldrh	r2, [r7, #14]
 80038fa:	60da      	str	r2, [r3, #12]
 80038fc:	e04e      	b.n	800399c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	77bb      	strb	r3, [r7, #30]
 8003902:	e04b      	b.n	800399c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003904:	7ffb      	ldrb	r3, [r7, #31]
 8003906:	2b08      	cmp	r3, #8
 8003908:	d827      	bhi.n	800395a <UART_SetConfig+0x1fa>
 800390a:	a201      	add	r2, pc, #4	; (adr r2, 8003910 <UART_SetConfig+0x1b0>)
 800390c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003910:	08003935 	.word	0x08003935
 8003914:	0800393d 	.word	0x0800393d
 8003918:	08003945 	.word	0x08003945
 800391c:	0800395b 	.word	0x0800395b
 8003920:	0800394b 	.word	0x0800394b
 8003924:	0800395b 	.word	0x0800395b
 8003928:	0800395b 	.word	0x0800395b
 800392c:	0800395b 	.word	0x0800395b
 8003930:	08003953 	.word	0x08003953
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003934:	f7fe fe36 	bl	80025a4 <HAL_RCC_GetPCLK1Freq>
 8003938:	61b8      	str	r0, [r7, #24]
        break;
 800393a:	e013      	b.n	8003964 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800393c:	f7fe fe54 	bl	80025e8 <HAL_RCC_GetPCLK2Freq>
 8003940:	61b8      	str	r0, [r7, #24]
        break;
 8003942:	e00f      	b.n	8003964 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003944:	4b20      	ldr	r3, [pc, #128]	; (80039c8 <UART_SetConfig+0x268>)
 8003946:	61bb      	str	r3, [r7, #24]
        break;
 8003948:	e00c      	b.n	8003964 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800394a:	f7fe fdb5 	bl	80024b8 <HAL_RCC_GetSysClockFreq>
 800394e:	61b8      	str	r0, [r7, #24]
        break;
 8003950:	e008      	b.n	8003964 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003952:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003956:	61bb      	str	r3, [r7, #24]
        break;
 8003958:	e004      	b.n	8003964 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800395a:	2300      	movs	r3, #0
 800395c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	77bb      	strb	r3, [r7, #30]
        break;
 8003962:	bf00      	nop
    }

    if (pclk != 0U)
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d018      	beq.n	800399c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	085a      	lsrs	r2, r3, #1
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	441a      	add	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	fbb2 f3f3 	udiv	r3, r2, r3
 800397c:	b29b      	uxth	r3, r3
 800397e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	2b0f      	cmp	r3, #15
 8003984:	d908      	bls.n	8003998 <UART_SetConfig+0x238>
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800398c:	d204      	bcs.n	8003998 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	60da      	str	r2, [r3, #12]
 8003996:	e001      	b.n	800399c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80039a8:	7fbb      	ldrb	r3, [r7, #30]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3720      	adds	r7, #32
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	efff69f3 	.word	0xefff69f3
 80039b8:	40013800 	.word	0x40013800
 80039bc:	40021000 	.word	0x40021000
 80039c0:	40004400 	.word	0x40004400
 80039c4:	40004800 	.word	0x40004800
 80039c8:	007a1200 	.word	0x007a1200

080039cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d8:	f003 0301 	and.w	r3, r3, #1
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00a      	beq.n	80039f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	430a      	orrs	r2, r1
 80039f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00a      	beq.n	8003a18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00a      	beq.n	8003a3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3e:	f003 0308 	and.w	r3, r3, #8
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00a      	beq.n	8003a5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a60:	f003 0310 	and.w	r3, r3, #16
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00a      	beq.n	8003a7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a82:	f003 0320 	and.w	r3, r3, #32
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00a      	beq.n	8003aa0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d01a      	beq.n	8003ae2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003aca:	d10a      	bne.n	8003ae2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00a      	beq.n	8003b04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	605a      	str	r2, [r3, #4]
  }
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af02      	add	r7, sp, #8
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b20:	f7fd f9a6 	bl	8000e70 <HAL_GetTick>
 8003b24:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0308 	and.w	r3, r3, #8
 8003b30:	2b08      	cmp	r3, #8
 8003b32:	d10e      	bne.n	8003b52 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f82d 	bl	8003ba2 <UART_WaitOnFlagUntilTimeout>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e023      	b.n	8003b9a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0304 	and.w	r3, r3, #4
 8003b5c:	2b04      	cmp	r3, #4
 8003b5e:	d10e      	bne.n	8003b7e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f817 	bl	8003ba2 <UART_WaitOnFlagUntilTimeout>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e00d      	b.n	8003b9a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2220      	movs	r2, #32
 8003b82:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2220      	movs	r2, #32
 8003b88:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3710      	adds	r7, #16
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b09c      	sub	sp, #112	; 0x70
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	60f8      	str	r0, [r7, #12]
 8003baa:	60b9      	str	r1, [r7, #8]
 8003bac:	603b      	str	r3, [r7, #0]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bb2:	e0a5      	b.n	8003d00 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bba:	f000 80a1 	beq.w	8003d00 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bbe:	f7fd f957 	bl	8000e70 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d302      	bcc.n	8003bd4 <UART_WaitOnFlagUntilTimeout+0x32>
 8003bce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d13e      	bne.n	8003c52 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bdc:	e853 3f00 	ldrex	r3, [r3]
 8003be0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003be2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003be4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003be8:	667b      	str	r3, [r7, #100]	; 0x64
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bf2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bf4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003bf8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003bfa:	e841 2300 	strex	r3, r2, [r1]
 8003bfe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003c00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1e6      	bne.n	8003bd4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	3308      	adds	r3, #8
 8003c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c10:	e853 3f00 	ldrex	r3, [r3]
 8003c14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c18:	f023 0301 	bic.w	r3, r3, #1
 8003c1c:	663b      	str	r3, [r7, #96]	; 0x60
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	3308      	adds	r3, #8
 8003c24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c26:	64ba      	str	r2, [r7, #72]	; 0x48
 8003c28:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003c2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c2e:	e841 2300 	strex	r3, r2, [r1]
 8003c32:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003c34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1e5      	bne.n	8003c06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2220      	movs	r2, #32
 8003c44:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e067      	b.n	8003d22 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0304 	and.w	r3, r3, #4
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d04f      	beq.n	8003d00 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	69db      	ldr	r3, [r3, #28]
 8003c66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c6e:	d147      	bne.n	8003d00 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c78:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c82:	e853 3f00 	ldrex	r3, [r3]
 8003c86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	461a      	mov	r2, r3
 8003c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c98:	637b      	str	r3, [r7, #52]	; 0x34
 8003c9a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ca0:	e841 2300 	strex	r3, r2, [r1]
 8003ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1e6      	bne.n	8003c7a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	3308      	adds	r3, #8
 8003cb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	e853 3f00 	ldrex	r3, [r3]
 8003cba:	613b      	str	r3, [r7, #16]
   return(result);
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	f023 0301 	bic.w	r3, r3, #1
 8003cc2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	3308      	adds	r3, #8
 8003cca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003ccc:	623a      	str	r2, [r7, #32]
 8003cce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd0:	69f9      	ldr	r1, [r7, #28]
 8003cd2:	6a3a      	ldr	r2, [r7, #32]
 8003cd4:	e841 2300 	strex	r3, r2, [r1]
 8003cd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1e5      	bne.n	8003cac <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2220      	movs	r2, #32
 8003cea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e010      	b.n	8003d22 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	69da      	ldr	r2, [r3, #28]
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	68ba      	ldr	r2, [r7, #8]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	bf0c      	ite	eq
 8003d10:	2301      	moveq	r3, #1
 8003d12:	2300      	movne	r3, #0
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	461a      	mov	r2, r3
 8003d18:	79fb      	ldrb	r3, [r7, #7]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	f43f af4a 	beq.w	8003bb4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3770      	adds	r7, #112	; 0x70
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
	...

08003d2c <__errno>:
 8003d2c:	4b01      	ldr	r3, [pc, #4]	; (8003d34 <__errno+0x8>)
 8003d2e:	6818      	ldr	r0, [r3, #0]
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	2000000c 	.word	0x2000000c

08003d38 <__libc_init_array>:
 8003d38:	b570      	push	{r4, r5, r6, lr}
 8003d3a:	4d0d      	ldr	r5, [pc, #52]	; (8003d70 <__libc_init_array+0x38>)
 8003d3c:	4c0d      	ldr	r4, [pc, #52]	; (8003d74 <__libc_init_array+0x3c>)
 8003d3e:	1b64      	subs	r4, r4, r5
 8003d40:	10a4      	asrs	r4, r4, #2
 8003d42:	2600      	movs	r6, #0
 8003d44:	42a6      	cmp	r6, r4
 8003d46:	d109      	bne.n	8003d5c <__libc_init_array+0x24>
 8003d48:	4d0b      	ldr	r5, [pc, #44]	; (8003d78 <__libc_init_array+0x40>)
 8003d4a:	4c0c      	ldr	r4, [pc, #48]	; (8003d7c <__libc_init_array+0x44>)
 8003d4c:	f000 ff76 	bl	8004c3c <_init>
 8003d50:	1b64      	subs	r4, r4, r5
 8003d52:	10a4      	asrs	r4, r4, #2
 8003d54:	2600      	movs	r6, #0
 8003d56:	42a6      	cmp	r6, r4
 8003d58:	d105      	bne.n	8003d66 <__libc_init_array+0x2e>
 8003d5a:	bd70      	pop	{r4, r5, r6, pc}
 8003d5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d60:	4798      	blx	r3
 8003d62:	3601      	adds	r6, #1
 8003d64:	e7ee      	b.n	8003d44 <__libc_init_array+0xc>
 8003d66:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d6a:	4798      	blx	r3
 8003d6c:	3601      	adds	r6, #1
 8003d6e:	e7f2      	b.n	8003d56 <__libc_init_array+0x1e>
 8003d70:	08004d38 	.word	0x08004d38
 8003d74:	08004d38 	.word	0x08004d38
 8003d78:	08004d38 	.word	0x08004d38
 8003d7c:	08004d3c 	.word	0x08004d3c

08003d80 <memset>:
 8003d80:	4402      	add	r2, r0
 8003d82:	4603      	mov	r3, r0
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d100      	bne.n	8003d8a <memset+0xa>
 8003d88:	4770      	bx	lr
 8003d8a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d8e:	e7f9      	b.n	8003d84 <memset+0x4>

08003d90 <iprintf>:
 8003d90:	b40f      	push	{r0, r1, r2, r3}
 8003d92:	4b0a      	ldr	r3, [pc, #40]	; (8003dbc <iprintf+0x2c>)
 8003d94:	b513      	push	{r0, r1, r4, lr}
 8003d96:	681c      	ldr	r4, [r3, #0]
 8003d98:	b124      	cbz	r4, 8003da4 <iprintf+0x14>
 8003d9a:	69a3      	ldr	r3, [r4, #24]
 8003d9c:	b913      	cbnz	r3, 8003da4 <iprintf+0x14>
 8003d9e:	4620      	mov	r0, r4
 8003da0:	f000 f866 	bl	8003e70 <__sinit>
 8003da4:	ab05      	add	r3, sp, #20
 8003da6:	9a04      	ldr	r2, [sp, #16]
 8003da8:	68a1      	ldr	r1, [r4, #8]
 8003daa:	9301      	str	r3, [sp, #4]
 8003dac:	4620      	mov	r0, r4
 8003dae:	f000 f983 	bl	80040b8 <_vfiprintf_r>
 8003db2:	b002      	add	sp, #8
 8003db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003db8:	b004      	add	sp, #16
 8003dba:	4770      	bx	lr
 8003dbc:	2000000c 	.word	0x2000000c

08003dc0 <std>:
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	b510      	push	{r4, lr}
 8003dc4:	4604      	mov	r4, r0
 8003dc6:	e9c0 3300 	strd	r3, r3, [r0]
 8003dca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003dce:	6083      	str	r3, [r0, #8]
 8003dd0:	8181      	strh	r1, [r0, #12]
 8003dd2:	6643      	str	r3, [r0, #100]	; 0x64
 8003dd4:	81c2      	strh	r2, [r0, #14]
 8003dd6:	6183      	str	r3, [r0, #24]
 8003dd8:	4619      	mov	r1, r3
 8003dda:	2208      	movs	r2, #8
 8003ddc:	305c      	adds	r0, #92	; 0x5c
 8003dde:	f7ff ffcf 	bl	8003d80 <memset>
 8003de2:	4b05      	ldr	r3, [pc, #20]	; (8003df8 <std+0x38>)
 8003de4:	6263      	str	r3, [r4, #36]	; 0x24
 8003de6:	4b05      	ldr	r3, [pc, #20]	; (8003dfc <std+0x3c>)
 8003de8:	62a3      	str	r3, [r4, #40]	; 0x28
 8003dea:	4b05      	ldr	r3, [pc, #20]	; (8003e00 <std+0x40>)
 8003dec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003dee:	4b05      	ldr	r3, [pc, #20]	; (8003e04 <std+0x44>)
 8003df0:	6224      	str	r4, [r4, #32]
 8003df2:	6323      	str	r3, [r4, #48]	; 0x30
 8003df4:	bd10      	pop	{r4, pc}
 8003df6:	bf00      	nop
 8003df8:	08004661 	.word	0x08004661
 8003dfc:	08004683 	.word	0x08004683
 8003e00:	080046bb 	.word	0x080046bb
 8003e04:	080046df 	.word	0x080046df

08003e08 <_cleanup_r>:
 8003e08:	4901      	ldr	r1, [pc, #4]	; (8003e10 <_cleanup_r+0x8>)
 8003e0a:	f000 b8af 	b.w	8003f6c <_fwalk_reent>
 8003e0e:	bf00      	nop
 8003e10:	080049b9 	.word	0x080049b9

08003e14 <__sfmoreglue>:
 8003e14:	b570      	push	{r4, r5, r6, lr}
 8003e16:	1e4a      	subs	r2, r1, #1
 8003e18:	2568      	movs	r5, #104	; 0x68
 8003e1a:	4355      	muls	r5, r2
 8003e1c:	460e      	mov	r6, r1
 8003e1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003e22:	f000 f8c5 	bl	8003fb0 <_malloc_r>
 8003e26:	4604      	mov	r4, r0
 8003e28:	b140      	cbz	r0, 8003e3c <__sfmoreglue+0x28>
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	e9c0 1600 	strd	r1, r6, [r0]
 8003e30:	300c      	adds	r0, #12
 8003e32:	60a0      	str	r0, [r4, #8]
 8003e34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003e38:	f7ff ffa2 	bl	8003d80 <memset>
 8003e3c:	4620      	mov	r0, r4
 8003e3e:	bd70      	pop	{r4, r5, r6, pc}

08003e40 <__sfp_lock_acquire>:
 8003e40:	4801      	ldr	r0, [pc, #4]	; (8003e48 <__sfp_lock_acquire+0x8>)
 8003e42:	f000 b8b3 	b.w	8003fac <__retarget_lock_acquire_recursive>
 8003e46:	bf00      	nop
 8003e48:	2000018c 	.word	0x2000018c

08003e4c <__sfp_lock_release>:
 8003e4c:	4801      	ldr	r0, [pc, #4]	; (8003e54 <__sfp_lock_release+0x8>)
 8003e4e:	f000 b8ae 	b.w	8003fae <__retarget_lock_release_recursive>
 8003e52:	bf00      	nop
 8003e54:	2000018c 	.word	0x2000018c

08003e58 <__sinit_lock_acquire>:
 8003e58:	4801      	ldr	r0, [pc, #4]	; (8003e60 <__sinit_lock_acquire+0x8>)
 8003e5a:	f000 b8a7 	b.w	8003fac <__retarget_lock_acquire_recursive>
 8003e5e:	bf00      	nop
 8003e60:	20000187 	.word	0x20000187

08003e64 <__sinit_lock_release>:
 8003e64:	4801      	ldr	r0, [pc, #4]	; (8003e6c <__sinit_lock_release+0x8>)
 8003e66:	f000 b8a2 	b.w	8003fae <__retarget_lock_release_recursive>
 8003e6a:	bf00      	nop
 8003e6c:	20000187 	.word	0x20000187

08003e70 <__sinit>:
 8003e70:	b510      	push	{r4, lr}
 8003e72:	4604      	mov	r4, r0
 8003e74:	f7ff fff0 	bl	8003e58 <__sinit_lock_acquire>
 8003e78:	69a3      	ldr	r3, [r4, #24]
 8003e7a:	b11b      	cbz	r3, 8003e84 <__sinit+0x14>
 8003e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e80:	f7ff bff0 	b.w	8003e64 <__sinit_lock_release>
 8003e84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003e88:	6523      	str	r3, [r4, #80]	; 0x50
 8003e8a:	4b13      	ldr	r3, [pc, #76]	; (8003ed8 <__sinit+0x68>)
 8003e8c:	4a13      	ldr	r2, [pc, #76]	; (8003edc <__sinit+0x6c>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	62a2      	str	r2, [r4, #40]	; 0x28
 8003e92:	42a3      	cmp	r3, r4
 8003e94:	bf04      	itt	eq
 8003e96:	2301      	moveq	r3, #1
 8003e98:	61a3      	streq	r3, [r4, #24]
 8003e9a:	4620      	mov	r0, r4
 8003e9c:	f000 f820 	bl	8003ee0 <__sfp>
 8003ea0:	6060      	str	r0, [r4, #4]
 8003ea2:	4620      	mov	r0, r4
 8003ea4:	f000 f81c 	bl	8003ee0 <__sfp>
 8003ea8:	60a0      	str	r0, [r4, #8]
 8003eaa:	4620      	mov	r0, r4
 8003eac:	f000 f818 	bl	8003ee0 <__sfp>
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	60e0      	str	r0, [r4, #12]
 8003eb4:	2104      	movs	r1, #4
 8003eb6:	6860      	ldr	r0, [r4, #4]
 8003eb8:	f7ff ff82 	bl	8003dc0 <std>
 8003ebc:	68a0      	ldr	r0, [r4, #8]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	2109      	movs	r1, #9
 8003ec2:	f7ff ff7d 	bl	8003dc0 <std>
 8003ec6:	68e0      	ldr	r0, [r4, #12]
 8003ec8:	2202      	movs	r2, #2
 8003eca:	2112      	movs	r1, #18
 8003ecc:	f7ff ff78 	bl	8003dc0 <std>
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	61a3      	str	r3, [r4, #24]
 8003ed4:	e7d2      	b.n	8003e7c <__sinit+0xc>
 8003ed6:	bf00      	nop
 8003ed8:	08004ca0 	.word	0x08004ca0
 8003edc:	08003e09 	.word	0x08003e09

08003ee0 <__sfp>:
 8003ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ee2:	4607      	mov	r7, r0
 8003ee4:	f7ff ffac 	bl	8003e40 <__sfp_lock_acquire>
 8003ee8:	4b1e      	ldr	r3, [pc, #120]	; (8003f64 <__sfp+0x84>)
 8003eea:	681e      	ldr	r6, [r3, #0]
 8003eec:	69b3      	ldr	r3, [r6, #24]
 8003eee:	b913      	cbnz	r3, 8003ef6 <__sfp+0x16>
 8003ef0:	4630      	mov	r0, r6
 8003ef2:	f7ff ffbd 	bl	8003e70 <__sinit>
 8003ef6:	3648      	adds	r6, #72	; 0x48
 8003ef8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003efc:	3b01      	subs	r3, #1
 8003efe:	d503      	bpl.n	8003f08 <__sfp+0x28>
 8003f00:	6833      	ldr	r3, [r6, #0]
 8003f02:	b30b      	cbz	r3, 8003f48 <__sfp+0x68>
 8003f04:	6836      	ldr	r6, [r6, #0]
 8003f06:	e7f7      	b.n	8003ef8 <__sfp+0x18>
 8003f08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003f0c:	b9d5      	cbnz	r5, 8003f44 <__sfp+0x64>
 8003f0e:	4b16      	ldr	r3, [pc, #88]	; (8003f68 <__sfp+0x88>)
 8003f10:	60e3      	str	r3, [r4, #12]
 8003f12:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003f16:	6665      	str	r5, [r4, #100]	; 0x64
 8003f18:	f000 f847 	bl	8003faa <__retarget_lock_init_recursive>
 8003f1c:	f7ff ff96 	bl	8003e4c <__sfp_lock_release>
 8003f20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003f24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003f28:	6025      	str	r5, [r4, #0]
 8003f2a:	61a5      	str	r5, [r4, #24]
 8003f2c:	2208      	movs	r2, #8
 8003f2e:	4629      	mov	r1, r5
 8003f30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003f34:	f7ff ff24 	bl	8003d80 <memset>
 8003f38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003f3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003f40:	4620      	mov	r0, r4
 8003f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f44:	3468      	adds	r4, #104	; 0x68
 8003f46:	e7d9      	b.n	8003efc <__sfp+0x1c>
 8003f48:	2104      	movs	r1, #4
 8003f4a:	4638      	mov	r0, r7
 8003f4c:	f7ff ff62 	bl	8003e14 <__sfmoreglue>
 8003f50:	4604      	mov	r4, r0
 8003f52:	6030      	str	r0, [r6, #0]
 8003f54:	2800      	cmp	r0, #0
 8003f56:	d1d5      	bne.n	8003f04 <__sfp+0x24>
 8003f58:	f7ff ff78 	bl	8003e4c <__sfp_lock_release>
 8003f5c:	230c      	movs	r3, #12
 8003f5e:	603b      	str	r3, [r7, #0]
 8003f60:	e7ee      	b.n	8003f40 <__sfp+0x60>
 8003f62:	bf00      	nop
 8003f64:	08004ca0 	.word	0x08004ca0
 8003f68:	ffff0001 	.word	0xffff0001

08003f6c <_fwalk_reent>:
 8003f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f70:	4606      	mov	r6, r0
 8003f72:	4688      	mov	r8, r1
 8003f74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003f78:	2700      	movs	r7, #0
 8003f7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f7e:	f1b9 0901 	subs.w	r9, r9, #1
 8003f82:	d505      	bpl.n	8003f90 <_fwalk_reent+0x24>
 8003f84:	6824      	ldr	r4, [r4, #0]
 8003f86:	2c00      	cmp	r4, #0
 8003f88:	d1f7      	bne.n	8003f7a <_fwalk_reent+0xe>
 8003f8a:	4638      	mov	r0, r7
 8003f8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f90:	89ab      	ldrh	r3, [r5, #12]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d907      	bls.n	8003fa6 <_fwalk_reent+0x3a>
 8003f96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	d003      	beq.n	8003fa6 <_fwalk_reent+0x3a>
 8003f9e:	4629      	mov	r1, r5
 8003fa0:	4630      	mov	r0, r6
 8003fa2:	47c0      	blx	r8
 8003fa4:	4307      	orrs	r7, r0
 8003fa6:	3568      	adds	r5, #104	; 0x68
 8003fa8:	e7e9      	b.n	8003f7e <_fwalk_reent+0x12>

08003faa <__retarget_lock_init_recursive>:
 8003faa:	4770      	bx	lr

08003fac <__retarget_lock_acquire_recursive>:
 8003fac:	4770      	bx	lr

08003fae <__retarget_lock_release_recursive>:
 8003fae:	4770      	bx	lr

08003fb0 <_malloc_r>:
 8003fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fb2:	1ccd      	adds	r5, r1, #3
 8003fb4:	f025 0503 	bic.w	r5, r5, #3
 8003fb8:	3508      	adds	r5, #8
 8003fba:	2d0c      	cmp	r5, #12
 8003fbc:	bf38      	it	cc
 8003fbe:	250c      	movcc	r5, #12
 8003fc0:	2d00      	cmp	r5, #0
 8003fc2:	4606      	mov	r6, r0
 8003fc4:	db01      	blt.n	8003fca <_malloc_r+0x1a>
 8003fc6:	42a9      	cmp	r1, r5
 8003fc8:	d903      	bls.n	8003fd2 <_malloc_r+0x22>
 8003fca:	230c      	movs	r3, #12
 8003fcc:	6033      	str	r3, [r6, #0]
 8003fce:	2000      	movs	r0, #0
 8003fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fd2:	f000 fda3 	bl	8004b1c <__malloc_lock>
 8003fd6:	4921      	ldr	r1, [pc, #132]	; (800405c <_malloc_r+0xac>)
 8003fd8:	680a      	ldr	r2, [r1, #0]
 8003fda:	4614      	mov	r4, r2
 8003fdc:	b99c      	cbnz	r4, 8004006 <_malloc_r+0x56>
 8003fde:	4f20      	ldr	r7, [pc, #128]	; (8004060 <_malloc_r+0xb0>)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	b923      	cbnz	r3, 8003fee <_malloc_r+0x3e>
 8003fe4:	4621      	mov	r1, r4
 8003fe6:	4630      	mov	r0, r6
 8003fe8:	f000 fb2a 	bl	8004640 <_sbrk_r>
 8003fec:	6038      	str	r0, [r7, #0]
 8003fee:	4629      	mov	r1, r5
 8003ff0:	4630      	mov	r0, r6
 8003ff2:	f000 fb25 	bl	8004640 <_sbrk_r>
 8003ff6:	1c43      	adds	r3, r0, #1
 8003ff8:	d123      	bne.n	8004042 <_malloc_r+0x92>
 8003ffa:	230c      	movs	r3, #12
 8003ffc:	6033      	str	r3, [r6, #0]
 8003ffe:	4630      	mov	r0, r6
 8004000:	f000 fd92 	bl	8004b28 <__malloc_unlock>
 8004004:	e7e3      	b.n	8003fce <_malloc_r+0x1e>
 8004006:	6823      	ldr	r3, [r4, #0]
 8004008:	1b5b      	subs	r3, r3, r5
 800400a:	d417      	bmi.n	800403c <_malloc_r+0x8c>
 800400c:	2b0b      	cmp	r3, #11
 800400e:	d903      	bls.n	8004018 <_malloc_r+0x68>
 8004010:	6023      	str	r3, [r4, #0]
 8004012:	441c      	add	r4, r3
 8004014:	6025      	str	r5, [r4, #0]
 8004016:	e004      	b.n	8004022 <_malloc_r+0x72>
 8004018:	6863      	ldr	r3, [r4, #4]
 800401a:	42a2      	cmp	r2, r4
 800401c:	bf0c      	ite	eq
 800401e:	600b      	streq	r3, [r1, #0]
 8004020:	6053      	strne	r3, [r2, #4]
 8004022:	4630      	mov	r0, r6
 8004024:	f000 fd80 	bl	8004b28 <__malloc_unlock>
 8004028:	f104 000b 	add.w	r0, r4, #11
 800402c:	1d23      	adds	r3, r4, #4
 800402e:	f020 0007 	bic.w	r0, r0, #7
 8004032:	1ac2      	subs	r2, r0, r3
 8004034:	d0cc      	beq.n	8003fd0 <_malloc_r+0x20>
 8004036:	1a1b      	subs	r3, r3, r0
 8004038:	50a3      	str	r3, [r4, r2]
 800403a:	e7c9      	b.n	8003fd0 <_malloc_r+0x20>
 800403c:	4622      	mov	r2, r4
 800403e:	6864      	ldr	r4, [r4, #4]
 8004040:	e7cc      	b.n	8003fdc <_malloc_r+0x2c>
 8004042:	1cc4      	adds	r4, r0, #3
 8004044:	f024 0403 	bic.w	r4, r4, #3
 8004048:	42a0      	cmp	r0, r4
 800404a:	d0e3      	beq.n	8004014 <_malloc_r+0x64>
 800404c:	1a21      	subs	r1, r4, r0
 800404e:	4630      	mov	r0, r6
 8004050:	f000 faf6 	bl	8004640 <_sbrk_r>
 8004054:	3001      	adds	r0, #1
 8004056:	d1dd      	bne.n	8004014 <_malloc_r+0x64>
 8004058:	e7cf      	b.n	8003ffa <_malloc_r+0x4a>
 800405a:	bf00      	nop
 800405c:	20000090 	.word	0x20000090
 8004060:	20000094 	.word	0x20000094

08004064 <__sfputc_r>:
 8004064:	6893      	ldr	r3, [r2, #8]
 8004066:	3b01      	subs	r3, #1
 8004068:	2b00      	cmp	r3, #0
 800406a:	b410      	push	{r4}
 800406c:	6093      	str	r3, [r2, #8]
 800406e:	da08      	bge.n	8004082 <__sfputc_r+0x1e>
 8004070:	6994      	ldr	r4, [r2, #24]
 8004072:	42a3      	cmp	r3, r4
 8004074:	db01      	blt.n	800407a <__sfputc_r+0x16>
 8004076:	290a      	cmp	r1, #10
 8004078:	d103      	bne.n	8004082 <__sfputc_r+0x1e>
 800407a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800407e:	f000 bb33 	b.w	80046e8 <__swbuf_r>
 8004082:	6813      	ldr	r3, [r2, #0]
 8004084:	1c58      	adds	r0, r3, #1
 8004086:	6010      	str	r0, [r2, #0]
 8004088:	7019      	strb	r1, [r3, #0]
 800408a:	4608      	mov	r0, r1
 800408c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004090:	4770      	bx	lr

08004092 <__sfputs_r>:
 8004092:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004094:	4606      	mov	r6, r0
 8004096:	460f      	mov	r7, r1
 8004098:	4614      	mov	r4, r2
 800409a:	18d5      	adds	r5, r2, r3
 800409c:	42ac      	cmp	r4, r5
 800409e:	d101      	bne.n	80040a4 <__sfputs_r+0x12>
 80040a0:	2000      	movs	r0, #0
 80040a2:	e007      	b.n	80040b4 <__sfputs_r+0x22>
 80040a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040a8:	463a      	mov	r2, r7
 80040aa:	4630      	mov	r0, r6
 80040ac:	f7ff ffda 	bl	8004064 <__sfputc_r>
 80040b0:	1c43      	adds	r3, r0, #1
 80040b2:	d1f3      	bne.n	800409c <__sfputs_r+0xa>
 80040b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080040b8 <_vfiprintf_r>:
 80040b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040bc:	460d      	mov	r5, r1
 80040be:	b09d      	sub	sp, #116	; 0x74
 80040c0:	4614      	mov	r4, r2
 80040c2:	4698      	mov	r8, r3
 80040c4:	4606      	mov	r6, r0
 80040c6:	b118      	cbz	r0, 80040d0 <_vfiprintf_r+0x18>
 80040c8:	6983      	ldr	r3, [r0, #24]
 80040ca:	b90b      	cbnz	r3, 80040d0 <_vfiprintf_r+0x18>
 80040cc:	f7ff fed0 	bl	8003e70 <__sinit>
 80040d0:	4b89      	ldr	r3, [pc, #548]	; (80042f8 <_vfiprintf_r+0x240>)
 80040d2:	429d      	cmp	r5, r3
 80040d4:	d11b      	bne.n	800410e <_vfiprintf_r+0x56>
 80040d6:	6875      	ldr	r5, [r6, #4]
 80040d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80040da:	07d9      	lsls	r1, r3, #31
 80040dc:	d405      	bmi.n	80040ea <_vfiprintf_r+0x32>
 80040de:	89ab      	ldrh	r3, [r5, #12]
 80040e0:	059a      	lsls	r2, r3, #22
 80040e2:	d402      	bmi.n	80040ea <_vfiprintf_r+0x32>
 80040e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80040e6:	f7ff ff61 	bl	8003fac <__retarget_lock_acquire_recursive>
 80040ea:	89ab      	ldrh	r3, [r5, #12]
 80040ec:	071b      	lsls	r3, r3, #28
 80040ee:	d501      	bpl.n	80040f4 <_vfiprintf_r+0x3c>
 80040f0:	692b      	ldr	r3, [r5, #16]
 80040f2:	b9eb      	cbnz	r3, 8004130 <_vfiprintf_r+0x78>
 80040f4:	4629      	mov	r1, r5
 80040f6:	4630      	mov	r0, r6
 80040f8:	f000 fb5a 	bl	80047b0 <__swsetup_r>
 80040fc:	b1c0      	cbz	r0, 8004130 <_vfiprintf_r+0x78>
 80040fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004100:	07dc      	lsls	r4, r3, #31
 8004102:	d50e      	bpl.n	8004122 <_vfiprintf_r+0x6a>
 8004104:	f04f 30ff 	mov.w	r0, #4294967295
 8004108:	b01d      	add	sp, #116	; 0x74
 800410a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800410e:	4b7b      	ldr	r3, [pc, #492]	; (80042fc <_vfiprintf_r+0x244>)
 8004110:	429d      	cmp	r5, r3
 8004112:	d101      	bne.n	8004118 <_vfiprintf_r+0x60>
 8004114:	68b5      	ldr	r5, [r6, #8]
 8004116:	e7df      	b.n	80040d8 <_vfiprintf_r+0x20>
 8004118:	4b79      	ldr	r3, [pc, #484]	; (8004300 <_vfiprintf_r+0x248>)
 800411a:	429d      	cmp	r5, r3
 800411c:	bf08      	it	eq
 800411e:	68f5      	ldreq	r5, [r6, #12]
 8004120:	e7da      	b.n	80040d8 <_vfiprintf_r+0x20>
 8004122:	89ab      	ldrh	r3, [r5, #12]
 8004124:	0598      	lsls	r0, r3, #22
 8004126:	d4ed      	bmi.n	8004104 <_vfiprintf_r+0x4c>
 8004128:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800412a:	f7ff ff40 	bl	8003fae <__retarget_lock_release_recursive>
 800412e:	e7e9      	b.n	8004104 <_vfiprintf_r+0x4c>
 8004130:	2300      	movs	r3, #0
 8004132:	9309      	str	r3, [sp, #36]	; 0x24
 8004134:	2320      	movs	r3, #32
 8004136:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800413a:	f8cd 800c 	str.w	r8, [sp, #12]
 800413e:	2330      	movs	r3, #48	; 0x30
 8004140:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004304 <_vfiprintf_r+0x24c>
 8004144:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004148:	f04f 0901 	mov.w	r9, #1
 800414c:	4623      	mov	r3, r4
 800414e:	469a      	mov	sl, r3
 8004150:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004154:	b10a      	cbz	r2, 800415a <_vfiprintf_r+0xa2>
 8004156:	2a25      	cmp	r2, #37	; 0x25
 8004158:	d1f9      	bne.n	800414e <_vfiprintf_r+0x96>
 800415a:	ebba 0b04 	subs.w	fp, sl, r4
 800415e:	d00b      	beq.n	8004178 <_vfiprintf_r+0xc0>
 8004160:	465b      	mov	r3, fp
 8004162:	4622      	mov	r2, r4
 8004164:	4629      	mov	r1, r5
 8004166:	4630      	mov	r0, r6
 8004168:	f7ff ff93 	bl	8004092 <__sfputs_r>
 800416c:	3001      	adds	r0, #1
 800416e:	f000 80aa 	beq.w	80042c6 <_vfiprintf_r+0x20e>
 8004172:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004174:	445a      	add	r2, fp
 8004176:	9209      	str	r2, [sp, #36]	; 0x24
 8004178:	f89a 3000 	ldrb.w	r3, [sl]
 800417c:	2b00      	cmp	r3, #0
 800417e:	f000 80a2 	beq.w	80042c6 <_vfiprintf_r+0x20e>
 8004182:	2300      	movs	r3, #0
 8004184:	f04f 32ff 	mov.w	r2, #4294967295
 8004188:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800418c:	f10a 0a01 	add.w	sl, sl, #1
 8004190:	9304      	str	r3, [sp, #16]
 8004192:	9307      	str	r3, [sp, #28]
 8004194:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004198:	931a      	str	r3, [sp, #104]	; 0x68
 800419a:	4654      	mov	r4, sl
 800419c:	2205      	movs	r2, #5
 800419e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041a2:	4858      	ldr	r0, [pc, #352]	; (8004304 <_vfiprintf_r+0x24c>)
 80041a4:	f7fc f814 	bl	80001d0 <memchr>
 80041a8:	9a04      	ldr	r2, [sp, #16]
 80041aa:	b9d8      	cbnz	r0, 80041e4 <_vfiprintf_r+0x12c>
 80041ac:	06d1      	lsls	r1, r2, #27
 80041ae:	bf44      	itt	mi
 80041b0:	2320      	movmi	r3, #32
 80041b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041b6:	0713      	lsls	r3, r2, #28
 80041b8:	bf44      	itt	mi
 80041ba:	232b      	movmi	r3, #43	; 0x2b
 80041bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041c0:	f89a 3000 	ldrb.w	r3, [sl]
 80041c4:	2b2a      	cmp	r3, #42	; 0x2a
 80041c6:	d015      	beq.n	80041f4 <_vfiprintf_r+0x13c>
 80041c8:	9a07      	ldr	r2, [sp, #28]
 80041ca:	4654      	mov	r4, sl
 80041cc:	2000      	movs	r0, #0
 80041ce:	f04f 0c0a 	mov.w	ip, #10
 80041d2:	4621      	mov	r1, r4
 80041d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041d8:	3b30      	subs	r3, #48	; 0x30
 80041da:	2b09      	cmp	r3, #9
 80041dc:	d94e      	bls.n	800427c <_vfiprintf_r+0x1c4>
 80041de:	b1b0      	cbz	r0, 800420e <_vfiprintf_r+0x156>
 80041e0:	9207      	str	r2, [sp, #28]
 80041e2:	e014      	b.n	800420e <_vfiprintf_r+0x156>
 80041e4:	eba0 0308 	sub.w	r3, r0, r8
 80041e8:	fa09 f303 	lsl.w	r3, r9, r3
 80041ec:	4313      	orrs	r3, r2
 80041ee:	9304      	str	r3, [sp, #16]
 80041f0:	46a2      	mov	sl, r4
 80041f2:	e7d2      	b.n	800419a <_vfiprintf_r+0xe2>
 80041f4:	9b03      	ldr	r3, [sp, #12]
 80041f6:	1d19      	adds	r1, r3, #4
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	9103      	str	r1, [sp, #12]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	bfbb      	ittet	lt
 8004200:	425b      	neglt	r3, r3
 8004202:	f042 0202 	orrlt.w	r2, r2, #2
 8004206:	9307      	strge	r3, [sp, #28]
 8004208:	9307      	strlt	r3, [sp, #28]
 800420a:	bfb8      	it	lt
 800420c:	9204      	strlt	r2, [sp, #16]
 800420e:	7823      	ldrb	r3, [r4, #0]
 8004210:	2b2e      	cmp	r3, #46	; 0x2e
 8004212:	d10c      	bne.n	800422e <_vfiprintf_r+0x176>
 8004214:	7863      	ldrb	r3, [r4, #1]
 8004216:	2b2a      	cmp	r3, #42	; 0x2a
 8004218:	d135      	bne.n	8004286 <_vfiprintf_r+0x1ce>
 800421a:	9b03      	ldr	r3, [sp, #12]
 800421c:	1d1a      	adds	r2, r3, #4
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	9203      	str	r2, [sp, #12]
 8004222:	2b00      	cmp	r3, #0
 8004224:	bfb8      	it	lt
 8004226:	f04f 33ff 	movlt.w	r3, #4294967295
 800422a:	3402      	adds	r4, #2
 800422c:	9305      	str	r3, [sp, #20]
 800422e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004314 <_vfiprintf_r+0x25c>
 8004232:	7821      	ldrb	r1, [r4, #0]
 8004234:	2203      	movs	r2, #3
 8004236:	4650      	mov	r0, sl
 8004238:	f7fb ffca 	bl	80001d0 <memchr>
 800423c:	b140      	cbz	r0, 8004250 <_vfiprintf_r+0x198>
 800423e:	2340      	movs	r3, #64	; 0x40
 8004240:	eba0 000a 	sub.w	r0, r0, sl
 8004244:	fa03 f000 	lsl.w	r0, r3, r0
 8004248:	9b04      	ldr	r3, [sp, #16]
 800424a:	4303      	orrs	r3, r0
 800424c:	3401      	adds	r4, #1
 800424e:	9304      	str	r3, [sp, #16]
 8004250:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004254:	482c      	ldr	r0, [pc, #176]	; (8004308 <_vfiprintf_r+0x250>)
 8004256:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800425a:	2206      	movs	r2, #6
 800425c:	f7fb ffb8 	bl	80001d0 <memchr>
 8004260:	2800      	cmp	r0, #0
 8004262:	d03f      	beq.n	80042e4 <_vfiprintf_r+0x22c>
 8004264:	4b29      	ldr	r3, [pc, #164]	; (800430c <_vfiprintf_r+0x254>)
 8004266:	bb1b      	cbnz	r3, 80042b0 <_vfiprintf_r+0x1f8>
 8004268:	9b03      	ldr	r3, [sp, #12]
 800426a:	3307      	adds	r3, #7
 800426c:	f023 0307 	bic.w	r3, r3, #7
 8004270:	3308      	adds	r3, #8
 8004272:	9303      	str	r3, [sp, #12]
 8004274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004276:	443b      	add	r3, r7
 8004278:	9309      	str	r3, [sp, #36]	; 0x24
 800427a:	e767      	b.n	800414c <_vfiprintf_r+0x94>
 800427c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004280:	460c      	mov	r4, r1
 8004282:	2001      	movs	r0, #1
 8004284:	e7a5      	b.n	80041d2 <_vfiprintf_r+0x11a>
 8004286:	2300      	movs	r3, #0
 8004288:	3401      	adds	r4, #1
 800428a:	9305      	str	r3, [sp, #20]
 800428c:	4619      	mov	r1, r3
 800428e:	f04f 0c0a 	mov.w	ip, #10
 8004292:	4620      	mov	r0, r4
 8004294:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004298:	3a30      	subs	r2, #48	; 0x30
 800429a:	2a09      	cmp	r2, #9
 800429c:	d903      	bls.n	80042a6 <_vfiprintf_r+0x1ee>
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d0c5      	beq.n	800422e <_vfiprintf_r+0x176>
 80042a2:	9105      	str	r1, [sp, #20]
 80042a4:	e7c3      	b.n	800422e <_vfiprintf_r+0x176>
 80042a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80042aa:	4604      	mov	r4, r0
 80042ac:	2301      	movs	r3, #1
 80042ae:	e7f0      	b.n	8004292 <_vfiprintf_r+0x1da>
 80042b0:	ab03      	add	r3, sp, #12
 80042b2:	9300      	str	r3, [sp, #0]
 80042b4:	462a      	mov	r2, r5
 80042b6:	4b16      	ldr	r3, [pc, #88]	; (8004310 <_vfiprintf_r+0x258>)
 80042b8:	a904      	add	r1, sp, #16
 80042ba:	4630      	mov	r0, r6
 80042bc:	f3af 8000 	nop.w
 80042c0:	4607      	mov	r7, r0
 80042c2:	1c78      	adds	r0, r7, #1
 80042c4:	d1d6      	bne.n	8004274 <_vfiprintf_r+0x1bc>
 80042c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80042c8:	07d9      	lsls	r1, r3, #31
 80042ca:	d405      	bmi.n	80042d8 <_vfiprintf_r+0x220>
 80042cc:	89ab      	ldrh	r3, [r5, #12]
 80042ce:	059a      	lsls	r2, r3, #22
 80042d0:	d402      	bmi.n	80042d8 <_vfiprintf_r+0x220>
 80042d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80042d4:	f7ff fe6b 	bl	8003fae <__retarget_lock_release_recursive>
 80042d8:	89ab      	ldrh	r3, [r5, #12]
 80042da:	065b      	lsls	r3, r3, #25
 80042dc:	f53f af12 	bmi.w	8004104 <_vfiprintf_r+0x4c>
 80042e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80042e2:	e711      	b.n	8004108 <_vfiprintf_r+0x50>
 80042e4:	ab03      	add	r3, sp, #12
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	462a      	mov	r2, r5
 80042ea:	4b09      	ldr	r3, [pc, #36]	; (8004310 <_vfiprintf_r+0x258>)
 80042ec:	a904      	add	r1, sp, #16
 80042ee:	4630      	mov	r0, r6
 80042f0:	f000 f880 	bl	80043f4 <_printf_i>
 80042f4:	e7e4      	b.n	80042c0 <_vfiprintf_r+0x208>
 80042f6:	bf00      	nop
 80042f8:	08004cc4 	.word	0x08004cc4
 80042fc:	08004ce4 	.word	0x08004ce4
 8004300:	08004ca4 	.word	0x08004ca4
 8004304:	08004d04 	.word	0x08004d04
 8004308:	08004d0e 	.word	0x08004d0e
 800430c:	00000000 	.word	0x00000000
 8004310:	08004093 	.word	0x08004093
 8004314:	08004d0a 	.word	0x08004d0a

08004318 <_printf_common>:
 8004318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800431c:	4616      	mov	r6, r2
 800431e:	4699      	mov	r9, r3
 8004320:	688a      	ldr	r2, [r1, #8]
 8004322:	690b      	ldr	r3, [r1, #16]
 8004324:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004328:	4293      	cmp	r3, r2
 800432a:	bfb8      	it	lt
 800432c:	4613      	movlt	r3, r2
 800432e:	6033      	str	r3, [r6, #0]
 8004330:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004334:	4607      	mov	r7, r0
 8004336:	460c      	mov	r4, r1
 8004338:	b10a      	cbz	r2, 800433e <_printf_common+0x26>
 800433a:	3301      	adds	r3, #1
 800433c:	6033      	str	r3, [r6, #0]
 800433e:	6823      	ldr	r3, [r4, #0]
 8004340:	0699      	lsls	r1, r3, #26
 8004342:	bf42      	ittt	mi
 8004344:	6833      	ldrmi	r3, [r6, #0]
 8004346:	3302      	addmi	r3, #2
 8004348:	6033      	strmi	r3, [r6, #0]
 800434a:	6825      	ldr	r5, [r4, #0]
 800434c:	f015 0506 	ands.w	r5, r5, #6
 8004350:	d106      	bne.n	8004360 <_printf_common+0x48>
 8004352:	f104 0a19 	add.w	sl, r4, #25
 8004356:	68e3      	ldr	r3, [r4, #12]
 8004358:	6832      	ldr	r2, [r6, #0]
 800435a:	1a9b      	subs	r3, r3, r2
 800435c:	42ab      	cmp	r3, r5
 800435e:	dc26      	bgt.n	80043ae <_printf_common+0x96>
 8004360:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004364:	1e13      	subs	r3, r2, #0
 8004366:	6822      	ldr	r2, [r4, #0]
 8004368:	bf18      	it	ne
 800436a:	2301      	movne	r3, #1
 800436c:	0692      	lsls	r2, r2, #26
 800436e:	d42b      	bmi.n	80043c8 <_printf_common+0xb0>
 8004370:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004374:	4649      	mov	r1, r9
 8004376:	4638      	mov	r0, r7
 8004378:	47c0      	blx	r8
 800437a:	3001      	adds	r0, #1
 800437c:	d01e      	beq.n	80043bc <_printf_common+0xa4>
 800437e:	6823      	ldr	r3, [r4, #0]
 8004380:	68e5      	ldr	r5, [r4, #12]
 8004382:	6832      	ldr	r2, [r6, #0]
 8004384:	f003 0306 	and.w	r3, r3, #6
 8004388:	2b04      	cmp	r3, #4
 800438a:	bf08      	it	eq
 800438c:	1aad      	subeq	r5, r5, r2
 800438e:	68a3      	ldr	r3, [r4, #8]
 8004390:	6922      	ldr	r2, [r4, #16]
 8004392:	bf0c      	ite	eq
 8004394:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004398:	2500      	movne	r5, #0
 800439a:	4293      	cmp	r3, r2
 800439c:	bfc4      	itt	gt
 800439e:	1a9b      	subgt	r3, r3, r2
 80043a0:	18ed      	addgt	r5, r5, r3
 80043a2:	2600      	movs	r6, #0
 80043a4:	341a      	adds	r4, #26
 80043a6:	42b5      	cmp	r5, r6
 80043a8:	d11a      	bne.n	80043e0 <_printf_common+0xc8>
 80043aa:	2000      	movs	r0, #0
 80043ac:	e008      	b.n	80043c0 <_printf_common+0xa8>
 80043ae:	2301      	movs	r3, #1
 80043b0:	4652      	mov	r2, sl
 80043b2:	4649      	mov	r1, r9
 80043b4:	4638      	mov	r0, r7
 80043b6:	47c0      	blx	r8
 80043b8:	3001      	adds	r0, #1
 80043ba:	d103      	bne.n	80043c4 <_printf_common+0xac>
 80043bc:	f04f 30ff 	mov.w	r0, #4294967295
 80043c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043c4:	3501      	adds	r5, #1
 80043c6:	e7c6      	b.n	8004356 <_printf_common+0x3e>
 80043c8:	18e1      	adds	r1, r4, r3
 80043ca:	1c5a      	adds	r2, r3, #1
 80043cc:	2030      	movs	r0, #48	; 0x30
 80043ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80043d2:	4422      	add	r2, r4
 80043d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80043d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80043dc:	3302      	adds	r3, #2
 80043de:	e7c7      	b.n	8004370 <_printf_common+0x58>
 80043e0:	2301      	movs	r3, #1
 80043e2:	4622      	mov	r2, r4
 80043e4:	4649      	mov	r1, r9
 80043e6:	4638      	mov	r0, r7
 80043e8:	47c0      	blx	r8
 80043ea:	3001      	adds	r0, #1
 80043ec:	d0e6      	beq.n	80043bc <_printf_common+0xa4>
 80043ee:	3601      	adds	r6, #1
 80043f0:	e7d9      	b.n	80043a6 <_printf_common+0x8e>
	...

080043f4 <_printf_i>:
 80043f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043f8:	460c      	mov	r4, r1
 80043fa:	4691      	mov	r9, r2
 80043fc:	7e27      	ldrb	r7, [r4, #24]
 80043fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004400:	2f78      	cmp	r7, #120	; 0x78
 8004402:	4680      	mov	r8, r0
 8004404:	469a      	mov	sl, r3
 8004406:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800440a:	d807      	bhi.n	800441c <_printf_i+0x28>
 800440c:	2f62      	cmp	r7, #98	; 0x62
 800440e:	d80a      	bhi.n	8004426 <_printf_i+0x32>
 8004410:	2f00      	cmp	r7, #0
 8004412:	f000 80d8 	beq.w	80045c6 <_printf_i+0x1d2>
 8004416:	2f58      	cmp	r7, #88	; 0x58
 8004418:	f000 80a3 	beq.w	8004562 <_printf_i+0x16e>
 800441c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004420:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004424:	e03a      	b.n	800449c <_printf_i+0xa8>
 8004426:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800442a:	2b15      	cmp	r3, #21
 800442c:	d8f6      	bhi.n	800441c <_printf_i+0x28>
 800442e:	a001      	add	r0, pc, #4	; (adr r0, 8004434 <_printf_i+0x40>)
 8004430:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004434:	0800448d 	.word	0x0800448d
 8004438:	080044a1 	.word	0x080044a1
 800443c:	0800441d 	.word	0x0800441d
 8004440:	0800441d 	.word	0x0800441d
 8004444:	0800441d 	.word	0x0800441d
 8004448:	0800441d 	.word	0x0800441d
 800444c:	080044a1 	.word	0x080044a1
 8004450:	0800441d 	.word	0x0800441d
 8004454:	0800441d 	.word	0x0800441d
 8004458:	0800441d 	.word	0x0800441d
 800445c:	0800441d 	.word	0x0800441d
 8004460:	080045ad 	.word	0x080045ad
 8004464:	080044d1 	.word	0x080044d1
 8004468:	0800458f 	.word	0x0800458f
 800446c:	0800441d 	.word	0x0800441d
 8004470:	0800441d 	.word	0x0800441d
 8004474:	080045cf 	.word	0x080045cf
 8004478:	0800441d 	.word	0x0800441d
 800447c:	080044d1 	.word	0x080044d1
 8004480:	0800441d 	.word	0x0800441d
 8004484:	0800441d 	.word	0x0800441d
 8004488:	08004597 	.word	0x08004597
 800448c:	680b      	ldr	r3, [r1, #0]
 800448e:	1d1a      	adds	r2, r3, #4
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	600a      	str	r2, [r1, #0]
 8004494:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004498:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800449c:	2301      	movs	r3, #1
 800449e:	e0a3      	b.n	80045e8 <_printf_i+0x1f4>
 80044a0:	6825      	ldr	r5, [r4, #0]
 80044a2:	6808      	ldr	r0, [r1, #0]
 80044a4:	062e      	lsls	r6, r5, #24
 80044a6:	f100 0304 	add.w	r3, r0, #4
 80044aa:	d50a      	bpl.n	80044c2 <_printf_i+0xce>
 80044ac:	6805      	ldr	r5, [r0, #0]
 80044ae:	600b      	str	r3, [r1, #0]
 80044b0:	2d00      	cmp	r5, #0
 80044b2:	da03      	bge.n	80044bc <_printf_i+0xc8>
 80044b4:	232d      	movs	r3, #45	; 0x2d
 80044b6:	426d      	negs	r5, r5
 80044b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044bc:	485e      	ldr	r0, [pc, #376]	; (8004638 <_printf_i+0x244>)
 80044be:	230a      	movs	r3, #10
 80044c0:	e019      	b.n	80044f6 <_printf_i+0x102>
 80044c2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80044c6:	6805      	ldr	r5, [r0, #0]
 80044c8:	600b      	str	r3, [r1, #0]
 80044ca:	bf18      	it	ne
 80044cc:	b22d      	sxthne	r5, r5
 80044ce:	e7ef      	b.n	80044b0 <_printf_i+0xbc>
 80044d0:	680b      	ldr	r3, [r1, #0]
 80044d2:	6825      	ldr	r5, [r4, #0]
 80044d4:	1d18      	adds	r0, r3, #4
 80044d6:	6008      	str	r0, [r1, #0]
 80044d8:	0628      	lsls	r0, r5, #24
 80044da:	d501      	bpl.n	80044e0 <_printf_i+0xec>
 80044dc:	681d      	ldr	r5, [r3, #0]
 80044de:	e002      	b.n	80044e6 <_printf_i+0xf2>
 80044e0:	0669      	lsls	r1, r5, #25
 80044e2:	d5fb      	bpl.n	80044dc <_printf_i+0xe8>
 80044e4:	881d      	ldrh	r5, [r3, #0]
 80044e6:	4854      	ldr	r0, [pc, #336]	; (8004638 <_printf_i+0x244>)
 80044e8:	2f6f      	cmp	r7, #111	; 0x6f
 80044ea:	bf0c      	ite	eq
 80044ec:	2308      	moveq	r3, #8
 80044ee:	230a      	movne	r3, #10
 80044f0:	2100      	movs	r1, #0
 80044f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044f6:	6866      	ldr	r6, [r4, #4]
 80044f8:	60a6      	str	r6, [r4, #8]
 80044fa:	2e00      	cmp	r6, #0
 80044fc:	bfa2      	ittt	ge
 80044fe:	6821      	ldrge	r1, [r4, #0]
 8004500:	f021 0104 	bicge.w	r1, r1, #4
 8004504:	6021      	strge	r1, [r4, #0]
 8004506:	b90d      	cbnz	r5, 800450c <_printf_i+0x118>
 8004508:	2e00      	cmp	r6, #0
 800450a:	d04d      	beq.n	80045a8 <_printf_i+0x1b4>
 800450c:	4616      	mov	r6, r2
 800450e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004512:	fb03 5711 	mls	r7, r3, r1, r5
 8004516:	5dc7      	ldrb	r7, [r0, r7]
 8004518:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800451c:	462f      	mov	r7, r5
 800451e:	42bb      	cmp	r3, r7
 8004520:	460d      	mov	r5, r1
 8004522:	d9f4      	bls.n	800450e <_printf_i+0x11a>
 8004524:	2b08      	cmp	r3, #8
 8004526:	d10b      	bne.n	8004540 <_printf_i+0x14c>
 8004528:	6823      	ldr	r3, [r4, #0]
 800452a:	07df      	lsls	r7, r3, #31
 800452c:	d508      	bpl.n	8004540 <_printf_i+0x14c>
 800452e:	6923      	ldr	r3, [r4, #16]
 8004530:	6861      	ldr	r1, [r4, #4]
 8004532:	4299      	cmp	r1, r3
 8004534:	bfde      	ittt	le
 8004536:	2330      	movle	r3, #48	; 0x30
 8004538:	f806 3c01 	strble.w	r3, [r6, #-1]
 800453c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004540:	1b92      	subs	r2, r2, r6
 8004542:	6122      	str	r2, [r4, #16]
 8004544:	f8cd a000 	str.w	sl, [sp]
 8004548:	464b      	mov	r3, r9
 800454a:	aa03      	add	r2, sp, #12
 800454c:	4621      	mov	r1, r4
 800454e:	4640      	mov	r0, r8
 8004550:	f7ff fee2 	bl	8004318 <_printf_common>
 8004554:	3001      	adds	r0, #1
 8004556:	d14c      	bne.n	80045f2 <_printf_i+0x1fe>
 8004558:	f04f 30ff 	mov.w	r0, #4294967295
 800455c:	b004      	add	sp, #16
 800455e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004562:	4835      	ldr	r0, [pc, #212]	; (8004638 <_printf_i+0x244>)
 8004564:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004568:	6823      	ldr	r3, [r4, #0]
 800456a:	680e      	ldr	r6, [r1, #0]
 800456c:	061f      	lsls	r7, r3, #24
 800456e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004572:	600e      	str	r6, [r1, #0]
 8004574:	d514      	bpl.n	80045a0 <_printf_i+0x1ac>
 8004576:	07d9      	lsls	r1, r3, #31
 8004578:	bf44      	itt	mi
 800457a:	f043 0320 	orrmi.w	r3, r3, #32
 800457e:	6023      	strmi	r3, [r4, #0]
 8004580:	b91d      	cbnz	r5, 800458a <_printf_i+0x196>
 8004582:	6823      	ldr	r3, [r4, #0]
 8004584:	f023 0320 	bic.w	r3, r3, #32
 8004588:	6023      	str	r3, [r4, #0]
 800458a:	2310      	movs	r3, #16
 800458c:	e7b0      	b.n	80044f0 <_printf_i+0xfc>
 800458e:	6823      	ldr	r3, [r4, #0]
 8004590:	f043 0320 	orr.w	r3, r3, #32
 8004594:	6023      	str	r3, [r4, #0]
 8004596:	2378      	movs	r3, #120	; 0x78
 8004598:	4828      	ldr	r0, [pc, #160]	; (800463c <_printf_i+0x248>)
 800459a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800459e:	e7e3      	b.n	8004568 <_printf_i+0x174>
 80045a0:	065e      	lsls	r6, r3, #25
 80045a2:	bf48      	it	mi
 80045a4:	b2ad      	uxthmi	r5, r5
 80045a6:	e7e6      	b.n	8004576 <_printf_i+0x182>
 80045a8:	4616      	mov	r6, r2
 80045aa:	e7bb      	b.n	8004524 <_printf_i+0x130>
 80045ac:	680b      	ldr	r3, [r1, #0]
 80045ae:	6826      	ldr	r6, [r4, #0]
 80045b0:	6960      	ldr	r0, [r4, #20]
 80045b2:	1d1d      	adds	r5, r3, #4
 80045b4:	600d      	str	r5, [r1, #0]
 80045b6:	0635      	lsls	r5, r6, #24
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	d501      	bpl.n	80045c0 <_printf_i+0x1cc>
 80045bc:	6018      	str	r0, [r3, #0]
 80045be:	e002      	b.n	80045c6 <_printf_i+0x1d2>
 80045c0:	0671      	lsls	r1, r6, #25
 80045c2:	d5fb      	bpl.n	80045bc <_printf_i+0x1c8>
 80045c4:	8018      	strh	r0, [r3, #0]
 80045c6:	2300      	movs	r3, #0
 80045c8:	6123      	str	r3, [r4, #16]
 80045ca:	4616      	mov	r6, r2
 80045cc:	e7ba      	b.n	8004544 <_printf_i+0x150>
 80045ce:	680b      	ldr	r3, [r1, #0]
 80045d0:	1d1a      	adds	r2, r3, #4
 80045d2:	600a      	str	r2, [r1, #0]
 80045d4:	681e      	ldr	r6, [r3, #0]
 80045d6:	6862      	ldr	r2, [r4, #4]
 80045d8:	2100      	movs	r1, #0
 80045da:	4630      	mov	r0, r6
 80045dc:	f7fb fdf8 	bl	80001d0 <memchr>
 80045e0:	b108      	cbz	r0, 80045e6 <_printf_i+0x1f2>
 80045e2:	1b80      	subs	r0, r0, r6
 80045e4:	6060      	str	r0, [r4, #4]
 80045e6:	6863      	ldr	r3, [r4, #4]
 80045e8:	6123      	str	r3, [r4, #16]
 80045ea:	2300      	movs	r3, #0
 80045ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045f0:	e7a8      	b.n	8004544 <_printf_i+0x150>
 80045f2:	6923      	ldr	r3, [r4, #16]
 80045f4:	4632      	mov	r2, r6
 80045f6:	4649      	mov	r1, r9
 80045f8:	4640      	mov	r0, r8
 80045fa:	47d0      	blx	sl
 80045fc:	3001      	adds	r0, #1
 80045fe:	d0ab      	beq.n	8004558 <_printf_i+0x164>
 8004600:	6823      	ldr	r3, [r4, #0]
 8004602:	079b      	lsls	r3, r3, #30
 8004604:	d413      	bmi.n	800462e <_printf_i+0x23a>
 8004606:	68e0      	ldr	r0, [r4, #12]
 8004608:	9b03      	ldr	r3, [sp, #12]
 800460a:	4298      	cmp	r0, r3
 800460c:	bfb8      	it	lt
 800460e:	4618      	movlt	r0, r3
 8004610:	e7a4      	b.n	800455c <_printf_i+0x168>
 8004612:	2301      	movs	r3, #1
 8004614:	4632      	mov	r2, r6
 8004616:	4649      	mov	r1, r9
 8004618:	4640      	mov	r0, r8
 800461a:	47d0      	blx	sl
 800461c:	3001      	adds	r0, #1
 800461e:	d09b      	beq.n	8004558 <_printf_i+0x164>
 8004620:	3501      	adds	r5, #1
 8004622:	68e3      	ldr	r3, [r4, #12]
 8004624:	9903      	ldr	r1, [sp, #12]
 8004626:	1a5b      	subs	r3, r3, r1
 8004628:	42ab      	cmp	r3, r5
 800462a:	dcf2      	bgt.n	8004612 <_printf_i+0x21e>
 800462c:	e7eb      	b.n	8004606 <_printf_i+0x212>
 800462e:	2500      	movs	r5, #0
 8004630:	f104 0619 	add.w	r6, r4, #25
 8004634:	e7f5      	b.n	8004622 <_printf_i+0x22e>
 8004636:	bf00      	nop
 8004638:	08004d15 	.word	0x08004d15
 800463c:	08004d26 	.word	0x08004d26

08004640 <_sbrk_r>:
 8004640:	b538      	push	{r3, r4, r5, lr}
 8004642:	4d06      	ldr	r5, [pc, #24]	; (800465c <_sbrk_r+0x1c>)
 8004644:	2300      	movs	r3, #0
 8004646:	4604      	mov	r4, r0
 8004648:	4608      	mov	r0, r1
 800464a:	602b      	str	r3, [r5, #0]
 800464c:	f7fc fb44 	bl	8000cd8 <_sbrk>
 8004650:	1c43      	adds	r3, r0, #1
 8004652:	d102      	bne.n	800465a <_sbrk_r+0x1a>
 8004654:	682b      	ldr	r3, [r5, #0]
 8004656:	b103      	cbz	r3, 800465a <_sbrk_r+0x1a>
 8004658:	6023      	str	r3, [r4, #0]
 800465a:	bd38      	pop	{r3, r4, r5, pc}
 800465c:	20000190 	.word	0x20000190

08004660 <__sread>:
 8004660:	b510      	push	{r4, lr}
 8004662:	460c      	mov	r4, r1
 8004664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004668:	f000 fab4 	bl	8004bd4 <_read_r>
 800466c:	2800      	cmp	r0, #0
 800466e:	bfab      	itete	ge
 8004670:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004672:	89a3      	ldrhlt	r3, [r4, #12]
 8004674:	181b      	addge	r3, r3, r0
 8004676:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800467a:	bfac      	ite	ge
 800467c:	6563      	strge	r3, [r4, #84]	; 0x54
 800467e:	81a3      	strhlt	r3, [r4, #12]
 8004680:	bd10      	pop	{r4, pc}

08004682 <__swrite>:
 8004682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004686:	461f      	mov	r7, r3
 8004688:	898b      	ldrh	r3, [r1, #12]
 800468a:	05db      	lsls	r3, r3, #23
 800468c:	4605      	mov	r5, r0
 800468e:	460c      	mov	r4, r1
 8004690:	4616      	mov	r6, r2
 8004692:	d505      	bpl.n	80046a0 <__swrite+0x1e>
 8004694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004698:	2302      	movs	r3, #2
 800469a:	2200      	movs	r2, #0
 800469c:	f000 f9c8 	bl	8004a30 <_lseek_r>
 80046a0:	89a3      	ldrh	r3, [r4, #12]
 80046a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046aa:	81a3      	strh	r3, [r4, #12]
 80046ac:	4632      	mov	r2, r6
 80046ae:	463b      	mov	r3, r7
 80046b0:	4628      	mov	r0, r5
 80046b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046b6:	f000 b869 	b.w	800478c <_write_r>

080046ba <__sseek>:
 80046ba:	b510      	push	{r4, lr}
 80046bc:	460c      	mov	r4, r1
 80046be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046c2:	f000 f9b5 	bl	8004a30 <_lseek_r>
 80046c6:	1c43      	adds	r3, r0, #1
 80046c8:	89a3      	ldrh	r3, [r4, #12]
 80046ca:	bf15      	itete	ne
 80046cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80046ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80046d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80046d6:	81a3      	strheq	r3, [r4, #12]
 80046d8:	bf18      	it	ne
 80046da:	81a3      	strhne	r3, [r4, #12]
 80046dc:	bd10      	pop	{r4, pc}

080046de <__sclose>:
 80046de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046e2:	f000 b8d3 	b.w	800488c <_close_r>
	...

080046e8 <__swbuf_r>:
 80046e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ea:	460e      	mov	r6, r1
 80046ec:	4614      	mov	r4, r2
 80046ee:	4605      	mov	r5, r0
 80046f0:	b118      	cbz	r0, 80046fa <__swbuf_r+0x12>
 80046f2:	6983      	ldr	r3, [r0, #24]
 80046f4:	b90b      	cbnz	r3, 80046fa <__swbuf_r+0x12>
 80046f6:	f7ff fbbb 	bl	8003e70 <__sinit>
 80046fa:	4b21      	ldr	r3, [pc, #132]	; (8004780 <__swbuf_r+0x98>)
 80046fc:	429c      	cmp	r4, r3
 80046fe:	d12b      	bne.n	8004758 <__swbuf_r+0x70>
 8004700:	686c      	ldr	r4, [r5, #4]
 8004702:	69a3      	ldr	r3, [r4, #24]
 8004704:	60a3      	str	r3, [r4, #8]
 8004706:	89a3      	ldrh	r3, [r4, #12]
 8004708:	071a      	lsls	r2, r3, #28
 800470a:	d52f      	bpl.n	800476c <__swbuf_r+0x84>
 800470c:	6923      	ldr	r3, [r4, #16]
 800470e:	b36b      	cbz	r3, 800476c <__swbuf_r+0x84>
 8004710:	6923      	ldr	r3, [r4, #16]
 8004712:	6820      	ldr	r0, [r4, #0]
 8004714:	1ac0      	subs	r0, r0, r3
 8004716:	6963      	ldr	r3, [r4, #20]
 8004718:	b2f6      	uxtb	r6, r6
 800471a:	4283      	cmp	r3, r0
 800471c:	4637      	mov	r7, r6
 800471e:	dc04      	bgt.n	800472a <__swbuf_r+0x42>
 8004720:	4621      	mov	r1, r4
 8004722:	4628      	mov	r0, r5
 8004724:	f000 f948 	bl	80049b8 <_fflush_r>
 8004728:	bb30      	cbnz	r0, 8004778 <__swbuf_r+0x90>
 800472a:	68a3      	ldr	r3, [r4, #8]
 800472c:	3b01      	subs	r3, #1
 800472e:	60a3      	str	r3, [r4, #8]
 8004730:	6823      	ldr	r3, [r4, #0]
 8004732:	1c5a      	adds	r2, r3, #1
 8004734:	6022      	str	r2, [r4, #0]
 8004736:	701e      	strb	r6, [r3, #0]
 8004738:	6963      	ldr	r3, [r4, #20]
 800473a:	3001      	adds	r0, #1
 800473c:	4283      	cmp	r3, r0
 800473e:	d004      	beq.n	800474a <__swbuf_r+0x62>
 8004740:	89a3      	ldrh	r3, [r4, #12]
 8004742:	07db      	lsls	r3, r3, #31
 8004744:	d506      	bpl.n	8004754 <__swbuf_r+0x6c>
 8004746:	2e0a      	cmp	r6, #10
 8004748:	d104      	bne.n	8004754 <__swbuf_r+0x6c>
 800474a:	4621      	mov	r1, r4
 800474c:	4628      	mov	r0, r5
 800474e:	f000 f933 	bl	80049b8 <_fflush_r>
 8004752:	b988      	cbnz	r0, 8004778 <__swbuf_r+0x90>
 8004754:	4638      	mov	r0, r7
 8004756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004758:	4b0a      	ldr	r3, [pc, #40]	; (8004784 <__swbuf_r+0x9c>)
 800475a:	429c      	cmp	r4, r3
 800475c:	d101      	bne.n	8004762 <__swbuf_r+0x7a>
 800475e:	68ac      	ldr	r4, [r5, #8]
 8004760:	e7cf      	b.n	8004702 <__swbuf_r+0x1a>
 8004762:	4b09      	ldr	r3, [pc, #36]	; (8004788 <__swbuf_r+0xa0>)
 8004764:	429c      	cmp	r4, r3
 8004766:	bf08      	it	eq
 8004768:	68ec      	ldreq	r4, [r5, #12]
 800476a:	e7ca      	b.n	8004702 <__swbuf_r+0x1a>
 800476c:	4621      	mov	r1, r4
 800476e:	4628      	mov	r0, r5
 8004770:	f000 f81e 	bl	80047b0 <__swsetup_r>
 8004774:	2800      	cmp	r0, #0
 8004776:	d0cb      	beq.n	8004710 <__swbuf_r+0x28>
 8004778:	f04f 37ff 	mov.w	r7, #4294967295
 800477c:	e7ea      	b.n	8004754 <__swbuf_r+0x6c>
 800477e:	bf00      	nop
 8004780:	08004cc4 	.word	0x08004cc4
 8004784:	08004ce4 	.word	0x08004ce4
 8004788:	08004ca4 	.word	0x08004ca4

0800478c <_write_r>:
 800478c:	b538      	push	{r3, r4, r5, lr}
 800478e:	4d07      	ldr	r5, [pc, #28]	; (80047ac <_write_r+0x20>)
 8004790:	4604      	mov	r4, r0
 8004792:	4608      	mov	r0, r1
 8004794:	4611      	mov	r1, r2
 8004796:	2200      	movs	r2, #0
 8004798:	602a      	str	r2, [r5, #0]
 800479a:	461a      	mov	r2, r3
 800479c:	f7fc fa4b 	bl	8000c36 <_write>
 80047a0:	1c43      	adds	r3, r0, #1
 80047a2:	d102      	bne.n	80047aa <_write_r+0x1e>
 80047a4:	682b      	ldr	r3, [r5, #0]
 80047a6:	b103      	cbz	r3, 80047aa <_write_r+0x1e>
 80047a8:	6023      	str	r3, [r4, #0]
 80047aa:	bd38      	pop	{r3, r4, r5, pc}
 80047ac:	20000190 	.word	0x20000190

080047b0 <__swsetup_r>:
 80047b0:	4b32      	ldr	r3, [pc, #200]	; (800487c <__swsetup_r+0xcc>)
 80047b2:	b570      	push	{r4, r5, r6, lr}
 80047b4:	681d      	ldr	r5, [r3, #0]
 80047b6:	4606      	mov	r6, r0
 80047b8:	460c      	mov	r4, r1
 80047ba:	b125      	cbz	r5, 80047c6 <__swsetup_r+0x16>
 80047bc:	69ab      	ldr	r3, [r5, #24]
 80047be:	b913      	cbnz	r3, 80047c6 <__swsetup_r+0x16>
 80047c0:	4628      	mov	r0, r5
 80047c2:	f7ff fb55 	bl	8003e70 <__sinit>
 80047c6:	4b2e      	ldr	r3, [pc, #184]	; (8004880 <__swsetup_r+0xd0>)
 80047c8:	429c      	cmp	r4, r3
 80047ca:	d10f      	bne.n	80047ec <__swsetup_r+0x3c>
 80047cc:	686c      	ldr	r4, [r5, #4]
 80047ce:	89a3      	ldrh	r3, [r4, #12]
 80047d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80047d4:	0719      	lsls	r1, r3, #28
 80047d6:	d42c      	bmi.n	8004832 <__swsetup_r+0x82>
 80047d8:	06dd      	lsls	r5, r3, #27
 80047da:	d411      	bmi.n	8004800 <__swsetup_r+0x50>
 80047dc:	2309      	movs	r3, #9
 80047de:	6033      	str	r3, [r6, #0]
 80047e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80047e4:	81a3      	strh	r3, [r4, #12]
 80047e6:	f04f 30ff 	mov.w	r0, #4294967295
 80047ea:	e03e      	b.n	800486a <__swsetup_r+0xba>
 80047ec:	4b25      	ldr	r3, [pc, #148]	; (8004884 <__swsetup_r+0xd4>)
 80047ee:	429c      	cmp	r4, r3
 80047f0:	d101      	bne.n	80047f6 <__swsetup_r+0x46>
 80047f2:	68ac      	ldr	r4, [r5, #8]
 80047f4:	e7eb      	b.n	80047ce <__swsetup_r+0x1e>
 80047f6:	4b24      	ldr	r3, [pc, #144]	; (8004888 <__swsetup_r+0xd8>)
 80047f8:	429c      	cmp	r4, r3
 80047fa:	bf08      	it	eq
 80047fc:	68ec      	ldreq	r4, [r5, #12]
 80047fe:	e7e6      	b.n	80047ce <__swsetup_r+0x1e>
 8004800:	0758      	lsls	r0, r3, #29
 8004802:	d512      	bpl.n	800482a <__swsetup_r+0x7a>
 8004804:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004806:	b141      	cbz	r1, 800481a <__swsetup_r+0x6a>
 8004808:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800480c:	4299      	cmp	r1, r3
 800480e:	d002      	beq.n	8004816 <__swsetup_r+0x66>
 8004810:	4630      	mov	r0, r6
 8004812:	f000 f98f 	bl	8004b34 <_free_r>
 8004816:	2300      	movs	r3, #0
 8004818:	6363      	str	r3, [r4, #52]	; 0x34
 800481a:	89a3      	ldrh	r3, [r4, #12]
 800481c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004820:	81a3      	strh	r3, [r4, #12]
 8004822:	2300      	movs	r3, #0
 8004824:	6063      	str	r3, [r4, #4]
 8004826:	6923      	ldr	r3, [r4, #16]
 8004828:	6023      	str	r3, [r4, #0]
 800482a:	89a3      	ldrh	r3, [r4, #12]
 800482c:	f043 0308 	orr.w	r3, r3, #8
 8004830:	81a3      	strh	r3, [r4, #12]
 8004832:	6923      	ldr	r3, [r4, #16]
 8004834:	b94b      	cbnz	r3, 800484a <__swsetup_r+0x9a>
 8004836:	89a3      	ldrh	r3, [r4, #12]
 8004838:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800483c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004840:	d003      	beq.n	800484a <__swsetup_r+0x9a>
 8004842:	4621      	mov	r1, r4
 8004844:	4630      	mov	r0, r6
 8004846:	f000 f929 	bl	8004a9c <__smakebuf_r>
 800484a:	89a0      	ldrh	r0, [r4, #12]
 800484c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004850:	f010 0301 	ands.w	r3, r0, #1
 8004854:	d00a      	beq.n	800486c <__swsetup_r+0xbc>
 8004856:	2300      	movs	r3, #0
 8004858:	60a3      	str	r3, [r4, #8]
 800485a:	6963      	ldr	r3, [r4, #20]
 800485c:	425b      	negs	r3, r3
 800485e:	61a3      	str	r3, [r4, #24]
 8004860:	6923      	ldr	r3, [r4, #16]
 8004862:	b943      	cbnz	r3, 8004876 <__swsetup_r+0xc6>
 8004864:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004868:	d1ba      	bne.n	80047e0 <__swsetup_r+0x30>
 800486a:	bd70      	pop	{r4, r5, r6, pc}
 800486c:	0781      	lsls	r1, r0, #30
 800486e:	bf58      	it	pl
 8004870:	6963      	ldrpl	r3, [r4, #20]
 8004872:	60a3      	str	r3, [r4, #8]
 8004874:	e7f4      	b.n	8004860 <__swsetup_r+0xb0>
 8004876:	2000      	movs	r0, #0
 8004878:	e7f7      	b.n	800486a <__swsetup_r+0xba>
 800487a:	bf00      	nop
 800487c:	2000000c 	.word	0x2000000c
 8004880:	08004cc4 	.word	0x08004cc4
 8004884:	08004ce4 	.word	0x08004ce4
 8004888:	08004ca4 	.word	0x08004ca4

0800488c <_close_r>:
 800488c:	b538      	push	{r3, r4, r5, lr}
 800488e:	4d06      	ldr	r5, [pc, #24]	; (80048a8 <_close_r+0x1c>)
 8004890:	2300      	movs	r3, #0
 8004892:	4604      	mov	r4, r0
 8004894:	4608      	mov	r0, r1
 8004896:	602b      	str	r3, [r5, #0]
 8004898:	f7fc f9e9 	bl	8000c6e <_close>
 800489c:	1c43      	adds	r3, r0, #1
 800489e:	d102      	bne.n	80048a6 <_close_r+0x1a>
 80048a0:	682b      	ldr	r3, [r5, #0]
 80048a2:	b103      	cbz	r3, 80048a6 <_close_r+0x1a>
 80048a4:	6023      	str	r3, [r4, #0]
 80048a6:	bd38      	pop	{r3, r4, r5, pc}
 80048a8:	20000190 	.word	0x20000190

080048ac <__sflush_r>:
 80048ac:	898a      	ldrh	r2, [r1, #12]
 80048ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048b2:	4605      	mov	r5, r0
 80048b4:	0710      	lsls	r0, r2, #28
 80048b6:	460c      	mov	r4, r1
 80048b8:	d458      	bmi.n	800496c <__sflush_r+0xc0>
 80048ba:	684b      	ldr	r3, [r1, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	dc05      	bgt.n	80048cc <__sflush_r+0x20>
 80048c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	dc02      	bgt.n	80048cc <__sflush_r+0x20>
 80048c6:	2000      	movs	r0, #0
 80048c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048ce:	2e00      	cmp	r6, #0
 80048d0:	d0f9      	beq.n	80048c6 <__sflush_r+0x1a>
 80048d2:	2300      	movs	r3, #0
 80048d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80048d8:	682f      	ldr	r7, [r5, #0]
 80048da:	602b      	str	r3, [r5, #0]
 80048dc:	d032      	beq.n	8004944 <__sflush_r+0x98>
 80048de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80048e0:	89a3      	ldrh	r3, [r4, #12]
 80048e2:	075a      	lsls	r2, r3, #29
 80048e4:	d505      	bpl.n	80048f2 <__sflush_r+0x46>
 80048e6:	6863      	ldr	r3, [r4, #4]
 80048e8:	1ac0      	subs	r0, r0, r3
 80048ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048ec:	b10b      	cbz	r3, 80048f2 <__sflush_r+0x46>
 80048ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048f0:	1ac0      	subs	r0, r0, r3
 80048f2:	2300      	movs	r3, #0
 80048f4:	4602      	mov	r2, r0
 80048f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048f8:	6a21      	ldr	r1, [r4, #32]
 80048fa:	4628      	mov	r0, r5
 80048fc:	47b0      	blx	r6
 80048fe:	1c43      	adds	r3, r0, #1
 8004900:	89a3      	ldrh	r3, [r4, #12]
 8004902:	d106      	bne.n	8004912 <__sflush_r+0x66>
 8004904:	6829      	ldr	r1, [r5, #0]
 8004906:	291d      	cmp	r1, #29
 8004908:	d82c      	bhi.n	8004964 <__sflush_r+0xb8>
 800490a:	4a2a      	ldr	r2, [pc, #168]	; (80049b4 <__sflush_r+0x108>)
 800490c:	40ca      	lsrs	r2, r1
 800490e:	07d6      	lsls	r6, r2, #31
 8004910:	d528      	bpl.n	8004964 <__sflush_r+0xb8>
 8004912:	2200      	movs	r2, #0
 8004914:	6062      	str	r2, [r4, #4]
 8004916:	04d9      	lsls	r1, r3, #19
 8004918:	6922      	ldr	r2, [r4, #16]
 800491a:	6022      	str	r2, [r4, #0]
 800491c:	d504      	bpl.n	8004928 <__sflush_r+0x7c>
 800491e:	1c42      	adds	r2, r0, #1
 8004920:	d101      	bne.n	8004926 <__sflush_r+0x7a>
 8004922:	682b      	ldr	r3, [r5, #0]
 8004924:	b903      	cbnz	r3, 8004928 <__sflush_r+0x7c>
 8004926:	6560      	str	r0, [r4, #84]	; 0x54
 8004928:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800492a:	602f      	str	r7, [r5, #0]
 800492c:	2900      	cmp	r1, #0
 800492e:	d0ca      	beq.n	80048c6 <__sflush_r+0x1a>
 8004930:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004934:	4299      	cmp	r1, r3
 8004936:	d002      	beq.n	800493e <__sflush_r+0x92>
 8004938:	4628      	mov	r0, r5
 800493a:	f000 f8fb 	bl	8004b34 <_free_r>
 800493e:	2000      	movs	r0, #0
 8004940:	6360      	str	r0, [r4, #52]	; 0x34
 8004942:	e7c1      	b.n	80048c8 <__sflush_r+0x1c>
 8004944:	6a21      	ldr	r1, [r4, #32]
 8004946:	2301      	movs	r3, #1
 8004948:	4628      	mov	r0, r5
 800494a:	47b0      	blx	r6
 800494c:	1c41      	adds	r1, r0, #1
 800494e:	d1c7      	bne.n	80048e0 <__sflush_r+0x34>
 8004950:	682b      	ldr	r3, [r5, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d0c4      	beq.n	80048e0 <__sflush_r+0x34>
 8004956:	2b1d      	cmp	r3, #29
 8004958:	d001      	beq.n	800495e <__sflush_r+0xb2>
 800495a:	2b16      	cmp	r3, #22
 800495c:	d101      	bne.n	8004962 <__sflush_r+0xb6>
 800495e:	602f      	str	r7, [r5, #0]
 8004960:	e7b1      	b.n	80048c6 <__sflush_r+0x1a>
 8004962:	89a3      	ldrh	r3, [r4, #12]
 8004964:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004968:	81a3      	strh	r3, [r4, #12]
 800496a:	e7ad      	b.n	80048c8 <__sflush_r+0x1c>
 800496c:	690f      	ldr	r7, [r1, #16]
 800496e:	2f00      	cmp	r7, #0
 8004970:	d0a9      	beq.n	80048c6 <__sflush_r+0x1a>
 8004972:	0793      	lsls	r3, r2, #30
 8004974:	680e      	ldr	r6, [r1, #0]
 8004976:	bf08      	it	eq
 8004978:	694b      	ldreq	r3, [r1, #20]
 800497a:	600f      	str	r7, [r1, #0]
 800497c:	bf18      	it	ne
 800497e:	2300      	movne	r3, #0
 8004980:	eba6 0807 	sub.w	r8, r6, r7
 8004984:	608b      	str	r3, [r1, #8]
 8004986:	f1b8 0f00 	cmp.w	r8, #0
 800498a:	dd9c      	ble.n	80048c6 <__sflush_r+0x1a>
 800498c:	6a21      	ldr	r1, [r4, #32]
 800498e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004990:	4643      	mov	r3, r8
 8004992:	463a      	mov	r2, r7
 8004994:	4628      	mov	r0, r5
 8004996:	47b0      	blx	r6
 8004998:	2800      	cmp	r0, #0
 800499a:	dc06      	bgt.n	80049aa <__sflush_r+0xfe>
 800499c:	89a3      	ldrh	r3, [r4, #12]
 800499e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049a2:	81a3      	strh	r3, [r4, #12]
 80049a4:	f04f 30ff 	mov.w	r0, #4294967295
 80049a8:	e78e      	b.n	80048c8 <__sflush_r+0x1c>
 80049aa:	4407      	add	r7, r0
 80049ac:	eba8 0800 	sub.w	r8, r8, r0
 80049b0:	e7e9      	b.n	8004986 <__sflush_r+0xda>
 80049b2:	bf00      	nop
 80049b4:	20400001 	.word	0x20400001

080049b8 <_fflush_r>:
 80049b8:	b538      	push	{r3, r4, r5, lr}
 80049ba:	690b      	ldr	r3, [r1, #16]
 80049bc:	4605      	mov	r5, r0
 80049be:	460c      	mov	r4, r1
 80049c0:	b913      	cbnz	r3, 80049c8 <_fflush_r+0x10>
 80049c2:	2500      	movs	r5, #0
 80049c4:	4628      	mov	r0, r5
 80049c6:	bd38      	pop	{r3, r4, r5, pc}
 80049c8:	b118      	cbz	r0, 80049d2 <_fflush_r+0x1a>
 80049ca:	6983      	ldr	r3, [r0, #24]
 80049cc:	b90b      	cbnz	r3, 80049d2 <_fflush_r+0x1a>
 80049ce:	f7ff fa4f 	bl	8003e70 <__sinit>
 80049d2:	4b14      	ldr	r3, [pc, #80]	; (8004a24 <_fflush_r+0x6c>)
 80049d4:	429c      	cmp	r4, r3
 80049d6:	d11b      	bne.n	8004a10 <_fflush_r+0x58>
 80049d8:	686c      	ldr	r4, [r5, #4]
 80049da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d0ef      	beq.n	80049c2 <_fflush_r+0xa>
 80049e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80049e4:	07d0      	lsls	r0, r2, #31
 80049e6:	d404      	bmi.n	80049f2 <_fflush_r+0x3a>
 80049e8:	0599      	lsls	r1, r3, #22
 80049ea:	d402      	bmi.n	80049f2 <_fflush_r+0x3a>
 80049ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049ee:	f7ff fadd 	bl	8003fac <__retarget_lock_acquire_recursive>
 80049f2:	4628      	mov	r0, r5
 80049f4:	4621      	mov	r1, r4
 80049f6:	f7ff ff59 	bl	80048ac <__sflush_r>
 80049fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049fc:	07da      	lsls	r2, r3, #31
 80049fe:	4605      	mov	r5, r0
 8004a00:	d4e0      	bmi.n	80049c4 <_fflush_r+0xc>
 8004a02:	89a3      	ldrh	r3, [r4, #12]
 8004a04:	059b      	lsls	r3, r3, #22
 8004a06:	d4dd      	bmi.n	80049c4 <_fflush_r+0xc>
 8004a08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a0a:	f7ff fad0 	bl	8003fae <__retarget_lock_release_recursive>
 8004a0e:	e7d9      	b.n	80049c4 <_fflush_r+0xc>
 8004a10:	4b05      	ldr	r3, [pc, #20]	; (8004a28 <_fflush_r+0x70>)
 8004a12:	429c      	cmp	r4, r3
 8004a14:	d101      	bne.n	8004a1a <_fflush_r+0x62>
 8004a16:	68ac      	ldr	r4, [r5, #8]
 8004a18:	e7df      	b.n	80049da <_fflush_r+0x22>
 8004a1a:	4b04      	ldr	r3, [pc, #16]	; (8004a2c <_fflush_r+0x74>)
 8004a1c:	429c      	cmp	r4, r3
 8004a1e:	bf08      	it	eq
 8004a20:	68ec      	ldreq	r4, [r5, #12]
 8004a22:	e7da      	b.n	80049da <_fflush_r+0x22>
 8004a24:	08004cc4 	.word	0x08004cc4
 8004a28:	08004ce4 	.word	0x08004ce4
 8004a2c:	08004ca4 	.word	0x08004ca4

08004a30 <_lseek_r>:
 8004a30:	b538      	push	{r3, r4, r5, lr}
 8004a32:	4d07      	ldr	r5, [pc, #28]	; (8004a50 <_lseek_r+0x20>)
 8004a34:	4604      	mov	r4, r0
 8004a36:	4608      	mov	r0, r1
 8004a38:	4611      	mov	r1, r2
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	602a      	str	r2, [r5, #0]
 8004a3e:	461a      	mov	r2, r3
 8004a40:	f7fc f93c 	bl	8000cbc <_lseek>
 8004a44:	1c43      	adds	r3, r0, #1
 8004a46:	d102      	bne.n	8004a4e <_lseek_r+0x1e>
 8004a48:	682b      	ldr	r3, [r5, #0]
 8004a4a:	b103      	cbz	r3, 8004a4e <_lseek_r+0x1e>
 8004a4c:	6023      	str	r3, [r4, #0]
 8004a4e:	bd38      	pop	{r3, r4, r5, pc}
 8004a50:	20000190 	.word	0x20000190

08004a54 <__swhatbuf_r>:
 8004a54:	b570      	push	{r4, r5, r6, lr}
 8004a56:	460e      	mov	r6, r1
 8004a58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a5c:	2900      	cmp	r1, #0
 8004a5e:	b096      	sub	sp, #88	; 0x58
 8004a60:	4614      	mov	r4, r2
 8004a62:	461d      	mov	r5, r3
 8004a64:	da07      	bge.n	8004a76 <__swhatbuf_r+0x22>
 8004a66:	2300      	movs	r3, #0
 8004a68:	602b      	str	r3, [r5, #0]
 8004a6a:	89b3      	ldrh	r3, [r6, #12]
 8004a6c:	061a      	lsls	r2, r3, #24
 8004a6e:	d410      	bmi.n	8004a92 <__swhatbuf_r+0x3e>
 8004a70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a74:	e00e      	b.n	8004a94 <__swhatbuf_r+0x40>
 8004a76:	466a      	mov	r2, sp
 8004a78:	f000 f8be 	bl	8004bf8 <_fstat_r>
 8004a7c:	2800      	cmp	r0, #0
 8004a7e:	dbf2      	blt.n	8004a66 <__swhatbuf_r+0x12>
 8004a80:	9a01      	ldr	r2, [sp, #4]
 8004a82:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004a86:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004a8a:	425a      	negs	r2, r3
 8004a8c:	415a      	adcs	r2, r3
 8004a8e:	602a      	str	r2, [r5, #0]
 8004a90:	e7ee      	b.n	8004a70 <__swhatbuf_r+0x1c>
 8004a92:	2340      	movs	r3, #64	; 0x40
 8004a94:	2000      	movs	r0, #0
 8004a96:	6023      	str	r3, [r4, #0]
 8004a98:	b016      	add	sp, #88	; 0x58
 8004a9a:	bd70      	pop	{r4, r5, r6, pc}

08004a9c <__smakebuf_r>:
 8004a9c:	898b      	ldrh	r3, [r1, #12]
 8004a9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004aa0:	079d      	lsls	r5, r3, #30
 8004aa2:	4606      	mov	r6, r0
 8004aa4:	460c      	mov	r4, r1
 8004aa6:	d507      	bpl.n	8004ab8 <__smakebuf_r+0x1c>
 8004aa8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004aac:	6023      	str	r3, [r4, #0]
 8004aae:	6123      	str	r3, [r4, #16]
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	6163      	str	r3, [r4, #20]
 8004ab4:	b002      	add	sp, #8
 8004ab6:	bd70      	pop	{r4, r5, r6, pc}
 8004ab8:	ab01      	add	r3, sp, #4
 8004aba:	466a      	mov	r2, sp
 8004abc:	f7ff ffca 	bl	8004a54 <__swhatbuf_r>
 8004ac0:	9900      	ldr	r1, [sp, #0]
 8004ac2:	4605      	mov	r5, r0
 8004ac4:	4630      	mov	r0, r6
 8004ac6:	f7ff fa73 	bl	8003fb0 <_malloc_r>
 8004aca:	b948      	cbnz	r0, 8004ae0 <__smakebuf_r+0x44>
 8004acc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ad0:	059a      	lsls	r2, r3, #22
 8004ad2:	d4ef      	bmi.n	8004ab4 <__smakebuf_r+0x18>
 8004ad4:	f023 0303 	bic.w	r3, r3, #3
 8004ad8:	f043 0302 	orr.w	r3, r3, #2
 8004adc:	81a3      	strh	r3, [r4, #12]
 8004ade:	e7e3      	b.n	8004aa8 <__smakebuf_r+0xc>
 8004ae0:	4b0d      	ldr	r3, [pc, #52]	; (8004b18 <__smakebuf_r+0x7c>)
 8004ae2:	62b3      	str	r3, [r6, #40]	; 0x28
 8004ae4:	89a3      	ldrh	r3, [r4, #12]
 8004ae6:	6020      	str	r0, [r4, #0]
 8004ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aec:	81a3      	strh	r3, [r4, #12]
 8004aee:	9b00      	ldr	r3, [sp, #0]
 8004af0:	6163      	str	r3, [r4, #20]
 8004af2:	9b01      	ldr	r3, [sp, #4]
 8004af4:	6120      	str	r0, [r4, #16]
 8004af6:	b15b      	cbz	r3, 8004b10 <__smakebuf_r+0x74>
 8004af8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004afc:	4630      	mov	r0, r6
 8004afe:	f000 f88d 	bl	8004c1c <_isatty_r>
 8004b02:	b128      	cbz	r0, 8004b10 <__smakebuf_r+0x74>
 8004b04:	89a3      	ldrh	r3, [r4, #12]
 8004b06:	f023 0303 	bic.w	r3, r3, #3
 8004b0a:	f043 0301 	orr.w	r3, r3, #1
 8004b0e:	81a3      	strh	r3, [r4, #12]
 8004b10:	89a0      	ldrh	r0, [r4, #12]
 8004b12:	4305      	orrs	r5, r0
 8004b14:	81a5      	strh	r5, [r4, #12]
 8004b16:	e7cd      	b.n	8004ab4 <__smakebuf_r+0x18>
 8004b18:	08003e09 	.word	0x08003e09

08004b1c <__malloc_lock>:
 8004b1c:	4801      	ldr	r0, [pc, #4]	; (8004b24 <__malloc_lock+0x8>)
 8004b1e:	f7ff ba45 	b.w	8003fac <__retarget_lock_acquire_recursive>
 8004b22:	bf00      	nop
 8004b24:	20000188 	.word	0x20000188

08004b28 <__malloc_unlock>:
 8004b28:	4801      	ldr	r0, [pc, #4]	; (8004b30 <__malloc_unlock+0x8>)
 8004b2a:	f7ff ba40 	b.w	8003fae <__retarget_lock_release_recursive>
 8004b2e:	bf00      	nop
 8004b30:	20000188 	.word	0x20000188

08004b34 <_free_r>:
 8004b34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b36:	2900      	cmp	r1, #0
 8004b38:	d048      	beq.n	8004bcc <_free_r+0x98>
 8004b3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b3e:	9001      	str	r0, [sp, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f1a1 0404 	sub.w	r4, r1, #4
 8004b46:	bfb8      	it	lt
 8004b48:	18e4      	addlt	r4, r4, r3
 8004b4a:	f7ff ffe7 	bl	8004b1c <__malloc_lock>
 8004b4e:	4a20      	ldr	r2, [pc, #128]	; (8004bd0 <_free_r+0x9c>)
 8004b50:	9801      	ldr	r0, [sp, #4]
 8004b52:	6813      	ldr	r3, [r2, #0]
 8004b54:	4615      	mov	r5, r2
 8004b56:	b933      	cbnz	r3, 8004b66 <_free_r+0x32>
 8004b58:	6063      	str	r3, [r4, #4]
 8004b5a:	6014      	str	r4, [r2, #0]
 8004b5c:	b003      	add	sp, #12
 8004b5e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b62:	f7ff bfe1 	b.w	8004b28 <__malloc_unlock>
 8004b66:	42a3      	cmp	r3, r4
 8004b68:	d90b      	bls.n	8004b82 <_free_r+0x4e>
 8004b6a:	6821      	ldr	r1, [r4, #0]
 8004b6c:	1862      	adds	r2, r4, r1
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	bf04      	itt	eq
 8004b72:	681a      	ldreq	r2, [r3, #0]
 8004b74:	685b      	ldreq	r3, [r3, #4]
 8004b76:	6063      	str	r3, [r4, #4]
 8004b78:	bf04      	itt	eq
 8004b7a:	1852      	addeq	r2, r2, r1
 8004b7c:	6022      	streq	r2, [r4, #0]
 8004b7e:	602c      	str	r4, [r5, #0]
 8004b80:	e7ec      	b.n	8004b5c <_free_r+0x28>
 8004b82:	461a      	mov	r2, r3
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	b10b      	cbz	r3, 8004b8c <_free_r+0x58>
 8004b88:	42a3      	cmp	r3, r4
 8004b8a:	d9fa      	bls.n	8004b82 <_free_r+0x4e>
 8004b8c:	6811      	ldr	r1, [r2, #0]
 8004b8e:	1855      	adds	r5, r2, r1
 8004b90:	42a5      	cmp	r5, r4
 8004b92:	d10b      	bne.n	8004bac <_free_r+0x78>
 8004b94:	6824      	ldr	r4, [r4, #0]
 8004b96:	4421      	add	r1, r4
 8004b98:	1854      	adds	r4, r2, r1
 8004b9a:	42a3      	cmp	r3, r4
 8004b9c:	6011      	str	r1, [r2, #0]
 8004b9e:	d1dd      	bne.n	8004b5c <_free_r+0x28>
 8004ba0:	681c      	ldr	r4, [r3, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	6053      	str	r3, [r2, #4]
 8004ba6:	4421      	add	r1, r4
 8004ba8:	6011      	str	r1, [r2, #0]
 8004baa:	e7d7      	b.n	8004b5c <_free_r+0x28>
 8004bac:	d902      	bls.n	8004bb4 <_free_r+0x80>
 8004bae:	230c      	movs	r3, #12
 8004bb0:	6003      	str	r3, [r0, #0]
 8004bb2:	e7d3      	b.n	8004b5c <_free_r+0x28>
 8004bb4:	6825      	ldr	r5, [r4, #0]
 8004bb6:	1961      	adds	r1, r4, r5
 8004bb8:	428b      	cmp	r3, r1
 8004bba:	bf04      	itt	eq
 8004bbc:	6819      	ldreq	r1, [r3, #0]
 8004bbe:	685b      	ldreq	r3, [r3, #4]
 8004bc0:	6063      	str	r3, [r4, #4]
 8004bc2:	bf04      	itt	eq
 8004bc4:	1949      	addeq	r1, r1, r5
 8004bc6:	6021      	streq	r1, [r4, #0]
 8004bc8:	6054      	str	r4, [r2, #4]
 8004bca:	e7c7      	b.n	8004b5c <_free_r+0x28>
 8004bcc:	b003      	add	sp, #12
 8004bce:	bd30      	pop	{r4, r5, pc}
 8004bd0:	20000090 	.word	0x20000090

08004bd4 <_read_r>:
 8004bd4:	b538      	push	{r3, r4, r5, lr}
 8004bd6:	4d07      	ldr	r5, [pc, #28]	; (8004bf4 <_read_r+0x20>)
 8004bd8:	4604      	mov	r4, r0
 8004bda:	4608      	mov	r0, r1
 8004bdc:	4611      	mov	r1, r2
 8004bde:	2200      	movs	r2, #0
 8004be0:	602a      	str	r2, [r5, #0]
 8004be2:	461a      	mov	r2, r3
 8004be4:	f7fc f80a 	bl	8000bfc <_read>
 8004be8:	1c43      	adds	r3, r0, #1
 8004bea:	d102      	bne.n	8004bf2 <_read_r+0x1e>
 8004bec:	682b      	ldr	r3, [r5, #0]
 8004bee:	b103      	cbz	r3, 8004bf2 <_read_r+0x1e>
 8004bf0:	6023      	str	r3, [r4, #0]
 8004bf2:	bd38      	pop	{r3, r4, r5, pc}
 8004bf4:	20000190 	.word	0x20000190

08004bf8 <_fstat_r>:
 8004bf8:	b538      	push	{r3, r4, r5, lr}
 8004bfa:	4d07      	ldr	r5, [pc, #28]	; (8004c18 <_fstat_r+0x20>)
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	4604      	mov	r4, r0
 8004c00:	4608      	mov	r0, r1
 8004c02:	4611      	mov	r1, r2
 8004c04:	602b      	str	r3, [r5, #0]
 8004c06:	f7fc f83e 	bl	8000c86 <_fstat>
 8004c0a:	1c43      	adds	r3, r0, #1
 8004c0c:	d102      	bne.n	8004c14 <_fstat_r+0x1c>
 8004c0e:	682b      	ldr	r3, [r5, #0]
 8004c10:	b103      	cbz	r3, 8004c14 <_fstat_r+0x1c>
 8004c12:	6023      	str	r3, [r4, #0]
 8004c14:	bd38      	pop	{r3, r4, r5, pc}
 8004c16:	bf00      	nop
 8004c18:	20000190 	.word	0x20000190

08004c1c <_isatty_r>:
 8004c1c:	b538      	push	{r3, r4, r5, lr}
 8004c1e:	4d06      	ldr	r5, [pc, #24]	; (8004c38 <_isatty_r+0x1c>)
 8004c20:	2300      	movs	r3, #0
 8004c22:	4604      	mov	r4, r0
 8004c24:	4608      	mov	r0, r1
 8004c26:	602b      	str	r3, [r5, #0]
 8004c28:	f7fc f83d 	bl	8000ca6 <_isatty>
 8004c2c:	1c43      	adds	r3, r0, #1
 8004c2e:	d102      	bne.n	8004c36 <_isatty_r+0x1a>
 8004c30:	682b      	ldr	r3, [r5, #0]
 8004c32:	b103      	cbz	r3, 8004c36 <_isatty_r+0x1a>
 8004c34:	6023      	str	r3, [r4, #0]
 8004c36:	bd38      	pop	{r3, r4, r5, pc}
 8004c38:	20000190 	.word	0x20000190

08004c3c <_init>:
 8004c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c3e:	bf00      	nop
 8004c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c42:	bc08      	pop	{r3}
 8004c44:	469e      	mov	lr, r3
 8004c46:	4770      	bx	lr

08004c48 <_fini>:
 8004c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c4a:	bf00      	nop
 8004c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c4e:	bc08      	pop	{r3}
 8004c50:	469e      	mov	lr, r3
 8004c52:	4770      	bx	lr
