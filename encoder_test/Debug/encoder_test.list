
encoder_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b90  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08003d20  08003d20  00013d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e18  08003e18  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003e18  08003e18  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e18  08003e18  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e18  08003e18  00013e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e1c  08003e1c  00013e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003e20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000168  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001d8  200001d8  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ff4c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001de5  00000000  00000000  0002ffec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c80  00000000  00000000  00031dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bc8  00000000  00000000  00032a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000210cd  00000000  00000000  00033620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000efa6  00000000  00000000  000546ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c46a8  00000000  00000000  00063693  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00127d3b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003bf8  00000000  00000000  00127d90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003d08 	.word	0x08003d08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003d08 	.word	0x08003d08

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <ENCODER_init>:
 */


#include "encoder.h"

void ENCODER_init(Encoder* encoder, TIM_HandleTypeDef* htim){
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	6039      	str	r1, [r7, #0]
	encoder->htim = htim;
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	683a      	ldr	r2, [r7, #0]
 800027e:	601a      	str	r2, [r3, #0]
	HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_ALL);
 8000280:	213c      	movs	r1, #60	; 0x3c
 8000282:	6838      	ldr	r0, [r7, #0]
 8000284:	f002 f856 	bl	8002334 <HAL_TIM_Encoder_Start>
}
 8000288:	bf00      	nop
 800028a:	3708      	adds	r7, #8
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}

08000290 <ENCODER_get_value>:
uint16_t ENCODER_get_value(Encoder* encoder){
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	encoder->last_value = encoder->htim->Instance->CNT;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002a0:	b29a      	uxth	r2, r3
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	809a      	strh	r2, [r3, #4]
	return encoder->last_value;
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	889b      	ldrh	r3, [r3, #4]
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
	...

080002b8 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	2b0a      	cmp	r3, #10
 80002c4:	d102      	bne.n	80002cc <__io_putchar+0x14>
    __io_putchar('\r');
 80002c6:	200d      	movs	r0, #13
 80002c8:	f7ff fff6 	bl	80002b8 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80002cc:	1d39      	adds	r1, r7, #4
 80002ce:	f04f 33ff 	mov.w	r3, #4294967295
 80002d2:	2201      	movs	r2, #1
 80002d4:	4803      	ldr	r0, [pc, #12]	; (80002e4 <__io_putchar+0x2c>)
 80002d6:	f002 fa15 	bl	8002704 <HAL_UART_Transmit>

  return 1;
 80002da:	2301      	movs	r3, #1
}
 80002dc:	4618      	mov	r0, r3
 80002de:	3708      	adds	r7, #8
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	20000138 	.word	0x20000138

080002e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002e8:	b598      	push	{r3, r4, r7, lr}
 80002ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ec:	f000 fb5c 	bl	80009a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002f0:	f000 f82e 	bl	8000350 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002f4:	f000 f94c 	bl	8000590 <MX_GPIO_Init>
  MX_TIM3_Init();
 80002f8:	f000 f8c4 	bl	8000484 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80002fc:	f000 f918 	bl	8000530 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000300:	f000 f86c 	bl	80003dc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  ENCODER_init(&right_encoder, &htim3);
 8000304:	490d      	ldr	r1, [pc, #52]	; (800033c <main+0x54>)
 8000306:	480e      	ldr	r0, [pc, #56]	; (8000340 <main+0x58>)
 8000308:	f7ff ffb2 	bl	8000270 <ENCODER_init>
  ENCODER_init(&left_encoder, &htim2);
 800030c:	490d      	ldr	r1, [pc, #52]	; (8000344 <main+0x5c>)
 800030e:	480e      	ldr	r0, [pc, #56]	; (8000348 <main+0x60>)
 8000310:	f7ff ffae 	bl	8000270 <ENCODER_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //printf("%ld\n", htim3.Instance->CNT);
	  printf("Encoder left: %d\t\tEncoder right: %d\n", ENCODER_get_value(&left_encoder), ENCODER_get_value(&right_encoder));
 8000314:	480c      	ldr	r0, [pc, #48]	; (8000348 <main+0x60>)
 8000316:	f7ff ffbb 	bl	8000290 <ENCODER_get_value>
 800031a:	4603      	mov	r3, r0
 800031c:	461c      	mov	r4, r3
 800031e:	4808      	ldr	r0, [pc, #32]	; (8000340 <main+0x58>)
 8000320:	f7ff ffb6 	bl	8000290 <ENCODER_get_value>
 8000324:	4603      	mov	r3, r0
 8000326:	461a      	mov	r2, r3
 8000328:	4621      	mov	r1, r4
 800032a:	4808      	ldr	r0, [pc, #32]	; (800034c <main+0x64>)
 800032c:	f002 fd96 	bl	8002e5c <iprintf>
	  HAL_Delay(300);
 8000330:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000334:	f000 fb9e 	bl	8000a74 <HAL_Delay>
	  printf("Encoder left: %d\t\tEncoder right: %d\n", ENCODER_get_value(&left_encoder), ENCODER_get_value(&right_encoder));
 8000338:	e7ec      	b.n	8000314 <main+0x2c>
 800033a:	bf00      	nop
 800033c:	20000098 	.word	0x20000098
 8000340:	200000e4 	.word	0x200000e4
 8000344:	200000ec 	.word	0x200000ec
 8000348:	200001bc 	.word	0x200001bc
 800034c:	08003d20 	.word	0x08003d20

08000350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b090      	sub	sp, #64	; 0x40
 8000354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000356:	f107 0318 	add.w	r3, r7, #24
 800035a:	2228      	movs	r2, #40	; 0x28
 800035c:	2100      	movs	r1, #0
 800035e:	4618      	mov	r0, r3
 8000360:	f002 fd74 	bl	8002e4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000364:	1d3b      	adds	r3, r7, #4
 8000366:	2200      	movs	r2, #0
 8000368:	601a      	str	r2, [r3, #0]
 800036a:	605a      	str	r2, [r3, #4]
 800036c:	609a      	str	r2, [r3, #8]
 800036e:	60da      	str	r2, [r3, #12]
 8000370:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000372:	2301      	movs	r3, #1
 8000374:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000376:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800037a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800037c:	2300      	movs	r3, #0
 800037e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000380:	2301      	movs	r3, #1
 8000382:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000384:	2302      	movs	r3, #2
 8000386:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000388:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800038c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800038e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000392:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000394:	f107 0318 	add.w	r3, r7, #24
 8000398:	4618      	mov	r0, r3
 800039a:	f000 fde7 	bl	8000f6c <HAL_RCC_OscConfig>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003a4:	f000 f918 	bl	80005d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a8:	230f      	movs	r3, #15
 80003aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ac:	2302      	movs	r3, #2
 80003ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b0:	2300      	movs	r3, #0
 80003b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ba:	2300      	movs	r3, #0
 80003bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003be:	1d3b      	adds	r3, r7, #4
 80003c0:	2102      	movs	r1, #2
 80003c2:	4618      	mov	r0, r3
 80003c4:	f001 fcda 	bl	8001d7c <HAL_RCC_ClockConfig>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003ce:	f000 f903 	bl	80005d8 <Error_Handler>
  }
}
 80003d2:	bf00      	nop
 80003d4:	3740      	adds	r7, #64	; 0x40
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
	...

080003dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b08c      	sub	sp, #48	; 0x30
 80003e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80003e2:	f107 030c 	add.w	r3, r7, #12
 80003e6:	2224      	movs	r2, #36	; 0x24
 80003e8:	2100      	movs	r1, #0
 80003ea:	4618      	mov	r0, r3
 80003ec:	f002 fd2e 	bl	8002e4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003f0:	463b      	mov	r3, r7
 80003f2:	2200      	movs	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
 80003f6:	605a      	str	r2, [r3, #4]
 80003f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003fa:	4b21      	ldr	r3, [pc, #132]	; (8000480 <MX_TIM2_Init+0xa4>)
 80003fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000400:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000402:	4b1f      	ldr	r3, [pc, #124]	; (8000480 <MX_TIM2_Init+0xa4>)
 8000404:	2200      	movs	r2, #0
 8000406:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000408:	4b1d      	ldr	r3, [pc, #116]	; (8000480 <MX_TIM2_Init+0xa4>)
 800040a:	2200      	movs	r2, #0
 800040c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800040e:	4b1c      	ldr	r3, [pc, #112]	; (8000480 <MX_TIM2_Init+0xa4>)
 8000410:	f04f 32ff 	mov.w	r2, #4294967295
 8000414:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000416:	4b1a      	ldr	r3, [pc, #104]	; (8000480 <MX_TIM2_Init+0xa4>)
 8000418:	2200      	movs	r2, #0
 800041a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800041c:	4b18      	ldr	r3, [pc, #96]	; (8000480 <MX_TIM2_Init+0xa4>)
 800041e:	2200      	movs	r2, #0
 8000420:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000422:	2303      	movs	r3, #3
 8000424:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000426:	2302      	movs	r3, #2
 8000428:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800042a:	2301      	movs	r3, #1
 800042c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800042e:	2300      	movs	r3, #0
 8000430:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000432:	230a      	movs	r3, #10
 8000434:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000436:	2302      	movs	r3, #2
 8000438:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800043a:	2301      	movs	r3, #1
 800043c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800043e:	2300      	movs	r3, #0
 8000440:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000442:	230a      	movs	r3, #10
 8000444:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000446:	f107 030c 	add.w	r3, r7, #12
 800044a:	4619      	mov	r1, r3
 800044c:	480c      	ldr	r0, [pc, #48]	; (8000480 <MX_TIM2_Init+0xa4>)
 800044e:	f001 fecb 	bl	80021e8 <HAL_TIM_Encoder_Init>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d001      	beq.n	800045c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000458:	f000 f8be 	bl	80005d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800045c:	2300      	movs	r3, #0
 800045e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000460:	2300      	movs	r3, #0
 8000462:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000464:	463b      	mov	r3, r7
 8000466:	4619      	mov	r1, r3
 8000468:	4805      	ldr	r0, [pc, #20]	; (8000480 <MX_TIM2_Init+0xa4>)
 800046a:	f002 f88f 	bl	800258c <HAL_TIMEx_MasterConfigSynchronization>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000474:	f000 f8b0 	bl	80005d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000478:	bf00      	nop
 800047a:	3730      	adds	r7, #48	; 0x30
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	200000ec 	.word	0x200000ec

08000484 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b08c      	sub	sp, #48	; 0x30
 8000488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800048a:	f107 030c 	add.w	r3, r7, #12
 800048e:	2224      	movs	r2, #36	; 0x24
 8000490:	2100      	movs	r1, #0
 8000492:	4618      	mov	r0, r3
 8000494:	f002 fcda 	bl	8002e4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000498:	463b      	mov	r3, r7
 800049a:	2200      	movs	r2, #0
 800049c:	601a      	str	r2, [r3, #0]
 800049e:	605a      	str	r2, [r3, #4]
 80004a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004a2:	4b21      	ldr	r3, [pc, #132]	; (8000528 <MX_TIM3_Init+0xa4>)
 80004a4:	4a21      	ldr	r2, [pc, #132]	; (800052c <MX_TIM3_Init+0xa8>)
 80004a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80004a8:	4b1f      	ldr	r3, [pc, #124]	; (8000528 <MX_TIM3_Init+0xa4>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ae:	4b1e      	ldr	r3, [pc, #120]	; (8000528 <MX_TIM3_Init+0xa4>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80004b4:	4b1c      	ldr	r3, [pc, #112]	; (8000528 <MX_TIM3_Init+0xa4>)
 80004b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004bc:	4b1a      	ldr	r3, [pc, #104]	; (8000528 <MX_TIM3_Init+0xa4>)
 80004be:	2200      	movs	r2, #0
 80004c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80004c2:	4b19      	ldr	r3, [pc, #100]	; (8000528 <MX_TIM3_Init+0xa4>)
 80004c4:	2280      	movs	r2, #128	; 0x80
 80004c6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80004c8:	2303      	movs	r3, #3
 80004ca:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80004cc:	2302      	movs	r3, #2
 80004ce:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80004d0:	2301      	movs	r3, #1
 80004d2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80004d4:	2300      	movs	r3, #0
 80004d6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80004d8:	230a      	movs	r3, #10
 80004da:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80004dc:	2302      	movs	r3, #2
 80004de:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80004e0:	2301      	movs	r3, #1
 80004e2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80004e4:	2300      	movs	r3, #0
 80004e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80004e8:	230a      	movs	r3, #10
 80004ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80004ec:	f107 030c 	add.w	r3, r7, #12
 80004f0:	4619      	mov	r1, r3
 80004f2:	480d      	ldr	r0, [pc, #52]	; (8000528 <MX_TIM3_Init+0xa4>)
 80004f4:	f001 fe78 	bl	80021e8 <HAL_TIM_Encoder_Init>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80004fe:	f000 f86b 	bl	80005d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000502:	2300      	movs	r3, #0
 8000504:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000506:	2300      	movs	r3, #0
 8000508:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800050a:	463b      	mov	r3, r7
 800050c:	4619      	mov	r1, r3
 800050e:	4806      	ldr	r0, [pc, #24]	; (8000528 <MX_TIM3_Init+0xa4>)
 8000510:	f002 f83c 	bl	800258c <HAL_TIMEx_MasterConfigSynchronization>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800051a:	f000 f85d 	bl	80005d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800051e:	bf00      	nop
 8000520:	3730      	adds	r7, #48	; 0x30
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20000098 	.word	0x20000098
 800052c:	40000400 	.word	0x40000400

08000530 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000534:	4b14      	ldr	r3, [pc, #80]	; (8000588 <MX_USART2_UART_Init+0x58>)
 8000536:	4a15      	ldr	r2, [pc, #84]	; (800058c <MX_USART2_UART_Init+0x5c>)
 8000538:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800053a:	4b13      	ldr	r3, [pc, #76]	; (8000588 <MX_USART2_UART_Init+0x58>)
 800053c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000540:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000542:	4b11      	ldr	r3, [pc, #68]	; (8000588 <MX_USART2_UART_Init+0x58>)
 8000544:	2200      	movs	r2, #0
 8000546:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000548:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <MX_USART2_UART_Init+0x58>)
 800054a:	2200      	movs	r2, #0
 800054c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800054e:	4b0e      	ldr	r3, [pc, #56]	; (8000588 <MX_USART2_UART_Init+0x58>)
 8000550:	2200      	movs	r2, #0
 8000552:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000554:	4b0c      	ldr	r3, [pc, #48]	; (8000588 <MX_USART2_UART_Init+0x58>)
 8000556:	220c      	movs	r2, #12
 8000558:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800055a:	4b0b      	ldr	r3, [pc, #44]	; (8000588 <MX_USART2_UART_Init+0x58>)
 800055c:	2200      	movs	r2, #0
 800055e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000560:	4b09      	ldr	r3, [pc, #36]	; (8000588 <MX_USART2_UART_Init+0x58>)
 8000562:	2200      	movs	r2, #0
 8000564:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000566:	4b08      	ldr	r3, [pc, #32]	; (8000588 <MX_USART2_UART_Init+0x58>)
 8000568:	2200      	movs	r2, #0
 800056a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800056c:	4b06      	ldr	r3, [pc, #24]	; (8000588 <MX_USART2_UART_Init+0x58>)
 800056e:	2200      	movs	r2, #0
 8000570:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000572:	4805      	ldr	r0, [pc, #20]	; (8000588 <MX_USART2_UART_Init+0x58>)
 8000574:	f002 f878 	bl	8002668 <HAL_UART_Init>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800057e:	f000 f82b 	bl	80005d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	20000138 	.word	0x20000138
 800058c:	40004400 	.word	0x40004400

08000590 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000596:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <MX_GPIO_Init+0x44>)
 8000598:	695b      	ldr	r3, [r3, #20]
 800059a:	4a0e      	ldr	r2, [pc, #56]	; (80005d4 <MX_GPIO_Init+0x44>)
 800059c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005a0:	6153      	str	r3, [r2, #20]
 80005a2:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <MX_GPIO_Init+0x44>)
 80005a4:	695b      	ldr	r3, [r3, #20]
 80005a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ae:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <MX_GPIO_Init+0x44>)
 80005b0:	695b      	ldr	r3, [r3, #20]
 80005b2:	4a08      	ldr	r2, [pc, #32]	; (80005d4 <MX_GPIO_Init+0x44>)
 80005b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005b8:	6153      	str	r3, [r2, #20]
 80005ba:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <MX_GPIO_Init+0x44>)
 80005bc:	695b      	ldr	r3, [r3, #20]
 80005be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005c2:	603b      	str	r3, [r7, #0]
 80005c4:	683b      	ldr	r3, [r7, #0]

}
 80005c6:	bf00      	nop
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	40021000 	.word	0x40021000

080005d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005dc:	b672      	cpsid	i
}
 80005de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005e0:	e7fe      	b.n	80005e0 <Error_Handler+0x8>
	...

080005e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ea:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <HAL_MspInit+0x44>)
 80005ec:	699b      	ldr	r3, [r3, #24]
 80005ee:	4a0e      	ldr	r2, [pc, #56]	; (8000628 <HAL_MspInit+0x44>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6193      	str	r3, [r2, #24]
 80005f6:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <HAL_MspInit+0x44>)
 80005f8:	699b      	ldr	r3, [r3, #24]
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <HAL_MspInit+0x44>)
 8000604:	69db      	ldr	r3, [r3, #28]
 8000606:	4a08      	ldr	r2, [pc, #32]	; (8000628 <HAL_MspInit+0x44>)
 8000608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060c:	61d3      	str	r3, [r2, #28]
 800060e:	4b06      	ldr	r3, [pc, #24]	; (8000628 <HAL_MspInit+0x44>)
 8000610:	69db      	ldr	r3, [r3, #28]
 8000612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000616:	603b      	str	r3, [r7, #0]
 8000618:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800061a:	bf00      	nop
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	40021000 	.word	0x40021000

0800062c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08c      	sub	sp, #48	; 0x30
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000634:	f107 031c 	add.w	r3, r7, #28
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800064c:	d129      	bne.n	80006a2 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800064e:	4b2e      	ldr	r3, [pc, #184]	; (8000708 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000650:	69db      	ldr	r3, [r3, #28]
 8000652:	4a2d      	ldr	r2, [pc, #180]	; (8000708 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	61d3      	str	r3, [r2, #28]
 800065a:	4b2b      	ldr	r3, [pc, #172]	; (8000708 <HAL_TIM_Encoder_MspInit+0xdc>)
 800065c:	69db      	ldr	r3, [r3, #28]
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	61bb      	str	r3, [r7, #24]
 8000664:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000666:	4b28      	ldr	r3, [pc, #160]	; (8000708 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	4a27      	ldr	r2, [pc, #156]	; (8000708 <HAL_TIM_Encoder_MspInit+0xdc>)
 800066c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000670:	6153      	str	r3, [r2, #20]
 8000672:	4b25      	ldr	r3, [pc, #148]	; (8000708 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800067a:	617b      	str	r3, [r7, #20]
 800067c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800067e:	2303      	movs	r3, #3
 8000680:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000682:	2302      	movs	r3, #2
 8000684:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068a:	2300      	movs	r3, #0
 800068c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800068e:	2301      	movs	r3, #1
 8000690:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000692:	f107 031c 	add.w	r3, r7, #28
 8000696:	4619      	mov	r1, r3
 8000698:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800069c:	f000 faf4 	bl	8000c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80006a0:	e02d      	b.n	80006fe <HAL_TIM_Encoder_MspInit+0xd2>
  else if(htim_encoder->Instance==TIM3)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a19      	ldr	r2, [pc, #100]	; (800070c <HAL_TIM_Encoder_MspInit+0xe0>)
 80006a8:	4293      	cmp	r3, r2
 80006aa:	d128      	bne.n	80006fe <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80006ac:	4b16      	ldr	r3, [pc, #88]	; (8000708 <HAL_TIM_Encoder_MspInit+0xdc>)
 80006ae:	69db      	ldr	r3, [r3, #28]
 80006b0:	4a15      	ldr	r2, [pc, #84]	; (8000708 <HAL_TIM_Encoder_MspInit+0xdc>)
 80006b2:	f043 0302 	orr.w	r3, r3, #2
 80006b6:	61d3      	str	r3, [r2, #28]
 80006b8:	4b13      	ldr	r3, [pc, #76]	; (8000708 <HAL_TIM_Encoder_MspInit+0xdc>)
 80006ba:	69db      	ldr	r3, [r3, #28]
 80006bc:	f003 0302 	and.w	r3, r3, #2
 80006c0:	613b      	str	r3, [r7, #16]
 80006c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c4:	4b10      	ldr	r3, [pc, #64]	; (8000708 <HAL_TIM_Encoder_MspInit+0xdc>)
 80006c6:	695b      	ldr	r3, [r3, #20]
 80006c8:	4a0f      	ldr	r2, [pc, #60]	; (8000708 <HAL_TIM_Encoder_MspInit+0xdc>)
 80006ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006ce:	6153      	str	r3, [r2, #20]
 80006d0:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <HAL_TIM_Encoder_MspInit+0xdc>)
 80006d2:	695b      	ldr	r3, [r3, #20]
 80006d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80006dc:	2350      	movs	r3, #80	; 0x50
 80006de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e0:	2302      	movs	r3, #2
 80006e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e8:	2300      	movs	r3, #0
 80006ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80006ec:	2302      	movs	r3, #2
 80006ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f0:	f107 031c 	add.w	r3, r7, #28
 80006f4:	4619      	mov	r1, r3
 80006f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006fa:	f000 fac5 	bl	8000c88 <HAL_GPIO_Init>
}
 80006fe:	bf00      	nop
 8000700:	3730      	adds	r7, #48	; 0x30
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40021000 	.word	0x40021000
 800070c:	40000400 	.word	0x40000400

08000710 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08a      	sub	sp, #40	; 0x28
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000718:	f107 0314 	add.w	r3, r7, #20
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a17      	ldr	r2, [pc, #92]	; (800078c <HAL_UART_MspInit+0x7c>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d128      	bne.n	8000784 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000732:	4b17      	ldr	r3, [pc, #92]	; (8000790 <HAL_UART_MspInit+0x80>)
 8000734:	69db      	ldr	r3, [r3, #28]
 8000736:	4a16      	ldr	r2, [pc, #88]	; (8000790 <HAL_UART_MspInit+0x80>)
 8000738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800073c:	61d3      	str	r3, [r2, #28]
 800073e:	4b14      	ldr	r3, [pc, #80]	; (8000790 <HAL_UART_MspInit+0x80>)
 8000740:	69db      	ldr	r3, [r3, #28]
 8000742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000746:	613b      	str	r3, [r7, #16]
 8000748:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <HAL_UART_MspInit+0x80>)
 800074c:	695b      	ldr	r3, [r3, #20]
 800074e:	4a10      	ldr	r2, [pc, #64]	; (8000790 <HAL_UART_MspInit+0x80>)
 8000750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000754:	6153      	str	r3, [r2, #20]
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <HAL_UART_MspInit+0x80>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000762:	230c      	movs	r3, #12
 8000764:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000766:	2302      	movs	r3, #2
 8000768:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800076e:	2303      	movs	r3, #3
 8000770:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000772:	2307      	movs	r3, #7
 8000774:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	4619      	mov	r1, r3
 800077c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000780:	f000 fa82 	bl	8000c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000784:	bf00      	nop
 8000786:	3728      	adds	r7, #40	; 0x28
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40004400 	.word	0x40004400
 8000790:	40021000 	.word	0x40021000

08000794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000798:	e7fe      	b.n	8000798 <NMI_Handler+0x4>

0800079a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800079e:	e7fe      	b.n	800079e <HardFault_Handler+0x4>

080007a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <MemManage_Handler+0x4>

080007a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007aa:	e7fe      	b.n	80007aa <BusFault_Handler+0x4>

080007ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <UsageFault_Handler+0x4>

080007b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr

080007c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr

080007ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007d2:	bf00      	nop
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr

080007dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007e0:	f000 f928 	bl	8000a34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]
 80007f8:	e00a      	b.n	8000810 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007fa:	f3af 8000 	nop.w
 80007fe:	4601      	mov	r1, r0
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	1c5a      	adds	r2, r3, #1
 8000804:	60ba      	str	r2, [r7, #8]
 8000806:	b2ca      	uxtb	r2, r1
 8000808:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	3301      	adds	r3, #1
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	697a      	ldr	r2, [r7, #20]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	429a      	cmp	r2, r3
 8000816:	dbf0      	blt.n	80007fa <_read+0x12>
	}

return len;
 8000818:	687b      	ldr	r3, [r7, #4]
}
 800081a:	4618      	mov	r0, r3
 800081c:	3718      	adds	r7, #24
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	b086      	sub	sp, #24
 8000826:	af00      	add	r7, sp, #0
 8000828:	60f8      	str	r0, [r7, #12]
 800082a:	60b9      	str	r1, [r7, #8]
 800082c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
 8000832:	e009      	b.n	8000848 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	1c5a      	adds	r2, r3, #1
 8000838:	60ba      	str	r2, [r7, #8]
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff fd3b 	bl	80002b8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	3301      	adds	r3, #1
 8000846:	617b      	str	r3, [r7, #20]
 8000848:	697a      	ldr	r2, [r7, #20]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	429a      	cmp	r2, r3
 800084e:	dbf1      	blt.n	8000834 <_write+0x12>
	}
	return len;
 8000850:	687b      	ldr	r3, [r7, #4]
}
 8000852:	4618      	mov	r0, r3
 8000854:	3718      	adds	r7, #24
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <_close>:

int _close(int file)
{
 800085a:	b480      	push	{r7}
 800085c:	b083      	sub	sp, #12
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]
	return -1;
 8000862:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000866:	4618      	mov	r0, r3
 8000868:	370c      	adds	r7, #12
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000872:	b480      	push	{r7}
 8000874:	b083      	sub	sp, #12
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
 800087a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000882:	605a      	str	r2, [r3, #4]
	return 0;
 8000884:	2300      	movs	r3, #0
}
 8000886:	4618      	mov	r0, r3
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr

08000892 <_isatty>:

int _isatty(int file)
{
 8000892:	b480      	push	{r7}
 8000894:	b083      	sub	sp, #12
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
	return 1;
 800089a:	2301      	movs	r3, #1
}
 800089c:	4618      	mov	r0, r3
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	60f8      	str	r0, [r7, #12]
 80008b0:	60b9      	str	r1, [r7, #8]
 80008b2:	607a      	str	r2, [r7, #4]
	return 0;
 80008b4:	2300      	movs	r3, #0
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3714      	adds	r7, #20
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
	...

080008c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008cc:	4a14      	ldr	r2, [pc, #80]	; (8000920 <_sbrk+0x5c>)
 80008ce:	4b15      	ldr	r3, [pc, #84]	; (8000924 <_sbrk+0x60>)
 80008d0:	1ad3      	subs	r3, r2, r3
 80008d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008d8:	4b13      	ldr	r3, [pc, #76]	; (8000928 <_sbrk+0x64>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d102      	bne.n	80008e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008e0:	4b11      	ldr	r3, [pc, #68]	; (8000928 <_sbrk+0x64>)
 80008e2:	4a12      	ldr	r2, [pc, #72]	; (800092c <_sbrk+0x68>)
 80008e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008e6:	4b10      	ldr	r3, [pc, #64]	; (8000928 <_sbrk+0x64>)
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4413      	add	r3, r2
 80008ee:	693a      	ldr	r2, [r7, #16]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d207      	bcs.n	8000904 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008f4:	f002 fa80 	bl	8002df8 <__errno>
 80008f8:	4603      	mov	r3, r0
 80008fa:	220c      	movs	r2, #12
 80008fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000902:	e009      	b.n	8000918 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000904:	4b08      	ldr	r3, [pc, #32]	; (8000928 <_sbrk+0x64>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800090a:	4b07      	ldr	r3, [pc, #28]	; (8000928 <_sbrk+0x64>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4413      	add	r3, r2
 8000912:	4a05      	ldr	r2, [pc, #20]	; (8000928 <_sbrk+0x64>)
 8000914:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000916:	68fb      	ldr	r3, [r7, #12]
}
 8000918:	4618      	mov	r0, r3
 800091a:	3718      	adds	r7, #24
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20003000 	.word	0x20003000
 8000924:	00000400 	.word	0x00000400
 8000928:	2000008c 	.word	0x2000008c
 800092c:	200001d8 	.word	0x200001d8

08000930 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <SystemInit+0x20>)
 8000936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800093a:	4a05      	ldr	r2, [pc, #20]	; (8000950 <SystemInit+0x20>)
 800093c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000940:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000954:	f8df d034 	ldr.w	sp, [pc, #52]	; 800098c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000958:	480d      	ldr	r0, [pc, #52]	; (8000990 <LoopForever+0x6>)
  ldr r1, =_edata
 800095a:	490e      	ldr	r1, [pc, #56]	; (8000994 <LoopForever+0xa>)
  ldr r2, =_sidata
 800095c:	4a0e      	ldr	r2, [pc, #56]	; (8000998 <LoopForever+0xe>)
  movs r3, #0
 800095e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000960:	e002      	b.n	8000968 <LoopCopyDataInit>

08000962 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000962:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000964:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000966:	3304      	adds	r3, #4

08000968 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000968:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800096a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800096c:	d3f9      	bcc.n	8000962 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096e:	4a0b      	ldr	r2, [pc, #44]	; (800099c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000970:	4c0b      	ldr	r4, [pc, #44]	; (80009a0 <LoopForever+0x16>)
  movs r3, #0
 8000972:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000974:	e001      	b.n	800097a <LoopFillZerobss>

08000976 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000976:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000978:	3204      	adds	r2, #4

0800097a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800097a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800097c:	d3fb      	bcc.n	8000976 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800097e:	f7ff ffd7 	bl	8000930 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000982:	f002 fa3f 	bl	8002e04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000986:	f7ff fcaf 	bl	80002e8 <main>

0800098a <LoopForever>:

LoopForever:
    b LoopForever
 800098a:	e7fe      	b.n	800098a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800098c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000990:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000994:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000998:	08003e20 	.word	0x08003e20
  ldr r2, =_sbss
 800099c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80009a0:	200001d8 	.word	0x200001d8

080009a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009a4:	e7fe      	b.n	80009a4 <ADC1_2_IRQHandler>
	...

080009a8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009ac:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <HAL_Init+0x28>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a07      	ldr	r2, [pc, #28]	; (80009d0 <HAL_Init+0x28>)
 80009b2:	f043 0310 	orr.w	r3, r3, #16
 80009b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b8:	2003      	movs	r0, #3
 80009ba:	f000 f931 	bl	8000c20 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009be:	200f      	movs	r0, #15
 80009c0:	f000 f808 	bl	80009d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009c4:	f7ff fe0e 	bl	80005e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009c8:	2300      	movs	r3, #0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40022000 	.word	0x40022000

080009d4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009dc:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <HAL_InitTick+0x54>)
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <HAL_InitTick+0x58>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	4619      	mov	r1, r3
 80009e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80009f2:	4618      	mov	r0, r3
 80009f4:	f000 f93b 	bl	8000c6e <HAL_SYSTICK_Config>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
 8000a00:	e00e      	b.n	8000a20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2b0f      	cmp	r3, #15
 8000a06:	d80a      	bhi.n	8000a1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	6879      	ldr	r1, [r7, #4]
 8000a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a10:	f000 f911 	bl	8000c36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a14:	4a06      	ldr	r2, [pc, #24]	; (8000a30 <HAL_InitTick+0x5c>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	e000      	b.n	8000a20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000000 	.word	0x20000000
 8000a2c:	20000008 	.word	0x20000008
 8000a30:	20000004 	.word	0x20000004

08000a34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <HAL_IncTick+0x20>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <HAL_IncTick+0x24>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4413      	add	r3, r2
 8000a44:	4a04      	ldr	r2, [pc, #16]	; (8000a58 <HAL_IncTick+0x24>)
 8000a46:	6013      	str	r3, [r2, #0]
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	20000008 	.word	0x20000008
 8000a58:	200001c4 	.word	0x200001c4

08000a5c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a60:	4b03      	ldr	r3, [pc, #12]	; (8000a70 <HAL_GetTick+0x14>)
 8000a62:	681b      	ldr	r3, [r3, #0]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	200001c4 	.word	0x200001c4

08000a74 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a7c:	f7ff ffee 	bl	8000a5c <HAL_GetTick>
 8000a80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a8c:	d005      	beq.n	8000a9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a8e:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <HAL_Delay+0x44>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	461a      	mov	r2, r3
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	4413      	add	r3, r2
 8000a98:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a9a:	bf00      	nop
 8000a9c:	f7ff ffde 	bl	8000a5c <HAL_GetTick>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	68fa      	ldr	r2, [r7, #12]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d8f7      	bhi.n	8000a9c <HAL_Delay+0x28>
  {
  }
}
 8000aac:	bf00      	nop
 8000aae:	bf00      	nop
 8000ab0:	3710      	adds	r7, #16
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000008 	.word	0x20000008

08000abc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f003 0307 	and.w	r3, r3, #7
 8000aca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <__NVIC_SetPriorityGrouping+0x44>)
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ad2:	68ba      	ldr	r2, [r7, #8]
 8000ad4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ad8:	4013      	ands	r3, r2
 8000ada:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ae4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aee:	4a04      	ldr	r2, [pc, #16]	; (8000b00 <__NVIC_SetPriorityGrouping+0x44>)
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	60d3      	str	r3, [r2, #12]
}
 8000af4:	bf00      	nop
 8000af6:	3714      	adds	r7, #20
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b08:	4b04      	ldr	r3, [pc, #16]	; (8000b1c <__NVIC_GetPriorityGrouping+0x18>)
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	0a1b      	lsrs	r3, r3, #8
 8000b0e:	f003 0307 	and.w	r3, r3, #7
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	6039      	str	r1, [r7, #0]
 8000b2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	db0a      	blt.n	8000b4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	490c      	ldr	r1, [pc, #48]	; (8000b6c <__NVIC_SetPriority+0x4c>)
 8000b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3e:	0112      	lsls	r2, r2, #4
 8000b40:	b2d2      	uxtb	r2, r2
 8000b42:	440b      	add	r3, r1
 8000b44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b48:	e00a      	b.n	8000b60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	b2da      	uxtb	r2, r3
 8000b4e:	4908      	ldr	r1, [pc, #32]	; (8000b70 <__NVIC_SetPriority+0x50>)
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	f003 030f 	and.w	r3, r3, #15
 8000b56:	3b04      	subs	r3, #4
 8000b58:	0112      	lsls	r2, r2, #4
 8000b5a:	b2d2      	uxtb	r2, r2
 8000b5c:	440b      	add	r3, r1
 8000b5e:	761a      	strb	r2, [r3, #24]
}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	e000e100 	.word	0xe000e100
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b089      	sub	sp, #36	; 0x24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b88:	69fb      	ldr	r3, [r7, #28]
 8000b8a:	f1c3 0307 	rsb	r3, r3, #7
 8000b8e:	2b04      	cmp	r3, #4
 8000b90:	bf28      	it	cs
 8000b92:	2304      	movcs	r3, #4
 8000b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	3304      	adds	r3, #4
 8000b9a:	2b06      	cmp	r3, #6
 8000b9c:	d902      	bls.n	8000ba4 <NVIC_EncodePriority+0x30>
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	3b03      	subs	r3, #3
 8000ba2:	e000      	b.n	8000ba6 <NVIC_EncodePriority+0x32>
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	43da      	mvns	r2, r3
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	401a      	ands	r2, r3
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc6:	43d9      	mvns	r1, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bcc:	4313      	orrs	r3, r2
         );
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3724      	adds	r7, #36	; 0x24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
	...

08000bdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bec:	d301      	bcc.n	8000bf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e00f      	b.n	8000c12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bf2:	4a0a      	ldr	r2, [pc, #40]	; (8000c1c <SysTick_Config+0x40>)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bfa:	210f      	movs	r1, #15
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	f7ff ff8e 	bl	8000b20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c04:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <SysTick_Config+0x40>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c0a:	4b04      	ldr	r3, [pc, #16]	; (8000c1c <SysTick_Config+0x40>)
 8000c0c:	2207      	movs	r2, #7
 8000c0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	e000e010 	.word	0xe000e010

08000c20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f7ff ff47 	bl	8000abc <__NVIC_SetPriorityGrouping>
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b086      	sub	sp, #24
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	60b9      	str	r1, [r7, #8]
 8000c40:	607a      	str	r2, [r7, #4]
 8000c42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c48:	f7ff ff5c 	bl	8000b04 <__NVIC_GetPriorityGrouping>
 8000c4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	68b9      	ldr	r1, [r7, #8]
 8000c52:	6978      	ldr	r0, [r7, #20]
 8000c54:	f7ff ff8e 	bl	8000b74 <NVIC_EncodePriority>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c5e:	4611      	mov	r1, r2
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff ff5d 	bl	8000b20 <__NVIC_SetPriority>
}
 8000c66:	bf00      	nop
 8000c68:	3718      	adds	r7, #24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f7ff ffb0 	bl	8000bdc <SysTick_Config>
 8000c7c:	4603      	mov	r3, r0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
	...

08000c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b087      	sub	sp, #28
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c96:	e14e      	b.n	8000f36 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	f000 8140 	beq.w	8000f30 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f003 0303 	and.w	r3, r3, #3
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d005      	beq.n	8000cc8 <HAL_GPIO_Init+0x40>
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f003 0303 	and.w	r3, r3, #3
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	d130      	bne.n	8000d2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	2203      	movs	r2, #3
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	68da      	ldr	r2, [r3, #12]
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	693a      	ldr	r2, [r7, #16]
 8000cf6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cfe:	2201      	movs	r2, #1
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43db      	mvns	r3, r3
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	091b      	lsrs	r3, r3, #4
 8000d14:	f003 0201 	and.w	r2, r3, #1
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f003 0303 	and.w	r3, r3, #3
 8000d32:	2b03      	cmp	r3, #3
 8000d34:	d017      	beq.n	8000d66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	68db      	ldr	r3, [r3, #12]
 8000d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	2203      	movs	r2, #3
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43db      	mvns	r3, r3
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	689a      	ldr	r2, [r3, #8]
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f003 0303 	and.w	r3, r3, #3
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	d123      	bne.n	8000dba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	08da      	lsrs	r2, r3, #3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3208      	adds	r2, #8
 8000d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	220f      	movs	r2, #15
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	4013      	ands	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	691a      	ldr	r2, [r3, #16]
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	f003 0307 	and.w	r3, r3, #7
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	08da      	lsrs	r2, r3, #3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3208      	adds	r2, #8
 8000db4:	6939      	ldr	r1, [r7, #16]
 8000db6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	2203      	movs	r2, #3
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f003 0203 	and.w	r2, r3, #3
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	f000 809a 	beq.w	8000f30 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfc:	4b55      	ldr	r3, [pc, #340]	; (8000f54 <HAL_GPIO_Init+0x2cc>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	4a54      	ldr	r2, [pc, #336]	; (8000f54 <HAL_GPIO_Init+0x2cc>)
 8000e02:	f043 0301 	orr.w	r3, r3, #1
 8000e06:	6193      	str	r3, [r2, #24]
 8000e08:	4b52      	ldr	r3, [pc, #328]	; (8000f54 <HAL_GPIO_Init+0x2cc>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	f003 0301 	and.w	r3, r3, #1
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e14:	4a50      	ldr	r2, [pc, #320]	; (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	089b      	lsrs	r3, r3, #2
 8000e1a:	3302      	adds	r3, #2
 8000e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	f003 0303 	and.w	r3, r3, #3
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	220f      	movs	r2, #15
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	43db      	mvns	r3, r3
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	4013      	ands	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e3e:	d013      	beq.n	8000e68 <HAL_GPIO_Init+0x1e0>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4a46      	ldr	r2, [pc, #280]	; (8000f5c <HAL_GPIO_Init+0x2d4>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d00d      	beq.n	8000e64 <HAL_GPIO_Init+0x1dc>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4a45      	ldr	r2, [pc, #276]	; (8000f60 <HAL_GPIO_Init+0x2d8>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d007      	beq.n	8000e60 <HAL_GPIO_Init+0x1d8>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4a44      	ldr	r2, [pc, #272]	; (8000f64 <HAL_GPIO_Init+0x2dc>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d101      	bne.n	8000e5c <HAL_GPIO_Init+0x1d4>
 8000e58:	2303      	movs	r3, #3
 8000e5a:	e006      	b.n	8000e6a <HAL_GPIO_Init+0x1e2>
 8000e5c:	2305      	movs	r3, #5
 8000e5e:	e004      	b.n	8000e6a <HAL_GPIO_Init+0x1e2>
 8000e60:	2302      	movs	r3, #2
 8000e62:	e002      	b.n	8000e6a <HAL_GPIO_Init+0x1e2>
 8000e64:	2301      	movs	r3, #1
 8000e66:	e000      	b.n	8000e6a <HAL_GPIO_Init+0x1e2>
 8000e68:	2300      	movs	r3, #0
 8000e6a:	697a      	ldr	r2, [r7, #20]
 8000e6c:	f002 0203 	and.w	r2, r2, #3
 8000e70:	0092      	lsls	r2, r2, #2
 8000e72:	4093      	lsls	r3, r2
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e7a:	4937      	ldr	r1, [pc, #220]	; (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	089b      	lsrs	r3, r3, #2
 8000e80:	3302      	adds	r3, #2
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e88:	4b37      	ldr	r3, [pc, #220]	; (8000f68 <HAL_GPIO_Init+0x2e0>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	43db      	mvns	r3, r3
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4013      	ands	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d003      	beq.n	8000eac <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000eac:	4a2e      	ldr	r2, [pc, #184]	; (8000f68 <HAL_GPIO_Init+0x2e0>)
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000eb2:	4b2d      	ldr	r3, [pc, #180]	; (8000f68 <HAL_GPIO_Init+0x2e0>)
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d003      	beq.n	8000ed6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ed6:	4a24      	ldr	r2, [pc, #144]	; (8000f68 <HAL_GPIO_Init+0x2e0>)
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000edc:	4b22      	ldr	r3, [pc, #136]	; (8000f68 <HAL_GPIO_Init+0x2e0>)
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d003      	beq.n	8000f00 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f00:	4a19      	ldr	r2, [pc, #100]	; (8000f68 <HAL_GPIO_Init+0x2e0>)
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f06:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <HAL_GPIO_Init+0x2e0>)
 8000f08:	68db      	ldr	r3, [r3, #12]
 8000f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	4013      	ands	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d003      	beq.n	8000f2a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f2a:	4a0f      	ldr	r2, [pc, #60]	; (8000f68 <HAL_GPIO_Init+0x2e0>)
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	3301      	adds	r3, #1
 8000f34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	f47f aea9 	bne.w	8000c98 <HAL_GPIO_Init+0x10>
  }
}
 8000f46:	bf00      	nop
 8000f48:	bf00      	nop
 8000f4a:	371c      	adds	r7, #28
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	40021000 	.word	0x40021000
 8000f58:	40010000 	.word	0x40010000
 8000f5c:	48000400 	.word	0x48000400
 8000f60:	48000800 	.word	0x48000800
 8000f64:	48000c00 	.word	0x48000c00
 8000f68:	40010400 	.word	0x40010400

08000f6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d102      	bne.n	8000f86 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	f000 bef4 	b.w	8001d6e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f003 0301 	and.w	r3, r3, #1
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	f000 816a 	beq.w	800126a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f96:	4bb3      	ldr	r3, [pc, #716]	; (8001264 <HAL_RCC_OscConfig+0x2f8>)
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f003 030c 	and.w	r3, r3, #12
 8000f9e:	2b04      	cmp	r3, #4
 8000fa0:	d00c      	beq.n	8000fbc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fa2:	4bb0      	ldr	r3, [pc, #704]	; (8001264 <HAL_RCC_OscConfig+0x2f8>)
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f003 030c 	and.w	r3, r3, #12
 8000faa:	2b08      	cmp	r3, #8
 8000fac:	d159      	bne.n	8001062 <HAL_RCC_OscConfig+0xf6>
 8000fae:	4bad      	ldr	r3, [pc, #692]	; (8001264 <HAL_RCC_OscConfig+0x2f8>)
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fba:	d152      	bne.n	8001062 <HAL_RCC_OscConfig+0xf6>
 8000fbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fc0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000fc8:	fa93 f3a3 	rbit	r3, r3
 8000fcc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000fd0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fd4:	fab3 f383 	clz	r3, r3
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	095b      	lsrs	r3, r3, #5
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	f043 0301 	orr.w	r3, r3, #1
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d102      	bne.n	8000fee <HAL_RCC_OscConfig+0x82>
 8000fe8:	4b9e      	ldr	r3, [pc, #632]	; (8001264 <HAL_RCC_OscConfig+0x2f8>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	e015      	b.n	800101a <HAL_RCC_OscConfig+0xae>
 8000fee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ff2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ff6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000ffa:	fa93 f3a3 	rbit	r3, r3
 8000ffe:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001002:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001006:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800100a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800100e:	fa93 f3a3 	rbit	r3, r3
 8001012:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001016:	4b93      	ldr	r3, [pc, #588]	; (8001264 <HAL_RCC_OscConfig+0x2f8>)
 8001018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800101e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001022:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001026:	fa92 f2a2 	rbit	r2, r2
 800102a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800102e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001032:	fab2 f282 	clz	r2, r2
 8001036:	b2d2      	uxtb	r2, r2
 8001038:	f042 0220 	orr.w	r2, r2, #32
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	f002 021f 	and.w	r2, r2, #31
 8001042:	2101      	movs	r1, #1
 8001044:	fa01 f202 	lsl.w	r2, r1, r2
 8001048:	4013      	ands	r3, r2
 800104a:	2b00      	cmp	r3, #0
 800104c:	f000 810c 	beq.w	8001268 <HAL_RCC_OscConfig+0x2fc>
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	f040 8106 	bne.w	8001268 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	f000 be86 	b.w	8001d6e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800106c:	d106      	bne.n	800107c <HAL_RCC_OscConfig+0x110>
 800106e:	4b7d      	ldr	r3, [pc, #500]	; (8001264 <HAL_RCC_OscConfig+0x2f8>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a7c      	ldr	r2, [pc, #496]	; (8001264 <HAL_RCC_OscConfig+0x2f8>)
 8001074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001078:	6013      	str	r3, [r2, #0]
 800107a:	e030      	b.n	80010de <HAL_RCC_OscConfig+0x172>
 800107c:	1d3b      	adds	r3, r7, #4
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d10c      	bne.n	80010a0 <HAL_RCC_OscConfig+0x134>
 8001086:	4b77      	ldr	r3, [pc, #476]	; (8001264 <HAL_RCC_OscConfig+0x2f8>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a76      	ldr	r2, [pc, #472]	; (8001264 <HAL_RCC_OscConfig+0x2f8>)
 800108c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001090:	6013      	str	r3, [r2, #0]
 8001092:	4b74      	ldr	r3, [pc, #464]	; (8001264 <HAL_RCC_OscConfig+0x2f8>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a73      	ldr	r2, [pc, #460]	; (8001264 <HAL_RCC_OscConfig+0x2f8>)
 8001098:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800109c:	6013      	str	r3, [r2, #0]
 800109e:	e01e      	b.n	80010de <HAL_RCC_OscConfig+0x172>
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010aa:	d10c      	bne.n	80010c6 <HAL_RCC_OscConfig+0x15a>
 80010ac:	4b6d      	ldr	r3, [pc, #436]	; (8001264 <HAL_RCC_OscConfig+0x2f8>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a6c      	ldr	r2, [pc, #432]	; (8001264 <HAL_RCC_OscConfig+0x2f8>)
 80010b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	4b6a      	ldr	r3, [pc, #424]	; (8001264 <HAL_RCC_OscConfig+0x2f8>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a69      	ldr	r2, [pc, #420]	; (8001264 <HAL_RCC_OscConfig+0x2f8>)
 80010be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010c2:	6013      	str	r3, [r2, #0]
 80010c4:	e00b      	b.n	80010de <HAL_RCC_OscConfig+0x172>
 80010c6:	4b67      	ldr	r3, [pc, #412]	; (8001264 <HAL_RCC_OscConfig+0x2f8>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a66      	ldr	r2, [pc, #408]	; (8001264 <HAL_RCC_OscConfig+0x2f8>)
 80010cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010d0:	6013      	str	r3, [r2, #0]
 80010d2:	4b64      	ldr	r3, [pc, #400]	; (8001264 <HAL_RCC_OscConfig+0x2f8>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a63      	ldr	r2, [pc, #396]	; (8001264 <HAL_RCC_OscConfig+0x2f8>)
 80010d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010dc:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010de:	4b61      	ldr	r3, [pc, #388]	; (8001264 <HAL_RCC_OscConfig+0x2f8>)
 80010e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e2:	f023 020f 	bic.w	r2, r3, #15
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	495d      	ldr	r1, [pc, #372]	; (8001264 <HAL_RCC_OscConfig+0x2f8>)
 80010ee:	4313      	orrs	r3, r2
 80010f0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010f2:	1d3b      	adds	r3, r7, #4
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d059      	beq.n	80011b0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010fc:	f7ff fcae 	bl	8000a5c <HAL_GetTick>
 8001100:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001104:	e00a      	b.n	800111c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001106:	f7ff fca9 	bl	8000a5c <HAL_GetTick>
 800110a:	4602      	mov	r2, r0
 800110c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	2b64      	cmp	r3, #100	; 0x64
 8001114:	d902      	bls.n	800111c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001116:	2303      	movs	r3, #3
 8001118:	f000 be29 	b.w	8001d6e <HAL_RCC_OscConfig+0xe02>
 800111c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001120:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001124:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001128:	fa93 f3a3 	rbit	r3, r3
 800112c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001130:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001134:	fab3 f383 	clz	r3, r3
 8001138:	b2db      	uxtb	r3, r3
 800113a:	095b      	lsrs	r3, r3, #5
 800113c:	b2db      	uxtb	r3, r3
 800113e:	f043 0301 	orr.w	r3, r3, #1
 8001142:	b2db      	uxtb	r3, r3
 8001144:	2b01      	cmp	r3, #1
 8001146:	d102      	bne.n	800114e <HAL_RCC_OscConfig+0x1e2>
 8001148:	4b46      	ldr	r3, [pc, #280]	; (8001264 <HAL_RCC_OscConfig+0x2f8>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	e015      	b.n	800117a <HAL_RCC_OscConfig+0x20e>
 800114e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001152:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001156:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800115a:	fa93 f3a3 	rbit	r3, r3
 800115e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001162:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001166:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800116a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800116e:	fa93 f3a3 	rbit	r3, r3
 8001172:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001176:	4b3b      	ldr	r3, [pc, #236]	; (8001264 <HAL_RCC_OscConfig+0x2f8>)
 8001178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800117e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001182:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001186:	fa92 f2a2 	rbit	r2, r2
 800118a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800118e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001192:	fab2 f282 	clz	r2, r2
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	f042 0220 	orr.w	r2, r2, #32
 800119c:	b2d2      	uxtb	r2, r2
 800119e:	f002 021f 	and.w	r2, r2, #31
 80011a2:	2101      	movs	r1, #1
 80011a4:	fa01 f202 	lsl.w	r2, r1, r2
 80011a8:	4013      	ands	r3, r2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d0ab      	beq.n	8001106 <HAL_RCC_OscConfig+0x19a>
 80011ae:	e05c      	b.n	800126a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b0:	f7ff fc54 	bl	8000a5c <HAL_GetTick>
 80011b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011b8:	e00a      	b.n	80011d0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011ba:	f7ff fc4f 	bl	8000a5c <HAL_GetTick>
 80011be:	4602      	mov	r2, r0
 80011c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b64      	cmp	r3, #100	; 0x64
 80011c8:	d902      	bls.n	80011d0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	f000 bdcf 	b.w	8001d6e <HAL_RCC_OscConfig+0xe02>
 80011d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011d4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80011dc:	fa93 f3a3 	rbit	r3, r3
 80011e0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80011e4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011e8:	fab3 f383 	clz	r3, r3
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	095b      	lsrs	r3, r3, #5
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d102      	bne.n	8001202 <HAL_RCC_OscConfig+0x296>
 80011fc:	4b19      	ldr	r3, [pc, #100]	; (8001264 <HAL_RCC_OscConfig+0x2f8>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	e015      	b.n	800122e <HAL_RCC_OscConfig+0x2c2>
 8001202:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001206:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800120a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800120e:	fa93 f3a3 	rbit	r3, r3
 8001212:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001216:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800121a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800121e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001222:	fa93 f3a3 	rbit	r3, r3
 8001226:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800122a:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <HAL_RCC_OscConfig+0x2f8>)
 800122c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001232:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001236:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800123a:	fa92 f2a2 	rbit	r2, r2
 800123e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001242:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001246:	fab2 f282 	clz	r2, r2
 800124a:	b2d2      	uxtb	r2, r2
 800124c:	f042 0220 	orr.w	r2, r2, #32
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	f002 021f 	and.w	r2, r2, #31
 8001256:	2101      	movs	r1, #1
 8001258:	fa01 f202 	lsl.w	r2, r1, r2
 800125c:	4013      	ands	r3, r2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d1ab      	bne.n	80011ba <HAL_RCC_OscConfig+0x24e>
 8001262:	e002      	b.n	800126a <HAL_RCC_OscConfig+0x2fe>
 8001264:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001268:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 0302 	and.w	r3, r3, #2
 8001274:	2b00      	cmp	r3, #0
 8001276:	f000 816f 	beq.w	8001558 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800127a:	4bd0      	ldr	r3, [pc, #832]	; (80015bc <HAL_RCC_OscConfig+0x650>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f003 030c 	and.w	r3, r3, #12
 8001282:	2b00      	cmp	r3, #0
 8001284:	d00b      	beq.n	800129e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001286:	4bcd      	ldr	r3, [pc, #820]	; (80015bc <HAL_RCC_OscConfig+0x650>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f003 030c 	and.w	r3, r3, #12
 800128e:	2b08      	cmp	r3, #8
 8001290:	d16c      	bne.n	800136c <HAL_RCC_OscConfig+0x400>
 8001292:	4bca      	ldr	r3, [pc, #808]	; (80015bc <HAL_RCC_OscConfig+0x650>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d166      	bne.n	800136c <HAL_RCC_OscConfig+0x400>
 800129e:	2302      	movs	r3, #2
 80012a0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80012a8:	fa93 f3a3 	rbit	r3, r3
 80012ac:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80012b0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012b4:	fab3 f383 	clz	r3, r3
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	095b      	lsrs	r3, r3, #5
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	f043 0301 	orr.w	r3, r3, #1
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d102      	bne.n	80012ce <HAL_RCC_OscConfig+0x362>
 80012c8:	4bbc      	ldr	r3, [pc, #752]	; (80015bc <HAL_RCC_OscConfig+0x650>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	e013      	b.n	80012f6 <HAL_RCC_OscConfig+0x38a>
 80012ce:	2302      	movs	r3, #2
 80012d0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80012d8:	fa93 f3a3 	rbit	r3, r3
 80012dc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80012e0:	2302      	movs	r3, #2
 80012e2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80012e6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80012ea:	fa93 f3a3 	rbit	r3, r3
 80012ee:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80012f2:	4bb2      	ldr	r3, [pc, #712]	; (80015bc <HAL_RCC_OscConfig+0x650>)
 80012f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f6:	2202      	movs	r2, #2
 80012f8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80012fc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001300:	fa92 f2a2 	rbit	r2, r2
 8001304:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001308:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800130c:	fab2 f282 	clz	r2, r2
 8001310:	b2d2      	uxtb	r2, r2
 8001312:	f042 0220 	orr.w	r2, r2, #32
 8001316:	b2d2      	uxtb	r2, r2
 8001318:	f002 021f 	and.w	r2, r2, #31
 800131c:	2101      	movs	r1, #1
 800131e:	fa01 f202 	lsl.w	r2, r1, r2
 8001322:	4013      	ands	r3, r2
 8001324:	2b00      	cmp	r3, #0
 8001326:	d007      	beq.n	8001338 <HAL_RCC_OscConfig+0x3cc>
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d002      	beq.n	8001338 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	f000 bd1b 	b.w	8001d6e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001338:	4ba0      	ldr	r3, [pc, #640]	; (80015bc <HAL_RCC_OscConfig+0x650>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001340:	1d3b      	adds	r3, r7, #4
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	21f8      	movs	r1, #248	; 0xf8
 8001348:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800134c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001350:	fa91 f1a1 	rbit	r1, r1
 8001354:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001358:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800135c:	fab1 f181 	clz	r1, r1
 8001360:	b2c9      	uxtb	r1, r1
 8001362:	408b      	lsls	r3, r1
 8001364:	4995      	ldr	r1, [pc, #596]	; (80015bc <HAL_RCC_OscConfig+0x650>)
 8001366:	4313      	orrs	r3, r2
 8001368:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800136a:	e0f5      	b.n	8001558 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	691b      	ldr	r3, [r3, #16]
 8001372:	2b00      	cmp	r3, #0
 8001374:	f000 8085 	beq.w	8001482 <HAL_RCC_OscConfig+0x516>
 8001378:	2301      	movs	r3, #1
 800137a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800137e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001382:	fa93 f3a3 	rbit	r3, r3
 8001386:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800138a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800138e:	fab3 f383 	clz	r3, r3
 8001392:	b2db      	uxtb	r3, r3
 8001394:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001398:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	461a      	mov	r2, r3
 80013a0:	2301      	movs	r3, #1
 80013a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a4:	f7ff fb5a 	bl	8000a5c <HAL_GetTick>
 80013a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ac:	e00a      	b.n	80013c4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ae:	f7ff fb55 	bl	8000a5c <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d902      	bls.n	80013c4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	f000 bcd5 	b.w	8001d6e <HAL_RCC_OscConfig+0xe02>
 80013c4:	2302      	movs	r3, #2
 80013c6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ca:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80013ce:	fa93 f3a3 	rbit	r3, r3
 80013d2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80013d6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013da:	fab3 f383 	clz	r3, r3
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	095b      	lsrs	r3, r3, #5
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d102      	bne.n	80013f4 <HAL_RCC_OscConfig+0x488>
 80013ee:	4b73      	ldr	r3, [pc, #460]	; (80015bc <HAL_RCC_OscConfig+0x650>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	e013      	b.n	800141c <HAL_RCC_OscConfig+0x4b0>
 80013f4:	2302      	movs	r3, #2
 80013f6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013fa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80013fe:	fa93 f3a3 	rbit	r3, r3
 8001402:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001406:	2302      	movs	r3, #2
 8001408:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800140c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001410:	fa93 f3a3 	rbit	r3, r3
 8001414:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001418:	4b68      	ldr	r3, [pc, #416]	; (80015bc <HAL_RCC_OscConfig+0x650>)
 800141a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141c:	2202      	movs	r2, #2
 800141e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001422:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001426:	fa92 f2a2 	rbit	r2, r2
 800142a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800142e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001432:	fab2 f282 	clz	r2, r2
 8001436:	b2d2      	uxtb	r2, r2
 8001438:	f042 0220 	orr.w	r2, r2, #32
 800143c:	b2d2      	uxtb	r2, r2
 800143e:	f002 021f 	and.w	r2, r2, #31
 8001442:	2101      	movs	r1, #1
 8001444:	fa01 f202 	lsl.w	r2, r1, r2
 8001448:	4013      	ands	r3, r2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d0af      	beq.n	80013ae <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800144e:	4b5b      	ldr	r3, [pc, #364]	; (80015bc <HAL_RCC_OscConfig+0x650>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	695b      	ldr	r3, [r3, #20]
 800145c:	21f8      	movs	r1, #248	; 0xf8
 800145e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001462:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001466:	fa91 f1a1 	rbit	r1, r1
 800146a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800146e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001472:	fab1 f181 	clz	r1, r1
 8001476:	b2c9      	uxtb	r1, r1
 8001478:	408b      	lsls	r3, r1
 800147a:	4950      	ldr	r1, [pc, #320]	; (80015bc <HAL_RCC_OscConfig+0x650>)
 800147c:	4313      	orrs	r3, r2
 800147e:	600b      	str	r3, [r1, #0]
 8001480:	e06a      	b.n	8001558 <HAL_RCC_OscConfig+0x5ec>
 8001482:	2301      	movs	r3, #1
 8001484:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001488:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800148c:	fa93 f3a3 	rbit	r3, r3
 8001490:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001494:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001498:	fab3 f383 	clz	r3, r3
 800149c:	b2db      	uxtb	r3, r3
 800149e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80014a2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	461a      	mov	r2, r3
 80014aa:	2300      	movs	r3, #0
 80014ac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ae:	f7ff fad5 	bl	8000a5c <HAL_GetTick>
 80014b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014b6:	e00a      	b.n	80014ce <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014b8:	f7ff fad0 	bl	8000a5c <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d902      	bls.n	80014ce <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	f000 bc50 	b.w	8001d6e <HAL_RCC_OscConfig+0xe02>
 80014ce:	2302      	movs	r3, #2
 80014d0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80014d8:	fa93 f3a3 	rbit	r3, r3
 80014dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80014e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014e4:	fab3 f383 	clz	r3, r3
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	095b      	lsrs	r3, r3, #5
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d102      	bne.n	80014fe <HAL_RCC_OscConfig+0x592>
 80014f8:	4b30      	ldr	r3, [pc, #192]	; (80015bc <HAL_RCC_OscConfig+0x650>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	e013      	b.n	8001526 <HAL_RCC_OscConfig+0x5ba>
 80014fe:	2302      	movs	r3, #2
 8001500:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001504:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001508:	fa93 f3a3 	rbit	r3, r3
 800150c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001510:	2302      	movs	r3, #2
 8001512:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001516:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800151a:	fa93 f3a3 	rbit	r3, r3
 800151e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001522:	4b26      	ldr	r3, [pc, #152]	; (80015bc <HAL_RCC_OscConfig+0x650>)
 8001524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001526:	2202      	movs	r2, #2
 8001528:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800152c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001530:	fa92 f2a2 	rbit	r2, r2
 8001534:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001538:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800153c:	fab2 f282 	clz	r2, r2
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	f042 0220 	orr.w	r2, r2, #32
 8001546:	b2d2      	uxtb	r2, r2
 8001548:	f002 021f 	and.w	r2, r2, #31
 800154c:	2101      	movs	r1, #1
 800154e:	fa01 f202 	lsl.w	r2, r1, r2
 8001552:	4013      	ands	r3, r2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1af      	bne.n	80014b8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0308 	and.w	r3, r3, #8
 8001562:	2b00      	cmp	r3, #0
 8001564:	f000 80da 	beq.w	800171c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d069      	beq.n	8001646 <HAL_RCC_OscConfig+0x6da>
 8001572:	2301      	movs	r3, #1
 8001574:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001578:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800157c:	fa93 f3a3 	rbit	r3, r3
 8001580:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001584:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001588:	fab3 f383 	clz	r3, r3
 800158c:	b2db      	uxtb	r3, r3
 800158e:	461a      	mov	r2, r3
 8001590:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <HAL_RCC_OscConfig+0x654>)
 8001592:	4413      	add	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	461a      	mov	r2, r3
 8001598:	2301      	movs	r3, #1
 800159a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800159c:	f7ff fa5e 	bl	8000a5c <HAL_GetTick>
 80015a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015a4:	e00e      	b.n	80015c4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015a6:	f7ff fa59 	bl	8000a5c <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d906      	bls.n	80015c4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e3d9      	b.n	8001d6e <HAL_RCC_OscConfig+0xe02>
 80015ba:	bf00      	nop
 80015bc:	40021000 	.word	0x40021000
 80015c0:	10908120 	.word	0x10908120
 80015c4:	2302      	movs	r3, #2
 80015c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80015ce:	fa93 f3a3 	rbit	r3, r3
 80015d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80015d6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80015da:	2202      	movs	r2, #2
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	fa93 f2a3 	rbit	r2, r3
 80015e8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80015f2:	2202      	movs	r2, #2
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	fa93 f2a3 	rbit	r2, r3
 8001600:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001604:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001606:	4ba5      	ldr	r3, [pc, #660]	; (800189c <HAL_RCC_OscConfig+0x930>)
 8001608:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800160a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800160e:	2102      	movs	r1, #2
 8001610:	6019      	str	r1, [r3, #0]
 8001612:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	fa93 f1a3 	rbit	r1, r3
 800161c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001620:	6019      	str	r1, [r3, #0]
  return result;
 8001622:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	fab3 f383 	clz	r3, r3
 800162c:	b2db      	uxtb	r3, r3
 800162e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001632:	b2db      	uxtb	r3, r3
 8001634:	f003 031f 	and.w	r3, r3, #31
 8001638:	2101      	movs	r1, #1
 800163a:	fa01 f303 	lsl.w	r3, r1, r3
 800163e:	4013      	ands	r3, r2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d0b0      	beq.n	80015a6 <HAL_RCC_OscConfig+0x63a>
 8001644:	e06a      	b.n	800171c <HAL_RCC_OscConfig+0x7b0>
 8001646:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800164a:	2201      	movs	r2, #1
 800164c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800164e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	fa93 f2a3 	rbit	r2, r3
 8001658:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800165c:	601a      	str	r2, [r3, #0]
  return result;
 800165e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001662:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001664:	fab3 f383 	clz	r3, r3
 8001668:	b2db      	uxtb	r3, r3
 800166a:	461a      	mov	r2, r3
 800166c:	4b8c      	ldr	r3, [pc, #560]	; (80018a0 <HAL_RCC_OscConfig+0x934>)
 800166e:	4413      	add	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	461a      	mov	r2, r3
 8001674:	2300      	movs	r3, #0
 8001676:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001678:	f7ff f9f0 	bl	8000a5c <HAL_GetTick>
 800167c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001680:	e009      	b.n	8001696 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001682:	f7ff f9eb 	bl	8000a5c <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e36b      	b.n	8001d6e <HAL_RCC_OscConfig+0xe02>
 8001696:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800169a:	2202      	movs	r2, #2
 800169c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	fa93 f2a3 	rbit	r2, r3
 80016a8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80016b2:	2202      	movs	r2, #2
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	fa93 f2a3 	rbit	r2, r3
 80016c0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80016ca:	2202      	movs	r2, #2
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	fa93 f2a3 	rbit	r2, r3
 80016d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016dc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016de:	4b6f      	ldr	r3, [pc, #444]	; (800189c <HAL_RCC_OscConfig+0x930>)
 80016e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016e2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80016e6:	2102      	movs	r1, #2
 80016e8:	6019      	str	r1, [r3, #0]
 80016ea:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	fa93 f1a3 	rbit	r1, r3
 80016f4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80016f8:	6019      	str	r1, [r3, #0]
  return result;
 80016fa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	fab3 f383 	clz	r3, r3
 8001704:	b2db      	uxtb	r3, r3
 8001706:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800170a:	b2db      	uxtb	r3, r3
 800170c:	f003 031f 	and.w	r3, r3, #31
 8001710:	2101      	movs	r1, #1
 8001712:	fa01 f303 	lsl.w	r3, r1, r3
 8001716:	4013      	ands	r3, r2
 8001718:	2b00      	cmp	r3, #0
 800171a:	d1b2      	bne.n	8001682 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800171c:	1d3b      	adds	r3, r7, #4
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0304 	and.w	r3, r3, #4
 8001726:	2b00      	cmp	r3, #0
 8001728:	f000 8158 	beq.w	80019dc <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800172c:	2300      	movs	r3, #0
 800172e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001732:	4b5a      	ldr	r3, [pc, #360]	; (800189c <HAL_RCC_OscConfig+0x930>)
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d112      	bne.n	8001764 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800173e:	4b57      	ldr	r3, [pc, #348]	; (800189c <HAL_RCC_OscConfig+0x930>)
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	4a56      	ldr	r2, [pc, #344]	; (800189c <HAL_RCC_OscConfig+0x930>)
 8001744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001748:	61d3      	str	r3, [r2, #28]
 800174a:	4b54      	ldr	r3, [pc, #336]	; (800189c <HAL_RCC_OscConfig+0x930>)
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001752:	f107 0308 	add.w	r3, r7, #8
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	f107 0308 	add.w	r3, r7, #8
 800175c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800175e:	2301      	movs	r3, #1
 8001760:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001764:	4b4f      	ldr	r3, [pc, #316]	; (80018a4 <HAL_RCC_OscConfig+0x938>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176c:	2b00      	cmp	r3, #0
 800176e:	d11a      	bne.n	80017a6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001770:	4b4c      	ldr	r3, [pc, #304]	; (80018a4 <HAL_RCC_OscConfig+0x938>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a4b      	ldr	r2, [pc, #300]	; (80018a4 <HAL_RCC_OscConfig+0x938>)
 8001776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800177a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800177c:	f7ff f96e 	bl	8000a5c <HAL_GetTick>
 8001780:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001784:	e009      	b.n	800179a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001786:	f7ff f969 	bl	8000a5c <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b64      	cmp	r3, #100	; 0x64
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e2e9      	b.n	8001d6e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800179a:	4b42      	ldr	r3, [pc, #264]	; (80018a4 <HAL_RCC_OscConfig+0x938>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d0ef      	beq.n	8001786 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d106      	bne.n	80017be <HAL_RCC_OscConfig+0x852>
 80017b0:	4b3a      	ldr	r3, [pc, #232]	; (800189c <HAL_RCC_OscConfig+0x930>)
 80017b2:	6a1b      	ldr	r3, [r3, #32]
 80017b4:	4a39      	ldr	r2, [pc, #228]	; (800189c <HAL_RCC_OscConfig+0x930>)
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	6213      	str	r3, [r2, #32]
 80017bc:	e02f      	b.n	800181e <HAL_RCC_OscConfig+0x8b2>
 80017be:	1d3b      	adds	r3, r7, #4
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d10c      	bne.n	80017e2 <HAL_RCC_OscConfig+0x876>
 80017c8:	4b34      	ldr	r3, [pc, #208]	; (800189c <HAL_RCC_OscConfig+0x930>)
 80017ca:	6a1b      	ldr	r3, [r3, #32]
 80017cc:	4a33      	ldr	r2, [pc, #204]	; (800189c <HAL_RCC_OscConfig+0x930>)
 80017ce:	f023 0301 	bic.w	r3, r3, #1
 80017d2:	6213      	str	r3, [r2, #32]
 80017d4:	4b31      	ldr	r3, [pc, #196]	; (800189c <HAL_RCC_OscConfig+0x930>)
 80017d6:	6a1b      	ldr	r3, [r3, #32]
 80017d8:	4a30      	ldr	r2, [pc, #192]	; (800189c <HAL_RCC_OscConfig+0x930>)
 80017da:	f023 0304 	bic.w	r3, r3, #4
 80017de:	6213      	str	r3, [r2, #32]
 80017e0:	e01d      	b.n	800181e <HAL_RCC_OscConfig+0x8b2>
 80017e2:	1d3b      	adds	r3, r7, #4
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	2b05      	cmp	r3, #5
 80017ea:	d10c      	bne.n	8001806 <HAL_RCC_OscConfig+0x89a>
 80017ec:	4b2b      	ldr	r3, [pc, #172]	; (800189c <HAL_RCC_OscConfig+0x930>)
 80017ee:	6a1b      	ldr	r3, [r3, #32]
 80017f0:	4a2a      	ldr	r2, [pc, #168]	; (800189c <HAL_RCC_OscConfig+0x930>)
 80017f2:	f043 0304 	orr.w	r3, r3, #4
 80017f6:	6213      	str	r3, [r2, #32]
 80017f8:	4b28      	ldr	r3, [pc, #160]	; (800189c <HAL_RCC_OscConfig+0x930>)
 80017fa:	6a1b      	ldr	r3, [r3, #32]
 80017fc:	4a27      	ldr	r2, [pc, #156]	; (800189c <HAL_RCC_OscConfig+0x930>)
 80017fe:	f043 0301 	orr.w	r3, r3, #1
 8001802:	6213      	str	r3, [r2, #32]
 8001804:	e00b      	b.n	800181e <HAL_RCC_OscConfig+0x8b2>
 8001806:	4b25      	ldr	r3, [pc, #148]	; (800189c <HAL_RCC_OscConfig+0x930>)
 8001808:	6a1b      	ldr	r3, [r3, #32]
 800180a:	4a24      	ldr	r2, [pc, #144]	; (800189c <HAL_RCC_OscConfig+0x930>)
 800180c:	f023 0301 	bic.w	r3, r3, #1
 8001810:	6213      	str	r3, [r2, #32]
 8001812:	4b22      	ldr	r3, [pc, #136]	; (800189c <HAL_RCC_OscConfig+0x930>)
 8001814:	6a1b      	ldr	r3, [r3, #32]
 8001816:	4a21      	ldr	r2, [pc, #132]	; (800189c <HAL_RCC_OscConfig+0x930>)
 8001818:	f023 0304 	bic.w	r3, r3, #4
 800181c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800181e:	1d3b      	adds	r3, r7, #4
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d06b      	beq.n	8001900 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001828:	f7ff f918 	bl	8000a5c <HAL_GetTick>
 800182c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001830:	e00b      	b.n	800184a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001832:	f7ff f913 	bl	8000a5c <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001842:	4293      	cmp	r3, r2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e291      	b.n	8001d6e <HAL_RCC_OscConfig+0xe02>
 800184a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800184e:	2202      	movs	r2, #2
 8001850:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001852:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	fa93 f2a3 	rbit	r2, r3
 800185c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001866:	2202      	movs	r2, #2
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	fa93 f2a3 	rbit	r2, r3
 8001874:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001878:	601a      	str	r2, [r3, #0]
  return result;
 800187a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800187e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001880:	fab3 f383 	clz	r3, r3
 8001884:	b2db      	uxtb	r3, r3
 8001886:	095b      	lsrs	r3, r3, #5
 8001888:	b2db      	uxtb	r3, r3
 800188a:	f043 0302 	orr.w	r3, r3, #2
 800188e:	b2db      	uxtb	r3, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d109      	bne.n	80018a8 <HAL_RCC_OscConfig+0x93c>
 8001894:	4b01      	ldr	r3, [pc, #4]	; (800189c <HAL_RCC_OscConfig+0x930>)
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	e014      	b.n	80018c4 <HAL_RCC_OscConfig+0x958>
 800189a:	bf00      	nop
 800189c:	40021000 	.word	0x40021000
 80018a0:	10908120 	.word	0x10908120
 80018a4:	40007000 	.word	0x40007000
 80018a8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80018ac:	2202      	movs	r2, #2
 80018ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	fa93 f2a3 	rbit	r2, r3
 80018ba:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	4bbb      	ldr	r3, [pc, #748]	; (8001bb0 <HAL_RCC_OscConfig+0xc44>)
 80018c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80018c8:	2102      	movs	r1, #2
 80018ca:	6011      	str	r1, [r2, #0]
 80018cc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80018d0:	6812      	ldr	r2, [r2, #0]
 80018d2:	fa92 f1a2 	rbit	r1, r2
 80018d6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80018da:	6011      	str	r1, [r2, #0]
  return result;
 80018dc:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80018e0:	6812      	ldr	r2, [r2, #0]
 80018e2:	fab2 f282 	clz	r2, r2
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018ec:	b2d2      	uxtb	r2, r2
 80018ee:	f002 021f 	and.w	r2, r2, #31
 80018f2:	2101      	movs	r1, #1
 80018f4:	fa01 f202 	lsl.w	r2, r1, r2
 80018f8:	4013      	ands	r3, r2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d099      	beq.n	8001832 <HAL_RCC_OscConfig+0x8c6>
 80018fe:	e063      	b.n	80019c8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001900:	f7ff f8ac 	bl	8000a5c <HAL_GetTick>
 8001904:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001908:	e00b      	b.n	8001922 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800190a:	f7ff f8a7 	bl	8000a5c <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	f241 3288 	movw	r2, #5000	; 0x1388
 800191a:	4293      	cmp	r3, r2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e225      	b.n	8001d6e <HAL_RCC_OscConfig+0xe02>
 8001922:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001926:	2202      	movs	r2, #2
 8001928:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	fa93 f2a3 	rbit	r2, r3
 8001934:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800193e:	2202      	movs	r2, #2
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	fa93 f2a3 	rbit	r2, r3
 800194c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001950:	601a      	str	r2, [r3, #0]
  return result;
 8001952:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001956:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001958:	fab3 f383 	clz	r3, r3
 800195c:	b2db      	uxtb	r3, r3
 800195e:	095b      	lsrs	r3, r3, #5
 8001960:	b2db      	uxtb	r3, r3
 8001962:	f043 0302 	orr.w	r3, r3, #2
 8001966:	b2db      	uxtb	r3, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d102      	bne.n	8001972 <HAL_RCC_OscConfig+0xa06>
 800196c:	4b90      	ldr	r3, [pc, #576]	; (8001bb0 <HAL_RCC_OscConfig+0xc44>)
 800196e:	6a1b      	ldr	r3, [r3, #32]
 8001970:	e00d      	b.n	800198e <HAL_RCC_OscConfig+0xa22>
 8001972:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001976:	2202      	movs	r2, #2
 8001978:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	fa93 f2a3 	rbit	r2, r3
 8001984:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	4b89      	ldr	r3, [pc, #548]	; (8001bb0 <HAL_RCC_OscConfig+0xc44>)
 800198c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001992:	2102      	movs	r1, #2
 8001994:	6011      	str	r1, [r2, #0]
 8001996:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800199a:	6812      	ldr	r2, [r2, #0]
 800199c:	fa92 f1a2 	rbit	r1, r2
 80019a0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80019a4:	6011      	str	r1, [r2, #0]
  return result;
 80019a6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80019aa:	6812      	ldr	r2, [r2, #0]
 80019ac:	fab2 f282 	clz	r2, r2
 80019b0:	b2d2      	uxtb	r2, r2
 80019b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019b6:	b2d2      	uxtb	r2, r2
 80019b8:	f002 021f 	and.w	r2, r2, #31
 80019bc:	2101      	movs	r1, #1
 80019be:	fa01 f202 	lsl.w	r2, r1, r2
 80019c2:	4013      	ands	r3, r2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d1a0      	bne.n	800190a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019c8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d105      	bne.n	80019dc <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019d0:	4b77      	ldr	r3, [pc, #476]	; (8001bb0 <HAL_RCC_OscConfig+0xc44>)
 80019d2:	69db      	ldr	r3, [r3, #28]
 80019d4:	4a76      	ldr	r2, [pc, #472]	; (8001bb0 <HAL_RCC_OscConfig+0xc44>)
 80019d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019da:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019dc:	1d3b      	adds	r3, r7, #4
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f000 81c2 	beq.w	8001d6c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019e8:	4b71      	ldr	r3, [pc, #452]	; (8001bb0 <HAL_RCC_OscConfig+0xc44>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 030c 	and.w	r3, r3, #12
 80019f0:	2b08      	cmp	r3, #8
 80019f2:	f000 819c 	beq.w	8001d2e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019f6:	1d3b      	adds	r3, r7, #4
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	69db      	ldr	r3, [r3, #28]
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	f040 8114 	bne.w	8001c2a <HAL_RCC_OscConfig+0xcbe>
 8001a02:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001a06:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	fa93 f2a3 	rbit	r2, r3
 8001a16:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001a1a:	601a      	str	r2, [r3, #0]
  return result;
 8001a1c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001a20:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a22:	fab3 f383 	clz	r3, r3
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a2c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	461a      	mov	r2, r3
 8001a34:	2300      	movs	r3, #0
 8001a36:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a38:	f7ff f810 	bl	8000a5c <HAL_GetTick>
 8001a3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a40:	e009      	b.n	8001a56 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a42:	f7ff f80b 	bl	8000a5c <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e18b      	b.n	8001d6e <HAL_RCC_OscConfig+0xe02>
 8001a56:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001a5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a60:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	fa93 f2a3 	rbit	r2, r3
 8001a6a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a6e:	601a      	str	r2, [r3, #0]
  return result;
 8001a70:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a74:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a76:	fab3 f383 	clz	r3, r3
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	095b      	lsrs	r3, r3, #5
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d102      	bne.n	8001a90 <HAL_RCC_OscConfig+0xb24>
 8001a8a:	4b49      	ldr	r3, [pc, #292]	; (8001bb0 <HAL_RCC_OscConfig+0xc44>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	e01b      	b.n	8001ac8 <HAL_RCC_OscConfig+0xb5c>
 8001a90:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	fa93 f2a3 	rbit	r2, r3
 8001aa4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001aae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	fa93 f2a3 	rbit	r2, r3
 8001abe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	4b3a      	ldr	r3, [pc, #232]	; (8001bb0 <HAL_RCC_OscConfig+0xc44>)
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001acc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ad0:	6011      	str	r1, [r2, #0]
 8001ad2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001ad6:	6812      	ldr	r2, [r2, #0]
 8001ad8:	fa92 f1a2 	rbit	r1, r2
 8001adc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001ae0:	6011      	str	r1, [r2, #0]
  return result;
 8001ae2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001ae6:	6812      	ldr	r2, [r2, #0]
 8001ae8:	fab2 f282 	clz	r2, r2
 8001aec:	b2d2      	uxtb	r2, r2
 8001aee:	f042 0220 	orr.w	r2, r2, #32
 8001af2:	b2d2      	uxtb	r2, r2
 8001af4:	f002 021f 	and.w	r2, r2, #31
 8001af8:	2101      	movs	r1, #1
 8001afa:	fa01 f202 	lsl.w	r2, r1, r2
 8001afe:	4013      	ands	r3, r2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d19e      	bne.n	8001a42 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b04:	4b2a      	ldr	r3, [pc, #168]	; (8001bb0 <HAL_RCC_OscConfig+0xc44>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b0c:	1d3b      	adds	r3, r7, #4
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001b12:	1d3b      	adds	r3, r7, #4
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	430b      	orrs	r3, r1
 8001b1a:	4925      	ldr	r1, [pc, #148]	; (8001bb0 <HAL_RCC_OscConfig+0xc44>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	604b      	str	r3, [r1, #4]
 8001b20:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	fa93 f2a3 	rbit	r2, r3
 8001b34:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b38:	601a      	str	r2, [r3, #0]
  return result;
 8001b3a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b3e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b40:	fab3 f383 	clz	r3, r3
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b4a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	461a      	mov	r2, r3
 8001b52:	2301      	movs	r3, #1
 8001b54:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b56:	f7fe ff81 	bl	8000a5c <HAL_GetTick>
 8001b5a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b5e:	e009      	b.n	8001b74 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b60:	f7fe ff7c 	bl	8000a5c <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e0fc      	b.n	8001d6e <HAL_RCC_OscConfig+0xe02>
 8001b74:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	fa93 f2a3 	rbit	r2, r3
 8001b88:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b8c:	601a      	str	r2, [r3, #0]
  return result;
 8001b8e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b92:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b94:	fab3 f383 	clz	r3, r3
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	095b      	lsrs	r3, r3, #5
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d105      	bne.n	8001bb4 <HAL_RCC_OscConfig+0xc48>
 8001ba8:	4b01      	ldr	r3, [pc, #4]	; (8001bb0 <HAL_RCC_OscConfig+0xc44>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	e01e      	b.n	8001bec <HAL_RCC_OscConfig+0xc80>
 8001bae:	bf00      	nop
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001bb8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bbe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	fa93 f2a3 	rbit	r2, r3
 8001bc8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bd2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	fa93 f2a3 	rbit	r2, r3
 8001be2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	4b63      	ldr	r3, [pc, #396]	; (8001d78 <HAL_RCC_OscConfig+0xe0c>)
 8001bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bec:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001bf0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001bf4:	6011      	str	r1, [r2, #0]
 8001bf6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001bfa:	6812      	ldr	r2, [r2, #0]
 8001bfc:	fa92 f1a2 	rbit	r1, r2
 8001c00:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001c04:	6011      	str	r1, [r2, #0]
  return result;
 8001c06:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001c0a:	6812      	ldr	r2, [r2, #0]
 8001c0c:	fab2 f282 	clz	r2, r2
 8001c10:	b2d2      	uxtb	r2, r2
 8001c12:	f042 0220 	orr.w	r2, r2, #32
 8001c16:	b2d2      	uxtb	r2, r2
 8001c18:	f002 021f 	and.w	r2, r2, #31
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c22:	4013      	ands	r3, r2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d09b      	beq.n	8001b60 <HAL_RCC_OscConfig+0xbf4>
 8001c28:	e0a0      	b.n	8001d6c <HAL_RCC_OscConfig+0xe00>
 8001c2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c2e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c34:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	fa93 f2a3 	rbit	r2, r3
 8001c3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c42:	601a      	str	r2, [r3, #0]
  return result;
 8001c44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c48:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c4a:	fab3 f383 	clz	r3, r3
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c54:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c60:	f7fe fefc 	bl	8000a5c <HAL_GetTick>
 8001c64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c68:	e009      	b.n	8001c7e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c6a:	f7fe fef7 	bl	8000a5c <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e077      	b.n	8001d6e <HAL_RCC_OscConfig+0xe02>
 8001c7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	fa93 f2a3 	rbit	r2, r3
 8001c92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c96:	601a      	str	r2, [r3, #0]
  return result;
 8001c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c9c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c9e:	fab3 f383 	clz	r3, r3
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	095b      	lsrs	r3, r3, #5
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d102      	bne.n	8001cb8 <HAL_RCC_OscConfig+0xd4c>
 8001cb2:	4b31      	ldr	r3, [pc, #196]	; (8001d78 <HAL_RCC_OscConfig+0xe0c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	e01b      	b.n	8001cf0 <HAL_RCC_OscConfig+0xd84>
 8001cb8:	f107 0320 	add.w	r3, r7, #32
 8001cbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc2:	f107 0320 	add.w	r3, r7, #32
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	fa93 f2a3 	rbit	r2, r3
 8001ccc:	f107 031c 	add.w	r3, r7, #28
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	f107 0318 	add.w	r3, r7, #24
 8001cd6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	f107 0318 	add.w	r3, r7, #24
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	fa93 f2a3 	rbit	r2, r3
 8001ce6:	f107 0314 	add.w	r3, r7, #20
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	4b22      	ldr	r3, [pc, #136]	; (8001d78 <HAL_RCC_OscConfig+0xe0c>)
 8001cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf0:	f107 0210 	add.w	r2, r7, #16
 8001cf4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cf8:	6011      	str	r1, [r2, #0]
 8001cfa:	f107 0210 	add.w	r2, r7, #16
 8001cfe:	6812      	ldr	r2, [r2, #0]
 8001d00:	fa92 f1a2 	rbit	r1, r2
 8001d04:	f107 020c 	add.w	r2, r7, #12
 8001d08:	6011      	str	r1, [r2, #0]
  return result;
 8001d0a:	f107 020c 	add.w	r2, r7, #12
 8001d0e:	6812      	ldr	r2, [r2, #0]
 8001d10:	fab2 f282 	clz	r2, r2
 8001d14:	b2d2      	uxtb	r2, r2
 8001d16:	f042 0220 	orr.w	r2, r2, #32
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	f002 021f 	and.w	r2, r2, #31
 8001d20:	2101      	movs	r1, #1
 8001d22:	fa01 f202 	lsl.w	r2, r1, r2
 8001d26:	4013      	ands	r3, r2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d19e      	bne.n	8001c6a <HAL_RCC_OscConfig+0xcfe>
 8001d2c:	e01e      	b.n	8001d6c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d2e:	1d3b      	adds	r3, r7, #4
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	69db      	ldr	r3, [r3, #28]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d101      	bne.n	8001d3c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e018      	b.n	8001d6e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d3c:	4b0e      	ldr	r3, [pc, #56]	; (8001d78 <HAL_RCC_OscConfig+0xe0c>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d44:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d48:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d4c:	1d3b      	adds	r3, r7, #4
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6a1b      	ldr	r3, [r3, #32]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d108      	bne.n	8001d68 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001d56:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d5a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d5e:	1d3b      	adds	r3, r7, #4
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d001      	beq.n	8001d6c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e000      	b.n	8001d6e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40021000 	.word	0x40021000

08001d7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b09e      	sub	sp, #120	; 0x78
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d101      	bne.n	8001d94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e162      	b.n	800205a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d94:	4b90      	ldr	r3, [pc, #576]	; (8001fd8 <HAL_RCC_ClockConfig+0x25c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d910      	bls.n	8001dc4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001da2:	4b8d      	ldr	r3, [pc, #564]	; (8001fd8 <HAL_RCC_ClockConfig+0x25c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f023 0207 	bic.w	r2, r3, #7
 8001daa:	498b      	ldr	r1, [pc, #556]	; (8001fd8 <HAL_RCC_ClockConfig+0x25c>)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001db2:	4b89      	ldr	r3, [pc, #548]	; (8001fd8 <HAL_RCC_ClockConfig+0x25c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d001      	beq.n	8001dc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e14a      	b.n	800205a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d008      	beq.n	8001de2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd0:	4b82      	ldr	r3, [pc, #520]	; (8001fdc <HAL_RCC_ClockConfig+0x260>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	497f      	ldr	r1, [pc, #508]	; (8001fdc <HAL_RCC_ClockConfig+0x260>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 80dc 	beq.w	8001fa8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d13c      	bne.n	8001e72 <HAL_RCC_ClockConfig+0xf6>
 8001df8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dfc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e00:	fa93 f3a3 	rbit	r3, r3
 8001e04:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e08:	fab3 f383 	clz	r3, r3
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	095b      	lsrs	r3, r3, #5
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	f043 0301 	orr.w	r3, r3, #1
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d102      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xa6>
 8001e1c:	4b6f      	ldr	r3, [pc, #444]	; (8001fdc <HAL_RCC_ClockConfig+0x260>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	e00f      	b.n	8001e42 <HAL_RCC_ClockConfig+0xc6>
 8001e22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e26:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e2a:	fa93 f3a3 	rbit	r3, r3
 8001e2e:	667b      	str	r3, [r7, #100]	; 0x64
 8001e30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e34:	663b      	str	r3, [r7, #96]	; 0x60
 8001e36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e38:	fa93 f3a3 	rbit	r3, r3
 8001e3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e3e:	4b67      	ldr	r3, [pc, #412]	; (8001fdc <HAL_RCC_ClockConfig+0x260>)
 8001e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e46:	65ba      	str	r2, [r7, #88]	; 0x58
 8001e48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e4a:	fa92 f2a2 	rbit	r2, r2
 8001e4e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001e50:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e52:	fab2 f282 	clz	r2, r2
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	f042 0220 	orr.w	r2, r2, #32
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	f002 021f 	and.w	r2, r2, #31
 8001e62:	2101      	movs	r1, #1
 8001e64:	fa01 f202 	lsl.w	r2, r1, r2
 8001e68:	4013      	ands	r3, r2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d17b      	bne.n	8001f66 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e0f3      	b.n	800205a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d13c      	bne.n	8001ef4 <HAL_RCC_ClockConfig+0x178>
 8001e7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e7e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e82:	fa93 f3a3 	rbit	r3, r3
 8001e86:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e8a:	fab3 f383 	clz	r3, r3
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	095b      	lsrs	r3, r3, #5
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d102      	bne.n	8001ea4 <HAL_RCC_ClockConfig+0x128>
 8001e9e:	4b4f      	ldr	r3, [pc, #316]	; (8001fdc <HAL_RCC_ClockConfig+0x260>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	e00f      	b.n	8001ec4 <HAL_RCC_ClockConfig+0x148>
 8001ea4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ea8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001eac:	fa93 f3a3 	rbit	r3, r3
 8001eb0:	647b      	str	r3, [r7, #68]	; 0x44
 8001eb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001eb6:	643b      	str	r3, [r7, #64]	; 0x40
 8001eb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eba:	fa93 f3a3 	rbit	r3, r3
 8001ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ec0:	4b46      	ldr	r3, [pc, #280]	; (8001fdc <HAL_RCC_ClockConfig+0x260>)
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ec8:	63ba      	str	r2, [r7, #56]	; 0x38
 8001eca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ecc:	fa92 f2a2 	rbit	r2, r2
 8001ed0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001ed2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ed4:	fab2 f282 	clz	r2, r2
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	f042 0220 	orr.w	r2, r2, #32
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	f002 021f 	and.w	r2, r2, #31
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	fa01 f202 	lsl.w	r2, r1, r2
 8001eea:	4013      	ands	r3, r2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d13a      	bne.n	8001f66 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e0b2      	b.n	800205a <HAL_RCC_ClockConfig+0x2de>
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001efa:	fa93 f3a3 	rbit	r3, r3
 8001efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f02:	fab3 f383 	clz	r3, r3
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	095b      	lsrs	r3, r3, #5
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d102      	bne.n	8001f1c <HAL_RCC_ClockConfig+0x1a0>
 8001f16:	4b31      	ldr	r3, [pc, #196]	; (8001fdc <HAL_RCC_ClockConfig+0x260>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	e00d      	b.n	8001f38 <HAL_RCC_ClockConfig+0x1bc>
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f22:	fa93 f3a3 	rbit	r3, r3
 8001f26:	627b      	str	r3, [r7, #36]	; 0x24
 8001f28:	2302      	movs	r3, #2
 8001f2a:	623b      	str	r3, [r7, #32]
 8001f2c:	6a3b      	ldr	r3, [r7, #32]
 8001f2e:	fa93 f3a3 	rbit	r3, r3
 8001f32:	61fb      	str	r3, [r7, #28]
 8001f34:	4b29      	ldr	r3, [pc, #164]	; (8001fdc <HAL_RCC_ClockConfig+0x260>)
 8001f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f38:	2202      	movs	r2, #2
 8001f3a:	61ba      	str	r2, [r7, #24]
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	fa92 f2a2 	rbit	r2, r2
 8001f42:	617a      	str	r2, [r7, #20]
  return result;
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	fab2 f282 	clz	r2, r2
 8001f4a:	b2d2      	uxtb	r2, r2
 8001f4c:	f042 0220 	orr.w	r2, r2, #32
 8001f50:	b2d2      	uxtb	r2, r2
 8001f52:	f002 021f 	and.w	r2, r2, #31
 8001f56:	2101      	movs	r1, #1
 8001f58:	fa01 f202 	lsl.w	r2, r1, r2
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e079      	b.n	800205a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f66:	4b1d      	ldr	r3, [pc, #116]	; (8001fdc <HAL_RCC_ClockConfig+0x260>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f023 0203 	bic.w	r2, r3, #3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	491a      	ldr	r1, [pc, #104]	; (8001fdc <HAL_RCC_ClockConfig+0x260>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f78:	f7fe fd70 	bl	8000a5c <HAL_GetTick>
 8001f7c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7e:	e00a      	b.n	8001f96 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f80:	f7fe fd6c 	bl	8000a5c <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e061      	b.n	800205a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f96:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <HAL_RCC_ClockConfig+0x260>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f003 020c 	and.w	r2, r3, #12
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d1eb      	bne.n	8001f80 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fa8:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <HAL_RCC_ClockConfig+0x25c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d214      	bcs.n	8001fe0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb6:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <HAL_RCC_ClockConfig+0x25c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f023 0207 	bic.w	r2, r3, #7
 8001fbe:	4906      	ldr	r1, [pc, #24]	; (8001fd8 <HAL_RCC_ClockConfig+0x25c>)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc6:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <HAL_RCC_ClockConfig+0x25c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d005      	beq.n	8001fe0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e040      	b.n	800205a <HAL_RCC_ClockConfig+0x2de>
 8001fd8:	40022000 	.word	0x40022000
 8001fdc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d008      	beq.n	8001ffe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fec:	4b1d      	ldr	r3, [pc, #116]	; (8002064 <HAL_RCC_ClockConfig+0x2e8>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	491a      	ldr	r1, [pc, #104]	; (8002064 <HAL_RCC_ClockConfig+0x2e8>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0308 	and.w	r3, r3, #8
 8002006:	2b00      	cmp	r3, #0
 8002008:	d009      	beq.n	800201e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800200a:	4b16      	ldr	r3, [pc, #88]	; (8002064 <HAL_RCC_ClockConfig+0x2e8>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	4912      	ldr	r1, [pc, #72]	; (8002064 <HAL_RCC_ClockConfig+0x2e8>)
 800201a:	4313      	orrs	r3, r2
 800201c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800201e:	f000 f829 	bl	8002074 <HAL_RCC_GetSysClockFreq>
 8002022:	4601      	mov	r1, r0
 8002024:	4b0f      	ldr	r3, [pc, #60]	; (8002064 <HAL_RCC_ClockConfig+0x2e8>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800202c:	22f0      	movs	r2, #240	; 0xf0
 800202e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	fa92 f2a2 	rbit	r2, r2
 8002036:	60fa      	str	r2, [r7, #12]
  return result;
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	fab2 f282 	clz	r2, r2
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	40d3      	lsrs	r3, r2
 8002042:	4a09      	ldr	r2, [pc, #36]	; (8002068 <HAL_RCC_ClockConfig+0x2ec>)
 8002044:	5cd3      	ldrb	r3, [r2, r3]
 8002046:	fa21 f303 	lsr.w	r3, r1, r3
 800204a:	4a08      	ldr	r2, [pc, #32]	; (800206c <HAL_RCC_ClockConfig+0x2f0>)
 800204c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800204e:	4b08      	ldr	r3, [pc, #32]	; (8002070 <HAL_RCC_ClockConfig+0x2f4>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f7fe fcbe 	bl	80009d4 <HAL_InitTick>
  
  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3778      	adds	r7, #120	; 0x78
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40021000 	.word	0x40021000
 8002068:	08003d48 	.word	0x08003d48
 800206c:	20000000 	.word	0x20000000
 8002070:	20000004 	.word	0x20000004

08002074 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002074:	b480      	push	{r7}
 8002076:	b08b      	sub	sp, #44	; 0x2c
 8002078:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800207a:	2300      	movs	r3, #0
 800207c:	61fb      	str	r3, [r7, #28]
 800207e:	2300      	movs	r3, #0
 8002080:	61bb      	str	r3, [r7, #24]
 8002082:	2300      	movs	r3, #0
 8002084:	627b      	str	r3, [r7, #36]	; 0x24
 8002086:	2300      	movs	r3, #0
 8002088:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800208a:	2300      	movs	r3, #0
 800208c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800208e:	4b29      	ldr	r3, [pc, #164]	; (8002134 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	f003 030c 	and.w	r3, r3, #12
 800209a:	2b04      	cmp	r3, #4
 800209c:	d002      	beq.n	80020a4 <HAL_RCC_GetSysClockFreq+0x30>
 800209e:	2b08      	cmp	r3, #8
 80020a0:	d003      	beq.n	80020aa <HAL_RCC_GetSysClockFreq+0x36>
 80020a2:	e03c      	b.n	800211e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020a4:	4b24      	ldr	r3, [pc, #144]	; (8002138 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020a6:	623b      	str	r3, [r7, #32]
      break;
 80020a8:	e03c      	b.n	8002124 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80020b0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80020b4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b6:	68ba      	ldr	r2, [r7, #8]
 80020b8:	fa92 f2a2 	rbit	r2, r2
 80020bc:	607a      	str	r2, [r7, #4]
  return result;
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	fab2 f282 	clz	r2, r2
 80020c4:	b2d2      	uxtb	r2, r2
 80020c6:	40d3      	lsrs	r3, r2
 80020c8:	4a1c      	ldr	r2, [pc, #112]	; (800213c <HAL_RCC_GetSysClockFreq+0xc8>)
 80020ca:	5cd3      	ldrb	r3, [r2, r3]
 80020cc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80020ce:	4b19      	ldr	r3, [pc, #100]	; (8002134 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	220f      	movs	r2, #15
 80020d8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	fa92 f2a2 	rbit	r2, r2
 80020e0:	60fa      	str	r2, [r7, #12]
  return result;
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	fab2 f282 	clz	r2, r2
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	40d3      	lsrs	r3, r2
 80020ec:	4a14      	ldr	r2, [pc, #80]	; (8002140 <HAL_RCC_GetSysClockFreq+0xcc>)
 80020ee:	5cd3      	ldrb	r3, [r2, r3]
 80020f0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d008      	beq.n	800210e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020fc:	4a0e      	ldr	r2, [pc, #56]	; (8002138 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	fbb2 f2f3 	udiv	r2, r2, r3
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	fb02 f303 	mul.w	r3, r2, r3
 800210a:	627b      	str	r3, [r7, #36]	; 0x24
 800210c:	e004      	b.n	8002118 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	4a0c      	ldr	r2, [pc, #48]	; (8002144 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002112:	fb02 f303 	mul.w	r3, r2, r3
 8002116:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211a:	623b      	str	r3, [r7, #32]
      break;
 800211c:	e002      	b.n	8002124 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800211e:	4b06      	ldr	r3, [pc, #24]	; (8002138 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002120:	623b      	str	r3, [r7, #32]
      break;
 8002122:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002124:	6a3b      	ldr	r3, [r7, #32]
}
 8002126:	4618      	mov	r0, r3
 8002128:	372c      	adds	r7, #44	; 0x2c
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	40021000 	.word	0x40021000
 8002138:	007a1200 	.word	0x007a1200
 800213c:	08003d60 	.word	0x08003d60
 8002140:	08003d70 	.word	0x08003d70
 8002144:	003d0900 	.word	0x003d0900

08002148 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800214c:	4b03      	ldr	r3, [pc, #12]	; (800215c <HAL_RCC_GetHCLKFreq+0x14>)
 800214e:	681b      	ldr	r3, [r3, #0]
}
 8002150:	4618      	mov	r0, r3
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	20000000 	.word	0x20000000

08002160 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002166:	f7ff ffef 	bl	8002148 <HAL_RCC_GetHCLKFreq>
 800216a:	4601      	mov	r1, r0
 800216c:	4b0b      	ldr	r3, [pc, #44]	; (800219c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002174:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002178:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	fa92 f2a2 	rbit	r2, r2
 8002180:	603a      	str	r2, [r7, #0]
  return result;
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	fab2 f282 	clz	r2, r2
 8002188:	b2d2      	uxtb	r2, r2
 800218a:	40d3      	lsrs	r3, r2
 800218c:	4a04      	ldr	r2, [pc, #16]	; (80021a0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800218e:	5cd3      	ldrb	r3, [r2, r3]
 8002190:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002194:	4618      	mov	r0, r3
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40021000 	.word	0x40021000
 80021a0:	08003d58 	.word	0x08003d58

080021a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80021aa:	f7ff ffcd 	bl	8002148 <HAL_RCC_GetHCLKFreq>
 80021ae:	4601      	mov	r1, r0
 80021b0:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80021b8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80021bc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	fa92 f2a2 	rbit	r2, r2
 80021c4:	603a      	str	r2, [r7, #0]
  return result;
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	fab2 f282 	clz	r2, r2
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	40d3      	lsrs	r3, r2
 80021d0:	4a04      	ldr	r2, [pc, #16]	; (80021e4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80021d2:	5cd3      	ldrb	r3, [r2, r3]
 80021d4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80021d8:	4618      	mov	r0, r3
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40021000 	.word	0x40021000
 80021e4:	08003d58 	.word	0x08003d58

080021e8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d101      	bne.n	80021fc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e097      	b.n	800232c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b00      	cmp	r3, #0
 8002206:	d106      	bne.n	8002216 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7fe fa0b 	bl	800062c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2202      	movs	r2, #2
 800221a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	6812      	ldr	r2, [r2, #0]
 8002228:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800222c:	f023 0307 	bic.w	r3, r3, #7
 8002230:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	3304      	adds	r3, #4
 800223a:	4619      	mov	r1, r3
 800223c:	4610      	mov	r0, r2
 800223e:	f000 f907 	bl	8002450 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	4313      	orrs	r3, r2
 8002262:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800226a:	f023 0303 	bic.w	r3, r3, #3
 800226e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	021b      	lsls	r3, r3, #8
 800227a:	4313      	orrs	r3, r2
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	4313      	orrs	r3, r2
 8002280:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002288:	f023 030c 	bic.w	r3, r3, #12
 800228c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002294:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002298:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	68da      	ldr	r2, [r3, #12]
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	021b      	lsls	r3, r3, #8
 80022a4:	4313      	orrs	r3, r2
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	011a      	lsls	r2, r3, #4
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	031b      	lsls	r3, r3, #12
 80022b8:	4313      	orrs	r3, r2
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	4313      	orrs	r3, r2
 80022be:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80022c6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80022ce:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	011b      	lsls	r3, r3, #4
 80022da:	4313      	orrs	r3, r2
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	4313      	orrs	r3, r2
 80022e0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	697a      	ldr	r2, [r7, #20]
 80022e8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2201      	movs	r2, #1
 800231e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3718      	adds	r7, #24
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002344:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800234c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002354:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800235c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d110      	bne.n	8002386 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002364:	7bfb      	ldrb	r3, [r7, #15]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d102      	bne.n	8002370 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800236a:	7b7b      	ldrb	r3, [r7, #13]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d001      	beq.n	8002374 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e069      	b.n	8002448 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2202      	movs	r2, #2
 8002378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2202      	movs	r2, #2
 8002380:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002384:	e031      	b.n	80023ea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	2b04      	cmp	r3, #4
 800238a:	d110      	bne.n	80023ae <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800238c:	7bbb      	ldrb	r3, [r7, #14]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d102      	bne.n	8002398 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002392:	7b3b      	ldrb	r3, [r7, #12]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d001      	beq.n	800239c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e055      	b.n	8002448 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2202      	movs	r2, #2
 80023a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2202      	movs	r2, #2
 80023a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80023ac:	e01d      	b.n	80023ea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80023ae:	7bfb      	ldrb	r3, [r7, #15]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d108      	bne.n	80023c6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80023b4:	7bbb      	ldrb	r3, [r7, #14]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d105      	bne.n	80023c6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80023ba:	7b7b      	ldrb	r3, [r7, #13]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d102      	bne.n	80023c6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80023c0:	7b3b      	ldrb	r3, [r7, #12]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d001      	beq.n	80023ca <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e03e      	b.n	8002448 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2202      	movs	r2, #2
 80023ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2202      	movs	r2, #2
 80023d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2202      	movs	r2, #2
 80023de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2202      	movs	r2, #2
 80023e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d003      	beq.n	80023f8 <HAL_TIM_Encoder_Start+0xc4>
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	2b04      	cmp	r3, #4
 80023f4:	d008      	beq.n	8002408 <HAL_TIM_Encoder_Start+0xd4>
 80023f6:	e00f      	b.n	8002418 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2201      	movs	r2, #1
 80023fe:	2100      	movs	r1, #0
 8002400:	4618      	mov	r0, r3
 8002402:	f000 f89d 	bl	8002540 <TIM_CCxChannelCmd>
      break;
 8002406:	e016      	b.n	8002436 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2201      	movs	r2, #1
 800240e:	2104      	movs	r1, #4
 8002410:	4618      	mov	r0, r3
 8002412:	f000 f895 	bl	8002540 <TIM_CCxChannelCmd>
      break;
 8002416:	e00e      	b.n	8002436 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2201      	movs	r2, #1
 800241e:	2100      	movs	r1, #0
 8002420:	4618      	mov	r0, r3
 8002422:	f000 f88d 	bl	8002540 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2201      	movs	r2, #1
 800242c:	2104      	movs	r1, #4
 800242e:	4618      	mov	r0, r3
 8002430:	f000 f886 	bl	8002540 <TIM_CCxChannelCmd>
      break;
 8002434:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f042 0201 	orr.w	r2, r2, #1
 8002444:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a32      	ldr	r2, [pc, #200]	; (800252c <TIM_Base_SetConfig+0xdc>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d007      	beq.n	8002478 <TIM_Base_SetConfig+0x28>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800246e:	d003      	beq.n	8002478 <TIM_Base_SetConfig+0x28>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a2f      	ldr	r2, [pc, #188]	; (8002530 <TIM_Base_SetConfig+0xe0>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d108      	bne.n	800248a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800247e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	4313      	orrs	r3, r2
 8002488:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a27      	ldr	r2, [pc, #156]	; (800252c <TIM_Base_SetConfig+0xdc>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d013      	beq.n	80024ba <TIM_Base_SetConfig+0x6a>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002498:	d00f      	beq.n	80024ba <TIM_Base_SetConfig+0x6a>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a24      	ldr	r2, [pc, #144]	; (8002530 <TIM_Base_SetConfig+0xe0>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d00b      	beq.n	80024ba <TIM_Base_SetConfig+0x6a>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a23      	ldr	r2, [pc, #140]	; (8002534 <TIM_Base_SetConfig+0xe4>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d007      	beq.n	80024ba <TIM_Base_SetConfig+0x6a>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a22      	ldr	r2, [pc, #136]	; (8002538 <TIM_Base_SetConfig+0xe8>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d003      	beq.n	80024ba <TIM_Base_SetConfig+0x6a>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a21      	ldr	r2, [pc, #132]	; (800253c <TIM_Base_SetConfig+0xec>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d108      	bne.n	80024cc <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a0e      	ldr	r2, [pc, #56]	; (800252c <TIM_Base_SetConfig+0xdc>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d00b      	beq.n	8002510 <TIM_Base_SetConfig+0xc0>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a0e      	ldr	r2, [pc, #56]	; (8002534 <TIM_Base_SetConfig+0xe4>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d007      	beq.n	8002510 <TIM_Base_SetConfig+0xc0>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a0d      	ldr	r2, [pc, #52]	; (8002538 <TIM_Base_SetConfig+0xe8>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d003      	beq.n	8002510 <TIM_Base_SetConfig+0xc0>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a0c      	ldr	r2, [pc, #48]	; (800253c <TIM_Base_SetConfig+0xec>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d103      	bne.n	8002518 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	691a      	ldr	r2, [r3, #16]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	615a      	str	r2, [r3, #20]
}
 800251e:	bf00      	nop
 8002520:	3714      	adds	r7, #20
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	40012c00 	.word	0x40012c00
 8002530:	40000400 	.word	0x40000400
 8002534:	40014000 	.word	0x40014000
 8002538:	40014400 	.word	0x40014400
 800253c:	40014800 	.word	0x40014800

08002540 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002540:	b480      	push	{r7}
 8002542:	b087      	sub	sp, #28
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	f003 031f 	and.w	r3, r3, #31
 8002552:	2201      	movs	r2, #1
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6a1a      	ldr	r2, [r3, #32]
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	43db      	mvns	r3, r3
 8002562:	401a      	ands	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6a1a      	ldr	r2, [r3, #32]
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	f003 031f 	and.w	r3, r3, #31
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	fa01 f303 	lsl.w	r3, r1, r3
 8002578:	431a      	orrs	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	621a      	str	r2, [r3, #32]
}
 800257e:	bf00      	nop
 8002580:	371c      	adds	r7, #28
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
	...

0800258c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800259c:	2b01      	cmp	r3, #1
 800259e:	d101      	bne.n	80025a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025a0:	2302      	movs	r3, #2
 80025a2:	e054      	b.n	800264e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2202      	movs	r2, #2
 80025b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a24      	ldr	r2, [pc, #144]	; (800265c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d108      	bne.n	80025e0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80025d4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	4313      	orrs	r3, r2
 80025de:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a17      	ldr	r2, [pc, #92]	; (800265c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d00e      	beq.n	8002622 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800260c:	d009      	beq.n	8002622 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a13      	ldr	r2, [pc, #76]	; (8002660 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d004      	beq.n	8002622 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a11      	ldr	r2, [pc, #68]	; (8002664 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d10c      	bne.n	800263c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002628:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	68ba      	ldr	r2, [r7, #8]
 8002630:	4313      	orrs	r3, r2
 8002632:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68ba      	ldr	r2, [r7, #8]
 800263a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3714      	adds	r7, #20
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	40012c00 	.word	0x40012c00
 8002660:	40000400 	.word	0x40000400
 8002664:	40014000 	.word	0x40014000

08002668 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e040      	b.n	80026fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800267e:	2b00      	cmp	r3, #0
 8002680:	d106      	bne.n	8002690 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7fe f840 	bl	8000710 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2224      	movs	r2, #36	; 0x24
 8002694:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 0201 	bic.w	r2, r2, #1
 80026a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 f8c0 	bl	800282c <UART_SetConfig>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d101      	bne.n	80026b6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e022      	b.n	80026fc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d002      	beq.n	80026c4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 f9ea 	bl	8002a98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	685a      	ldr	r2, [r3, #4]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	689a      	ldr	r2, [r3, #8]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f042 0201 	orr.w	r2, r2, #1
 80026f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 fa71 	bl	8002bdc <UART_CheckIdleState>
 80026fa:	4603      	mov	r3, r0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b08a      	sub	sp, #40	; 0x28
 8002708:	af02      	add	r7, sp, #8
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	603b      	str	r3, [r7, #0]
 8002710:	4613      	mov	r3, r2
 8002712:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002718:	2b20      	cmp	r3, #32
 800271a:	f040 8082 	bne.w	8002822 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d002      	beq.n	800272a <HAL_UART_Transmit+0x26>
 8002724:	88fb      	ldrh	r3, [r7, #6]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e07a      	b.n	8002824 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002734:	2b01      	cmp	r3, #1
 8002736:	d101      	bne.n	800273c <HAL_UART_Transmit+0x38>
 8002738:	2302      	movs	r3, #2
 800273a:	e073      	b.n	8002824 <HAL_UART_Transmit+0x120>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2221      	movs	r2, #33	; 0x21
 8002750:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002752:	f7fe f983 	bl	8000a5c <HAL_GetTick>
 8002756:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	88fa      	ldrh	r2, [r7, #6]
 800275c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	88fa      	ldrh	r2, [r7, #6]
 8002764:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002770:	d108      	bne.n	8002784 <HAL_UART_Transmit+0x80>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d104      	bne.n	8002784 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800277a:	2300      	movs	r3, #0
 800277c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	61bb      	str	r3, [r7, #24]
 8002782:	e003      	b.n	800278c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002788:	2300      	movs	r3, #0
 800278a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002794:	e02d      	b.n	80027f2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	2200      	movs	r2, #0
 800279e:	2180      	movs	r1, #128	; 0x80
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f000 fa64 	bl	8002c6e <UART_WaitOnFlagUntilTimeout>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e039      	b.n	8002824 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10b      	bne.n	80027ce <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	881a      	ldrh	r2, [r3, #0]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027c2:	b292      	uxth	r2, r2
 80027c4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	3302      	adds	r3, #2
 80027ca:	61bb      	str	r3, [r7, #24]
 80027cc:	e008      	b.n	80027e0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	781a      	ldrb	r2, [r3, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	b292      	uxth	r2, r2
 80027d8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	3301      	adds	r3, #1
 80027de:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	3b01      	subs	r3, #1
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1cb      	bne.n	8002796 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	2200      	movs	r2, #0
 8002806:	2140      	movs	r1, #64	; 0x40
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f000 fa30 	bl	8002c6e <UART_WaitOnFlagUntilTimeout>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e005      	b.n	8002824 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2220      	movs	r2, #32
 800281c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800281e:	2300      	movs	r3, #0
 8002820:	e000      	b.n	8002824 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002822:	2302      	movs	r3, #2
  }
}
 8002824:	4618      	mov	r0, r3
 8002826:	3720      	adds	r7, #32
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b088      	sub	sp, #32
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002834:	2300      	movs	r3, #0
 8002836:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	431a      	orrs	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	69db      	ldr	r3, [r3, #28]
 800284c:	4313      	orrs	r3, r2
 800284e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	4b8a      	ldr	r3, [pc, #552]	; (8002a80 <UART_SetConfig+0x254>)
 8002858:	4013      	ands	r3, r2
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	6812      	ldr	r2, [r2, #0]
 800285e:	6979      	ldr	r1, [r7, #20]
 8002860:	430b      	orrs	r3, r1
 8002862:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	68da      	ldr	r2, [r3, #12]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	430a      	orrs	r2, r1
 8002878:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	697a      	ldr	r2, [r7, #20]
 8002886:	4313      	orrs	r3, r2
 8002888:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	430a      	orrs	r2, r1
 800289c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a78      	ldr	r2, [pc, #480]	; (8002a84 <UART_SetConfig+0x258>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d120      	bne.n	80028ea <UART_SetConfig+0xbe>
 80028a8:	4b77      	ldr	r3, [pc, #476]	; (8002a88 <UART_SetConfig+0x25c>)
 80028aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ac:	f003 0303 	and.w	r3, r3, #3
 80028b0:	2b03      	cmp	r3, #3
 80028b2:	d817      	bhi.n	80028e4 <UART_SetConfig+0xb8>
 80028b4:	a201      	add	r2, pc, #4	; (adr r2, 80028bc <UART_SetConfig+0x90>)
 80028b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ba:	bf00      	nop
 80028bc:	080028cd 	.word	0x080028cd
 80028c0:	080028d9 	.word	0x080028d9
 80028c4:	080028df 	.word	0x080028df
 80028c8:	080028d3 	.word	0x080028d3
 80028cc:	2300      	movs	r3, #0
 80028ce:	77fb      	strb	r3, [r7, #31]
 80028d0:	e01d      	b.n	800290e <UART_SetConfig+0xe2>
 80028d2:	2302      	movs	r3, #2
 80028d4:	77fb      	strb	r3, [r7, #31]
 80028d6:	e01a      	b.n	800290e <UART_SetConfig+0xe2>
 80028d8:	2304      	movs	r3, #4
 80028da:	77fb      	strb	r3, [r7, #31]
 80028dc:	e017      	b.n	800290e <UART_SetConfig+0xe2>
 80028de:	2308      	movs	r3, #8
 80028e0:	77fb      	strb	r3, [r7, #31]
 80028e2:	e014      	b.n	800290e <UART_SetConfig+0xe2>
 80028e4:	2310      	movs	r3, #16
 80028e6:	77fb      	strb	r3, [r7, #31]
 80028e8:	e011      	b.n	800290e <UART_SetConfig+0xe2>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a67      	ldr	r2, [pc, #412]	; (8002a8c <UART_SetConfig+0x260>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d102      	bne.n	80028fa <UART_SetConfig+0xce>
 80028f4:	2300      	movs	r3, #0
 80028f6:	77fb      	strb	r3, [r7, #31]
 80028f8:	e009      	b.n	800290e <UART_SetConfig+0xe2>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a64      	ldr	r2, [pc, #400]	; (8002a90 <UART_SetConfig+0x264>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d102      	bne.n	800290a <UART_SetConfig+0xde>
 8002904:	2300      	movs	r3, #0
 8002906:	77fb      	strb	r3, [r7, #31]
 8002908:	e001      	b.n	800290e <UART_SetConfig+0xe2>
 800290a:	2310      	movs	r3, #16
 800290c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002916:	d15b      	bne.n	80029d0 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8002918:	7ffb      	ldrb	r3, [r7, #31]
 800291a:	2b08      	cmp	r3, #8
 800291c:	d827      	bhi.n	800296e <UART_SetConfig+0x142>
 800291e:	a201      	add	r2, pc, #4	; (adr r2, 8002924 <UART_SetConfig+0xf8>)
 8002920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002924:	08002949 	.word	0x08002949
 8002928:	08002951 	.word	0x08002951
 800292c:	08002959 	.word	0x08002959
 8002930:	0800296f 	.word	0x0800296f
 8002934:	0800295f 	.word	0x0800295f
 8002938:	0800296f 	.word	0x0800296f
 800293c:	0800296f 	.word	0x0800296f
 8002940:	0800296f 	.word	0x0800296f
 8002944:	08002967 	.word	0x08002967
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002948:	f7ff fc0a 	bl	8002160 <HAL_RCC_GetPCLK1Freq>
 800294c:	61b8      	str	r0, [r7, #24]
        break;
 800294e:	e013      	b.n	8002978 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002950:	f7ff fc28 	bl	80021a4 <HAL_RCC_GetPCLK2Freq>
 8002954:	61b8      	str	r0, [r7, #24]
        break;
 8002956:	e00f      	b.n	8002978 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002958:	4b4e      	ldr	r3, [pc, #312]	; (8002a94 <UART_SetConfig+0x268>)
 800295a:	61bb      	str	r3, [r7, #24]
        break;
 800295c:	e00c      	b.n	8002978 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800295e:	f7ff fb89 	bl	8002074 <HAL_RCC_GetSysClockFreq>
 8002962:	61b8      	str	r0, [r7, #24]
        break;
 8002964:	e008      	b.n	8002978 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002966:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800296a:	61bb      	str	r3, [r7, #24]
        break;
 800296c:	e004      	b.n	8002978 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800296e:	2300      	movs	r3, #0
 8002970:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	77bb      	strb	r3, [r7, #30]
        break;
 8002976:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d074      	beq.n	8002a68 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	005a      	lsls	r2, r3, #1
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	085b      	lsrs	r3, r3, #1
 8002988:	441a      	add	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002992:	b29b      	uxth	r3, r3
 8002994:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	2b0f      	cmp	r3, #15
 800299a:	d916      	bls.n	80029ca <UART_SetConfig+0x19e>
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029a2:	d212      	bcs.n	80029ca <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	f023 030f 	bic.w	r3, r3, #15
 80029ac:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	085b      	lsrs	r3, r3, #1
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	f003 0307 	and.w	r3, r3, #7
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	89fb      	ldrh	r3, [r7, #14]
 80029bc:	4313      	orrs	r3, r2
 80029be:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	89fa      	ldrh	r2, [r7, #14]
 80029c6:	60da      	str	r2, [r3, #12]
 80029c8:	e04e      	b.n	8002a68 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	77bb      	strb	r3, [r7, #30]
 80029ce:	e04b      	b.n	8002a68 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80029d0:	7ffb      	ldrb	r3, [r7, #31]
 80029d2:	2b08      	cmp	r3, #8
 80029d4:	d827      	bhi.n	8002a26 <UART_SetConfig+0x1fa>
 80029d6:	a201      	add	r2, pc, #4	; (adr r2, 80029dc <UART_SetConfig+0x1b0>)
 80029d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029dc:	08002a01 	.word	0x08002a01
 80029e0:	08002a09 	.word	0x08002a09
 80029e4:	08002a11 	.word	0x08002a11
 80029e8:	08002a27 	.word	0x08002a27
 80029ec:	08002a17 	.word	0x08002a17
 80029f0:	08002a27 	.word	0x08002a27
 80029f4:	08002a27 	.word	0x08002a27
 80029f8:	08002a27 	.word	0x08002a27
 80029fc:	08002a1f 	.word	0x08002a1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a00:	f7ff fbae 	bl	8002160 <HAL_RCC_GetPCLK1Freq>
 8002a04:	61b8      	str	r0, [r7, #24]
        break;
 8002a06:	e013      	b.n	8002a30 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a08:	f7ff fbcc 	bl	80021a4 <HAL_RCC_GetPCLK2Freq>
 8002a0c:	61b8      	str	r0, [r7, #24]
        break;
 8002a0e:	e00f      	b.n	8002a30 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a10:	4b20      	ldr	r3, [pc, #128]	; (8002a94 <UART_SetConfig+0x268>)
 8002a12:	61bb      	str	r3, [r7, #24]
        break;
 8002a14:	e00c      	b.n	8002a30 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a16:	f7ff fb2d 	bl	8002074 <HAL_RCC_GetSysClockFreq>
 8002a1a:	61b8      	str	r0, [r7, #24]
        break;
 8002a1c:	e008      	b.n	8002a30 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a22:	61bb      	str	r3, [r7, #24]
        break;
 8002a24:	e004      	b.n	8002a30 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	77bb      	strb	r3, [r7, #30]
        break;
 8002a2e:	bf00      	nop
    }

    if (pclk != 0U)
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d018      	beq.n	8002a68 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	085a      	lsrs	r2, r3, #1
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	441a      	add	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	2b0f      	cmp	r3, #15
 8002a50:	d908      	bls.n	8002a64 <UART_SetConfig+0x238>
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a58:	d204      	bcs.n	8002a64 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	60da      	str	r2, [r3, #12]
 8002a62:	e001      	b.n	8002a68 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002a74:	7fbb      	ldrb	r3, [r7, #30]
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3720      	adds	r7, #32
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	efff69f3 	.word	0xefff69f3
 8002a84:	40013800 	.word	0x40013800
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	40004400 	.word	0x40004400
 8002a90:	40004800 	.word	0x40004800
 8002a94:	007a1200 	.word	0x007a1200

08002a98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00a      	beq.n	8002ac2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00a      	beq.n	8002ae4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00a      	beq.n	8002b06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0a:	f003 0308 	and.w	r3, r3, #8
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00a      	beq.n	8002b28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2c:	f003 0310 	and.w	r3, r3, #16
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00a      	beq.n	8002b4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4e:	f003 0320 	and.w	r3, r3, #32
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00a      	beq.n	8002b6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d01a      	beq.n	8002bae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b96:	d10a      	bne.n	8002bae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00a      	beq.n	8002bd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	605a      	str	r2, [r3, #4]
  }
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af02      	add	r7, sp, #8
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002bec:	f7fd ff36 	bl	8000a5c <HAL_GetTick>
 8002bf0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0308 	and.w	r3, r3, #8
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	d10e      	bne.n	8002c1e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c04:	9300      	str	r3, [sp, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 f82d 	bl	8002c6e <UART_WaitOnFlagUntilTimeout>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e023      	b.n	8002c66 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0304 	and.w	r3, r3, #4
 8002c28:	2b04      	cmp	r3, #4
 8002c2a:	d10e      	bne.n	8002c4a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f817 	bl	8002c6e <UART_WaitOnFlagUntilTimeout>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e00d      	b.n	8002c66 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2220      	movs	r2, #32
 8002c54:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b09c      	sub	sp, #112	; 0x70
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	60f8      	str	r0, [r7, #12]
 8002c76:	60b9      	str	r1, [r7, #8]
 8002c78:	603b      	str	r3, [r7, #0]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c7e:	e0a5      	b.n	8002dcc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c86:	f000 80a1 	beq.w	8002dcc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c8a:	f7fd fee7 	bl	8000a5c <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d302      	bcc.n	8002ca0 <UART_WaitOnFlagUntilTimeout+0x32>
 8002c9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d13e      	bne.n	8002d1e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ca8:	e853 3f00 	ldrex	r3, [r3]
 8002cac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002cae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cb0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002cb4:	667b      	str	r3, [r7, #100]	; 0x64
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002cc0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002cc4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002cc6:	e841 2300 	strex	r3, r2, [r1]
 8002cca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002ccc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1e6      	bne.n	8002ca0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	3308      	adds	r3, #8
 8002cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cdc:	e853 3f00 	ldrex	r3, [r3]
 8002ce0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ce4:	f023 0301 	bic.w	r3, r3, #1
 8002ce8:	663b      	str	r3, [r7, #96]	; 0x60
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	3308      	adds	r3, #8
 8002cf0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002cf2:	64ba      	str	r2, [r7, #72]	; 0x48
 8002cf4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002cf8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002cfa:	e841 2300 	strex	r3, r2, [r1]
 8002cfe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002d00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1e5      	bne.n	8002cd2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2220      	movs	r2, #32
 8002d0a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2220      	movs	r2, #32
 8002d10:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e067      	b.n	8002dee <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d04f      	beq.n	8002dcc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d3a:	d147      	bne.n	8002dcc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d44:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d4e:	e853 3f00 	ldrex	r3, [r3]
 8002d52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d56:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	461a      	mov	r2, r3
 8002d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d64:	637b      	str	r3, [r7, #52]	; 0x34
 8002d66:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d6c:	e841 2300 	strex	r3, r2, [r1]
 8002d70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1e6      	bne.n	8002d46 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	3308      	adds	r3, #8
 8002d7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	e853 3f00 	ldrex	r3, [r3]
 8002d86:	613b      	str	r3, [r7, #16]
   return(result);
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	f023 0301 	bic.w	r3, r3, #1
 8002d8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	3308      	adds	r3, #8
 8002d96:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002d98:	623a      	str	r2, [r7, #32]
 8002d9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d9c:	69f9      	ldr	r1, [r7, #28]
 8002d9e:	6a3a      	ldr	r2, [r7, #32]
 8002da0:	e841 2300 	strex	r3, r2, [r1]
 8002da4:	61bb      	str	r3, [r7, #24]
   return(result);
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1e5      	bne.n	8002d78 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2220      	movs	r2, #32
 8002db0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2220      	movs	r2, #32
 8002db6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2220      	movs	r2, #32
 8002dbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e010      	b.n	8002dee <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	69da      	ldr	r2, [r3, #28]
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	68ba      	ldr	r2, [r7, #8]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	bf0c      	ite	eq
 8002ddc:	2301      	moveq	r3, #1
 8002dde:	2300      	movne	r3, #0
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	461a      	mov	r2, r3
 8002de4:	79fb      	ldrb	r3, [r7, #7]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	f43f af4a 	beq.w	8002c80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3770      	adds	r7, #112	; 0x70
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
	...

08002df8 <__errno>:
 8002df8:	4b01      	ldr	r3, [pc, #4]	; (8002e00 <__errno+0x8>)
 8002dfa:	6818      	ldr	r0, [r3, #0]
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	2000000c 	.word	0x2000000c

08002e04 <__libc_init_array>:
 8002e04:	b570      	push	{r4, r5, r6, lr}
 8002e06:	4d0d      	ldr	r5, [pc, #52]	; (8002e3c <__libc_init_array+0x38>)
 8002e08:	4c0d      	ldr	r4, [pc, #52]	; (8002e40 <__libc_init_array+0x3c>)
 8002e0a:	1b64      	subs	r4, r4, r5
 8002e0c:	10a4      	asrs	r4, r4, #2
 8002e0e:	2600      	movs	r6, #0
 8002e10:	42a6      	cmp	r6, r4
 8002e12:	d109      	bne.n	8002e28 <__libc_init_array+0x24>
 8002e14:	4d0b      	ldr	r5, [pc, #44]	; (8002e44 <__libc_init_array+0x40>)
 8002e16:	4c0c      	ldr	r4, [pc, #48]	; (8002e48 <__libc_init_array+0x44>)
 8002e18:	f000 ff76 	bl	8003d08 <_init>
 8002e1c:	1b64      	subs	r4, r4, r5
 8002e1e:	10a4      	asrs	r4, r4, #2
 8002e20:	2600      	movs	r6, #0
 8002e22:	42a6      	cmp	r6, r4
 8002e24:	d105      	bne.n	8002e32 <__libc_init_array+0x2e>
 8002e26:	bd70      	pop	{r4, r5, r6, pc}
 8002e28:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e2c:	4798      	blx	r3
 8002e2e:	3601      	adds	r6, #1
 8002e30:	e7ee      	b.n	8002e10 <__libc_init_array+0xc>
 8002e32:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e36:	4798      	blx	r3
 8002e38:	3601      	adds	r6, #1
 8002e3a:	e7f2      	b.n	8002e22 <__libc_init_array+0x1e>
 8002e3c:	08003e18 	.word	0x08003e18
 8002e40:	08003e18 	.word	0x08003e18
 8002e44:	08003e18 	.word	0x08003e18
 8002e48:	08003e1c 	.word	0x08003e1c

08002e4c <memset>:
 8002e4c:	4402      	add	r2, r0
 8002e4e:	4603      	mov	r3, r0
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d100      	bne.n	8002e56 <memset+0xa>
 8002e54:	4770      	bx	lr
 8002e56:	f803 1b01 	strb.w	r1, [r3], #1
 8002e5a:	e7f9      	b.n	8002e50 <memset+0x4>

08002e5c <iprintf>:
 8002e5c:	b40f      	push	{r0, r1, r2, r3}
 8002e5e:	4b0a      	ldr	r3, [pc, #40]	; (8002e88 <iprintf+0x2c>)
 8002e60:	b513      	push	{r0, r1, r4, lr}
 8002e62:	681c      	ldr	r4, [r3, #0]
 8002e64:	b124      	cbz	r4, 8002e70 <iprintf+0x14>
 8002e66:	69a3      	ldr	r3, [r4, #24]
 8002e68:	b913      	cbnz	r3, 8002e70 <iprintf+0x14>
 8002e6a:	4620      	mov	r0, r4
 8002e6c:	f000 f866 	bl	8002f3c <__sinit>
 8002e70:	ab05      	add	r3, sp, #20
 8002e72:	9a04      	ldr	r2, [sp, #16]
 8002e74:	68a1      	ldr	r1, [r4, #8]
 8002e76:	9301      	str	r3, [sp, #4]
 8002e78:	4620      	mov	r0, r4
 8002e7a:	f000 f983 	bl	8003184 <_vfiprintf_r>
 8002e7e:	b002      	add	sp, #8
 8002e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e84:	b004      	add	sp, #16
 8002e86:	4770      	bx	lr
 8002e88:	2000000c 	.word	0x2000000c

08002e8c <std>:
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	b510      	push	{r4, lr}
 8002e90:	4604      	mov	r4, r0
 8002e92:	e9c0 3300 	strd	r3, r3, [r0]
 8002e96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002e9a:	6083      	str	r3, [r0, #8]
 8002e9c:	8181      	strh	r1, [r0, #12]
 8002e9e:	6643      	str	r3, [r0, #100]	; 0x64
 8002ea0:	81c2      	strh	r2, [r0, #14]
 8002ea2:	6183      	str	r3, [r0, #24]
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	2208      	movs	r2, #8
 8002ea8:	305c      	adds	r0, #92	; 0x5c
 8002eaa:	f7ff ffcf 	bl	8002e4c <memset>
 8002eae:	4b05      	ldr	r3, [pc, #20]	; (8002ec4 <std+0x38>)
 8002eb0:	6263      	str	r3, [r4, #36]	; 0x24
 8002eb2:	4b05      	ldr	r3, [pc, #20]	; (8002ec8 <std+0x3c>)
 8002eb4:	62a3      	str	r3, [r4, #40]	; 0x28
 8002eb6:	4b05      	ldr	r3, [pc, #20]	; (8002ecc <std+0x40>)
 8002eb8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002eba:	4b05      	ldr	r3, [pc, #20]	; (8002ed0 <std+0x44>)
 8002ebc:	6224      	str	r4, [r4, #32]
 8002ebe:	6323      	str	r3, [r4, #48]	; 0x30
 8002ec0:	bd10      	pop	{r4, pc}
 8002ec2:	bf00      	nop
 8002ec4:	0800372d 	.word	0x0800372d
 8002ec8:	0800374f 	.word	0x0800374f
 8002ecc:	08003787 	.word	0x08003787
 8002ed0:	080037ab 	.word	0x080037ab

08002ed4 <_cleanup_r>:
 8002ed4:	4901      	ldr	r1, [pc, #4]	; (8002edc <_cleanup_r+0x8>)
 8002ed6:	f000 b8af 	b.w	8003038 <_fwalk_reent>
 8002eda:	bf00      	nop
 8002edc:	08003a85 	.word	0x08003a85

08002ee0 <__sfmoreglue>:
 8002ee0:	b570      	push	{r4, r5, r6, lr}
 8002ee2:	1e4a      	subs	r2, r1, #1
 8002ee4:	2568      	movs	r5, #104	; 0x68
 8002ee6:	4355      	muls	r5, r2
 8002ee8:	460e      	mov	r6, r1
 8002eea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002eee:	f000 f8c5 	bl	800307c <_malloc_r>
 8002ef2:	4604      	mov	r4, r0
 8002ef4:	b140      	cbz	r0, 8002f08 <__sfmoreglue+0x28>
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	e9c0 1600 	strd	r1, r6, [r0]
 8002efc:	300c      	adds	r0, #12
 8002efe:	60a0      	str	r0, [r4, #8]
 8002f00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002f04:	f7ff ffa2 	bl	8002e4c <memset>
 8002f08:	4620      	mov	r0, r4
 8002f0a:	bd70      	pop	{r4, r5, r6, pc}

08002f0c <__sfp_lock_acquire>:
 8002f0c:	4801      	ldr	r0, [pc, #4]	; (8002f14 <__sfp_lock_acquire+0x8>)
 8002f0e:	f000 b8b3 	b.w	8003078 <__retarget_lock_acquire_recursive>
 8002f12:	bf00      	nop
 8002f14:	200001d0 	.word	0x200001d0

08002f18 <__sfp_lock_release>:
 8002f18:	4801      	ldr	r0, [pc, #4]	; (8002f20 <__sfp_lock_release+0x8>)
 8002f1a:	f000 b8ae 	b.w	800307a <__retarget_lock_release_recursive>
 8002f1e:	bf00      	nop
 8002f20:	200001d0 	.word	0x200001d0

08002f24 <__sinit_lock_acquire>:
 8002f24:	4801      	ldr	r0, [pc, #4]	; (8002f2c <__sinit_lock_acquire+0x8>)
 8002f26:	f000 b8a7 	b.w	8003078 <__retarget_lock_acquire_recursive>
 8002f2a:	bf00      	nop
 8002f2c:	200001cb 	.word	0x200001cb

08002f30 <__sinit_lock_release>:
 8002f30:	4801      	ldr	r0, [pc, #4]	; (8002f38 <__sinit_lock_release+0x8>)
 8002f32:	f000 b8a2 	b.w	800307a <__retarget_lock_release_recursive>
 8002f36:	bf00      	nop
 8002f38:	200001cb 	.word	0x200001cb

08002f3c <__sinit>:
 8002f3c:	b510      	push	{r4, lr}
 8002f3e:	4604      	mov	r4, r0
 8002f40:	f7ff fff0 	bl	8002f24 <__sinit_lock_acquire>
 8002f44:	69a3      	ldr	r3, [r4, #24]
 8002f46:	b11b      	cbz	r3, 8002f50 <__sinit+0x14>
 8002f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f4c:	f7ff bff0 	b.w	8002f30 <__sinit_lock_release>
 8002f50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002f54:	6523      	str	r3, [r4, #80]	; 0x50
 8002f56:	4b13      	ldr	r3, [pc, #76]	; (8002fa4 <__sinit+0x68>)
 8002f58:	4a13      	ldr	r2, [pc, #76]	; (8002fa8 <__sinit+0x6c>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	62a2      	str	r2, [r4, #40]	; 0x28
 8002f5e:	42a3      	cmp	r3, r4
 8002f60:	bf04      	itt	eq
 8002f62:	2301      	moveq	r3, #1
 8002f64:	61a3      	streq	r3, [r4, #24]
 8002f66:	4620      	mov	r0, r4
 8002f68:	f000 f820 	bl	8002fac <__sfp>
 8002f6c:	6060      	str	r0, [r4, #4]
 8002f6e:	4620      	mov	r0, r4
 8002f70:	f000 f81c 	bl	8002fac <__sfp>
 8002f74:	60a0      	str	r0, [r4, #8]
 8002f76:	4620      	mov	r0, r4
 8002f78:	f000 f818 	bl	8002fac <__sfp>
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	60e0      	str	r0, [r4, #12]
 8002f80:	2104      	movs	r1, #4
 8002f82:	6860      	ldr	r0, [r4, #4]
 8002f84:	f7ff ff82 	bl	8002e8c <std>
 8002f88:	68a0      	ldr	r0, [r4, #8]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	2109      	movs	r1, #9
 8002f8e:	f7ff ff7d 	bl	8002e8c <std>
 8002f92:	68e0      	ldr	r0, [r4, #12]
 8002f94:	2202      	movs	r2, #2
 8002f96:	2112      	movs	r1, #18
 8002f98:	f7ff ff78 	bl	8002e8c <std>
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	61a3      	str	r3, [r4, #24]
 8002fa0:	e7d2      	b.n	8002f48 <__sinit+0xc>
 8002fa2:	bf00      	nop
 8002fa4:	08003d80 	.word	0x08003d80
 8002fa8:	08002ed5 	.word	0x08002ed5

08002fac <__sfp>:
 8002fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fae:	4607      	mov	r7, r0
 8002fb0:	f7ff ffac 	bl	8002f0c <__sfp_lock_acquire>
 8002fb4:	4b1e      	ldr	r3, [pc, #120]	; (8003030 <__sfp+0x84>)
 8002fb6:	681e      	ldr	r6, [r3, #0]
 8002fb8:	69b3      	ldr	r3, [r6, #24]
 8002fba:	b913      	cbnz	r3, 8002fc2 <__sfp+0x16>
 8002fbc:	4630      	mov	r0, r6
 8002fbe:	f7ff ffbd 	bl	8002f3c <__sinit>
 8002fc2:	3648      	adds	r6, #72	; 0x48
 8002fc4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	d503      	bpl.n	8002fd4 <__sfp+0x28>
 8002fcc:	6833      	ldr	r3, [r6, #0]
 8002fce:	b30b      	cbz	r3, 8003014 <__sfp+0x68>
 8002fd0:	6836      	ldr	r6, [r6, #0]
 8002fd2:	e7f7      	b.n	8002fc4 <__sfp+0x18>
 8002fd4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002fd8:	b9d5      	cbnz	r5, 8003010 <__sfp+0x64>
 8002fda:	4b16      	ldr	r3, [pc, #88]	; (8003034 <__sfp+0x88>)
 8002fdc:	60e3      	str	r3, [r4, #12]
 8002fde:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002fe2:	6665      	str	r5, [r4, #100]	; 0x64
 8002fe4:	f000 f847 	bl	8003076 <__retarget_lock_init_recursive>
 8002fe8:	f7ff ff96 	bl	8002f18 <__sfp_lock_release>
 8002fec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002ff0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002ff4:	6025      	str	r5, [r4, #0]
 8002ff6:	61a5      	str	r5, [r4, #24]
 8002ff8:	2208      	movs	r2, #8
 8002ffa:	4629      	mov	r1, r5
 8002ffc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003000:	f7ff ff24 	bl	8002e4c <memset>
 8003004:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003008:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800300c:	4620      	mov	r0, r4
 800300e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003010:	3468      	adds	r4, #104	; 0x68
 8003012:	e7d9      	b.n	8002fc8 <__sfp+0x1c>
 8003014:	2104      	movs	r1, #4
 8003016:	4638      	mov	r0, r7
 8003018:	f7ff ff62 	bl	8002ee0 <__sfmoreglue>
 800301c:	4604      	mov	r4, r0
 800301e:	6030      	str	r0, [r6, #0]
 8003020:	2800      	cmp	r0, #0
 8003022:	d1d5      	bne.n	8002fd0 <__sfp+0x24>
 8003024:	f7ff ff78 	bl	8002f18 <__sfp_lock_release>
 8003028:	230c      	movs	r3, #12
 800302a:	603b      	str	r3, [r7, #0]
 800302c:	e7ee      	b.n	800300c <__sfp+0x60>
 800302e:	bf00      	nop
 8003030:	08003d80 	.word	0x08003d80
 8003034:	ffff0001 	.word	0xffff0001

08003038 <_fwalk_reent>:
 8003038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800303c:	4606      	mov	r6, r0
 800303e:	4688      	mov	r8, r1
 8003040:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003044:	2700      	movs	r7, #0
 8003046:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800304a:	f1b9 0901 	subs.w	r9, r9, #1
 800304e:	d505      	bpl.n	800305c <_fwalk_reent+0x24>
 8003050:	6824      	ldr	r4, [r4, #0]
 8003052:	2c00      	cmp	r4, #0
 8003054:	d1f7      	bne.n	8003046 <_fwalk_reent+0xe>
 8003056:	4638      	mov	r0, r7
 8003058:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800305c:	89ab      	ldrh	r3, [r5, #12]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d907      	bls.n	8003072 <_fwalk_reent+0x3a>
 8003062:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003066:	3301      	adds	r3, #1
 8003068:	d003      	beq.n	8003072 <_fwalk_reent+0x3a>
 800306a:	4629      	mov	r1, r5
 800306c:	4630      	mov	r0, r6
 800306e:	47c0      	blx	r8
 8003070:	4307      	orrs	r7, r0
 8003072:	3568      	adds	r5, #104	; 0x68
 8003074:	e7e9      	b.n	800304a <_fwalk_reent+0x12>

08003076 <__retarget_lock_init_recursive>:
 8003076:	4770      	bx	lr

08003078 <__retarget_lock_acquire_recursive>:
 8003078:	4770      	bx	lr

0800307a <__retarget_lock_release_recursive>:
 800307a:	4770      	bx	lr

0800307c <_malloc_r>:
 800307c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800307e:	1ccd      	adds	r5, r1, #3
 8003080:	f025 0503 	bic.w	r5, r5, #3
 8003084:	3508      	adds	r5, #8
 8003086:	2d0c      	cmp	r5, #12
 8003088:	bf38      	it	cc
 800308a:	250c      	movcc	r5, #12
 800308c:	2d00      	cmp	r5, #0
 800308e:	4606      	mov	r6, r0
 8003090:	db01      	blt.n	8003096 <_malloc_r+0x1a>
 8003092:	42a9      	cmp	r1, r5
 8003094:	d903      	bls.n	800309e <_malloc_r+0x22>
 8003096:	230c      	movs	r3, #12
 8003098:	6033      	str	r3, [r6, #0]
 800309a:	2000      	movs	r0, #0
 800309c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800309e:	f000 fda3 	bl	8003be8 <__malloc_lock>
 80030a2:	4921      	ldr	r1, [pc, #132]	; (8003128 <_malloc_r+0xac>)
 80030a4:	680a      	ldr	r2, [r1, #0]
 80030a6:	4614      	mov	r4, r2
 80030a8:	b99c      	cbnz	r4, 80030d2 <_malloc_r+0x56>
 80030aa:	4f20      	ldr	r7, [pc, #128]	; (800312c <_malloc_r+0xb0>)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	b923      	cbnz	r3, 80030ba <_malloc_r+0x3e>
 80030b0:	4621      	mov	r1, r4
 80030b2:	4630      	mov	r0, r6
 80030b4:	f000 fb2a 	bl	800370c <_sbrk_r>
 80030b8:	6038      	str	r0, [r7, #0]
 80030ba:	4629      	mov	r1, r5
 80030bc:	4630      	mov	r0, r6
 80030be:	f000 fb25 	bl	800370c <_sbrk_r>
 80030c2:	1c43      	adds	r3, r0, #1
 80030c4:	d123      	bne.n	800310e <_malloc_r+0x92>
 80030c6:	230c      	movs	r3, #12
 80030c8:	6033      	str	r3, [r6, #0]
 80030ca:	4630      	mov	r0, r6
 80030cc:	f000 fd92 	bl	8003bf4 <__malloc_unlock>
 80030d0:	e7e3      	b.n	800309a <_malloc_r+0x1e>
 80030d2:	6823      	ldr	r3, [r4, #0]
 80030d4:	1b5b      	subs	r3, r3, r5
 80030d6:	d417      	bmi.n	8003108 <_malloc_r+0x8c>
 80030d8:	2b0b      	cmp	r3, #11
 80030da:	d903      	bls.n	80030e4 <_malloc_r+0x68>
 80030dc:	6023      	str	r3, [r4, #0]
 80030de:	441c      	add	r4, r3
 80030e0:	6025      	str	r5, [r4, #0]
 80030e2:	e004      	b.n	80030ee <_malloc_r+0x72>
 80030e4:	6863      	ldr	r3, [r4, #4]
 80030e6:	42a2      	cmp	r2, r4
 80030e8:	bf0c      	ite	eq
 80030ea:	600b      	streq	r3, [r1, #0]
 80030ec:	6053      	strne	r3, [r2, #4]
 80030ee:	4630      	mov	r0, r6
 80030f0:	f000 fd80 	bl	8003bf4 <__malloc_unlock>
 80030f4:	f104 000b 	add.w	r0, r4, #11
 80030f8:	1d23      	adds	r3, r4, #4
 80030fa:	f020 0007 	bic.w	r0, r0, #7
 80030fe:	1ac2      	subs	r2, r0, r3
 8003100:	d0cc      	beq.n	800309c <_malloc_r+0x20>
 8003102:	1a1b      	subs	r3, r3, r0
 8003104:	50a3      	str	r3, [r4, r2]
 8003106:	e7c9      	b.n	800309c <_malloc_r+0x20>
 8003108:	4622      	mov	r2, r4
 800310a:	6864      	ldr	r4, [r4, #4]
 800310c:	e7cc      	b.n	80030a8 <_malloc_r+0x2c>
 800310e:	1cc4      	adds	r4, r0, #3
 8003110:	f024 0403 	bic.w	r4, r4, #3
 8003114:	42a0      	cmp	r0, r4
 8003116:	d0e3      	beq.n	80030e0 <_malloc_r+0x64>
 8003118:	1a21      	subs	r1, r4, r0
 800311a:	4630      	mov	r0, r6
 800311c:	f000 faf6 	bl	800370c <_sbrk_r>
 8003120:	3001      	adds	r0, #1
 8003122:	d1dd      	bne.n	80030e0 <_malloc_r+0x64>
 8003124:	e7cf      	b.n	80030c6 <_malloc_r+0x4a>
 8003126:	bf00      	nop
 8003128:	20000090 	.word	0x20000090
 800312c:	20000094 	.word	0x20000094

08003130 <__sfputc_r>:
 8003130:	6893      	ldr	r3, [r2, #8]
 8003132:	3b01      	subs	r3, #1
 8003134:	2b00      	cmp	r3, #0
 8003136:	b410      	push	{r4}
 8003138:	6093      	str	r3, [r2, #8]
 800313a:	da08      	bge.n	800314e <__sfputc_r+0x1e>
 800313c:	6994      	ldr	r4, [r2, #24]
 800313e:	42a3      	cmp	r3, r4
 8003140:	db01      	blt.n	8003146 <__sfputc_r+0x16>
 8003142:	290a      	cmp	r1, #10
 8003144:	d103      	bne.n	800314e <__sfputc_r+0x1e>
 8003146:	f85d 4b04 	ldr.w	r4, [sp], #4
 800314a:	f000 bb33 	b.w	80037b4 <__swbuf_r>
 800314e:	6813      	ldr	r3, [r2, #0]
 8003150:	1c58      	adds	r0, r3, #1
 8003152:	6010      	str	r0, [r2, #0]
 8003154:	7019      	strb	r1, [r3, #0]
 8003156:	4608      	mov	r0, r1
 8003158:	f85d 4b04 	ldr.w	r4, [sp], #4
 800315c:	4770      	bx	lr

0800315e <__sfputs_r>:
 800315e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003160:	4606      	mov	r6, r0
 8003162:	460f      	mov	r7, r1
 8003164:	4614      	mov	r4, r2
 8003166:	18d5      	adds	r5, r2, r3
 8003168:	42ac      	cmp	r4, r5
 800316a:	d101      	bne.n	8003170 <__sfputs_r+0x12>
 800316c:	2000      	movs	r0, #0
 800316e:	e007      	b.n	8003180 <__sfputs_r+0x22>
 8003170:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003174:	463a      	mov	r2, r7
 8003176:	4630      	mov	r0, r6
 8003178:	f7ff ffda 	bl	8003130 <__sfputc_r>
 800317c:	1c43      	adds	r3, r0, #1
 800317e:	d1f3      	bne.n	8003168 <__sfputs_r+0xa>
 8003180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003184 <_vfiprintf_r>:
 8003184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003188:	460d      	mov	r5, r1
 800318a:	b09d      	sub	sp, #116	; 0x74
 800318c:	4614      	mov	r4, r2
 800318e:	4698      	mov	r8, r3
 8003190:	4606      	mov	r6, r0
 8003192:	b118      	cbz	r0, 800319c <_vfiprintf_r+0x18>
 8003194:	6983      	ldr	r3, [r0, #24]
 8003196:	b90b      	cbnz	r3, 800319c <_vfiprintf_r+0x18>
 8003198:	f7ff fed0 	bl	8002f3c <__sinit>
 800319c:	4b89      	ldr	r3, [pc, #548]	; (80033c4 <_vfiprintf_r+0x240>)
 800319e:	429d      	cmp	r5, r3
 80031a0:	d11b      	bne.n	80031da <_vfiprintf_r+0x56>
 80031a2:	6875      	ldr	r5, [r6, #4]
 80031a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80031a6:	07d9      	lsls	r1, r3, #31
 80031a8:	d405      	bmi.n	80031b6 <_vfiprintf_r+0x32>
 80031aa:	89ab      	ldrh	r3, [r5, #12]
 80031ac:	059a      	lsls	r2, r3, #22
 80031ae:	d402      	bmi.n	80031b6 <_vfiprintf_r+0x32>
 80031b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80031b2:	f7ff ff61 	bl	8003078 <__retarget_lock_acquire_recursive>
 80031b6:	89ab      	ldrh	r3, [r5, #12]
 80031b8:	071b      	lsls	r3, r3, #28
 80031ba:	d501      	bpl.n	80031c0 <_vfiprintf_r+0x3c>
 80031bc:	692b      	ldr	r3, [r5, #16]
 80031be:	b9eb      	cbnz	r3, 80031fc <_vfiprintf_r+0x78>
 80031c0:	4629      	mov	r1, r5
 80031c2:	4630      	mov	r0, r6
 80031c4:	f000 fb5a 	bl	800387c <__swsetup_r>
 80031c8:	b1c0      	cbz	r0, 80031fc <_vfiprintf_r+0x78>
 80031ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80031cc:	07dc      	lsls	r4, r3, #31
 80031ce:	d50e      	bpl.n	80031ee <_vfiprintf_r+0x6a>
 80031d0:	f04f 30ff 	mov.w	r0, #4294967295
 80031d4:	b01d      	add	sp, #116	; 0x74
 80031d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031da:	4b7b      	ldr	r3, [pc, #492]	; (80033c8 <_vfiprintf_r+0x244>)
 80031dc:	429d      	cmp	r5, r3
 80031de:	d101      	bne.n	80031e4 <_vfiprintf_r+0x60>
 80031e0:	68b5      	ldr	r5, [r6, #8]
 80031e2:	e7df      	b.n	80031a4 <_vfiprintf_r+0x20>
 80031e4:	4b79      	ldr	r3, [pc, #484]	; (80033cc <_vfiprintf_r+0x248>)
 80031e6:	429d      	cmp	r5, r3
 80031e8:	bf08      	it	eq
 80031ea:	68f5      	ldreq	r5, [r6, #12]
 80031ec:	e7da      	b.n	80031a4 <_vfiprintf_r+0x20>
 80031ee:	89ab      	ldrh	r3, [r5, #12]
 80031f0:	0598      	lsls	r0, r3, #22
 80031f2:	d4ed      	bmi.n	80031d0 <_vfiprintf_r+0x4c>
 80031f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80031f6:	f7ff ff40 	bl	800307a <__retarget_lock_release_recursive>
 80031fa:	e7e9      	b.n	80031d0 <_vfiprintf_r+0x4c>
 80031fc:	2300      	movs	r3, #0
 80031fe:	9309      	str	r3, [sp, #36]	; 0x24
 8003200:	2320      	movs	r3, #32
 8003202:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003206:	f8cd 800c 	str.w	r8, [sp, #12]
 800320a:	2330      	movs	r3, #48	; 0x30
 800320c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80033d0 <_vfiprintf_r+0x24c>
 8003210:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003214:	f04f 0901 	mov.w	r9, #1
 8003218:	4623      	mov	r3, r4
 800321a:	469a      	mov	sl, r3
 800321c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003220:	b10a      	cbz	r2, 8003226 <_vfiprintf_r+0xa2>
 8003222:	2a25      	cmp	r2, #37	; 0x25
 8003224:	d1f9      	bne.n	800321a <_vfiprintf_r+0x96>
 8003226:	ebba 0b04 	subs.w	fp, sl, r4
 800322a:	d00b      	beq.n	8003244 <_vfiprintf_r+0xc0>
 800322c:	465b      	mov	r3, fp
 800322e:	4622      	mov	r2, r4
 8003230:	4629      	mov	r1, r5
 8003232:	4630      	mov	r0, r6
 8003234:	f7ff ff93 	bl	800315e <__sfputs_r>
 8003238:	3001      	adds	r0, #1
 800323a:	f000 80aa 	beq.w	8003392 <_vfiprintf_r+0x20e>
 800323e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003240:	445a      	add	r2, fp
 8003242:	9209      	str	r2, [sp, #36]	; 0x24
 8003244:	f89a 3000 	ldrb.w	r3, [sl]
 8003248:	2b00      	cmp	r3, #0
 800324a:	f000 80a2 	beq.w	8003392 <_vfiprintf_r+0x20e>
 800324e:	2300      	movs	r3, #0
 8003250:	f04f 32ff 	mov.w	r2, #4294967295
 8003254:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003258:	f10a 0a01 	add.w	sl, sl, #1
 800325c:	9304      	str	r3, [sp, #16]
 800325e:	9307      	str	r3, [sp, #28]
 8003260:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003264:	931a      	str	r3, [sp, #104]	; 0x68
 8003266:	4654      	mov	r4, sl
 8003268:	2205      	movs	r2, #5
 800326a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800326e:	4858      	ldr	r0, [pc, #352]	; (80033d0 <_vfiprintf_r+0x24c>)
 8003270:	f7fc ffae 	bl	80001d0 <memchr>
 8003274:	9a04      	ldr	r2, [sp, #16]
 8003276:	b9d8      	cbnz	r0, 80032b0 <_vfiprintf_r+0x12c>
 8003278:	06d1      	lsls	r1, r2, #27
 800327a:	bf44      	itt	mi
 800327c:	2320      	movmi	r3, #32
 800327e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003282:	0713      	lsls	r3, r2, #28
 8003284:	bf44      	itt	mi
 8003286:	232b      	movmi	r3, #43	; 0x2b
 8003288:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800328c:	f89a 3000 	ldrb.w	r3, [sl]
 8003290:	2b2a      	cmp	r3, #42	; 0x2a
 8003292:	d015      	beq.n	80032c0 <_vfiprintf_r+0x13c>
 8003294:	9a07      	ldr	r2, [sp, #28]
 8003296:	4654      	mov	r4, sl
 8003298:	2000      	movs	r0, #0
 800329a:	f04f 0c0a 	mov.w	ip, #10
 800329e:	4621      	mov	r1, r4
 80032a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80032a4:	3b30      	subs	r3, #48	; 0x30
 80032a6:	2b09      	cmp	r3, #9
 80032a8:	d94e      	bls.n	8003348 <_vfiprintf_r+0x1c4>
 80032aa:	b1b0      	cbz	r0, 80032da <_vfiprintf_r+0x156>
 80032ac:	9207      	str	r2, [sp, #28]
 80032ae:	e014      	b.n	80032da <_vfiprintf_r+0x156>
 80032b0:	eba0 0308 	sub.w	r3, r0, r8
 80032b4:	fa09 f303 	lsl.w	r3, r9, r3
 80032b8:	4313      	orrs	r3, r2
 80032ba:	9304      	str	r3, [sp, #16]
 80032bc:	46a2      	mov	sl, r4
 80032be:	e7d2      	b.n	8003266 <_vfiprintf_r+0xe2>
 80032c0:	9b03      	ldr	r3, [sp, #12]
 80032c2:	1d19      	adds	r1, r3, #4
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	9103      	str	r1, [sp, #12]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	bfbb      	ittet	lt
 80032cc:	425b      	neglt	r3, r3
 80032ce:	f042 0202 	orrlt.w	r2, r2, #2
 80032d2:	9307      	strge	r3, [sp, #28]
 80032d4:	9307      	strlt	r3, [sp, #28]
 80032d6:	bfb8      	it	lt
 80032d8:	9204      	strlt	r2, [sp, #16]
 80032da:	7823      	ldrb	r3, [r4, #0]
 80032dc:	2b2e      	cmp	r3, #46	; 0x2e
 80032de:	d10c      	bne.n	80032fa <_vfiprintf_r+0x176>
 80032e0:	7863      	ldrb	r3, [r4, #1]
 80032e2:	2b2a      	cmp	r3, #42	; 0x2a
 80032e4:	d135      	bne.n	8003352 <_vfiprintf_r+0x1ce>
 80032e6:	9b03      	ldr	r3, [sp, #12]
 80032e8:	1d1a      	adds	r2, r3, #4
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	9203      	str	r2, [sp, #12]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	bfb8      	it	lt
 80032f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80032f6:	3402      	adds	r4, #2
 80032f8:	9305      	str	r3, [sp, #20]
 80032fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80033e0 <_vfiprintf_r+0x25c>
 80032fe:	7821      	ldrb	r1, [r4, #0]
 8003300:	2203      	movs	r2, #3
 8003302:	4650      	mov	r0, sl
 8003304:	f7fc ff64 	bl	80001d0 <memchr>
 8003308:	b140      	cbz	r0, 800331c <_vfiprintf_r+0x198>
 800330a:	2340      	movs	r3, #64	; 0x40
 800330c:	eba0 000a 	sub.w	r0, r0, sl
 8003310:	fa03 f000 	lsl.w	r0, r3, r0
 8003314:	9b04      	ldr	r3, [sp, #16]
 8003316:	4303      	orrs	r3, r0
 8003318:	3401      	adds	r4, #1
 800331a:	9304      	str	r3, [sp, #16]
 800331c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003320:	482c      	ldr	r0, [pc, #176]	; (80033d4 <_vfiprintf_r+0x250>)
 8003322:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003326:	2206      	movs	r2, #6
 8003328:	f7fc ff52 	bl	80001d0 <memchr>
 800332c:	2800      	cmp	r0, #0
 800332e:	d03f      	beq.n	80033b0 <_vfiprintf_r+0x22c>
 8003330:	4b29      	ldr	r3, [pc, #164]	; (80033d8 <_vfiprintf_r+0x254>)
 8003332:	bb1b      	cbnz	r3, 800337c <_vfiprintf_r+0x1f8>
 8003334:	9b03      	ldr	r3, [sp, #12]
 8003336:	3307      	adds	r3, #7
 8003338:	f023 0307 	bic.w	r3, r3, #7
 800333c:	3308      	adds	r3, #8
 800333e:	9303      	str	r3, [sp, #12]
 8003340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003342:	443b      	add	r3, r7
 8003344:	9309      	str	r3, [sp, #36]	; 0x24
 8003346:	e767      	b.n	8003218 <_vfiprintf_r+0x94>
 8003348:	fb0c 3202 	mla	r2, ip, r2, r3
 800334c:	460c      	mov	r4, r1
 800334e:	2001      	movs	r0, #1
 8003350:	e7a5      	b.n	800329e <_vfiprintf_r+0x11a>
 8003352:	2300      	movs	r3, #0
 8003354:	3401      	adds	r4, #1
 8003356:	9305      	str	r3, [sp, #20]
 8003358:	4619      	mov	r1, r3
 800335a:	f04f 0c0a 	mov.w	ip, #10
 800335e:	4620      	mov	r0, r4
 8003360:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003364:	3a30      	subs	r2, #48	; 0x30
 8003366:	2a09      	cmp	r2, #9
 8003368:	d903      	bls.n	8003372 <_vfiprintf_r+0x1ee>
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0c5      	beq.n	80032fa <_vfiprintf_r+0x176>
 800336e:	9105      	str	r1, [sp, #20]
 8003370:	e7c3      	b.n	80032fa <_vfiprintf_r+0x176>
 8003372:	fb0c 2101 	mla	r1, ip, r1, r2
 8003376:	4604      	mov	r4, r0
 8003378:	2301      	movs	r3, #1
 800337a:	e7f0      	b.n	800335e <_vfiprintf_r+0x1da>
 800337c:	ab03      	add	r3, sp, #12
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	462a      	mov	r2, r5
 8003382:	4b16      	ldr	r3, [pc, #88]	; (80033dc <_vfiprintf_r+0x258>)
 8003384:	a904      	add	r1, sp, #16
 8003386:	4630      	mov	r0, r6
 8003388:	f3af 8000 	nop.w
 800338c:	4607      	mov	r7, r0
 800338e:	1c78      	adds	r0, r7, #1
 8003390:	d1d6      	bne.n	8003340 <_vfiprintf_r+0x1bc>
 8003392:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003394:	07d9      	lsls	r1, r3, #31
 8003396:	d405      	bmi.n	80033a4 <_vfiprintf_r+0x220>
 8003398:	89ab      	ldrh	r3, [r5, #12]
 800339a:	059a      	lsls	r2, r3, #22
 800339c:	d402      	bmi.n	80033a4 <_vfiprintf_r+0x220>
 800339e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80033a0:	f7ff fe6b 	bl	800307a <__retarget_lock_release_recursive>
 80033a4:	89ab      	ldrh	r3, [r5, #12]
 80033a6:	065b      	lsls	r3, r3, #25
 80033a8:	f53f af12 	bmi.w	80031d0 <_vfiprintf_r+0x4c>
 80033ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80033ae:	e711      	b.n	80031d4 <_vfiprintf_r+0x50>
 80033b0:	ab03      	add	r3, sp, #12
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	462a      	mov	r2, r5
 80033b6:	4b09      	ldr	r3, [pc, #36]	; (80033dc <_vfiprintf_r+0x258>)
 80033b8:	a904      	add	r1, sp, #16
 80033ba:	4630      	mov	r0, r6
 80033bc:	f000 f880 	bl	80034c0 <_printf_i>
 80033c0:	e7e4      	b.n	800338c <_vfiprintf_r+0x208>
 80033c2:	bf00      	nop
 80033c4:	08003da4 	.word	0x08003da4
 80033c8:	08003dc4 	.word	0x08003dc4
 80033cc:	08003d84 	.word	0x08003d84
 80033d0:	08003de4 	.word	0x08003de4
 80033d4:	08003dee 	.word	0x08003dee
 80033d8:	00000000 	.word	0x00000000
 80033dc:	0800315f 	.word	0x0800315f
 80033e0:	08003dea 	.word	0x08003dea

080033e4 <_printf_common>:
 80033e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033e8:	4616      	mov	r6, r2
 80033ea:	4699      	mov	r9, r3
 80033ec:	688a      	ldr	r2, [r1, #8]
 80033ee:	690b      	ldr	r3, [r1, #16]
 80033f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80033f4:	4293      	cmp	r3, r2
 80033f6:	bfb8      	it	lt
 80033f8:	4613      	movlt	r3, r2
 80033fa:	6033      	str	r3, [r6, #0]
 80033fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003400:	4607      	mov	r7, r0
 8003402:	460c      	mov	r4, r1
 8003404:	b10a      	cbz	r2, 800340a <_printf_common+0x26>
 8003406:	3301      	adds	r3, #1
 8003408:	6033      	str	r3, [r6, #0]
 800340a:	6823      	ldr	r3, [r4, #0]
 800340c:	0699      	lsls	r1, r3, #26
 800340e:	bf42      	ittt	mi
 8003410:	6833      	ldrmi	r3, [r6, #0]
 8003412:	3302      	addmi	r3, #2
 8003414:	6033      	strmi	r3, [r6, #0]
 8003416:	6825      	ldr	r5, [r4, #0]
 8003418:	f015 0506 	ands.w	r5, r5, #6
 800341c:	d106      	bne.n	800342c <_printf_common+0x48>
 800341e:	f104 0a19 	add.w	sl, r4, #25
 8003422:	68e3      	ldr	r3, [r4, #12]
 8003424:	6832      	ldr	r2, [r6, #0]
 8003426:	1a9b      	subs	r3, r3, r2
 8003428:	42ab      	cmp	r3, r5
 800342a:	dc26      	bgt.n	800347a <_printf_common+0x96>
 800342c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003430:	1e13      	subs	r3, r2, #0
 8003432:	6822      	ldr	r2, [r4, #0]
 8003434:	bf18      	it	ne
 8003436:	2301      	movne	r3, #1
 8003438:	0692      	lsls	r2, r2, #26
 800343a:	d42b      	bmi.n	8003494 <_printf_common+0xb0>
 800343c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003440:	4649      	mov	r1, r9
 8003442:	4638      	mov	r0, r7
 8003444:	47c0      	blx	r8
 8003446:	3001      	adds	r0, #1
 8003448:	d01e      	beq.n	8003488 <_printf_common+0xa4>
 800344a:	6823      	ldr	r3, [r4, #0]
 800344c:	68e5      	ldr	r5, [r4, #12]
 800344e:	6832      	ldr	r2, [r6, #0]
 8003450:	f003 0306 	and.w	r3, r3, #6
 8003454:	2b04      	cmp	r3, #4
 8003456:	bf08      	it	eq
 8003458:	1aad      	subeq	r5, r5, r2
 800345a:	68a3      	ldr	r3, [r4, #8]
 800345c:	6922      	ldr	r2, [r4, #16]
 800345e:	bf0c      	ite	eq
 8003460:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003464:	2500      	movne	r5, #0
 8003466:	4293      	cmp	r3, r2
 8003468:	bfc4      	itt	gt
 800346a:	1a9b      	subgt	r3, r3, r2
 800346c:	18ed      	addgt	r5, r5, r3
 800346e:	2600      	movs	r6, #0
 8003470:	341a      	adds	r4, #26
 8003472:	42b5      	cmp	r5, r6
 8003474:	d11a      	bne.n	80034ac <_printf_common+0xc8>
 8003476:	2000      	movs	r0, #0
 8003478:	e008      	b.n	800348c <_printf_common+0xa8>
 800347a:	2301      	movs	r3, #1
 800347c:	4652      	mov	r2, sl
 800347e:	4649      	mov	r1, r9
 8003480:	4638      	mov	r0, r7
 8003482:	47c0      	blx	r8
 8003484:	3001      	adds	r0, #1
 8003486:	d103      	bne.n	8003490 <_printf_common+0xac>
 8003488:	f04f 30ff 	mov.w	r0, #4294967295
 800348c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003490:	3501      	adds	r5, #1
 8003492:	e7c6      	b.n	8003422 <_printf_common+0x3e>
 8003494:	18e1      	adds	r1, r4, r3
 8003496:	1c5a      	adds	r2, r3, #1
 8003498:	2030      	movs	r0, #48	; 0x30
 800349a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800349e:	4422      	add	r2, r4
 80034a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80034a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80034a8:	3302      	adds	r3, #2
 80034aa:	e7c7      	b.n	800343c <_printf_common+0x58>
 80034ac:	2301      	movs	r3, #1
 80034ae:	4622      	mov	r2, r4
 80034b0:	4649      	mov	r1, r9
 80034b2:	4638      	mov	r0, r7
 80034b4:	47c0      	blx	r8
 80034b6:	3001      	adds	r0, #1
 80034b8:	d0e6      	beq.n	8003488 <_printf_common+0xa4>
 80034ba:	3601      	adds	r6, #1
 80034bc:	e7d9      	b.n	8003472 <_printf_common+0x8e>
	...

080034c0 <_printf_i>:
 80034c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80034c4:	460c      	mov	r4, r1
 80034c6:	4691      	mov	r9, r2
 80034c8:	7e27      	ldrb	r7, [r4, #24]
 80034ca:	990c      	ldr	r1, [sp, #48]	; 0x30
 80034cc:	2f78      	cmp	r7, #120	; 0x78
 80034ce:	4680      	mov	r8, r0
 80034d0:	469a      	mov	sl, r3
 80034d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034d6:	d807      	bhi.n	80034e8 <_printf_i+0x28>
 80034d8:	2f62      	cmp	r7, #98	; 0x62
 80034da:	d80a      	bhi.n	80034f2 <_printf_i+0x32>
 80034dc:	2f00      	cmp	r7, #0
 80034de:	f000 80d8 	beq.w	8003692 <_printf_i+0x1d2>
 80034e2:	2f58      	cmp	r7, #88	; 0x58
 80034e4:	f000 80a3 	beq.w	800362e <_printf_i+0x16e>
 80034e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80034ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80034f0:	e03a      	b.n	8003568 <_printf_i+0xa8>
 80034f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80034f6:	2b15      	cmp	r3, #21
 80034f8:	d8f6      	bhi.n	80034e8 <_printf_i+0x28>
 80034fa:	a001      	add	r0, pc, #4	; (adr r0, 8003500 <_printf_i+0x40>)
 80034fc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003500:	08003559 	.word	0x08003559
 8003504:	0800356d 	.word	0x0800356d
 8003508:	080034e9 	.word	0x080034e9
 800350c:	080034e9 	.word	0x080034e9
 8003510:	080034e9 	.word	0x080034e9
 8003514:	080034e9 	.word	0x080034e9
 8003518:	0800356d 	.word	0x0800356d
 800351c:	080034e9 	.word	0x080034e9
 8003520:	080034e9 	.word	0x080034e9
 8003524:	080034e9 	.word	0x080034e9
 8003528:	080034e9 	.word	0x080034e9
 800352c:	08003679 	.word	0x08003679
 8003530:	0800359d 	.word	0x0800359d
 8003534:	0800365b 	.word	0x0800365b
 8003538:	080034e9 	.word	0x080034e9
 800353c:	080034e9 	.word	0x080034e9
 8003540:	0800369b 	.word	0x0800369b
 8003544:	080034e9 	.word	0x080034e9
 8003548:	0800359d 	.word	0x0800359d
 800354c:	080034e9 	.word	0x080034e9
 8003550:	080034e9 	.word	0x080034e9
 8003554:	08003663 	.word	0x08003663
 8003558:	680b      	ldr	r3, [r1, #0]
 800355a:	1d1a      	adds	r2, r3, #4
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	600a      	str	r2, [r1, #0]
 8003560:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003564:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003568:	2301      	movs	r3, #1
 800356a:	e0a3      	b.n	80036b4 <_printf_i+0x1f4>
 800356c:	6825      	ldr	r5, [r4, #0]
 800356e:	6808      	ldr	r0, [r1, #0]
 8003570:	062e      	lsls	r6, r5, #24
 8003572:	f100 0304 	add.w	r3, r0, #4
 8003576:	d50a      	bpl.n	800358e <_printf_i+0xce>
 8003578:	6805      	ldr	r5, [r0, #0]
 800357a:	600b      	str	r3, [r1, #0]
 800357c:	2d00      	cmp	r5, #0
 800357e:	da03      	bge.n	8003588 <_printf_i+0xc8>
 8003580:	232d      	movs	r3, #45	; 0x2d
 8003582:	426d      	negs	r5, r5
 8003584:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003588:	485e      	ldr	r0, [pc, #376]	; (8003704 <_printf_i+0x244>)
 800358a:	230a      	movs	r3, #10
 800358c:	e019      	b.n	80035c2 <_printf_i+0x102>
 800358e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003592:	6805      	ldr	r5, [r0, #0]
 8003594:	600b      	str	r3, [r1, #0]
 8003596:	bf18      	it	ne
 8003598:	b22d      	sxthne	r5, r5
 800359a:	e7ef      	b.n	800357c <_printf_i+0xbc>
 800359c:	680b      	ldr	r3, [r1, #0]
 800359e:	6825      	ldr	r5, [r4, #0]
 80035a0:	1d18      	adds	r0, r3, #4
 80035a2:	6008      	str	r0, [r1, #0]
 80035a4:	0628      	lsls	r0, r5, #24
 80035a6:	d501      	bpl.n	80035ac <_printf_i+0xec>
 80035a8:	681d      	ldr	r5, [r3, #0]
 80035aa:	e002      	b.n	80035b2 <_printf_i+0xf2>
 80035ac:	0669      	lsls	r1, r5, #25
 80035ae:	d5fb      	bpl.n	80035a8 <_printf_i+0xe8>
 80035b0:	881d      	ldrh	r5, [r3, #0]
 80035b2:	4854      	ldr	r0, [pc, #336]	; (8003704 <_printf_i+0x244>)
 80035b4:	2f6f      	cmp	r7, #111	; 0x6f
 80035b6:	bf0c      	ite	eq
 80035b8:	2308      	moveq	r3, #8
 80035ba:	230a      	movne	r3, #10
 80035bc:	2100      	movs	r1, #0
 80035be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80035c2:	6866      	ldr	r6, [r4, #4]
 80035c4:	60a6      	str	r6, [r4, #8]
 80035c6:	2e00      	cmp	r6, #0
 80035c8:	bfa2      	ittt	ge
 80035ca:	6821      	ldrge	r1, [r4, #0]
 80035cc:	f021 0104 	bicge.w	r1, r1, #4
 80035d0:	6021      	strge	r1, [r4, #0]
 80035d2:	b90d      	cbnz	r5, 80035d8 <_printf_i+0x118>
 80035d4:	2e00      	cmp	r6, #0
 80035d6:	d04d      	beq.n	8003674 <_printf_i+0x1b4>
 80035d8:	4616      	mov	r6, r2
 80035da:	fbb5 f1f3 	udiv	r1, r5, r3
 80035de:	fb03 5711 	mls	r7, r3, r1, r5
 80035e2:	5dc7      	ldrb	r7, [r0, r7]
 80035e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80035e8:	462f      	mov	r7, r5
 80035ea:	42bb      	cmp	r3, r7
 80035ec:	460d      	mov	r5, r1
 80035ee:	d9f4      	bls.n	80035da <_printf_i+0x11a>
 80035f0:	2b08      	cmp	r3, #8
 80035f2:	d10b      	bne.n	800360c <_printf_i+0x14c>
 80035f4:	6823      	ldr	r3, [r4, #0]
 80035f6:	07df      	lsls	r7, r3, #31
 80035f8:	d508      	bpl.n	800360c <_printf_i+0x14c>
 80035fa:	6923      	ldr	r3, [r4, #16]
 80035fc:	6861      	ldr	r1, [r4, #4]
 80035fe:	4299      	cmp	r1, r3
 8003600:	bfde      	ittt	le
 8003602:	2330      	movle	r3, #48	; 0x30
 8003604:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003608:	f106 36ff 	addle.w	r6, r6, #4294967295
 800360c:	1b92      	subs	r2, r2, r6
 800360e:	6122      	str	r2, [r4, #16]
 8003610:	f8cd a000 	str.w	sl, [sp]
 8003614:	464b      	mov	r3, r9
 8003616:	aa03      	add	r2, sp, #12
 8003618:	4621      	mov	r1, r4
 800361a:	4640      	mov	r0, r8
 800361c:	f7ff fee2 	bl	80033e4 <_printf_common>
 8003620:	3001      	adds	r0, #1
 8003622:	d14c      	bne.n	80036be <_printf_i+0x1fe>
 8003624:	f04f 30ff 	mov.w	r0, #4294967295
 8003628:	b004      	add	sp, #16
 800362a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800362e:	4835      	ldr	r0, [pc, #212]	; (8003704 <_printf_i+0x244>)
 8003630:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003634:	6823      	ldr	r3, [r4, #0]
 8003636:	680e      	ldr	r6, [r1, #0]
 8003638:	061f      	lsls	r7, r3, #24
 800363a:	f856 5b04 	ldr.w	r5, [r6], #4
 800363e:	600e      	str	r6, [r1, #0]
 8003640:	d514      	bpl.n	800366c <_printf_i+0x1ac>
 8003642:	07d9      	lsls	r1, r3, #31
 8003644:	bf44      	itt	mi
 8003646:	f043 0320 	orrmi.w	r3, r3, #32
 800364a:	6023      	strmi	r3, [r4, #0]
 800364c:	b91d      	cbnz	r5, 8003656 <_printf_i+0x196>
 800364e:	6823      	ldr	r3, [r4, #0]
 8003650:	f023 0320 	bic.w	r3, r3, #32
 8003654:	6023      	str	r3, [r4, #0]
 8003656:	2310      	movs	r3, #16
 8003658:	e7b0      	b.n	80035bc <_printf_i+0xfc>
 800365a:	6823      	ldr	r3, [r4, #0]
 800365c:	f043 0320 	orr.w	r3, r3, #32
 8003660:	6023      	str	r3, [r4, #0]
 8003662:	2378      	movs	r3, #120	; 0x78
 8003664:	4828      	ldr	r0, [pc, #160]	; (8003708 <_printf_i+0x248>)
 8003666:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800366a:	e7e3      	b.n	8003634 <_printf_i+0x174>
 800366c:	065e      	lsls	r6, r3, #25
 800366e:	bf48      	it	mi
 8003670:	b2ad      	uxthmi	r5, r5
 8003672:	e7e6      	b.n	8003642 <_printf_i+0x182>
 8003674:	4616      	mov	r6, r2
 8003676:	e7bb      	b.n	80035f0 <_printf_i+0x130>
 8003678:	680b      	ldr	r3, [r1, #0]
 800367a:	6826      	ldr	r6, [r4, #0]
 800367c:	6960      	ldr	r0, [r4, #20]
 800367e:	1d1d      	adds	r5, r3, #4
 8003680:	600d      	str	r5, [r1, #0]
 8003682:	0635      	lsls	r5, r6, #24
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	d501      	bpl.n	800368c <_printf_i+0x1cc>
 8003688:	6018      	str	r0, [r3, #0]
 800368a:	e002      	b.n	8003692 <_printf_i+0x1d2>
 800368c:	0671      	lsls	r1, r6, #25
 800368e:	d5fb      	bpl.n	8003688 <_printf_i+0x1c8>
 8003690:	8018      	strh	r0, [r3, #0]
 8003692:	2300      	movs	r3, #0
 8003694:	6123      	str	r3, [r4, #16]
 8003696:	4616      	mov	r6, r2
 8003698:	e7ba      	b.n	8003610 <_printf_i+0x150>
 800369a:	680b      	ldr	r3, [r1, #0]
 800369c:	1d1a      	adds	r2, r3, #4
 800369e:	600a      	str	r2, [r1, #0]
 80036a0:	681e      	ldr	r6, [r3, #0]
 80036a2:	6862      	ldr	r2, [r4, #4]
 80036a4:	2100      	movs	r1, #0
 80036a6:	4630      	mov	r0, r6
 80036a8:	f7fc fd92 	bl	80001d0 <memchr>
 80036ac:	b108      	cbz	r0, 80036b2 <_printf_i+0x1f2>
 80036ae:	1b80      	subs	r0, r0, r6
 80036b0:	6060      	str	r0, [r4, #4]
 80036b2:	6863      	ldr	r3, [r4, #4]
 80036b4:	6123      	str	r3, [r4, #16]
 80036b6:	2300      	movs	r3, #0
 80036b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036bc:	e7a8      	b.n	8003610 <_printf_i+0x150>
 80036be:	6923      	ldr	r3, [r4, #16]
 80036c0:	4632      	mov	r2, r6
 80036c2:	4649      	mov	r1, r9
 80036c4:	4640      	mov	r0, r8
 80036c6:	47d0      	blx	sl
 80036c8:	3001      	adds	r0, #1
 80036ca:	d0ab      	beq.n	8003624 <_printf_i+0x164>
 80036cc:	6823      	ldr	r3, [r4, #0]
 80036ce:	079b      	lsls	r3, r3, #30
 80036d0:	d413      	bmi.n	80036fa <_printf_i+0x23a>
 80036d2:	68e0      	ldr	r0, [r4, #12]
 80036d4:	9b03      	ldr	r3, [sp, #12]
 80036d6:	4298      	cmp	r0, r3
 80036d8:	bfb8      	it	lt
 80036da:	4618      	movlt	r0, r3
 80036dc:	e7a4      	b.n	8003628 <_printf_i+0x168>
 80036de:	2301      	movs	r3, #1
 80036e0:	4632      	mov	r2, r6
 80036e2:	4649      	mov	r1, r9
 80036e4:	4640      	mov	r0, r8
 80036e6:	47d0      	blx	sl
 80036e8:	3001      	adds	r0, #1
 80036ea:	d09b      	beq.n	8003624 <_printf_i+0x164>
 80036ec:	3501      	adds	r5, #1
 80036ee:	68e3      	ldr	r3, [r4, #12]
 80036f0:	9903      	ldr	r1, [sp, #12]
 80036f2:	1a5b      	subs	r3, r3, r1
 80036f4:	42ab      	cmp	r3, r5
 80036f6:	dcf2      	bgt.n	80036de <_printf_i+0x21e>
 80036f8:	e7eb      	b.n	80036d2 <_printf_i+0x212>
 80036fa:	2500      	movs	r5, #0
 80036fc:	f104 0619 	add.w	r6, r4, #25
 8003700:	e7f5      	b.n	80036ee <_printf_i+0x22e>
 8003702:	bf00      	nop
 8003704:	08003df5 	.word	0x08003df5
 8003708:	08003e06 	.word	0x08003e06

0800370c <_sbrk_r>:
 800370c:	b538      	push	{r3, r4, r5, lr}
 800370e:	4d06      	ldr	r5, [pc, #24]	; (8003728 <_sbrk_r+0x1c>)
 8003710:	2300      	movs	r3, #0
 8003712:	4604      	mov	r4, r0
 8003714:	4608      	mov	r0, r1
 8003716:	602b      	str	r3, [r5, #0]
 8003718:	f7fd f8d4 	bl	80008c4 <_sbrk>
 800371c:	1c43      	adds	r3, r0, #1
 800371e:	d102      	bne.n	8003726 <_sbrk_r+0x1a>
 8003720:	682b      	ldr	r3, [r5, #0]
 8003722:	b103      	cbz	r3, 8003726 <_sbrk_r+0x1a>
 8003724:	6023      	str	r3, [r4, #0]
 8003726:	bd38      	pop	{r3, r4, r5, pc}
 8003728:	200001d4 	.word	0x200001d4

0800372c <__sread>:
 800372c:	b510      	push	{r4, lr}
 800372e:	460c      	mov	r4, r1
 8003730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003734:	f000 fab4 	bl	8003ca0 <_read_r>
 8003738:	2800      	cmp	r0, #0
 800373a:	bfab      	itete	ge
 800373c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800373e:	89a3      	ldrhlt	r3, [r4, #12]
 8003740:	181b      	addge	r3, r3, r0
 8003742:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003746:	bfac      	ite	ge
 8003748:	6563      	strge	r3, [r4, #84]	; 0x54
 800374a:	81a3      	strhlt	r3, [r4, #12]
 800374c:	bd10      	pop	{r4, pc}

0800374e <__swrite>:
 800374e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003752:	461f      	mov	r7, r3
 8003754:	898b      	ldrh	r3, [r1, #12]
 8003756:	05db      	lsls	r3, r3, #23
 8003758:	4605      	mov	r5, r0
 800375a:	460c      	mov	r4, r1
 800375c:	4616      	mov	r6, r2
 800375e:	d505      	bpl.n	800376c <__swrite+0x1e>
 8003760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003764:	2302      	movs	r3, #2
 8003766:	2200      	movs	r2, #0
 8003768:	f000 f9c8 	bl	8003afc <_lseek_r>
 800376c:	89a3      	ldrh	r3, [r4, #12]
 800376e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003772:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003776:	81a3      	strh	r3, [r4, #12]
 8003778:	4632      	mov	r2, r6
 800377a:	463b      	mov	r3, r7
 800377c:	4628      	mov	r0, r5
 800377e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003782:	f000 b869 	b.w	8003858 <_write_r>

08003786 <__sseek>:
 8003786:	b510      	push	{r4, lr}
 8003788:	460c      	mov	r4, r1
 800378a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800378e:	f000 f9b5 	bl	8003afc <_lseek_r>
 8003792:	1c43      	adds	r3, r0, #1
 8003794:	89a3      	ldrh	r3, [r4, #12]
 8003796:	bf15      	itete	ne
 8003798:	6560      	strne	r0, [r4, #84]	; 0x54
 800379a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800379e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80037a2:	81a3      	strheq	r3, [r4, #12]
 80037a4:	bf18      	it	ne
 80037a6:	81a3      	strhne	r3, [r4, #12]
 80037a8:	bd10      	pop	{r4, pc}

080037aa <__sclose>:
 80037aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037ae:	f000 b8d3 	b.w	8003958 <_close_r>
	...

080037b4 <__swbuf_r>:
 80037b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037b6:	460e      	mov	r6, r1
 80037b8:	4614      	mov	r4, r2
 80037ba:	4605      	mov	r5, r0
 80037bc:	b118      	cbz	r0, 80037c6 <__swbuf_r+0x12>
 80037be:	6983      	ldr	r3, [r0, #24]
 80037c0:	b90b      	cbnz	r3, 80037c6 <__swbuf_r+0x12>
 80037c2:	f7ff fbbb 	bl	8002f3c <__sinit>
 80037c6:	4b21      	ldr	r3, [pc, #132]	; (800384c <__swbuf_r+0x98>)
 80037c8:	429c      	cmp	r4, r3
 80037ca:	d12b      	bne.n	8003824 <__swbuf_r+0x70>
 80037cc:	686c      	ldr	r4, [r5, #4]
 80037ce:	69a3      	ldr	r3, [r4, #24]
 80037d0:	60a3      	str	r3, [r4, #8]
 80037d2:	89a3      	ldrh	r3, [r4, #12]
 80037d4:	071a      	lsls	r2, r3, #28
 80037d6:	d52f      	bpl.n	8003838 <__swbuf_r+0x84>
 80037d8:	6923      	ldr	r3, [r4, #16]
 80037da:	b36b      	cbz	r3, 8003838 <__swbuf_r+0x84>
 80037dc:	6923      	ldr	r3, [r4, #16]
 80037de:	6820      	ldr	r0, [r4, #0]
 80037e0:	1ac0      	subs	r0, r0, r3
 80037e2:	6963      	ldr	r3, [r4, #20]
 80037e4:	b2f6      	uxtb	r6, r6
 80037e6:	4283      	cmp	r3, r0
 80037e8:	4637      	mov	r7, r6
 80037ea:	dc04      	bgt.n	80037f6 <__swbuf_r+0x42>
 80037ec:	4621      	mov	r1, r4
 80037ee:	4628      	mov	r0, r5
 80037f0:	f000 f948 	bl	8003a84 <_fflush_r>
 80037f4:	bb30      	cbnz	r0, 8003844 <__swbuf_r+0x90>
 80037f6:	68a3      	ldr	r3, [r4, #8]
 80037f8:	3b01      	subs	r3, #1
 80037fa:	60a3      	str	r3, [r4, #8]
 80037fc:	6823      	ldr	r3, [r4, #0]
 80037fe:	1c5a      	adds	r2, r3, #1
 8003800:	6022      	str	r2, [r4, #0]
 8003802:	701e      	strb	r6, [r3, #0]
 8003804:	6963      	ldr	r3, [r4, #20]
 8003806:	3001      	adds	r0, #1
 8003808:	4283      	cmp	r3, r0
 800380a:	d004      	beq.n	8003816 <__swbuf_r+0x62>
 800380c:	89a3      	ldrh	r3, [r4, #12]
 800380e:	07db      	lsls	r3, r3, #31
 8003810:	d506      	bpl.n	8003820 <__swbuf_r+0x6c>
 8003812:	2e0a      	cmp	r6, #10
 8003814:	d104      	bne.n	8003820 <__swbuf_r+0x6c>
 8003816:	4621      	mov	r1, r4
 8003818:	4628      	mov	r0, r5
 800381a:	f000 f933 	bl	8003a84 <_fflush_r>
 800381e:	b988      	cbnz	r0, 8003844 <__swbuf_r+0x90>
 8003820:	4638      	mov	r0, r7
 8003822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003824:	4b0a      	ldr	r3, [pc, #40]	; (8003850 <__swbuf_r+0x9c>)
 8003826:	429c      	cmp	r4, r3
 8003828:	d101      	bne.n	800382e <__swbuf_r+0x7a>
 800382a:	68ac      	ldr	r4, [r5, #8]
 800382c:	e7cf      	b.n	80037ce <__swbuf_r+0x1a>
 800382e:	4b09      	ldr	r3, [pc, #36]	; (8003854 <__swbuf_r+0xa0>)
 8003830:	429c      	cmp	r4, r3
 8003832:	bf08      	it	eq
 8003834:	68ec      	ldreq	r4, [r5, #12]
 8003836:	e7ca      	b.n	80037ce <__swbuf_r+0x1a>
 8003838:	4621      	mov	r1, r4
 800383a:	4628      	mov	r0, r5
 800383c:	f000 f81e 	bl	800387c <__swsetup_r>
 8003840:	2800      	cmp	r0, #0
 8003842:	d0cb      	beq.n	80037dc <__swbuf_r+0x28>
 8003844:	f04f 37ff 	mov.w	r7, #4294967295
 8003848:	e7ea      	b.n	8003820 <__swbuf_r+0x6c>
 800384a:	bf00      	nop
 800384c:	08003da4 	.word	0x08003da4
 8003850:	08003dc4 	.word	0x08003dc4
 8003854:	08003d84 	.word	0x08003d84

08003858 <_write_r>:
 8003858:	b538      	push	{r3, r4, r5, lr}
 800385a:	4d07      	ldr	r5, [pc, #28]	; (8003878 <_write_r+0x20>)
 800385c:	4604      	mov	r4, r0
 800385e:	4608      	mov	r0, r1
 8003860:	4611      	mov	r1, r2
 8003862:	2200      	movs	r2, #0
 8003864:	602a      	str	r2, [r5, #0]
 8003866:	461a      	mov	r2, r3
 8003868:	f7fc ffdb 	bl	8000822 <_write>
 800386c:	1c43      	adds	r3, r0, #1
 800386e:	d102      	bne.n	8003876 <_write_r+0x1e>
 8003870:	682b      	ldr	r3, [r5, #0]
 8003872:	b103      	cbz	r3, 8003876 <_write_r+0x1e>
 8003874:	6023      	str	r3, [r4, #0]
 8003876:	bd38      	pop	{r3, r4, r5, pc}
 8003878:	200001d4 	.word	0x200001d4

0800387c <__swsetup_r>:
 800387c:	4b32      	ldr	r3, [pc, #200]	; (8003948 <__swsetup_r+0xcc>)
 800387e:	b570      	push	{r4, r5, r6, lr}
 8003880:	681d      	ldr	r5, [r3, #0]
 8003882:	4606      	mov	r6, r0
 8003884:	460c      	mov	r4, r1
 8003886:	b125      	cbz	r5, 8003892 <__swsetup_r+0x16>
 8003888:	69ab      	ldr	r3, [r5, #24]
 800388a:	b913      	cbnz	r3, 8003892 <__swsetup_r+0x16>
 800388c:	4628      	mov	r0, r5
 800388e:	f7ff fb55 	bl	8002f3c <__sinit>
 8003892:	4b2e      	ldr	r3, [pc, #184]	; (800394c <__swsetup_r+0xd0>)
 8003894:	429c      	cmp	r4, r3
 8003896:	d10f      	bne.n	80038b8 <__swsetup_r+0x3c>
 8003898:	686c      	ldr	r4, [r5, #4]
 800389a:	89a3      	ldrh	r3, [r4, #12]
 800389c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80038a0:	0719      	lsls	r1, r3, #28
 80038a2:	d42c      	bmi.n	80038fe <__swsetup_r+0x82>
 80038a4:	06dd      	lsls	r5, r3, #27
 80038a6:	d411      	bmi.n	80038cc <__swsetup_r+0x50>
 80038a8:	2309      	movs	r3, #9
 80038aa:	6033      	str	r3, [r6, #0]
 80038ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80038b0:	81a3      	strh	r3, [r4, #12]
 80038b2:	f04f 30ff 	mov.w	r0, #4294967295
 80038b6:	e03e      	b.n	8003936 <__swsetup_r+0xba>
 80038b8:	4b25      	ldr	r3, [pc, #148]	; (8003950 <__swsetup_r+0xd4>)
 80038ba:	429c      	cmp	r4, r3
 80038bc:	d101      	bne.n	80038c2 <__swsetup_r+0x46>
 80038be:	68ac      	ldr	r4, [r5, #8]
 80038c0:	e7eb      	b.n	800389a <__swsetup_r+0x1e>
 80038c2:	4b24      	ldr	r3, [pc, #144]	; (8003954 <__swsetup_r+0xd8>)
 80038c4:	429c      	cmp	r4, r3
 80038c6:	bf08      	it	eq
 80038c8:	68ec      	ldreq	r4, [r5, #12]
 80038ca:	e7e6      	b.n	800389a <__swsetup_r+0x1e>
 80038cc:	0758      	lsls	r0, r3, #29
 80038ce:	d512      	bpl.n	80038f6 <__swsetup_r+0x7a>
 80038d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80038d2:	b141      	cbz	r1, 80038e6 <__swsetup_r+0x6a>
 80038d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80038d8:	4299      	cmp	r1, r3
 80038da:	d002      	beq.n	80038e2 <__swsetup_r+0x66>
 80038dc:	4630      	mov	r0, r6
 80038de:	f000 f98f 	bl	8003c00 <_free_r>
 80038e2:	2300      	movs	r3, #0
 80038e4:	6363      	str	r3, [r4, #52]	; 0x34
 80038e6:	89a3      	ldrh	r3, [r4, #12]
 80038e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80038ec:	81a3      	strh	r3, [r4, #12]
 80038ee:	2300      	movs	r3, #0
 80038f0:	6063      	str	r3, [r4, #4]
 80038f2:	6923      	ldr	r3, [r4, #16]
 80038f4:	6023      	str	r3, [r4, #0]
 80038f6:	89a3      	ldrh	r3, [r4, #12]
 80038f8:	f043 0308 	orr.w	r3, r3, #8
 80038fc:	81a3      	strh	r3, [r4, #12]
 80038fe:	6923      	ldr	r3, [r4, #16]
 8003900:	b94b      	cbnz	r3, 8003916 <__swsetup_r+0x9a>
 8003902:	89a3      	ldrh	r3, [r4, #12]
 8003904:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003908:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800390c:	d003      	beq.n	8003916 <__swsetup_r+0x9a>
 800390e:	4621      	mov	r1, r4
 8003910:	4630      	mov	r0, r6
 8003912:	f000 f929 	bl	8003b68 <__smakebuf_r>
 8003916:	89a0      	ldrh	r0, [r4, #12]
 8003918:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800391c:	f010 0301 	ands.w	r3, r0, #1
 8003920:	d00a      	beq.n	8003938 <__swsetup_r+0xbc>
 8003922:	2300      	movs	r3, #0
 8003924:	60a3      	str	r3, [r4, #8]
 8003926:	6963      	ldr	r3, [r4, #20]
 8003928:	425b      	negs	r3, r3
 800392a:	61a3      	str	r3, [r4, #24]
 800392c:	6923      	ldr	r3, [r4, #16]
 800392e:	b943      	cbnz	r3, 8003942 <__swsetup_r+0xc6>
 8003930:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003934:	d1ba      	bne.n	80038ac <__swsetup_r+0x30>
 8003936:	bd70      	pop	{r4, r5, r6, pc}
 8003938:	0781      	lsls	r1, r0, #30
 800393a:	bf58      	it	pl
 800393c:	6963      	ldrpl	r3, [r4, #20]
 800393e:	60a3      	str	r3, [r4, #8]
 8003940:	e7f4      	b.n	800392c <__swsetup_r+0xb0>
 8003942:	2000      	movs	r0, #0
 8003944:	e7f7      	b.n	8003936 <__swsetup_r+0xba>
 8003946:	bf00      	nop
 8003948:	2000000c 	.word	0x2000000c
 800394c:	08003da4 	.word	0x08003da4
 8003950:	08003dc4 	.word	0x08003dc4
 8003954:	08003d84 	.word	0x08003d84

08003958 <_close_r>:
 8003958:	b538      	push	{r3, r4, r5, lr}
 800395a:	4d06      	ldr	r5, [pc, #24]	; (8003974 <_close_r+0x1c>)
 800395c:	2300      	movs	r3, #0
 800395e:	4604      	mov	r4, r0
 8003960:	4608      	mov	r0, r1
 8003962:	602b      	str	r3, [r5, #0]
 8003964:	f7fc ff79 	bl	800085a <_close>
 8003968:	1c43      	adds	r3, r0, #1
 800396a:	d102      	bne.n	8003972 <_close_r+0x1a>
 800396c:	682b      	ldr	r3, [r5, #0]
 800396e:	b103      	cbz	r3, 8003972 <_close_r+0x1a>
 8003970:	6023      	str	r3, [r4, #0]
 8003972:	bd38      	pop	{r3, r4, r5, pc}
 8003974:	200001d4 	.word	0x200001d4

08003978 <__sflush_r>:
 8003978:	898a      	ldrh	r2, [r1, #12]
 800397a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800397e:	4605      	mov	r5, r0
 8003980:	0710      	lsls	r0, r2, #28
 8003982:	460c      	mov	r4, r1
 8003984:	d458      	bmi.n	8003a38 <__sflush_r+0xc0>
 8003986:	684b      	ldr	r3, [r1, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	dc05      	bgt.n	8003998 <__sflush_r+0x20>
 800398c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800398e:	2b00      	cmp	r3, #0
 8003990:	dc02      	bgt.n	8003998 <__sflush_r+0x20>
 8003992:	2000      	movs	r0, #0
 8003994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003998:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800399a:	2e00      	cmp	r6, #0
 800399c:	d0f9      	beq.n	8003992 <__sflush_r+0x1a>
 800399e:	2300      	movs	r3, #0
 80039a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80039a4:	682f      	ldr	r7, [r5, #0]
 80039a6:	602b      	str	r3, [r5, #0]
 80039a8:	d032      	beq.n	8003a10 <__sflush_r+0x98>
 80039aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80039ac:	89a3      	ldrh	r3, [r4, #12]
 80039ae:	075a      	lsls	r2, r3, #29
 80039b0:	d505      	bpl.n	80039be <__sflush_r+0x46>
 80039b2:	6863      	ldr	r3, [r4, #4]
 80039b4:	1ac0      	subs	r0, r0, r3
 80039b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80039b8:	b10b      	cbz	r3, 80039be <__sflush_r+0x46>
 80039ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80039bc:	1ac0      	subs	r0, r0, r3
 80039be:	2300      	movs	r3, #0
 80039c0:	4602      	mov	r2, r0
 80039c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80039c4:	6a21      	ldr	r1, [r4, #32]
 80039c6:	4628      	mov	r0, r5
 80039c8:	47b0      	blx	r6
 80039ca:	1c43      	adds	r3, r0, #1
 80039cc:	89a3      	ldrh	r3, [r4, #12]
 80039ce:	d106      	bne.n	80039de <__sflush_r+0x66>
 80039d0:	6829      	ldr	r1, [r5, #0]
 80039d2:	291d      	cmp	r1, #29
 80039d4:	d82c      	bhi.n	8003a30 <__sflush_r+0xb8>
 80039d6:	4a2a      	ldr	r2, [pc, #168]	; (8003a80 <__sflush_r+0x108>)
 80039d8:	40ca      	lsrs	r2, r1
 80039da:	07d6      	lsls	r6, r2, #31
 80039dc:	d528      	bpl.n	8003a30 <__sflush_r+0xb8>
 80039de:	2200      	movs	r2, #0
 80039e0:	6062      	str	r2, [r4, #4]
 80039e2:	04d9      	lsls	r1, r3, #19
 80039e4:	6922      	ldr	r2, [r4, #16]
 80039e6:	6022      	str	r2, [r4, #0]
 80039e8:	d504      	bpl.n	80039f4 <__sflush_r+0x7c>
 80039ea:	1c42      	adds	r2, r0, #1
 80039ec:	d101      	bne.n	80039f2 <__sflush_r+0x7a>
 80039ee:	682b      	ldr	r3, [r5, #0]
 80039f0:	b903      	cbnz	r3, 80039f4 <__sflush_r+0x7c>
 80039f2:	6560      	str	r0, [r4, #84]	; 0x54
 80039f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80039f6:	602f      	str	r7, [r5, #0]
 80039f8:	2900      	cmp	r1, #0
 80039fa:	d0ca      	beq.n	8003992 <__sflush_r+0x1a>
 80039fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a00:	4299      	cmp	r1, r3
 8003a02:	d002      	beq.n	8003a0a <__sflush_r+0x92>
 8003a04:	4628      	mov	r0, r5
 8003a06:	f000 f8fb 	bl	8003c00 <_free_r>
 8003a0a:	2000      	movs	r0, #0
 8003a0c:	6360      	str	r0, [r4, #52]	; 0x34
 8003a0e:	e7c1      	b.n	8003994 <__sflush_r+0x1c>
 8003a10:	6a21      	ldr	r1, [r4, #32]
 8003a12:	2301      	movs	r3, #1
 8003a14:	4628      	mov	r0, r5
 8003a16:	47b0      	blx	r6
 8003a18:	1c41      	adds	r1, r0, #1
 8003a1a:	d1c7      	bne.n	80039ac <__sflush_r+0x34>
 8003a1c:	682b      	ldr	r3, [r5, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d0c4      	beq.n	80039ac <__sflush_r+0x34>
 8003a22:	2b1d      	cmp	r3, #29
 8003a24:	d001      	beq.n	8003a2a <__sflush_r+0xb2>
 8003a26:	2b16      	cmp	r3, #22
 8003a28:	d101      	bne.n	8003a2e <__sflush_r+0xb6>
 8003a2a:	602f      	str	r7, [r5, #0]
 8003a2c:	e7b1      	b.n	8003992 <__sflush_r+0x1a>
 8003a2e:	89a3      	ldrh	r3, [r4, #12]
 8003a30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a34:	81a3      	strh	r3, [r4, #12]
 8003a36:	e7ad      	b.n	8003994 <__sflush_r+0x1c>
 8003a38:	690f      	ldr	r7, [r1, #16]
 8003a3a:	2f00      	cmp	r7, #0
 8003a3c:	d0a9      	beq.n	8003992 <__sflush_r+0x1a>
 8003a3e:	0793      	lsls	r3, r2, #30
 8003a40:	680e      	ldr	r6, [r1, #0]
 8003a42:	bf08      	it	eq
 8003a44:	694b      	ldreq	r3, [r1, #20]
 8003a46:	600f      	str	r7, [r1, #0]
 8003a48:	bf18      	it	ne
 8003a4a:	2300      	movne	r3, #0
 8003a4c:	eba6 0807 	sub.w	r8, r6, r7
 8003a50:	608b      	str	r3, [r1, #8]
 8003a52:	f1b8 0f00 	cmp.w	r8, #0
 8003a56:	dd9c      	ble.n	8003992 <__sflush_r+0x1a>
 8003a58:	6a21      	ldr	r1, [r4, #32]
 8003a5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003a5c:	4643      	mov	r3, r8
 8003a5e:	463a      	mov	r2, r7
 8003a60:	4628      	mov	r0, r5
 8003a62:	47b0      	blx	r6
 8003a64:	2800      	cmp	r0, #0
 8003a66:	dc06      	bgt.n	8003a76 <__sflush_r+0xfe>
 8003a68:	89a3      	ldrh	r3, [r4, #12]
 8003a6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a6e:	81a3      	strh	r3, [r4, #12]
 8003a70:	f04f 30ff 	mov.w	r0, #4294967295
 8003a74:	e78e      	b.n	8003994 <__sflush_r+0x1c>
 8003a76:	4407      	add	r7, r0
 8003a78:	eba8 0800 	sub.w	r8, r8, r0
 8003a7c:	e7e9      	b.n	8003a52 <__sflush_r+0xda>
 8003a7e:	bf00      	nop
 8003a80:	20400001 	.word	0x20400001

08003a84 <_fflush_r>:
 8003a84:	b538      	push	{r3, r4, r5, lr}
 8003a86:	690b      	ldr	r3, [r1, #16]
 8003a88:	4605      	mov	r5, r0
 8003a8a:	460c      	mov	r4, r1
 8003a8c:	b913      	cbnz	r3, 8003a94 <_fflush_r+0x10>
 8003a8e:	2500      	movs	r5, #0
 8003a90:	4628      	mov	r0, r5
 8003a92:	bd38      	pop	{r3, r4, r5, pc}
 8003a94:	b118      	cbz	r0, 8003a9e <_fflush_r+0x1a>
 8003a96:	6983      	ldr	r3, [r0, #24]
 8003a98:	b90b      	cbnz	r3, 8003a9e <_fflush_r+0x1a>
 8003a9a:	f7ff fa4f 	bl	8002f3c <__sinit>
 8003a9e:	4b14      	ldr	r3, [pc, #80]	; (8003af0 <_fflush_r+0x6c>)
 8003aa0:	429c      	cmp	r4, r3
 8003aa2:	d11b      	bne.n	8003adc <_fflush_r+0x58>
 8003aa4:	686c      	ldr	r4, [r5, #4]
 8003aa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d0ef      	beq.n	8003a8e <_fflush_r+0xa>
 8003aae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003ab0:	07d0      	lsls	r0, r2, #31
 8003ab2:	d404      	bmi.n	8003abe <_fflush_r+0x3a>
 8003ab4:	0599      	lsls	r1, r3, #22
 8003ab6:	d402      	bmi.n	8003abe <_fflush_r+0x3a>
 8003ab8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003aba:	f7ff fadd 	bl	8003078 <__retarget_lock_acquire_recursive>
 8003abe:	4628      	mov	r0, r5
 8003ac0:	4621      	mov	r1, r4
 8003ac2:	f7ff ff59 	bl	8003978 <__sflush_r>
 8003ac6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ac8:	07da      	lsls	r2, r3, #31
 8003aca:	4605      	mov	r5, r0
 8003acc:	d4e0      	bmi.n	8003a90 <_fflush_r+0xc>
 8003ace:	89a3      	ldrh	r3, [r4, #12]
 8003ad0:	059b      	lsls	r3, r3, #22
 8003ad2:	d4dd      	bmi.n	8003a90 <_fflush_r+0xc>
 8003ad4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ad6:	f7ff fad0 	bl	800307a <__retarget_lock_release_recursive>
 8003ada:	e7d9      	b.n	8003a90 <_fflush_r+0xc>
 8003adc:	4b05      	ldr	r3, [pc, #20]	; (8003af4 <_fflush_r+0x70>)
 8003ade:	429c      	cmp	r4, r3
 8003ae0:	d101      	bne.n	8003ae6 <_fflush_r+0x62>
 8003ae2:	68ac      	ldr	r4, [r5, #8]
 8003ae4:	e7df      	b.n	8003aa6 <_fflush_r+0x22>
 8003ae6:	4b04      	ldr	r3, [pc, #16]	; (8003af8 <_fflush_r+0x74>)
 8003ae8:	429c      	cmp	r4, r3
 8003aea:	bf08      	it	eq
 8003aec:	68ec      	ldreq	r4, [r5, #12]
 8003aee:	e7da      	b.n	8003aa6 <_fflush_r+0x22>
 8003af0:	08003da4 	.word	0x08003da4
 8003af4:	08003dc4 	.word	0x08003dc4
 8003af8:	08003d84 	.word	0x08003d84

08003afc <_lseek_r>:
 8003afc:	b538      	push	{r3, r4, r5, lr}
 8003afe:	4d07      	ldr	r5, [pc, #28]	; (8003b1c <_lseek_r+0x20>)
 8003b00:	4604      	mov	r4, r0
 8003b02:	4608      	mov	r0, r1
 8003b04:	4611      	mov	r1, r2
 8003b06:	2200      	movs	r2, #0
 8003b08:	602a      	str	r2, [r5, #0]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	f7fc fecc 	bl	80008a8 <_lseek>
 8003b10:	1c43      	adds	r3, r0, #1
 8003b12:	d102      	bne.n	8003b1a <_lseek_r+0x1e>
 8003b14:	682b      	ldr	r3, [r5, #0]
 8003b16:	b103      	cbz	r3, 8003b1a <_lseek_r+0x1e>
 8003b18:	6023      	str	r3, [r4, #0]
 8003b1a:	bd38      	pop	{r3, r4, r5, pc}
 8003b1c:	200001d4 	.word	0x200001d4

08003b20 <__swhatbuf_r>:
 8003b20:	b570      	push	{r4, r5, r6, lr}
 8003b22:	460e      	mov	r6, r1
 8003b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b28:	2900      	cmp	r1, #0
 8003b2a:	b096      	sub	sp, #88	; 0x58
 8003b2c:	4614      	mov	r4, r2
 8003b2e:	461d      	mov	r5, r3
 8003b30:	da07      	bge.n	8003b42 <__swhatbuf_r+0x22>
 8003b32:	2300      	movs	r3, #0
 8003b34:	602b      	str	r3, [r5, #0]
 8003b36:	89b3      	ldrh	r3, [r6, #12]
 8003b38:	061a      	lsls	r2, r3, #24
 8003b3a:	d410      	bmi.n	8003b5e <__swhatbuf_r+0x3e>
 8003b3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b40:	e00e      	b.n	8003b60 <__swhatbuf_r+0x40>
 8003b42:	466a      	mov	r2, sp
 8003b44:	f000 f8be 	bl	8003cc4 <_fstat_r>
 8003b48:	2800      	cmp	r0, #0
 8003b4a:	dbf2      	blt.n	8003b32 <__swhatbuf_r+0x12>
 8003b4c:	9a01      	ldr	r2, [sp, #4]
 8003b4e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003b52:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003b56:	425a      	negs	r2, r3
 8003b58:	415a      	adcs	r2, r3
 8003b5a:	602a      	str	r2, [r5, #0]
 8003b5c:	e7ee      	b.n	8003b3c <__swhatbuf_r+0x1c>
 8003b5e:	2340      	movs	r3, #64	; 0x40
 8003b60:	2000      	movs	r0, #0
 8003b62:	6023      	str	r3, [r4, #0]
 8003b64:	b016      	add	sp, #88	; 0x58
 8003b66:	bd70      	pop	{r4, r5, r6, pc}

08003b68 <__smakebuf_r>:
 8003b68:	898b      	ldrh	r3, [r1, #12]
 8003b6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003b6c:	079d      	lsls	r5, r3, #30
 8003b6e:	4606      	mov	r6, r0
 8003b70:	460c      	mov	r4, r1
 8003b72:	d507      	bpl.n	8003b84 <__smakebuf_r+0x1c>
 8003b74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003b78:	6023      	str	r3, [r4, #0]
 8003b7a:	6123      	str	r3, [r4, #16]
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	6163      	str	r3, [r4, #20]
 8003b80:	b002      	add	sp, #8
 8003b82:	bd70      	pop	{r4, r5, r6, pc}
 8003b84:	ab01      	add	r3, sp, #4
 8003b86:	466a      	mov	r2, sp
 8003b88:	f7ff ffca 	bl	8003b20 <__swhatbuf_r>
 8003b8c:	9900      	ldr	r1, [sp, #0]
 8003b8e:	4605      	mov	r5, r0
 8003b90:	4630      	mov	r0, r6
 8003b92:	f7ff fa73 	bl	800307c <_malloc_r>
 8003b96:	b948      	cbnz	r0, 8003bac <__smakebuf_r+0x44>
 8003b98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b9c:	059a      	lsls	r2, r3, #22
 8003b9e:	d4ef      	bmi.n	8003b80 <__smakebuf_r+0x18>
 8003ba0:	f023 0303 	bic.w	r3, r3, #3
 8003ba4:	f043 0302 	orr.w	r3, r3, #2
 8003ba8:	81a3      	strh	r3, [r4, #12]
 8003baa:	e7e3      	b.n	8003b74 <__smakebuf_r+0xc>
 8003bac:	4b0d      	ldr	r3, [pc, #52]	; (8003be4 <__smakebuf_r+0x7c>)
 8003bae:	62b3      	str	r3, [r6, #40]	; 0x28
 8003bb0:	89a3      	ldrh	r3, [r4, #12]
 8003bb2:	6020      	str	r0, [r4, #0]
 8003bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bb8:	81a3      	strh	r3, [r4, #12]
 8003bba:	9b00      	ldr	r3, [sp, #0]
 8003bbc:	6163      	str	r3, [r4, #20]
 8003bbe:	9b01      	ldr	r3, [sp, #4]
 8003bc0:	6120      	str	r0, [r4, #16]
 8003bc2:	b15b      	cbz	r3, 8003bdc <__smakebuf_r+0x74>
 8003bc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003bc8:	4630      	mov	r0, r6
 8003bca:	f000 f88d 	bl	8003ce8 <_isatty_r>
 8003bce:	b128      	cbz	r0, 8003bdc <__smakebuf_r+0x74>
 8003bd0:	89a3      	ldrh	r3, [r4, #12]
 8003bd2:	f023 0303 	bic.w	r3, r3, #3
 8003bd6:	f043 0301 	orr.w	r3, r3, #1
 8003bda:	81a3      	strh	r3, [r4, #12]
 8003bdc:	89a0      	ldrh	r0, [r4, #12]
 8003bde:	4305      	orrs	r5, r0
 8003be0:	81a5      	strh	r5, [r4, #12]
 8003be2:	e7cd      	b.n	8003b80 <__smakebuf_r+0x18>
 8003be4:	08002ed5 	.word	0x08002ed5

08003be8 <__malloc_lock>:
 8003be8:	4801      	ldr	r0, [pc, #4]	; (8003bf0 <__malloc_lock+0x8>)
 8003bea:	f7ff ba45 	b.w	8003078 <__retarget_lock_acquire_recursive>
 8003bee:	bf00      	nop
 8003bf0:	200001cc 	.word	0x200001cc

08003bf4 <__malloc_unlock>:
 8003bf4:	4801      	ldr	r0, [pc, #4]	; (8003bfc <__malloc_unlock+0x8>)
 8003bf6:	f7ff ba40 	b.w	800307a <__retarget_lock_release_recursive>
 8003bfa:	bf00      	nop
 8003bfc:	200001cc 	.word	0x200001cc

08003c00 <_free_r>:
 8003c00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c02:	2900      	cmp	r1, #0
 8003c04:	d048      	beq.n	8003c98 <_free_r+0x98>
 8003c06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c0a:	9001      	str	r0, [sp, #4]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f1a1 0404 	sub.w	r4, r1, #4
 8003c12:	bfb8      	it	lt
 8003c14:	18e4      	addlt	r4, r4, r3
 8003c16:	f7ff ffe7 	bl	8003be8 <__malloc_lock>
 8003c1a:	4a20      	ldr	r2, [pc, #128]	; (8003c9c <_free_r+0x9c>)
 8003c1c:	9801      	ldr	r0, [sp, #4]
 8003c1e:	6813      	ldr	r3, [r2, #0]
 8003c20:	4615      	mov	r5, r2
 8003c22:	b933      	cbnz	r3, 8003c32 <_free_r+0x32>
 8003c24:	6063      	str	r3, [r4, #4]
 8003c26:	6014      	str	r4, [r2, #0]
 8003c28:	b003      	add	sp, #12
 8003c2a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c2e:	f7ff bfe1 	b.w	8003bf4 <__malloc_unlock>
 8003c32:	42a3      	cmp	r3, r4
 8003c34:	d90b      	bls.n	8003c4e <_free_r+0x4e>
 8003c36:	6821      	ldr	r1, [r4, #0]
 8003c38:	1862      	adds	r2, r4, r1
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	bf04      	itt	eq
 8003c3e:	681a      	ldreq	r2, [r3, #0]
 8003c40:	685b      	ldreq	r3, [r3, #4]
 8003c42:	6063      	str	r3, [r4, #4]
 8003c44:	bf04      	itt	eq
 8003c46:	1852      	addeq	r2, r2, r1
 8003c48:	6022      	streq	r2, [r4, #0]
 8003c4a:	602c      	str	r4, [r5, #0]
 8003c4c:	e7ec      	b.n	8003c28 <_free_r+0x28>
 8003c4e:	461a      	mov	r2, r3
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	b10b      	cbz	r3, 8003c58 <_free_r+0x58>
 8003c54:	42a3      	cmp	r3, r4
 8003c56:	d9fa      	bls.n	8003c4e <_free_r+0x4e>
 8003c58:	6811      	ldr	r1, [r2, #0]
 8003c5a:	1855      	adds	r5, r2, r1
 8003c5c:	42a5      	cmp	r5, r4
 8003c5e:	d10b      	bne.n	8003c78 <_free_r+0x78>
 8003c60:	6824      	ldr	r4, [r4, #0]
 8003c62:	4421      	add	r1, r4
 8003c64:	1854      	adds	r4, r2, r1
 8003c66:	42a3      	cmp	r3, r4
 8003c68:	6011      	str	r1, [r2, #0]
 8003c6a:	d1dd      	bne.n	8003c28 <_free_r+0x28>
 8003c6c:	681c      	ldr	r4, [r3, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	6053      	str	r3, [r2, #4]
 8003c72:	4421      	add	r1, r4
 8003c74:	6011      	str	r1, [r2, #0]
 8003c76:	e7d7      	b.n	8003c28 <_free_r+0x28>
 8003c78:	d902      	bls.n	8003c80 <_free_r+0x80>
 8003c7a:	230c      	movs	r3, #12
 8003c7c:	6003      	str	r3, [r0, #0]
 8003c7e:	e7d3      	b.n	8003c28 <_free_r+0x28>
 8003c80:	6825      	ldr	r5, [r4, #0]
 8003c82:	1961      	adds	r1, r4, r5
 8003c84:	428b      	cmp	r3, r1
 8003c86:	bf04      	itt	eq
 8003c88:	6819      	ldreq	r1, [r3, #0]
 8003c8a:	685b      	ldreq	r3, [r3, #4]
 8003c8c:	6063      	str	r3, [r4, #4]
 8003c8e:	bf04      	itt	eq
 8003c90:	1949      	addeq	r1, r1, r5
 8003c92:	6021      	streq	r1, [r4, #0]
 8003c94:	6054      	str	r4, [r2, #4]
 8003c96:	e7c7      	b.n	8003c28 <_free_r+0x28>
 8003c98:	b003      	add	sp, #12
 8003c9a:	bd30      	pop	{r4, r5, pc}
 8003c9c:	20000090 	.word	0x20000090

08003ca0 <_read_r>:
 8003ca0:	b538      	push	{r3, r4, r5, lr}
 8003ca2:	4d07      	ldr	r5, [pc, #28]	; (8003cc0 <_read_r+0x20>)
 8003ca4:	4604      	mov	r4, r0
 8003ca6:	4608      	mov	r0, r1
 8003ca8:	4611      	mov	r1, r2
 8003caa:	2200      	movs	r2, #0
 8003cac:	602a      	str	r2, [r5, #0]
 8003cae:	461a      	mov	r2, r3
 8003cb0:	f7fc fd9a 	bl	80007e8 <_read>
 8003cb4:	1c43      	adds	r3, r0, #1
 8003cb6:	d102      	bne.n	8003cbe <_read_r+0x1e>
 8003cb8:	682b      	ldr	r3, [r5, #0]
 8003cba:	b103      	cbz	r3, 8003cbe <_read_r+0x1e>
 8003cbc:	6023      	str	r3, [r4, #0]
 8003cbe:	bd38      	pop	{r3, r4, r5, pc}
 8003cc0:	200001d4 	.word	0x200001d4

08003cc4 <_fstat_r>:
 8003cc4:	b538      	push	{r3, r4, r5, lr}
 8003cc6:	4d07      	ldr	r5, [pc, #28]	; (8003ce4 <_fstat_r+0x20>)
 8003cc8:	2300      	movs	r3, #0
 8003cca:	4604      	mov	r4, r0
 8003ccc:	4608      	mov	r0, r1
 8003cce:	4611      	mov	r1, r2
 8003cd0:	602b      	str	r3, [r5, #0]
 8003cd2:	f7fc fdce 	bl	8000872 <_fstat>
 8003cd6:	1c43      	adds	r3, r0, #1
 8003cd8:	d102      	bne.n	8003ce0 <_fstat_r+0x1c>
 8003cda:	682b      	ldr	r3, [r5, #0]
 8003cdc:	b103      	cbz	r3, 8003ce0 <_fstat_r+0x1c>
 8003cde:	6023      	str	r3, [r4, #0]
 8003ce0:	bd38      	pop	{r3, r4, r5, pc}
 8003ce2:	bf00      	nop
 8003ce4:	200001d4 	.word	0x200001d4

08003ce8 <_isatty_r>:
 8003ce8:	b538      	push	{r3, r4, r5, lr}
 8003cea:	4d06      	ldr	r5, [pc, #24]	; (8003d04 <_isatty_r+0x1c>)
 8003cec:	2300      	movs	r3, #0
 8003cee:	4604      	mov	r4, r0
 8003cf0:	4608      	mov	r0, r1
 8003cf2:	602b      	str	r3, [r5, #0]
 8003cf4:	f7fc fdcd 	bl	8000892 <_isatty>
 8003cf8:	1c43      	adds	r3, r0, #1
 8003cfa:	d102      	bne.n	8003d02 <_isatty_r+0x1a>
 8003cfc:	682b      	ldr	r3, [r5, #0]
 8003cfe:	b103      	cbz	r3, 8003d02 <_isatty_r+0x1a>
 8003d00:	6023      	str	r3, [r4, #0]
 8003d02:	bd38      	pop	{r3, r4, r5, pc}
 8003d04:	200001d4 	.word	0x200001d4

08003d08 <_init>:
 8003d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d0a:	bf00      	nop
 8003d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d0e:	bc08      	pop	{r3}
 8003d10:	469e      	mov	lr, r3
 8003d12:	4770      	bx	lr

08003d14 <_fini>:
 8003d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d16:	bf00      	nop
 8003d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d1a:	bc08      	pop	{r3}
 8003d1c:	469e      	mov	lr, r3
 8003d1e:	4770      	bx	lr
